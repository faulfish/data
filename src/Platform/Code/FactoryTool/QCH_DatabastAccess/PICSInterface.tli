// Created by Microsoft (R) C/C++ Compiler Version 12.00.9782.0 (70b4784c).
//
// c:\documents and settings\alan.tu\орн▒\glavs1a_imei_coding_v0.20\debug\PICSInterface.tli
//
// Wrapper implementations for Win32 type library .\WORK\PICSInterface.dll
// compiler-generated file created 12/11/08 at 16:01:33 - DO NOT EDIT!

#pragma once

//
// interface _clsPICSInterface wrapper method implementations
//

inline _bstr_t _clsPICSInterface::GetErrorMessage ( short errorCode ) {
    BSTR _result;
    HRESULT _hr = raw_GetErrorMessage(errorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short _clsPICSInterface::CheckImei ( _bstr_t strImeiCode, _bstr_t strPartNumber ) {
    short _result;
    HRESULT _hr = raw_CheckImei(strImeiCode, strPartNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _clsPICSInterface::WriteImei ( _bstr_t strImeiCode ) {
    short _result;
    HRESULT _hr = raw_WriteImei(strImeiCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _clsPICSInterface::QuerySpcCode ( _bstr_t strImeiCode, BSTR * strSpcCode ) {
    short _result;
    HRESULT _hr = raw_QuerySpcCode(strImeiCode, strSpcCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _clsPICSInterface::GetSpcCode ( _bstr_t strImeiCode, BSTR * strSpcCode ) {
    short _result;
    HRESULT _hr = raw_GetSpcCode(strImeiCode, strSpcCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _clsPICSInterface::QueryFSNCode ( _bstr_t strImeiCode, BSTR * strFsnCode ) {
    short _result;
    HRESULT _hr = raw_QueryFSNCode(strImeiCode, strFsnCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _clsPICSInterface::GetFSNCode ( _bstr_t strImeiCode, BSTR * strFsnCode ) {
    short _result;
    HRESULT _hr = raw_GetFSNCode(strImeiCode, strFsnCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _clsPICSInterface::QuerySimFile ( _bstr_t strSimFileName, BSTR * strSimFilePath ) {
    short _result;
    HRESULT _hr = raw_QuerySimFile(strSimFileName, strSimFilePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _clsPICSInterface::GetSimData ( short intSimType, _bstr_t strImeiCode, _bstr_t strFsnCode, _bstr_t strSimFileName, BSTR * strSimData, short * intSimDataSize ) {
    short _result;
    HRESULT _hr = raw_GetSimData(intSimType, strImeiCode, strFsnCode, strSimFileName, strSimData, intSimDataSize, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _clsPICSInterface::QueryUnlockCode ( _bstr_t strImeiCode, BSTR * strUnlockN, BSTR * strUnlockS, BSTR * strUnlockC, BSTR * strUnlockNS, BSTR * strUnlockUS, BSTR * strUnlockSIM, BSTR * strUnlockRES, BSTR * strSpc, BSTR * strPhoneLock ) {
    short _result;
    HRESULT _hr = raw_QueryUnlockCode(strImeiCode, strUnlockN, strUnlockS, strUnlockC, strUnlockNS, strUnlockUS, strUnlockSIM, strUnlockRES, strSpc, strPhoneLock, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _clsPICSInterface::QueryBtAddrCode ( _bstr_t strImeiCode, _bstr_t strPartNumber, BSTR * strBtAddrCode ) {
    short _result;
    HRESULT _hr = raw_QueryBtAddrCode(strImeiCode, strPartNumber, strBtAddrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short _clsPICSInterface::Connection ( _bstr_t strLoginUser, _bstr_t strPassword ) {
    short _result;
    HRESULT _hr = raw_Connection(strLoginUser, strPassword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum T_MID_RET_VALUE _clsPICSInterface::EnableTextLog ( VARIANT_BOOL blnEnableTextLog, _bstr_t pstrFilePath ) {
    enum T_MID_RET_VALUE _result;
    HRESULT _hr = raw_EnableTextLog(blnEnableTextLog, pstrFilePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t _clsPICSInterface::GetCheckPlatform ( ) {
    BSTR _result;
    HRESULT _hr = get_CheckPlatform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _clsPICSInterface::PutCheckPlatform ( _bstr_t _arg1 ) {
    HRESULT _hr = put_CheckPlatform(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
