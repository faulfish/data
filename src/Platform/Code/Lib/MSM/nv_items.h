#ifndef NV_ITEMS_H
#define NV_ITEMS_H

/*===========================================================================

                               NV_ITEMS.H 

DESCRIPTION
  This file is generated by NVC and contains constants, types, and definitions
  of all items in NV. 

  $Header:   //BQT/VM67/Prjbase3/QSyncher_V2/PlatformTool/Code/Lib/MSM/nv_items.h.-arc   1.9   Apr 01 2009 14:19:26   Kevin Tai  $
   Copyright (c) 1999-2000 by QUALCOMM Incorporated.  All Rights Reserved.

 //Bonnie update 2005/07/19
===========================================================================*/

/* NVC Version: 4.0.0 */

/*-- Include Files --*/
#include "comdef.h"
#include "qw.h"
#include "nv_verno.h"


/*=========================================================================*/
/* NVM Items Constant Definitions.                                         */
/*=========================================================================*/

/* Maximum of 109 speed dials */
#define  NV_MAX_SPEED_DIALS                                    109

/* With up to 12-letter names */
#define  NV_MAX_LTRS                                            12

/* Maximum 20 call stack numbers */
#define  NV_MAX_STACK_DIALS                                     20

/* Up to 2 NAMs allowed */
#define  NV_MAX_NAMS                                             2

/* PRL size is 4096 */
#define  NV_ROAMING_LIST_MAX_SIZE                             4096

/* Max SID+NID */
#define  NV_MAX_SID_NID                                          1

/* size of all tables based on temperature */
#define  NV_TEMP_TABLE_SIZ                                       8

/* Size of all tables based on Frequency */
#define  NV_FREQ_TABLE_SIZ                                      16

/* size of all tables based on power level */
#define  NV_PWR_TABLE_SIZ                                       16

/* Size of all tables based on battery voltage */
#define  NV_VOLT_TABLE_SIZ                                       8

/* For 2 IP address records */
#define  NV_IP_ADDRESS_TABLE_SIZE                                2

/* For 4 IP addresses per record */
#define  NV_IP_ADDRESSES_PER_ENTRY                               4

/* Max size of the UP cache */
#define  NV_UP_MAX_CACHE_SIZE                                    1

/* PN ID table size */
#define  NV_PN_ID_TABLE_SIZE                                  2048

/* 100 bytes for each of two items */
#define  NV_SI_TEST_DATA_SIZE                                  100

/* Max size of key field */
#define  NV_UP_MAX_KEY_SIZE                                     16

/* CDMA Tx linearizer master offset size */
#define  NV_CDMA_TX_LIN_MASTER_SIZ                              37

/* 6 digit security code */
#define  NV_SEC_CODE_SIZE                                        6

/* size of tables based on temperature in MSM6xxx */
#define  NV_TEMP_TABLE2_SIZ                                     16

/* Maximum 32 digit number */
#define  NV_MAX_DIAL_DIGITS                                     32
 
/* Max of 64 chars in User ID */
#define  NV_MAX_PAP_USER_ID_LENGTH                              64

/* Max of 14 chars in Password */
#define  NV_MAX_PAP_PASSWORD_LENGTH                             14

/* Max length of the PPP password */
#define  NV_MAX_PPP_PASSWORD_LENGTH                            127

/* Max length of the PPP user id */
#define  NV_MAX_PPP_USER_ID_LENGTH                             127

/* Maximum length of Security Services Device Key */
#define  NV_SEC_DEVICE_KEY_MAX_LEN                              32

/* Maximum 20 logs in error log */
#define  NV_MAX_ERR_LOG                                         20

/* 8 characters file name length */
#define  NV_ERR_FILE_NAME_LEN                                    8

/* number digits in FSC */
#define  NV_FSC_SIZ                                              6

/* With up to 5 letters wdc */
#define  NV_WDC_LTRS                                             5

/* Array size for factory info */
#define  NV_FACTORY_INFO_SIZ                                   100

/* Can peek at up to 32 bytes in one request */
#define  NV_MAX_PEEK_SIZE                                       32

/* Can poke at up to 32 bytes in one request */
#define  NV_MAX_POKE_SIZE                                       32

/* CDMA MIN index */
#define  NV_CDMA_MIN_INDEX                                       1

/* Analog MIN index */
#define  NV_ANALOG_MIN_INDEX                                     0

/* One time alarms for DOT */
#define  NV_MAX_ALARMS                                           6

/* Number entries in table */
#define  NV_DIAL_STATE_TABLE_MAX_SIZE                          125

/* Mode is inactive (neither analog nor CDMA) */
#define  NV_MODE_INACTIVE                                        0

/* Mode is analog */
#define  NV_MODE_ANALOG                                          1

/* Mode is CDMA */
#define  NV_MODE_CDMA                                            2

/* Normal Mute */
#define  NV_MUTE_NORM                                            0

/* Mute */
#define  NV_MUTE_MUTE                                            1

/* Mute Speaker */
#define  NV_MUTE_SPKR                                            2

/* For 2 link info table records */
#define  NV_UP_LINK_INFO_TABLE_SIZE                              2

/* Up to 6 SIDs to lock out */
#define  NV_MAX_SID_LOCK                                         6

/* Up to 6 SIDs to acquire */
#define  NV_MAX_SID_ACQ                                          6

/* Up to 2 MINs per NAM allowed */
#define  NV_MAX_MINS                                             2

/* Table consists of 12 words */
#define  NV_MRU_TABLE_SIZE                                      12

/* Up to 10 SID/NIDs to lock out */
#define  NV_MAX_SID_NID_LOCK                                    10

/* Up to 20 home SID/NID pairs */
#define  NV_MAX_HOME_SID_NID                                    20

/* num digits in dir_number */
#define  NV_DIR_NUMB_SIZ                                        10

/* num digits in dir_number_pcs */
#define  NV_DIR_NUMB_PCS_SIZ                                    15

/* Max of 35 table entries */
#define  NV_USER_ZONE_MAX_ENTRIES                               35

/* Max of 15 characters per entry */
#define  NV_USER_ZONE_ENTRY_LENGTH                              15

/* Table consists of 12 words */
#define  NV_MRU2_TABLE_SIZE                                     12

/* Buffer bytes to account for uneven bit in PRL system table */
#define  NV_RAM_PRL_BUF_BYTES                                    6

/* An always-invalid prl version number */
#define  NV_PRL_VERSION_INVALID                        0xFFFF


#define  NV_SIZE_OF_ROAMING_LIST_IN_UNION_TYPE                   1


#define  NV_SIZE_OF_RAM_ROAMING_LIST                   ( NV_ROAMING_LIST_MAX_SIZE + NV_RAM_PRL_BUF_BYTES )

/* Maximum Micro Broswer data size */
#define  NV_UBROWSER_ELEMENT_SIZE                               64

/* Micro Browser table size */
#define  NV_UBROWSER_TABLE_SIZE                                 32


#define  NV_DIAG_RESTART_CONFIG_LOGMASK_SIZE                    16

/* Max size of perm_store field */
#define  NV_UP_MAX_PERM_STORE_SIZE                              10

/* Max size of alert_name field */
#define  NV_UP_ALERT_NAME_SIZE                                  11

/* Number of alert records */
#define  NV_UP_MAX_ALERT_RECORDS                                 9

/* Maximum 16 digit number */
#define  NV_MAX_PKT_ORIG_DIGITS                                 16

/* Maximum of 6 Mobile IP user profiles are supported */
#define  NV_DS_MIP_MAX_NUM_PROF                                  6

/* Maximum length of User NAI field */
#define  NV_MAX_NAI_LENGTH                                      72

/* Maximum length of MN-HA shared secret */
#define  NV_MAX_MN_HA_SHARED_SECRET_LEN                         16

/* Maximum length of MN-AAA shared secret */
#define  NV_MAX_MN_AAA_SHARED_SECRET_LEN                        16

/* Maximum number of Mobile/Home Agent timebase offset */
#define  NV_NUM_DS_MIP_MN_HA_TIME_DELTA                          6

/* Maximum Length of a domain name */
#define  NV_DOMAIN_NAME_SIZE                                   100

/* Maximum length of APN name */
#define  NV_MAX_APN_STRING_LEN                                 128

/* Maximum length of a DS Packet Dial string */
#define  NV_PKT_DIAL_STRING_SIZE                                 5

/* Number of entries in the packet dial string lookup table */
#define  NV_PKT_DIAL_STRING_LIST_SIZE                            4

/* Maximum number of PPP devices */
#define  NV_PPP_MAX_DEV                                          3


#define  NV_HDRSCP_PRTL_SUBTYPE_SIZ                    0x1A


#define  NV_HDR_CURR_STREAM_CFG_SIZ                              4


#define  NV_UATI_LENGTH                                         16


#define  NV_RPC_AUTH_KEY_MAX_LEN                                20


#define  NV_MAX_AN_AUTH_NAI_LENGTH                              64


#define  NV_MAX_AN_AUTH_PASSWORD_LENGTH                         14


#define  NV_MAX_AN_PPP_PASSWORD_LENGTH                         127


#define  NV_MAX_AN_PPP_USER_ID_LENGTH                          127


#define  NV_MAX_AN_AUTH_PASSWD_LONG_LENGTH                     127


#define  NV_MAX_AN_AUTH_USER_ID_LONG_LENGTH                    127

/* Up to 64 */
#define  NV_FR_TEMP_OFFSET_TABLE_SIZ                            64

/* CDMA Rx linearizer offset size */
#define  NV_CDMA_RX_LIN_SIZ                                     16

/* CDMA expected HDET reading vs AGC PDM size */
#define  NV_CDMA_EXP_HDET_VS_AGC_SIZ                            16

/* CDMA HDET error slope vs HDET reading size */
#define  NV_CDMA_ERR_SLP_VS_HDET_SIZ                             8

/* Adj vs. Frequency size */
#define  NV_ADJ_VS_FREQ_SIZ                                     16

/* Adj vs. Temp size */
#define  NV_ADJ_VS_TEMP_SIZ                                      8

/* HDET ADC table size */
#define  NV_HDET_ADC_TABLE_SIZ                                   6

/* Up to 32 items */
#define  NV_FREQ_ADJ_TABLE_SIZ                                  32

/* Portables RF CDMA Compensation Table Size */
#define  NV_RIPPLE_COMP_TABLE_SIZ                               32

/* Portable RX offset Compensation Table Size */
#define  NV_RX_OFFSET_TABLE_SIZ                                 32

/* Portable RX Power Compensation Table Size */
#define  NV_RX_POWER_TABLE_SIZ                                 128

/* Portable RX Error Compensation Table Size */
#define  NV_RX_ERROR_TABLE_SIZ                                 128

/* Portable TX Slope 1 Compensation Table Size */
#define  NV_TX_SLOPE_1_TABLE_SIZ                               128

/* Portable TX Slope 2 Compensation Table Size */
#define  NV_TX_SLOPE_2_TABLE_SIZ                               128

/* Portable Tx Nonlinear Error Compensation Table Size */
#define  NV_TX_NON_LIN_ERR_TABLE_SIZ                           128

/* HDET table size */
#define  NV_HDET_TABLE_SIZ                                     128

/* PCS Rx linearizer offset size */
#define  NV_PCS_RX_LIN_SIZ                                      16

/* PCS Tx linearizer master offset size */
#define  NV_PCS_TX_LIN_MASTER_SIZ                               37

/* PCS expected HDET reading vs AGC PDM size */
#define  NV_PCS_EXP_HDET_VS_AGC_SIZ                             16

/* Number of PA ranges */
#define  NV_NUM_PA_RANGES                                        4

/* Number of Tx linearizers */
#define  NV_NUM_TX_LINEARIZERS                                   4

/* Maximum Switch to Analog values */
#define  NV_MAX_STA_VALUES                                       2

/* Table size of TX AGC backoff values */
#define  NV_TX_BACKOFF_TABLE_SIZE                               20

/* Three values, min, med, and max, of the PA backoff values */
#define  NV_NUM_PA_BCKOFF_CAL_VOLT                               3

/* WCDMA Rx linearizer offset table size */
#define  NV_WCDMA_RX_LIN_SIZ                                    17

/* WCDMA Tx linearizer master offset table size */
#define  NV_WCDMA_TX_LIN_MASTER_SIZ                             37

/* WCDMA expected HDET reading vs TX AGC table size */
#define  NV_WCDMA_EXP_HDET_VS_AGC_SIZ                           16

/* Number of WCDMA Tx linearizers */
#define  NV_WCDMA_NUM_TX_LINEARIZERS                             2 //2: Two-page linearizer table 
                                                                   //4: Four-page linearizer table

#define RFLIN_NUM_TX_LINEARIZERS       NV_WCDMA_NUM_TX_LINEARIZERS

/* Length of a version number in bytes */
#define  NV_SIZE_OF_VERSION                                      8

/* 9 character QCOM serial number */
#define  NV_QC_SERIAL_NUM_LEN                                    9

/* Table size of VCO_COARSE_TUNE table */
#define  NV_VCO_COARSE_TUNE_TABLE_SIZ                           16

/* Max bytes in SMS data buffer */
#define  NV_SMS_DATA_SIZ                                       388

/* Max bytes in SMS DM data buffer */
#define  NV_SMS_DM_DATA_SIZ                                    100

/* Total size of header fields within nvi_sms_type (i.e. excluding data) */
#define  NV_SMS_HEADER_SIZE                                     14

/* Max services */
#define  NV_SMS_MAX_SERVICES                                    32

/* Max number of languages for SMS displayed */
#define  NV_SMS_MAX_LANGUAGES                                    4


#define  NV_SMS_BC_TABLE_SIZE                          ( NV_SMS_MAX_SERVICES * NV_SMS_MAX_LANGUAGES )

/* Total size of label fields within nv_sms_bc_service_table_type */
#define  NV_SMS_BC_SRV_LABEL_SIZE                               30

/* Max size of GSM/WCDMA SMS template */
#define  NV_SMS_GW_PARAMS_SIZE                                 127

/* Max number of GWM/WCDMA SMS routes */
#define  NV_SMS_MAX_ROUTES                                       6

/* Max bytes in SMS GW data buffer */
#define  NV_SMS_GW_DATA_SIZ                                    176

/* Maximum 32 digit number */
#define  NV_MAX_DIAL_DIGITS                                     32

/* Max number of CDMA SMS template */
#define  NV_SMS_CD_PARMS_MAX_ENTRIES                            20

/* Max size of CDMA SMS template */
#define  NV_SMS_CD_PARMS_SIZE                                  126

/* Max table size for GSM/UMTS Cell Broadcast SMS Service table */
#define  NV_SMS_GW_CB_TABLE_SIZE                               200

/* Max storage address for dial type */
#define  MAX_STORAGE_ADDRESS                                    99

/* Up to 20 characters in a pager */
#define  NV_MAX_PAGE_CHARS                                      20

/* 4 digit lock code */
#define  NV_LOCK_CODE_SIZE                                       4

/* Bytes in passwd */
#define  NV_ISD_STD_PASSWD_SIZ                                   4

/* Ten entries in the table */
#define  NV_DIAL_RESTRICT_LVLS_SIZE                             10

/* Up to 12 characters of text allowed */
#define  NV_ROAM_MSG_MAX_SIZE                                   12

/* 12 bytes per table entry */
#define  NV_DIAL_STATE_TABLE_NEXT_STATES                        12

/* 100 bytes per entry */
#define  NV_CARRIER_INFO_ELEMENT_SIZE                          100

/* Max of 3 entries allowed */
#define  NV_CARRIER_INFO_MAX_ELEMENTS                            3

/* Maximum 20 page messages */
#define  NV_MAX_PAGE_MSGS                                       20

/* Up to 6 entries in the table */
#define  NV_ROAM_MSG_MAX_ENTRIES                                 6

/* Max length of multimedia ringer filename */
#define  NV_FS_FILENAME_MAX_LENGTH                              40

/* Number of bytes in an R-UIM CHV */
#define  NV_RUIM_CHV_SIZE                                        8

/* 6 bytes per addr */
#define  NV_BD_ADDR_SIZE                                         6

/* Number of ECC phone numbers can be used */
#define  NV_MAX_NUM_OF_ECC_NUMBER                               10

/* Number of digits in an ECC phone number */
#define  NV_ECC_NUMBER_SIZE                                      3

/* Size of a Public Land Mobile Network ID */
#define  NV_PLMN_ID_SIZE                                         3

/* Maximum length of the equivalent PLMN list */
#define  NV_EQUIVALENT_PLMN_LIST_MAX_SIZE                        5

/* This defines the NAM for the RUIM card */
#define  NV_RUIM_NAM                                             0

/* Size of RPLMN */
#define  NV_RPLMNACA_SIZE                                        2

/* Size of UE IMEI */
#define  NV_UE_IMEI_SIZE                                         9

/* Max acquisition database entries */
#define  MAX_ACQ_DB_ENTRIES                                     10

/* Max acquisition database entries */
#define  MAX_MCC_DIGITS                                          3

/* Max acquisition database entries */
#define  MAX_MNC_DIGITS                                          3


#define  NV_TX_BURST_RAMP_SIZ                                   30


#define  NV_NUM_GSM_PA_PROFILES                                 15


#define  NV_NUM_DCS_PA_PROFILES                                 16


#define  NV_GSM_CAL_ARFCN_SIZ                                    8


#define  NV_DCS_CAL_ARFCN_SIZ                                   16


#define  NV_MAX_NUMBER_OF_BEST_CELLS                             7
 
 
#define  NV_EXP_HDET_VS_AGC_SIZ                                 16


#define  NV_GSM_1900_CAL_ARFCN_SIZ                              16


#define  NV_GSM_850_CAL_ARFCN_SIZ                                8


#define  NV_BREW_BKEY_SIZ                                       16
 
 
#define  NV_BREW_SERVER_SIZ                                     64
 
 
#define  NV_BREW_SID_SIZ                                        32
 
 
#define  NV_UPLOADMEDIA_ALBUM_ADDR_SIZ                          64
 
 
#define  NV_UPLOADMEDIA_POSTCARD_ADDR_SIZ                       64
 
 
#define  NV_MAX_SW_VERSION_INFO_SIZ                             30
 
 
#define  NV_USER_GREETING_SIZ                                   64


#define  NV_SMS_SMSC_ADDRESS_SIZ                                31


#define  NV_POC_SERVER_IP_SIZ                                   16


#define  NV_POC_NAI_SIZ                                         33


#define  NV_POC_BILLING_SERVICE_SIZ                             33


#define  NV_POC_GLM_PASSWORD_SIZ                                32


#define  NV_IM_IP_ADDR_SIZ                                      16


#define  MV_IM_SERVER_NAME_SIZ                                  64


#define  NV_EXT_OP_NAME_SIZ                                     64


#define  NV_LANGUAGE_COUNT                                      20


#define  NV_IRDA_DEVICE_NAME_SIZ                                20


#define  NV_IRDA_PNP_DEVICE_ID_SIZ                              15


#define  NV_IRDA_PNP_MANUFACTURER_SIZ                           31


#define  NV_IRDA_PNP_NAME_SIZ                                   91


#define  NV_IRDA_PNP_DEVICE_CATEGORY_SIZ                         4


#define  NV_MAX_SUPPORTED_BEARERS                                3


#define  NV_MAX_CIR_METHODS                                      6


#define  NV_IM_MAX_USERID_SIZE                                  50


#define  NV_IM_MAX_PASSWORD_SIZ                                 50


#define  NV_MAX_CIR_PORT_SIZ                                     6


#define  IM_MAX_SMSC_ADDR_SIZ                                   21


#define  NV_IM_OPTIONAL_HEADER_SIZ                              33


#define  NV_IM_MAX_SCHEMA_COUNT                                  8


#define  NV_IM_MAX_SCHEMA_NAME_LEN                               4


#define  NV_IM_MAX_START_STR_SIZ                                21


#define  NV_INTELLICEIVER_CAL_LENGTH                            14


#define  NV_RF_SWITCHPOINT_COUNT                                 4


#define  NV_PRESUPL_WAP_GW_ADDR_SIZE                            16


#define  NV_RF_POWER_MODE_SIZ                                    3


#define  NV_OFFSET_CALIBRATION_LENGTH                  ( NV_RF_POWER_MODE_SIZ*NV_FREQ_TABLE_SIZ )


#define  NV_VCO_CAL_LENGTH                             ( NV_RF_POWER_MODE_SIZ*NV_VCO_COARSE_TUNE_TABLE_SIZ)


#define  NV_POC_PASSWORD_SIZ                                    32


#define  NV_BROWSER_JUMP_PORTAL_NAME_SIZ                        32


#define  NV_BROWSER_JUMP_EMBDLNK_SIZ                            32


#define  NV_VOICE_MAIL_LINE_SIZ                                 48


#define  SOS_NUMBER_SIZ                                         32


#define  WAP_MAX_URL_SIZ                                        64


#define  WAP_PUSH_AUTOLOAD_SIZ                                  13


#define  NV_MAX_URL_SIZ                                        128



/*=========================================================================*/
/* Enumerators of items to access.                                         */
/*=========================================================================*/
//++Bonnie 0719
//Use define instead of enum to avoid compiler limit error
#ifdef FEATURE_NV_ENUMS_ARE_WORDS
#error code not present
#else
  #define  NV_ESN_I                                       0
  #define NV_ESN_CHKSUM_I                                 1
  #define NV_VERNO_MAJ_I                                  2
  #define NV_VERNO_MIN_I                                  3
  #define NV_SCM_I                                        4
  #define NV_SLOT_CYCLE_INDEX_I                           5
  #define  NV_MOB_CAI_REV_I                               6
  #define NV_MOB_FIRM_REV_I                               7
  #define NV_MOB_MODEL_I                                  8
  #define NV_CONFIG_CHKSUM_I                              9
  #define NV_PREF_MODE_I                                  10
  #define NV_CDMA_PREF_SERV_I                             11
  #define NV_ANALOG_PREF_SERV_I                           12
  #define NV_CDMA_SID_LOCK_I                              13
  #define NV_CDMA_SID_ACQ_I                               14
  #define NV_ANALOG_SID_LOCK_I                            15
  #define NV_ANALOG_SID_ACQ_I                             16
  #define NV_ANALOG_FIRSTCHP_I                            17
  #define NV_ANALOG_HOME_SID_I                            18
  #define NV_ANALOG_REG_I                                 19
  #define NV_PCDMACH_I                                    20
  #define NV_SCDMACH_I                                    21
  #define NV_PPCNCH_I                                     22
  #define NV_SPCNCH_I                                     23
  #define NV_NAM_CHKSUM_I                                 24
  #define NV_A_KEY_I                                      25
  #define NV_A_KEY_CHKSUM_I                               26
  #define NV_SSD_A_I                                      27
  #define NV_SSD_A_CHKSUM_I                               28
  #define NV_SSD_B_I                                      29
  #define NV_SSD_B_CHKSUM_I                               30
  #define NV_COUNT_I                                      31
  #define NV_MIN1_I                                       32
  #define NV_MIN2_I                                       33
  #define NV_MOB_TERM_HOME_I                              34
  #define NV_MOB_TERM_FOR_SID_I                           35
  #define NV_MOB_TERM_FOR_NID_I                           36
  #define NV_ACCOLC_I                                     37
  #define NV_SID_NID_I                                    38
  #define NV_MIN_CHKSUM_I                                 39
  #define NV_CURR_NAM_I                                   40
  #define NV_ORIG_MIN_I                                   41
  #define NV_AUTO_NAM_I                                   42
  #define NV_NAME_NAM_I                                   43
  #define NV_NXTREG_I                                     44
  #define NV_LSTSID_I                                     45
  #define NV_LOCAID_I                                     46
  #define NV_PUREG_I                                      47
  #define NV_ZONE_LIST_I                                  48
  #define NV_SID_NID_LIST_I                               49
  #define NV_DIST_REG_I                                   50
  #define NV_LAST_CDMACH_I                                51
  #define NV_CALL_TIMER_I                                 52
  #define NV_AIR_TIMER_I                                  53
  #define NV_ROAM_TIMER_I                                 54
  #define NV_LIFE_TIMER_I                                 55
  #define NV_RUN_TIMER_I                                  56
  #define NV_DIAL_I                                       57
  #define NV_STACK_I                                      58
  #define NV_STACK_IDX_I                                  59
  #define NV_PAGE_SET_I                                   60
  #define NV_PAGE_MSG_I                                   61
  #define NV_EAR_LVL_I                                    62
  #define NV_SPEAKER_LVL_I                                63
  #define NV_RINGER_LVL_I                                 64
  #define NV_BEEP_LVL_I                                   65
  #define NV_CALL_BEEP_I                                  66
  #define NV_CONT_KEY_DTMF_I                              67
  #define NV_CONT_STR_DTMF_I                              68
  #define NV_SVC_AREA_ALERT_I                             69
  #define NV_CALL_FADE_ALERT_I                            70
  #define NV_BANNER_I                                     71
  #define NV_LCD_I                                        72
  #define NV_AUTO_POWER_I                                 73
  #define NV_AUTO_ANSWER_I                                74
  #define NV_AUTO_REDIAL_I                                75
  #define NV_AUTO_HYPHEN_I                                76
  #define NV_BACK_LIGHT_I                                 77
  #define NV_AUTO_MUTE_I                                  78
  #define NV_MAINTRSN_I                                   79
  #define NV_LCKRSN_P_I                                   80
  #define NV_LOCK_I                                       81
  #define NV_LOCK_CODE_I                                  82
  #define NV_AUTO_LOCK_I                                  83
  #define NV_CALL_RSTRC_I                                 84
  #define NV_SEC_CODE_I                                   85
  #define NV_HORN_ALERT_I                                 86
  #define NV_ERR_LOG_I                                    87
  #define NV_UNIT_ID_I                                    88
  #define NV_FREQ_ADJ_I                                   89
  #define NV_VBATT_I                                      90
  #define NV_FM_TX_PWR_I                                  91
  #define NV_FR_TEMP_OFFSET_I                             92
  #define NV_DM_IO_MODE_I                                 93
  #define NV_CDMA_TX_LIMIT_I                              94
  #define NV_FM_RSSI_I                                    95
  #define NV_CDMA_RIPPLE_I                                96
  #define NV_CDMA_RX_OFFSET_I                             97
  #define NV_CDMA_RX_POWER_I                              98
  #define NV_CDMA_RX_ERROR_I                              99
  #define NV_CDMA_TX_SLOPE_1_I                            100
  #define NV_CDMA_TX_SLOPE_2_I                            101
  #define NV_CDMA_TX_ERROR_I                              102
  #define NV_PA_CURRENT_CTL_I                             103
  #define NV_SONY_ATTEN_1_I                               104
  #define NV_SONY_ATTEN_2_I                               105
  #define NV_VOC_GAIN_I                                   106
  #define NV_SPARE_1_I                                    107
  #define NV_SPARE_2_I                                    108
  #define NV_DATA_SRVC_STATE_I                            109
  #define NV_DATA_IO_MODE_I                               110
  #define NV_IDLE_DATA_TIMEOUT_I                          111
  #define NV_MAX_TX_ADJ_I                                 112
  #define NV_INI_MUTE_I                                   113
  #define NV_FACTORY_INFO_I                               114
  #define NV_SONY_ATTEN_3_I                               115
  #define NV_SONY_ATTEN_4_I                               116
  #define NV_SONY_ATTEN_5_I                               117
  #define NV_DM_ADDR_I                                    118
  #define NV_CDMA_PN_MASK_I                               119
  #define NV_SEND_TIMEOUT_I                               120
  #define NV_FM_AGC_SET_VS_PWR_I                          121
  #define NV_FM_AGC_SET_VS_FREQ_I                         122
  #define NV_FM_AGC_SET_VS_TEMP_I                         123
  #define NV_FM_EXP_HDET_VS_PWR_I                         124
  #define NV_FM_ERR_SLP_VS_PWR_I                          125
  #define NV_FM_FREQ_SENSE_GAIN_I                         126
  #define NV_CDMA_RX_LIN_OFF_0_I                          127
  #define NV_CDMA_RX_LIN_SLP_I                            128
  #define NV_CDMA_RX_COMP_VS_FREQ_I                       129
  #define NV_CDMA_TX_COMP_VS_FREQ_I                       130
  #define NV_CDMA_TX_COMP_VS_VOLT_I                       131
  #define NV_CDMA_TX_LIN_MASTER_OFF_0_I                   132
  #define NV_CDMA_TX_LIN_MASTER_SLP_I                     133
  #define NV_CDMA_TX_LIN_VS_TEMP_I                        134
  #define NV_CDMA_TX_LIN_VS_VOLT_I                        135
  #define NV_CDMA_TX_LIM_VS_TEMP_I                        136
  #define NV_CDMA_TX_LIM_VS_VOLT_I                        137
  #define NV_CDMA_TX_LIM_VS_FREQ_I                        138
  #define NV_CDMA_EXP_HDET_VS_AGC_I                       139
  #define NV_CDMA_ERR_SLP_VS_HDET_I                       140
  #define NV_THERM_I                                      141
  #define NV_VBATT_PA_I                                   142
  #define NV_HDET_OFF_I                                   143
  #define NV_HDET_SPN_I                                   144
  #define NV_ONETOUCH_DIAL_I                              145
  #define NV_FM_AGC_ADJ_VS_FREQ_I                         146
  #define NV_FM_AGC_ADJ_VS_TEMP_I                         147
  #define NV_RF_CONFIG_I                                  148
  #define NV_R1_RISE_I                                    149
  #define NV_R1_FALL_I                                    150
  #define NV_R2_RISE_I                                    151
  #define NV_R2_FALL_I                                    152
  #define NV_R3_RISE_I                                    153
  #define NV_R3_FALL_I                                    154
  #define NV_PA_RANGE_STEP_CAL_I                          155
  #define NV_LNA_RANGE_POL_I                              156
  #define NV_LNA_RANGE_RISE_I                             157
  #define NV_LNA_RANGE_FALL_I                             158
  #define NV_LNA_RANGE_OFFSET_I                           159
  #define NV_POWER_CYCLES_I                               160
  #define NV_ALERTS_LVL_I                                 161
  #define NV_ALERTS_LVL_SHADOW_I                          162
  #define NV_RINGER_LVL_SHADOW_I                          163
  #define NV_BEEP_LVL_SHADOW_I                            164
  #define NV_EAR_LVL_SHADOW_I                             165
  #define NV_TIME_SHOW_I                                  166
  #define NV_AIR_CNT_I                                    168
  #define NV_ROAM_CNT_I                                   169
  #define NV_LIFE_CNT_I                                   170
  #define NV_SEND_PIN_I                                   171
  #define NV_SMS_I                                        174
  #define NV_SMS_DM_I                                     175
  #define NV_IMSI_MCC_I                                   176
  #define NV_IMSI_11_12_I                                 177
  #define NV_DIR_NUMBER_I                                 178
  #define NV_VOICE_PRIV_I                                 179
  #define NV_SPARE_B1_I                                   180
  #define NV_SPARE_B2_I                                   181
  #define NV_SPARE_W1_I                                   182
  #define NV_SPARE_W2_I                                   183
  #define NV_FSC_I                                        184
  #define NV_ALARMS_I                                     185
  #define NV_STANDING_ALARM_I                             186
  #define NV_ISD_STD_PASSWD_I                             187
  #define NV_ISD_STD_RESTRICT_I                           188
  #define NV_DIALING_PLAN_I                               189
  #define NV_FM_LNA_CTL_I                                 190
  #define NV_LIFE_TIMER_G_I                               191
  #define NV_CALL_TIMER_G_I                               192
  #define NV_PWR_DWN_CNT_I                                193
  #define NV_FM_AGC_I                                     194
  #define NV_FSC2_I                                       195
  #define NV_FSC2_CHKSUM_I                                196
  #define NV_WDC_I                                        197
  #define NV_HW_CONFIG_I                                  198
  #define NV_CDMA_RX_LIN_VS_TEMP_I                        199
  #define NV_CDMA_ADJ_FACTOR_I                            200
  #define NV_CDMA_TX_LIM_BOOSTER_OFF_I                    201
  #define NV_CDMA_RX_SLP_VS_TEMP_I                        202
  #define NV_CDMA_TX_SLP_VS_TEMP_I                        203
  #define NV_PA_RANGE_VS_TEMP_I                           204
  #define NV_LNA_SWITCH_VS_TEMP_I                         205
  #define NV_FM_EXP_HDET_VS_TEMP_I                        206
  #define NV_N1M_I                                        207
  #define NV_IMSI_I                                       208
  #define NV_IMSI_ADDR_NUM_I                              209
  #define NV_ASSIGNING_TMSI_ZONE_LEN_I                    210
  #define NV_ASSIGNING_TMSI_ZONE_I                        211
  #define NV_TMSI_CODE_I                                  212
  #define NV_TMSI_EXP_I                                   213
  #define NV_HOME_PCS_FREQ_BLOCK_I                        214
  #define NV_DIR_NUMBER_PCS_I                             215
  #define NV_ROAMING_LIST_I                               216
  #define NV_MRU_TABLE_I                                  217
  #define NV_REDIAL_I                                     218
  #define NV_OTKSL_I                                      219
  #define NV_TIMED_PREF_MODE_I                            220
  #define NV_RINGER_TYPE_I                                221
  #define NV_ANY_KEY_ANSWER_I                             222
  #define NV_BACK_LIGHT_HFK_I                             223
  #define NV_KEY_SOUND_I                                  225
  #define NV_DIALS_SORTING_METHOD_I                       226
  #define NV_LANGUAGE_SELECTION_I                         227
  #define NV_MENU_FORMAT_I                                228
  #define NV_RINGER_SPKR_LVL_I                            229
  #define NV_BEEP_SPKR_LVL_I                              230
  #define NV_MRU2_TABLE_I                                 231
  #define NV_VIBRATOR_I                                   232
  #define NV_FLIP_ANSWERS_I                               233
  #define NV_DIAL_RESTRICT_LVLS_I                         234
  #define NV_DIAL_STATE_TABLE_LEN_I                       235
  #define NV_DIAL_STATE_TABLE_I                           236
  #define NV_VOICE_PRIV_ALERT_I                           237
  #define NV_IP_ADDRESS_I                                 238
  #define NV_CURR_GATEWAY_I                               239
  #define NV_DATA_QNC_ENABLED_I                           240
  #define NV_DATA_SO_SET_I                                241
  #define NV_UP_LINK_INFO_I                               242
  #define NV_UP_PARMS_I                                   243
  #define NV_ELAPSED_TIME_I                               245
  #define NV_PDM2_I                                       246
  #define NV_RX_AGC_MINMAX_I                              247
  #define NV_VBATT_AUX_I                                  248
  #define NV_DTACO_CONTROL_I                              249
  #define NV_DTACO_INTERDIGIT_TIMEOUT_I                   250
  #define NV_PDM1_I                                       251
  #define NV_BELL_MODEM_I                                 252
  #define NV_PDM1_VS_TEMP_I                               253
  #define NV_PDM2_VS_TEMP_I                               254
  #define NV_SID_NID_LOCK_I                               255
  #define NV_PRL_ENABLED_I                                256
  #define NV_ROAMING_LIST_683_I                           257
  #define NV_SYSTEM_PREF_I                                258
  #define NV_HOME_SID_NID_I                               259
  #define NV_OTAPA_ENABLED_I                              260
  #define NV_NAM_LOCK_I                                   261
  #define NV_IMSI_T_S1_I                                  262
  #define NV_IMSI_T_S2_I                                  263
  #define NV_IMSI_T_MCC_I                                 264
  #define NV_IMSI_T_11_12_I                               265
  #define NV_IMSI_T_ADDR_NUM_I                            266
  #define NV_UP_ALERTS_I                                  267
  #define NV_UP_IDLE_TIMER_I                              268
  #define NV_SMS_UTC_I                                    269
  #define NV_ROAM_RINGER_I                                270
  #define NV_RENTAL_TIMER_I                               271
  #define NV_RENTAL_TIMER_INC_I                           272
  #define NV_RENTAL_CNT_I                                 273
  #define NV_RENTAL_TIMER_ENABLED_I                       274
  #define NV_FULL_SYSTEM_PREF_I                           275
  #define NV_BORSCHT_RINGER_FREQ_I                        276
  #define NV_PAYPHONE_ENABLE_I                            277
  #define NV_DSP_ANSWER_DET_ENABLE_I                      278
  #define NV_EVRC_PRI_I                                   279
  #define NV_AFAX_CLASS_20_I                              280
  #define NV_V52_CONTROL_I                                281
  #define NV_CARRIER_INFO_I                               282
  #define NV_AFAX_I                                       283
  #define NV_SIO_PWRDWN_I                                 284
  #define NV_PREF_VOICE_SO_I                              285
  #define NV_VRHFK_ENABLED_I                              286
  #define NV_VRHFK_VOICE_ANSWER_I                         287
  #define NV_PDM1_VS_FREQ_I                               288
  #define NV_PDM2_VS_FREQ_I                               289
  #define NV_SMS_AUTO_DELETE_I                            290
  #define NV_SRDA_ENABLED_I                               291
  #define NV_OUTPUT_UI_KEYS_I                             292
  #define NV_POL_REV_TIMEOUT_I                            293
  #define NV_SI_TEST_DATA_1_I                             294
  #define NV_SI_TEST_DATA_2_I                             295
  #define NV_SPC_CHANGE_ENABLED_I                         296
  #define NV_DATA_MDR_MODE_I                              297
  #define NV_DATA_PKT_ORIG_STR_I                          298
  #define NV_UP_KEY_I                                     299
  #define NV_DATA_AUTO_PACKET_DETECTION_I                 300
  #define NV_AUTO_VOLUME_ENABLED_I                        301
  #define NV_WILDCARD_SID_I                               302
  #define NV_ROAM_MSG_I                                   303
  #define NV_OTKSL_FLAG_I                                 304
  #define NV_BROWSER_TYPE_I                               305
  #define NV_SMS_REMINDER_TONE_I                          306
  #define NV_UBROWSER_I                                   307
  #define NV_BTF_ADJUST_I                                 308
  #define NV_FULL_PREF_MODE_I                             309
  #define NV_UP_BROWSER_WARN_I                            310
  #define NV_FM_HDET_ADC_RANGE_I                          311
  #define NV_CDMA_HDET_ADC_RANGE_I                        312
  #define NV_PN_ID_I                                      313
  #define NV_USER_ZONE_ENABLED_I                          314
  #define NV_USER_ZONE_I                                  315
  #define NV_PAP_DATA_I                                   316
  #define NV_DATA_DEFAULT_PROFILE_I                       317
  #define NV_PAP_USER_ID_I                                318
  #define NV_PAP_PASSWORD_I                               319
  #define NV_STA_TBYE_I                                   320
  #define NV_STA_MIN_THR_I                                321
  #define NV_STA_MIN_RX_I                                 322
  #define NV_STA_MIN_ECIO_I                               323
  #define NV_STA_PRI_I                                    324
  #define NV_PCS_RX_LIN_OFF_0_I                           325
  #define NV_PCS_RX_LIN_SLP_I                             326
  #define NV_PCS_RX_COMP_VS_FREQ_I                        327
  #define NV_PCS_TX_COMP_VS_FREQ_I                        328
  #define NV_PCS_TX_LIN_MASTER_OFF_0_I                    329
  #define NV_PCS_TX_LIN_MASTER_SLP_I                      330
  #define NV_PCS_TX_LIN_VS_TEMP_I                         331
  #define NV_PCS_TX_LIM_VS_TEMP_I                         332
  #define NV_PCS_TX_LIM_VS_FREQ_I                         333
  #define NV_PCS_EXP_HDET_VS_AGC_I                        334
  #define NV_PCS_HDET_OFF_I                               335
  #define NV_PCS_HDET_SPN_I                               336
  #define NV_PCS_R1_RISE_I                                337
  #define NV_PCS_R1_FALL_I                                338
  #define NV_PCS_R2_RISE_I                                339
  #define NV_PCS_R2_FALL_I                                340
  #define NV_PCS_R3_RISE_I                                341
  #define NV_PCS_R3_FALL_I                                342
  #define NV_PCS_PA_RANGE_STEP_CAL_I                      343
  #define NV_PCS_PDM1_VS_FREQ_I                           344
  #define NV_PCS_PDM2_VS_FREQ_I                           345
  #define NV_PCS_LNA_RANGE_POL_I                          346
  #define NV_PCS_LNA_RANGE_RISE_I                         347
  #define NV_PCS_LNA_RANGE_FALL_I                         348
  #define NV_PCS_LNA_RANGE_OFFSET_I                       349
  #define NV_PCS_RX_LIN_VS_TEMP_I                         350
  #define NV_PCS_ADJ_FACTOR_I                             351
  #define NV_PCS_PA_RANGE_VS_TEMP_I                       352
  #define NV_PCS_PDM1_VS_TEMP_I                           353
  #define NV_PCS_PDM2_VS_TEMP_I                           354
  #define NV_PCS_RX_SLP_VS_TEMP_I                         355
  #define NV_PCS_TX_SLP_VS_TEMP_I                         356
  #define NV_PCS_RX_AGC_MINMAX_I                          357
  #define NV_PA_OFFSETS_I                                 358
  #define NV_CDMA_TX_LIN_MASTER0_I                        367
  #define NV_CDMA_TX_LIN_MASTER1_I                        368
  #define NV_CDMA_TX_LIN_MASTER2_I                        369
  #define NV_CDMA_TX_LIN_MASTER3_I                        370
  #define NV_TIME_FMT_SELECTION_I                         371
  #define NV_SMS_BC_SERVICE_TABLE_SIZE_I                  372
  #define NV_SMS_BC_SERVICE_TABLE_I                       373
  #define NV_SMS_BC_CONFIG_I                              374
  #define NV_SMS_BC_USER_PREF_I                           375
  #define NV_LNA_RANGE_2_RISE_I                           376
  #define NV_LNA_RANGE_2_FALL_I                           377
  #define NV_LNA_RANGE_12_OFFSET_I                        378
  #define NV_NONBYPASS_TIMER_I                            379
  #define NV_BYPASS_TIMER_I                               380
  #define NV_IM_LEVEL1_I                                  381
  #define NV_IM_LEVEL2_I                                  382
  #define NV_CDMA_LNA_OFFSET_VS_FREQ_I                    383
  #define NV_CDMA_LNA_12_OFFSET_VS_FREQ_I                 384
  #define NV_AGC_PHASE_OFFSET_I                           385
  #define NV_RX_AGC_MIN_11_I                              386
  #define NV_PCS_LNA_RANGE_2_RISE_I                       387
  #define NV_PCS_LNA_RANGE_2_FALL_I                       388
  #define NV_PCS_LNA_RANGE_12_OFFSET_I                    389
  #define NV_PCS_NONBYPASS_TIMER_I                        390
  #define NV_PCS_BYPASS_TIMER_I                           391
  #define NV_PCS_IM_LEVEL1_I                              392
  #define NV_PCS_IM_LEVEL2_I                              393
  #define NV_PCS_CDMA_LNA_OFFSET_VS_FREQ_I                394
  #define NV_PCS_CDMA_LNA_12_OFFSET_VS_FREQ_I             395
  #define NV_PCS_AGC_PHASE_OFFSET_I                       396
  #define NV_PCS_RX_AGC_MIN_11_I                          397
  #define NV_RUIM_CHV_1_I                                 398
  #define NV_RUIM_CHV_2_I                                 399
  #define NV_GPS1_CAPABILITIES_I                          400
  #define NV_GPS1_PDE_ADDRESS_I                           401
  #define NV_GPS1_ALLOWED_I                               402
  #define NV_GPS1_PDE_TRANSPORT_I                         403
  #define NV_GPS1_MOBILE_CALC_I                           404
  #define NV_PREF_FOR_RC_I                                405
  #define NV_DS_DEFAULT_BAUD_I                            406
  #define NV_DIAG_DEFAULT_BAUD_I                          407
  #define NV_SIO_DEV_MAP_MENU_ITEM_I                      408
  #define NV_TTY_I                                        409
  #define NV_PA_RANGE_OFFSETS_I                           410
  #define NV_TX_COMP0_I                                   411
  #define NV_MM_SDAC_LVL_I                                412
  #define NV_BEEP_SDAC_LVL_I                              413
  #define NV_SDAC_LVL_I                                   414
  #define NV_MM_LVL_I                                     415
  #define NV_MM_LVL_SHADOW_I                              416
  #define NV_MM_SPEAKER_LVL_I                             417
  #define NV_MM_PLAY_MODE_I                               418
  #define NV_MM_REPEAT_MODE_I                             419
  #define NV_TX_COMP1_I                                   420
  #define NV_TX_COMP2_I                                   421
  #define NV_TX_COMP3_I                                   422
  #define NV_PRIMARY_DNS_I                                423
  #define NV_SECONDARY_DNS_I                              424
  #define NV_DIAG_PORT_SELECT_I                           425
  #define NV_GPS1_PDE_PORT_I                              426
  #define NV_MM_RINGER_FILE_I                             427
  #define NV_MM_STORAGE_DEVICE_I                          428
  #define NV_DATA_SCRM_ENABLED_I                          429
  #define NV_RUIM_SMS_STATUS_I                            430
  #define NV_PCS_TX_LIN_MASTER0_I                         431
  #define NV_PCS_TX_LIN_MASTER1_I                         432
  #define NV_PCS_TX_LIN_MASTER2_I                         433
  #define NV_PCS_TX_LIN_MASTER3_I                         434
  #define NV_PCS_PA_RANGE_OFFSETS_I                       435
  #define NV_PCS_TX_COMP0_I                               436
  #define NV_PCS_TX_COMP1_I                               437
  #define NV_PCS_TX_COMP2_I                               438
  #define NV_PCS_TX_COMP3_I                               439
  #define NV_DIAG_RESTART_CONFIG_I                        440
  #define NV_BAND_PREF_I                                  441
  #define NV_ROAM_PREF_I                                  442
  #define NV_GPS1_GPS_RF_DELAY_I                          443
  #define NV_GPS1_CDMA_RF_DELAY_I                         444
  #define NV_PCS_ENC_BTF_I                                445
  #define NV_CDMA_ENC_BTF_I                               446
  #define NV_BD_ADDR_I                                    447
  #define NV_SUBPCG_PA_WARMUP_DELAY_I                     448
  #define NV_GPS1_GPS_RF_LOSS_I                           449
  #define NV_DATA_TRTL_ENABLED_I                          450
  #define NV_AMPS_BACKSTOP_ENABLED_I                      451
  #define NV_GPS1_LOCK_I                                  452
  #define NV_FTM_MODE_I                                   453
  #define NV_DS_DEFAULT_BAUDRATE_I                        454
  #define NV_DIAG_DEFAULT_BAUDRATE_I                      455
  #define NV_JCDMA_DS_F92_I                               456
  #define NV_DS_QCMIP_I                                   459
  #define NV_DS_MIP_RETRIES_I                             460
  #define NV_DS_MIP_RETRY_INT_I                           461
  #define NV_DS_MIP_PRE_RE_RRQ_TIME_I                     462
  #define NV_DS_MIP_NUM_PROF_I                            463
  #define NV_DS_MIP_ACTIVE_PROF_I                         464
  #define NV_DS_MIP_GEN_USER_PROF_I                       465
  #define NV_DS_MIP_SS_USER_PROF_I                        466
  #define NV_HDR_CON_SUSPEND_I                            467
  #define NV_HDR_PRE_CC_CYC_ENABLED_I                     468
  #define NV_HDR_PRE_CC_CYC_I                             469
  #define NV_HDR_SRCH_PARAMS_I                            470
  #define NV_HDRSMP_KEEP_ALIVE_START_I                    471
  #define NV_HDRSMP_KEEP_ALIVE_SENT_I                     472
  #define NV_HDRSMP_KEEP_ALIVE_REQ_INT_I                  473
  #define NV_HDRAMP_ADDRESS_DATA_I                        474
  #define NV_HDRSCP_SESSION_STATUS_I                      475
  #define NV_HDRSCP_TOKEN_I                               476
  #define NV_HDRSCP_PROTOCOL_SUBTYPE_I                    477
  #define NV_HDRAMP_DUAL_EXPIRE_TIME_I                    478
  #define NV_HDRSTREAM_CURR_STREAM_CFG_I                  479
  #define NV_HDR_SET_MNGMT_SAME_CHAN_I                    480
  #define NV_HDR_SET_MNGMT_DIFF_CHAN_I                    481
  #define NV_HDRLUP_UNSOLICITED_ENABLED_I                 482
  #define NV_HDRAMAC_INITIAL_CONFIG_I                     483
  #define NV_HDRAMAC_POWER_PARAMS_I                       484
  #define NV_HDRFMAC_DRC_GATING_I                         485
  #define NV_HDRFMAC_HANDOFF_DELAYS_I                     486
  #define NV_HDRRMAC_POWER_PARAMS_I                       487
  #define NV_HDRRMAC_RATE_PARAMS_I                        488
  #define NV_HDRSLP_RESET_SEQNO_I                         489
  #define NV_PWR_BACKOFF_VS_VOLT_MED_I                    490
  #define NV_PWR_BACKOFF_VS_VOLT_LOW_I                    491
  #define NV_PA_BACKOFF_VOLTS_I                           492
  #define NV_VBATT_MIN_MAX_I                              493
  #define NV_DS_MIP_MN_HA_TIME_DELTA_I                    494
  #define NV_DS_MIP_QC_DRS_OPT_I                          495
  #define NV_ANT2_CDMA_RX_LIN_OFF_0_I                     496
  #define NV_ANT2_CDMA_RX_LIN_SLP_I                       497
  #define NV_ANT2_CDMA_RX_COMP_VS_FREQ_I                  498
  #define NV_ANT2_CDMA_RX_LIN_VS_TEMP_I                   499
  #define NV_ANT2_CDMA_RX_SLP_VS_TEMP_I                   500
  #define NV_ANT2_LNA_RANGE_OFFSET_I                      501
  #define NV_ANT2_LNA_RANGE_12_OFFSET_I                   502
  #define NV_ANT2_CDMA_LNA_OFFSET_VS_FREQ_I               503
  #define NV_ANT2_CDMA_LNA_12_OFFSET_VS_FREQ_I            504
  #define NV_ANT2_PCS_RX_LIN_OFF_0_I                      505
  #define NV_ANT2_PCS_RX_LIN_SLP_I                        506
  #define NV_ANT2_PCS_RX_COMP_VS_FREQ_I                   507
  #define NV_ANT2_PCS_RX_LIN_VS_TEMP_I                    508
  #define NV_ANT2_PCS_RX_SLP_VS_TEMP_I                    509
  #define NV_ANT2_PCS_LNA_RANGE_OFFSET_I                  510
  #define NV_ANT2_PCS_LNA_RANGE_12_OFFSET_I               511
  #define NV_ANT2_PCS_CDMA_LNA_OFFSET_VS_FREQ_I           512
  #define NV_ANT2_PCS_CDMA_LNA_12_OFFSET_VS_FREQ_I        513
  #define NV_WCDMA_RX_LIN_I                               514
  #define NV_WCDMA_RX_COMP_VS_FREQ_I                      515
  #define NV_WCDMA_RX_LIN_VS_TEMP_I                       516
  #define NV_WCDMA_RX_SLP_VS_TEMP_I                       517
  #define NV_WCDMA_LNA_RANGE_POL_I                        518
  #define NV_WCDMA_LNA_RANGE_RISE_I                       519
  #define NV_WCDMA_LNA_RANGE_FALL_I                       520
  #define NV_WCDMA_IM_LEVEL_I                             521
  #define NV_WCDMA_NONBYPASS_TIMER_I                      522
  #define NV_WCDMA_BYPASS_TIMER_I                         523
  #define NV_WCDMA_LNA_RANGE_OFFSET_I                     524
  #define NV_WCDMA_LNA_OFFSET_VS_FREQ_I                   525
  #define NV_WCDMA_RX_AGC_MIN_I                           526
  #define NV_WCDMA_RX_AGC_MAX_I                           527
  #define NV_WCDMA_AGC_PHASE_OFFSET_I                     528
  #define NV_WCDMA_TX_LIN_MASTER_0_I                      529
  #define NV_WCDMA_TX_LIN_MASTER_1_I                      530
  #define NV_WCDMA_TX_COMP_VS_FREQ_0_I                    531
  #define NV_WCDMA_TX_COMP_VS_FREQ_1_I                    532
  #define NV_WCDMA_TX_LIN_VS_TEMP_0_I                     533
  #define NV_WCDMA_TX_LIN_VS_TEMP_1_I                     534
  #define NV_WCDMA_TX_SLP_VS_TEMP_0_I                     535
  #define NV_WCDMA_TX_SLP_VS_TEMP_1_I                     536
  #define NV_WCDMA_R1_RISE_I                              537
  #define NV_WCDMA_R1_FALL_I                              538
  #define NV_WCDMA_TX_LIM_VS_TEMP_I                       539
  #define NV_WCDMA_TX_LIM_VS_FREQ_I                       540
  #define NV_WCDMA_ADJ_FACTOR_I                           541
  #define NV_WCDMA_EXP_HDET_VS_AGC_I                      542
  #define NV_WCDMA_HDET_OFF_I                             543
  #define NV_WCDMA_HDET_SPN_I                             544
  #define NV_WCDMA_ENC_BTF_I                              545
  #define NV_DS_MIP_2002BIS_MN_HA_AUTH_I                  546
  #define NV_UE_RAT_CAPABILITY_I                          547
  #define NV_GSM_UE_OP_CLASS_I                            548
  #define NV_UMTS_UE_OP_CLASS_I                           549
  #define NV_UE_IMEI_I                                    550
  #define NV_MSRAC_SMS_VALUE_I                            551
  #define NV_MSRAC_SM_VALUE_I                             552
  #define NV_GSM_A5_ALGORITHMS_SUPPORTED_I                553
  #define NV_HDRFMAC_DRC_LOCK_I                           554
  #define NV_GPS1_LO_CAL_I                                555
  #define NV_GPS1_ANT_OFF_DB_I                            556
  #define NV_GPS1_PCS_RF_DELAY_I                          557
  #define NV_SMS_VM_NUMBER_I                              558
  #define NV_SMS_GW_PARMS_I                               559
  #define NV_SMS_GW_I                                     561
  #define NV_HYBRID_PREF_I                                562
  #define NV_SP_ECC_ENABLED_I                             563
  #define NV_ECC_LIST_I                                   564
  #define NV_BT_LPOS_LAT_I                                565
  #define NV_BT_LPOS_LONG_I                               566
  #define NV_TEST_CODE_VER_I                              567
  #define NV_SYS_SW_VER_I                                 568
  #define NV_RF_CAL_VER_I                                 569
  #define NV_RF_CONFIG_VER_I                              570
  #define NV_RF_CAL_DATE_I                                571
  #define NV_RF_NV_LOADED_DATE_I                          572
  #define NV_RF_CAL_DAT_FILE_I                            573
  #define NV_DOMAIN_NAME_I                                574
  #define NV_PREF_PLMN_I                                  577
  #define NV_HDR_AN_AUTH_NAI_I                            579
  #define NV_HDR_AN_AUTH_PASSWORD_I                       580
  #define NV_PUZL_ENABLED_I                               581
  #define NV_HDRKEP_CONFIG_I                              583
  #define NV_HDRAUTH_CONFIG_I                             584
  #define NV_IM_LEVEL3_I                                  585
  #define NV_IM_LEVEL4_I                                  586
  #define NV_AGC_VALUE_3_MIN_I                            587
  #define NV_AGC_VALUE_4_MIN_I                            588
  #define NV_TX_GAIN_ATTEN_LIMIT_I                        589
  #define NV_CDMA_LNA_3_FALL_I                            590
  #define NV_CDMA_LNA_3_OFFSET_I                          591
  #define NV_CDMA_LNA_3_RISE_I                            592
  #define NV_CDMA_LNA_3_OFFSET_VS_FREQ_I                  593
  #define NV_PCS_LNA_3_FALL_I                             594
  #define NV_PCS_LNA_3_OFFSET_I                           595
  #define NV_PCS_LNA_3_RISE_I                             596
  #define NV_PCS_LNA_3_OFFSET_VS_FREQ_I                   597
  #define NV_CDMA_LNA_4_FALL_I                            598
  #define NV_CDMA_LNA_4_OFFSET_I                          599
  #define NV_CDMA_LNA_4_RISE_I                            600
  #define NV_CDMA_LNA_4_OFFSET_VS_FREQ_I                  601
  #define NV_PCS_LNA_4_FALL_I                             602
  #define NV_PCS_LNA_4_OFFSET_I                           603
  #define NV_PCS_LNA_4_RISE_I                             604
  #define NV_PCS_LNA_4_OFFSET_VS_FREQ_I                   605
  #define NV_DFM_LNA_FALL_I                               606
  #define NV_DFM_LNA_OFFSET_I                             607
  #define NV_DFM_LNA_RISE_I                               608
  #define NV_DFM_LNA_OFFSET_VS_FREQ_I                     609
  #define NV_DFM_AGC_ACC_MIN_1_I                          610
  #define NV_DFM_AGC_IM_GAIN_I                            611
  #define NV_DFM_AGC_DC_GAIN_I                            612
  #define NV_DFM_IM_LEVEL1_I                              613
  #define NV_GPS_FG_TRK_OFFSET_SCALER_I                   614
  #define NV_DIGITAL_FG_TRK_OFFSET_SCALER_I               615
  #define NV_FM_FG_TRK_OFFSET_SCALER_I                    616
  #define NV_DFM_LNA_S0_PHASE_OFFSET_I                    617
  #define NV_DFM_LNA_S1_PHASE_OFFSET_I                    618
  #define NV_CDMA_RXF_CG_IOFFSET_I                        619
  #define NV_PCS_RXF_CG_IOFFSET_I                         620
  #define NV_FM_RXF_CG_IOFFSET_I                          621
  #define NV_GPS_RXF_CG_IOFFSET_I                         622
  #define NV_CDMA_RXF_CG_QOFFSET_I                        623
  #define NV_PCS_RXF_CG_QOFFSET_I                         624
  #define NV_FM_RXF_CG_QOFFSET_I                          625
  #define NV_GPS_RXF_CG_QOFFSET_I                         626
  #define NV_CDMA_RXF_FG_IOFFSET_I                        627
  #define NV_PCS_RXF_FG_IOFFSET_I                         628
  #define NV_FM_RXF_FG_IOFFSET_I                          629
  #define NV_GPS_RXF_FG_IOFFSET_I                         630
  #define NV_CDMA_RXF_FG_QOFFSET_I                        631
  #define NV_PCS_RXF_FG_QOFFSET_I                         632
  #define NV_FM_RXF_FG_QOFFSET_I                          633
  #define NV_GPS_RXF_FG_QOFFSET_I                         634
  #define NV_CDMA_DACC_EST_IOFFSET_I                      635
  #define NV_PCS_DACC_EST_IOFFSET_I                       636
  #define NV_FM_DACC_EST_IOFFSET_I                        637
  #define NV_GPS_DACC_EST_IOFFSET_I                       638
  #define NV_CDMA_DACC_EST_QOFFSET_I                      639
  #define NV_PCS_DACC_EST_QOFFSET_I                       640
  #define NV_FM_DACC_EST_QOFFSET_I                        641
  #define NV_GPS_DACC_EST_QOFFSET_I                       642
  #define NV_CDMA_DACC_IACCUM0_I                          643
  #define NV_PCS_DACC_IACCUM0_I                           644
  #define NV_FM_DACC_IACCUM0_I                            645
  #define NV_GPS_DACC_IACCUM0_I                           646
  #define NV_CDMA_DACC_IACCUM1_I                          647
  #define NV_PCS_DACC_IACCUM1_I                           648
  #define NV_FM_DACC_IACCUM1_I                            649
  #define NV_GPS_DACC_IACCUM1_I                           650
  #define NV_CDMA_DACC_IACCUM2_I                          651
  #define NV_PCS_DACC_IACCUM2_I                           652
  #define NV_FM_DACC_IACCUM2_I                            653
  #define NV_GPS_DACC_IACCUM2_I                           654
  #define NV_CDMA_DACC_IACCUM3_I                          655
  #define NV_PCS_DACC_IACCUM3_I                           656
  #define NV_FM_DACC_IACCUM3_I                            657
  #define NV_GPS_DACC_IACCUM3_I                           658
  #define NV_CDMA_DACC_IACCUM4_I                          659
  #define NV_PCS_DACC_IACCUM4_I                           660
  #define NV_FM_DACC_IACCUM4_I                            661
  #define NV_GPS_DACC_IACCUM4_I                           662
  #define NV_CDMA_DACC_QACCUM0_I                          663
  #define NV_PCS_DACC_QACCUM0_I                           664
  #define NV_FM_DACC_QACCUM0_I                            665
  #define NV_GPS_DACC_QACCUM0_I                           666
  #define NV_CDMA_DACC_QACCUM1_I                          667
  #define NV_PCS_DACC_QACCUM1_I                           668
  #define NV_FM_DACC_QACCUM1_I                            669
  #define NV_GPS_DACC_QACCUM1_I                           670
  #define NV_CDMA_DACC_QACCUM2_I                          671
  #define NV_PCS_DACC_QACCUM2_I                           672
  #define NV_FM_DACC_QACCUM2_I                            673
  #define NV_GPS_DACC_QACCUM2_I                           674
  #define NV_CDMA_DACC_QACCUM3_I                          675
  #define NV_PCS_DACC_QACCUM3_I                           676
  #define NV_FM_DACC_QACCUM3_I                            677
  #define NV_GPS_DACC_QACCUM3_I                           678
  #define NV_CDMA_DACC_QACCUM4_I                          679
  #define NV_PCS_DACC_QACCUM4_I                           680
  #define NV_FM_DACC_QACCUM4_I                            681
  #define NV_GPS_DACC_QACCUM4_I                           682
  #define NV_CDMA_DACC_GAIN_MULT_I                        683
  #define NV_PCS_DACC_GAIN_MULT_I                         684
  #define NV_FM_DACC_GAIN_MULT_I                          685
  #define NV_GPS_DACC_GAIN_MULT_I                         686
  #define NV_CDMA_IM2_I_VALUE_I                           687
  #define NV_PCS_IM2_I_VALUE_I                            688
  #define NV_CDMA_IM2_Q_VALUE_I                           689
  #define NV_PCS_IM2_Q_VALUE_I                            690
  #define NV_RTC_TIME_ADJUST_I                            691
  #define NV_FM_VGA_GAIN_OFFSET_I                         692
  #define NV_CDMA_VGA_GAIN_OFFSET_I                       693
  #define NV_PCS_VGA_GAIN_OFFSET_I                        694
  #define NV_FM_VGA_GAIN_OFFSET_VS_FREQ_I                 695
  #define NV_CDMA_VGA_GAIN_OFFSET_VS_FREQ_I               696
  #define NV_PCS_VGA_GAIN_OFFSET_VS_FREQ_I                697
  #define NV_FM_VGA_GAIN_OFFSET_VS_TEMP_I                 698
  #define NV_CDMA_VGA_GAIN_OFFSET_VS_TEMP_I               699
  #define NV_PCS_VGA_GAIN_OFFSET_VS_TEMP_I                700
  #define NV_FM_MIS_COMP_A_OFFSET_I                       701
  #define NV_DIGITAL_MIS_COMP_A_OFFSET_I                  702
  #define NV_GPS_MIS_COMP_A_OFFSET_I                      703
  #define NV_FM_MIS_COMP_B_OFFSET_I                       704
  #define NV_DIGITAL_MIS_COMP_B_OFFSET_I                  705
  #define NV_GPS_MIS_COMP_B_OFFSET_I                      706
  #define NV_DS_MIP_RRQ_IF_TFRK_I                         707
  #define NV_COLLOC_DISALLOWED_TIME_I                     708
  #define NV_HOLD_HDR_TIME_I                              709
  #define NV_LO_BIAS_UPDATE_CNT_I                         710
  #define NV_HDRSCP_AN_AUTH_STATUS_I                      712
  #define NV_IMSI_INDEX_I                                 713
  #define NV_DS_MIP_ENABLE_PROF_I                         714
  #define NV_PCS_IM_LEVEL3_I                              715
  #define NV_PCS_IM_LEVEL4_I                              716
  #define NV_PCS_AGC_VALUE_3_MIN_I                        717
  #define NV_PCS_AGC_VALUE_4_MIN_I                        718
  #define NV_HDRSMPKA_START_TIME_I                        719
  #define NV_HDRSMPKA_SENT_TIME_I                         720
  #define NV_SMS_BC_SERVICE_TABLE_OPTIONS_I               721
  #define NV_ACQ_DB_I                                     722
  #define NV_ACQ_LIST_1_I                                 723
  #define NV_GSM_CAL_ARFCN_I                              724
  #define NV_DCS_CAL_ARFCN_I                              725
  #define NV_GSM_RX_GAIN_RANGE_1_FREQ_COMP_I              726
  #define NV_GSM_RX_GAIN_RANGE_2_FREQ_COMP_I              727
  #define NV_GSM_RX_GAIN_RANGE_3_FREQ_COMP_I              728
  #define NV_GSM_RX_GAIN_RANGE_4_FREQ_COMP_I              729
  #define NV_DCS_RX_GAIN_RANGE_1_FREQ_COMP_I              730
  #define NV_DCS_RX_GAIN_RANGE_2_FREQ_COMP_I              731
  #define NV_DCS_RX_GAIN_RANGE_3_FREQ_COMP_I              732
  #define NV_DCS_RX_GAIN_RANGE_4_FREQ_COMP_I              733
  #define NV_GSM_TRK_LO_ADJ_PDM_INIT_VAL_I                734
  #define NV_GSM_TRK_LO_ADJ_PDM_GAIN_SLOPE_I              735
  #define NV_GPS_DOPP_SDEV_I                              736
  #define NV_ACQ_LIST_2_I                                 737
  #define NV_ACQ_LIST_3_I                                 738
  #define NV_ACQ_LIST_4_I                                 739
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_00_I              740
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_01_I              741
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_02_I              742
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_03_I              743
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_04_I              744
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_05_I              745
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_06_I              746
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_07_I              747
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_08_I              748
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_09_I              749
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_10_I              750
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_11_I              751
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_12_I              752
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_13_I              753
  #define NV_GSM_TX_BURST_RAMP_UP_INDEX_14_I              754
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_00_I            755
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_01_I            756
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_02_I            757
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_03_I            758
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_04_I            759
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_05_I            760
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_06_I            761
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_07_I            762
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_08_I            763
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_09_I            764
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_10_I            765
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_11_I            766
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_12_I            767
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_13_I            768
  #define NV_GSM_TX_BURST_RAMP_DOWN_INDEX_14_I            769
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_00_I              770
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_01_I              771
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_02_I              772
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_03_I              773
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_04_I              774
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_05_I              775
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_06_I              776
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_07_I              777
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_08_I              778
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_09_I              779
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_10_I              780
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_11_I              781
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_12_I              782
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_13_I              783
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_14_I              784
  #define NV_DCS_TX_BURST_RAMP_UP_INDEX_15_I              785
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_00_I            786
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_01_I            787
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_02_I            788
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_03_I            789
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_04_I            790
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_05_I            791
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_06_I            792
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_07_I            793
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_08_I            794
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_09_I            795
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_10_I            796
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_11_I            797
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_12_I            798
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_13_I            799
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_14_I            800
  #define NV_DCS_TX_BURST_RAMP_DOWN_INDEX_15_I            801
  #define NV_GSM_PA_GAIN_SLOPE_I                          802
  #define NV_DCS_PA_GAIN_SLOPE_I                          803
  #define NV_GSM_TX_FREQ_COMP_I                           804
  #define NV_DCS_TX_FREQ_COMP_I                           805
  #define NV_GSM_VBATT_HI_PA_COMP_I                       806
  #define NV_GSM_VBATT_LO_PA_COMP_I                       807
  #define NV_DCS_VBATT_HI_PA_COMP_I                       808
  #define NV_DCS_VBATT_LO_PA_COMP_I                       809
  #define NV_VBATT_3200_MV_ADC_I                          810
  #define NV_VBATT_3700_MV_ADC_I                          811
  #define NV_VBATT_4200_MV_ADC_I                          812
  #define NV_GSM_PRECHARGE_I                              813
  #define NV_DCS_PRECHARGE_I                              814
  #define NV_GSM_PRECHARGE_DUR_I                          815
  #define NV_DCS_PRECHARGE_DUR_I                          816
  #define NV_DIGITAL_PLL_LOCK_TIMER_I                     817
  #define NV_HDR_RX_DIVERSITY_CTRL_I                      818
  #define NV_GSM_PA_START_TIME_OFFSET_I                   819
  #define NV_GSM_PA_STOP_TIME_OFFSET_I                    820
  #define NV_DCS_PA_START_TIME_OFFSET_I                   821
  #define NV_DCS_PA_STOP_TIME_OFFSET_I                    822
  #define NV_GPS1_PRIVACY_I                               823
  #define NV_GPS1_NET_ACCESS_I                            824
  #define NV_GPS1_CELLBASED_SMS_I                         825
  #define NV_GPS1_TELESERVICE_ID_I                        826
  #define NV_HDRRUP_SRCH_PARAMS_I                         827
  #define NV_DFM_LNA_BYPASS_TIMER_I                       828
  #define NV_DFM_LNA_NONBYPASS_TIMER_I                    829
  #define NV_SMS_CFG_ROUTING_I                            830
  #define NV_GPS1_NET_DBM_SIZE_I                          831
  #define NV_HDR_DO_NOT_DISTURB_I                         832
  #define NV_CDMA_TX_GAIN_ATTEN_LIMIT_I                   833
  #define NV_PCS_TX_GAIN_ATTEN_LIMIT_I                    834
  #define NV_AMPS_TX_GAIN_ATTEN_LIMIT_I                   835
  #define NV_GPS_TX_GAIN_ATTEN_LIMIT_I                    836
  #define NV_CDMA_IM2_TRANSCONDUCTOR_VALUE_I              837
  #define NV_PCS_IM2_TRANSCONDUCTOR_VALUE_I               838
  #define NV_LNA_NON_BYPASS_TIMER_0_I                     839
  #define NV_LNA_NON_BYPASS_TIMER_1_I                     840
  #define NV_LNA_NON_BYPASS_TIMER_2_I                     841
  #define NV_LNA_NON_BYPASS_TIMER_3_I                     842
  #define NV_LNA_BYPASS_TIMER_0_I                         843
  #define NV_LNA_BYPASS_TIMER_1_I                         844
  #define NV_LNA_BYPASS_TIMER_2_I                         845
  #define NV_LNA_BYPASS_TIMER_3_I                         846
  #define NV_SMS_CD_PARMS_I                               847
  #define NV_ACQ_ORDER_PREF_I                             848
  #define NV_NET_SEL_MODE_PREF_I                          849
  #define NV_SERVICE_DOMAIN_PREF_I                        850
  #define NV_PPP_AUTHENTICATION_I                         851
  #define NV_APN_NAME_I                                   852
  #define NV_EQUIVALENT_PLMN_LIST_I                       853
  #define NV_DS_MIP_DMU_PKOID_I                           854
  #define NV_RTRE_CONFIG_I                                855
  #define NV_WCDMA_VGA_GAIN_OFFSET_I                      856
  #define NV_WCDMA_VGA_GAIN_OFFSET_VS_FREQ_I              857
  #define NV_WCDMA_VGA_GAIN_OFFSET_VS_TEMP_I              858
  #define NV_WCDMA_LNA_RANGE_RISE_2_I                     859
  #define NV_WCDMA_LNA_RANGE_RISE_3_I                     860
  #define NV_WCDMA_LNA_RANGE_FALL_2_I                     861
  #define NV_WCDMA_LNA_RANGE_FALL_3_I                     862
  #define NV_WCDMA_IM_LEVEL_2_I                           863
  #define NV_WCDMA_IM_LEVEL_3_I                           864
  #define NV_WCDMA_LNA_RANGE_OFFSET_2_I                   865
  #define NV_WCDMA_LNA_RANGE_OFFSET_3_I                   866
  #define NV_WCDMA_LNA_OFFSET_VS_FREQ_2_I                 867
  #define NV_WCDMA_LNA_OFFSET_VS_FREQ_3_I                 868
  #define NV_WCDMA_IM2_I_VALUE_I                          869
  #define NV_WCDMA_IM2_Q_VALUE_I                          870
  #define NV_WCDMA_IM2_TRANSCONDUCTOR_VALUE_I             871
  #define NV_WCDMA_RX_AGC_MIN_2_I                         872
  #define NV_WCDMA_RX_AGC_MIN_3_I                         873
  #define NV_WCDMA_VBATT_I                                874
  #define NV_WCDMA_THERM_I                                875
  #define NV_WCDMA_MAX_TX_POWER_I                         876
  #define NV_FM_PA_MAC_HIGH_I                             877
  #define NV_CDMA_DYNAMIC_RANGE_I                         878
  #define NV_CDMA_MIN_RX_RSSI_I                           879
  #define NV_RRC_INTEGRITY_ENABLED_I                      880
  #define NV_RRC_CIPHERING_ENABLED_I                      881
  #define NV_RRC_FAKE_SECURITY_ENABLED_I                  882
  #define NV_CDMA_POWERUP_REG_PERFORMED_I                 883
  #define NV_TX_WARMUP_I                                  884
  #define NV_LAST_TX_DATA_COUNT_I                         885
  #define NV_LAST_RX_DATA_COUNT_I                         886
  #define NV_TOTAL_TX_DATA_COUNT_I                        887
  #define NV_TOTAL_RX_DATA_COUNT_I                        888
  #define NV_DS_MIP_DMU_MN_AUTH_I                         889
  #define NV_USB_PRODUCT_ID_OFFSET_I                      890
  #define NV_AVCD_CALL_DURATION_I                         891
  #define NV_AVCD_TIME_BETWEEN_CALLS_I                    892
  #define NV_AVCD_NUMBER_OF_CALLS_I                       893
  #define NV_AVCD_SO_I                                    894
  #define NV_WCDMA_OUT_OF_SERVICE_THRESH_I                895
  #define NV_UIM_FIRST_INST_CLASS_I                       896
  #define NV_HDRRUP_OVERRIDE_ALLOWED_I                    897
  #define NV_JCDMA_M511_MODE_I                            898
  #define NV_JCDMA_M512_MODE_I                            899
  #define NV_JCDMA_M513_MODE_I                            900
  #define NV_CDMA_P1_RISE_FALL_OFF_I                      901
  #define NV_PCS_P1_RISE_FALL_OFF_I                       902
  #define NV_GSM_LOCIGPRS_I                               903
  #define NV_GSM_KCGPRS_I                                 904
  #define NV_ERR_FATAL_OPTIONS_I                          905
  #define NV_PPP_PASSWORD_I                               906
  #define NV_TRK_LO_ADJ_VS_TEMP_I                         907
  #define NV_ROT_FREQ_VS_TEMP_I                           908
  #define NV_SMS_GW_BEARER_PREF_I                         909
  #define NV_PPP_USER_ID_I                                910
  #define NV_MULTISLOT_CLASS_I                            911
  #define NV_NON_DRX_TIMER_I                              912
  #define NV_SPLIT_PAGING_CYCLE_I                         913
  #define NV_UIM_PREF_PROTOCOL_I                          914
  #define NV_WCDMACS_SYNC_TEST_APP_ENABLED_I              915
  #define NV_GSM_GAINRANGE_SWITCHPOINTS_I                 916
  #define NV_DCS_GAINRANGE_SWITCHPOINTS_I                 917
  #define NV_HDR_AN_PPP_USER_ID_I                         919
  #define NV_HDR_AN_PPP_PASSWORD_I                        920
  #define NV_JTACS_PCDMACH_I                              921
  #define NV_JTACS_SCDMACH_I                              922
  #define NV_GSMUMTS_IMSI_I                               923
  #define NV_RTSP_PROXY_SERVER_ADDR_I                     924
  #define NV_SMS_GW_DEFAULT_TEMPLATE_I                    925
  #define NV_SMS_CD_DEFAULT_TEMPLATE_I                    926
  #define NV_NON_COMPLIANCE_COMMENT_I                     927
  #define NV_HYSTERISIS_ACTIVATION_TIMER_I                928
  #define NV_HYSTERISIS_TIMER_I                           929
  #define NV_PKT_DIAL_STRINGS_I                           930
  #define NV_VCO_COARSE_TUNE_TABLE_I                      931
  #define NV_DATA_INCOMING_CSD_CALL_IS_INTERNAL_I         932
  #define NV_DF_I                                         933
  #define NV_GSM_PA_TEMP_COMP_INDEX_14_I                  934
  #define NV_DCS_PA_TEMP_COMP_INDEX_15_I                  935
  #define NV_RF_TEST_ITEM_1_I                             936
  #define NV_RF_TEST_ITEM_2_I                             937
  #define NV_NEG_SLOT_CYCLE_INDEX_I                       938
  #define NV_BTFD_OLPC_FLOOR_DB_I                         939
  #define NV_NON_BTFD_OLPC_FLOOR_DB_I                     940
  #define NV_SSPR_P_REV_I                                 941
  #define NV_RTSP_PROXY_SERVER_ADDR_ALTERNATE_I           942
  #define NV_UIM_CDMA_PREF_SLOT_I                         943
  #define NV_UIM_GSM_PREF_SLOT_I                          944
  #define NV_MRU3_TABLE_I                                 945
  #define NV_BAND_PREF_16_31_I                            946
  #define NV_GPRS_ANITE_GCF_I                             947
  #define NV_C1_CDMA_LNA_OFFSET_I                         948
  #define NV_C1_CDMA_LNA_OFFSET_VS_FREQ_I                 949
  #define NV_C1_PCS_LNA_OFFSET_I                          950
  #define NV_C1_PCS_LNA_OFFSET_VS_FREQ_I                  951
  #define NV_C1_CDMA_LNA_2_OFFSET_I                       952
  #define NV_C1_CDMA_LNA_2_OFFSET_VS_FREQ_I               953
  #define NV_C1_PCS_LNA_2_OFFSET_I                        954
  #define NV_C1_PCS_LNA_2_OFFSET_VS_FREQ_I                955
  #define NV_C1_CDMA_LNA_3_OFFSET_I                       956
  #define NV_C1_CDMA_LNA_3_OFFSET_VS_FREQ_I               957
  #define NV_C1_PCS_LNA_3_OFFSET_I                        958
  #define NV_C1_PCS_LNA_3_OFFSET_VS_FREQ_I                959
  #define NV_C1_CDMA_LNA_4_OFFSET_I                       960
  #define NV_C1_CDMA_LNA_4_OFFSET_VS_FREQ_I               961
  #define NV_C1_PCS_LNA_4_OFFSET_I                        962
  #define NV_C1_PCS_LNA_4_OFFSET_VS_FREQ_I                963
  #define NV_C1_CDMA_P1_RISE_FALL_OFFSET_I                964
  #define NV_C1_PCS_P1_RISE_FALL_OFFSET_I                 965
  #define NV_C1_RX_AGC_VALUE_1_MINMAX_I                   966
  #define NV_C1_RX_AGC_VALUE_2_MINMAX_I                   967
  #define NV_C1_RX_AGC_VALUE_3_MINMAX_I                   968
  #define NV_C1_RX_AGC_VALUE_4_MINMAX_I                   969
  #define NV_C0_RX_AGC_VREF_VAL_I                         970
  #define NV_C1_RX_AGC_VREF_VAL_I                         971
  #define NV_C0_GRP_DELAY_ADJ_I                           972
  #define NV_C1_GRP_DELAY_ADJ_I                           973
  #define NV_C1_CDMA_VGA_GAIN_OFFSET_I                    974
  #define NV_C1_CDMA_VGA_GAIN_OFFSET_VS_FREQ_I            975
  #define NV_C1_CDMA_VGA_GAIN_OFFSET_VS_TEMP_I            976
  #define NV_C1_PCS_VGA_GAIN_OFFSET_I                     977
  #define NV_C1_PCS_VGA_GAIN_OFFSET_VS_FREQ_I             978
  #define NV_C1_PCS_VGA_GAIN_OFFSET_VS_TEMP_I             979
  #define NV_C1_DIGITAL_MIS_COMP_A_OFFSET_I               980
  #define NV_C1_GPS_MIS_COMP_A_OFFSET_I                   981
  #define NV_C1_DIGITAL_MIS_COMP_B_OFFSET_I               982
  #define NV_C1_GPS_MIS_COMP_B_OFFSET_I                   983
  #define NV_C1_CDMA_DACC_IACCUM0_I                       984
  #define NV_C1_PCS_DACC_IACCUM0_I                        985
  #define NV_C1_GPS_DACC_IACCUM0_I                        986
  #define NV_C1_CDMA_DACC_IACCUM1_I                       987
  #define NV_C1_PCS_DACC_IACCUM1_I                        988
  #define NV_C1_GPS_DACC_IACCUM1_I                        989
  #define NV_C1_CDMA_DACC_IACCUM2_I                       990
  #define NV_C1_PCS_DACC_IACCUM2_I                        991
  #define NV_C1_GPS_DACC_IACCUM2_I                        992
  #define NV_C1_CDMA_DACC_IACCUM3_I                       993
  #define NV_C1_PCS_DACC_IACCUM3_I                        994
  #define NV_C1_GPS_DACC_IACCUM3_I                        995
  #define NV_C1_CDMA_DACC_IACCUM4_I                       996
  #define NV_C1_PCS_DACC_IACCUM4_I                        997
  #define NV_C1_GPS_DACC_IACCUM4_I                        998
  #define NV_C1_CDMA_DACC_QACCUM0_I                       999
  #define NV_C1_PCS_DACC_QACCUM0_I                        1000
  #define NV_C1_GPS_DACC_QACCUM0_I                        1001
  #define NV_C1_CDMA_DACC_QACCUM1_I                       1002
  #define NV_C1_PCS_DACC_QACCUM1_I                        1003
  #define NV_C1_GPS_DACC_QACCUM1_I                        1004
  #define NV_C1_CDMA_DACC_QACCUM2_I                       1005
  #define NV_C1_PCS_DACC_QACCUM2_I                        1006
  #define NV_C1_GPS_DACC_QACCUM2_I                        1007
  #define NV_C1_CDMA_DACC_QACCUM3_I                       1008
  #define NV_C1_PCS_DACC_QACCUM3_I                        1009
  #define NV_C1_GPS_DACC_QACCUM3_I                        1010
  #define NV_C1_CDMA_DACC_QACCUM4_I                       1011
  #define NV_C1_PCS_DACC_QACCUM4_I                        1012
  #define NV_C1_GPS_DACC_QACCUM4_I                        1013
  #define NV_SMS_GW_CB_SERVICE_TABLE_I                    1014
  #define NV_SMS_GW_CB_SERVICE_TABLE_SIZE_I               1015
  #define NV_SMS_GW_CB_CONFIG_I                           1016
  #define NV_SMS_GW_CB_USER_PREF_I                        1017
  #define NV_CDMA_RX_DIVERSITY_CTRL_I                     1018
  #define NV_LONG_PDPACT_TOLERANCE_FOR_TE_I               1019
  #define NV_C1_CDMA_IM2_Q_VALUE_I                        1020
  #define NV_C1_PCS_IM2_Q_VALUE_I                         1021
  #define NV_C1_CDMA_IM2_I_VALUE_I                        1022
  #define NV_C1_PCS_IM2_I_VALUE_I                         1023
  #define NV_C1_CDMA_IM2_TRANSCONDUCTOR_VALUE_I           1024
  #define NV_C1_PCS_IM2_TRANSCONDUCTOR_VALUE_I            1025
  #define NV_C1_VCO_COARSE_TUNE_TABLE_I                   1026
  #define NV_MDSP_MEM_DUMP_ENABLED_I                      1027
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_14_I              1028
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_15_I             1029
  #define NV_FORCE_UE_SGSNR_R99_I                         1030
  #define NV_FORCE_UE_MSCR_R99_I                          1031
  #define NV_GPS_RF_CONFIG_I                              1032
  #define NV_C1_CDMA_LNA_1_RISE_I                         1033
  #define NV_C1_CDMA_LNA_2_RISE_I                         1034
  #define NV_C1_CDMA_LNA_3_RISE_I                         1035
  #define NV_C1_CDMA_LNA_4_RISE_I                         1036
  #define NV_C1_PCS_LNA_1_RISE_I                          1037
  #define NV_C1_PCS_LNA_2_RISE_I                          1038
  #define NV_C1_PCS_LNA_3_RISE_I                          1039
  #define NV_C1_PCS_LNA_4_RISE_I                          1040
  #define NV_C1_CDMA_LNA_1_FALL_I                         1041
  #define NV_C1_CDMA_LNA_2_FALL_I                         1042
  #define NV_C1_CDMA_LNA_3_FALL_I                         1043
  #define NV_C1_CDMA_LNA_4_FALL_I                         1044
  #define NV_C1_PCS_LNA_1_FALL_I                          1045
  #define NV_C1_PCS_LNA_2_FALL_I                          1046
  #define NV_C1_PCS_LNA_3_FALL_I                          1047
  #define NV_C1_PCS_LNA_4_FALL_I                          1048
  #define NV_C1_CDMA_IM_LEVEL1_I                          1049
  #define NV_C1_CDMA_IM_LEVEL2_I                          1050
  #define NV_C1_CDMA_IM_LEVEL3_I                          1051
  #define NV_C1_CDMA_IM_LEVEL4_I                          1052
  #define NV_C1_PCS_IM_LEVEL1_I                           1053
  #define NV_C1_PCS_IM_LEVEL2_I                           1054
  #define NV_C1_PCS_IM_LEVEL3_I                           1055
  #define NV_C1_PCS_IM_LEVEL4_I                           1056
  #define NV_GSM_1900_CAL_ARFCN_I                         1057
  #define NV_GSM_1900_RX_GAIN_RANGE_1_FREQ_COMP_I         1058
  #define NV_GSM_1900_RX_GAIN_RANGE_2_FREQ_COMP_I         1059
  #define NV_GSM_1900_RX_GAIN_RANGE_3_FREQ_COMP_I         1060
  #define NV_GSM_1900_RX_GAIN_RANGE_4_FREQ_COMP_I         1061
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_00_I         1062
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_01_I         1063
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_02_I         1064
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_03_I         1065
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_04_I         1066
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_05_I         1067
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_06_I         1068
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_07_I         1069
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_08_I         1070
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_09_I         1071
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_10_I         1072
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_11_I         1073
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_12_I         1074
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_13_I         1075
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_14_I         1076
  #define NV_GSM_1900_TX_BURST_RAMP_UP_INDEX_15_I         1077
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_00_I       1078
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_01_I       1079
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_02_I       1080
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_03_I       1081
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_04_I       1082
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_05_I       1083
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_06_I       1084
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_07_I       1085
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_08_I       1086
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_09_I       1087
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_10_I       1088
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_11_I       1089
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_12_I       1090
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_13_I       1091
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_14_I       1092
  #define NV_GSM_1900_TX_BURST_RAMP_DOWN_INDEX_15_I       1093
  #define NV_GSM_1900_PA_GAIN_SLOPE_I                     1094
  #define NV_GSM_1900_TX_FREQ_COMP_I                      1095
  #define NV_GSM_1900_VBATT_HI_PA_COMP_I                  1096
  #define NV_GSM_1900_VBATT_LO_PA_COMP_I                  1097
  #define NV_GSM_1900_PA_START_TIME_OFFSET_I              1098
  #define NV_GSM_1900_PA_STOP_TIME_OFFSET_I               1099
  #define NV_GSM_1900_GAINRANGE_SWITCHPOINTS_I            1100
  #define NV_GSM_850_CAL_ARFCN_I                          1101
  #define NV_GSM_850_RX_GAIN_RANGE_1_FREQ_COMP_I          1102
  #define NV_GSM_850_RX_GAIN_RANGE_2_FREQ_COMP_I          1103
  #define NV_GSM_850_RX_GAIN_RANGE_3_FREQ_COMP_I          1104
  #define NV_GSM_850_RX_GAIN_RANGE_4_FREQ_COMP_I          1105
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_00_I          1106
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_01_I          1107
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_02_I          1108
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_03_I          1109
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_04_I          1110
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_05_I          1111
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_06_I          1112
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_07_I          1113
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_08_I          1114
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_09_I          1115
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_10_I          1116
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_11_I          1117
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_12_I          1118
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_13_I          1119
  #define NV_GSM_850_TX_BURST_RAMP_UP_INDEX_14_I          1120
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_00_I        1121
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_01_I        1122
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_02_I        1123
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_03_I        1124
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_04_I        1125
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_05_I        1126
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_06_I        1127
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_07_I        1128
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_08_I        1129
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_09_I        1130
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_10_I        1131
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_11_I        1132
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_12_I        1133
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_13_I        1134
  #define NV_GSM_850_TX_BURST_RAMP_DOWN_INDEX_14_I        1135
  #define NV_GSM_850_PA_GAIN_SLOPE_I                      1136
  #define NV_GSM_850_TX_FREQ_COMP_I                       1137
  #define NV_GSM_850_VBATT_HI_PA_COMP_I                   1138
  #define NV_GSM_850_VBATT_LO_PA_COMP_I                   1139
  #define NV_GSM_850_PA_START_TIME_OFFSET_I               1140
  #define NV_GSM_850_PA_STOP_TIME_OFFSET_I                1141
  #define NV_GSM_850_GAINRANGE_SWITCHPOINTS_I             1142
  #define NV_WCDMA_1900_VGA_GAIN_OFFSET_I                 1143
  #define NV_WCDMA_1900_VGA_GAIN_OFFSET_VS_FREQ_I         1144
  #define NV_WCDMA_1900_VGA_GAIN_OFFSET_VS_TEMP_I         1145
  #define NV_WCDMA_1900_LNA_RANGE_RISE_2_I                1146
  #define NV_WCDMA_1900_LNA_RANGE_RISE_3_I                1147
  #define NV_WCDMA_1900_LNA_RANGE_FALL_2_I                1148
  #define NV_WCDMA_1900_LNA_RANGE_FALL_3_I                1149
  #define NV_WCDMA_1900_IM_LEVEL_2_I                      1150
  #define NV_WCDMA_1900_IM_LEVEL_3_I                      1151
  #define NV_WCDMA_1900_LNA_RANGE_OFFSET_2_I              1152
  #define NV_WCDMA_1900_LNA_RANGE_OFFSET_3_I              1153
  #define NV_WCDMA_1900_LNA_OFFSET_VS_FREQ_2_I            1154
  #define NV_WCDMA_1900_LNA_OFFSET_VS_FREQ_3_I            1155
  #define NV_WCDMA_1900_IM2_I_VALUE_I                     1156
  #define NV_WCDMA_1900_IM2_Q_VALUE_I                     1157
  #define NV_WCDMA_1900_IM2_TRANSCONDUCTOR_VALUE_I        1158
  #define NV_WCDMA_1900_RX_AGC_MIN_2_I                    1159
  #define NV_WCDMA_1900_RX_AGC_MIN_3_I                    1160
  #define NV_WCDMA_1900_MAX_TX_POWER_I                    1161
  #define NV_WCDMA_1900_OUT_OF_SERVICE_THRESH_I           1162
  #define NV_WCDMA_1900_LNA_RANGE_RISE_I                  1163
  #define NV_WCDMA_1900_LNA_RANGE_FALL_I                  1164
  #define NV_WCDMA_1900_IM_LEVEL_I                        1165
  #define NV_WCDMA_1900_NONBYPASS_TIMER_I                 1166
  #define NV_WCDMA_1900_BYPASS_TIMER_I                    1167
  #define NV_WCDMA_1900_LNA_RANGE_OFFSET_I                1168
  #define NV_WCDMA_1900_LNA_OFFSET_VS_FREQ_I              1169
  #define NV_WCDMA_1900_RX_AGC_MIN_I                      1170
  #define NV_WCDMA_1900_RX_AGC_MAX_I                      1171
  #define NV_WCDMA_1900_AGC_PHASE_OFFSET_I                1172
  #define NV_WCDMA_1900_TX_LIN_MASTER_0_I                 1173
  #define NV_WCDMA_1900_TX_LIN_MASTER_1_I                 1174
  #define NV_WCDMA_1900_TX_COMP_VS_FREQ_0_I               1175
  #define NV_WCDMA_1900_TX_COMP_VS_FREQ_1_I               1176
  #define NV_WCDMA_1900_TX_LIN_VS_TEMP_0_I                1177
  #define NV_WCDMA_1900_TX_LIN_VS_TEMP_1_I                1178
  #define NV_WCDMA_1900_TX_SLP_VS_TEMP_0_I                1179
  #define NV_WCDMA_1900_TX_SLP_VS_TEMP_1_I                1180
  #define NV_WCDMA_1900_R1_RISE_I                         1181
  #define NV_WCDMA_1900_R1_FALL_I                         1182
  #define NV_WCDMA_1900_TX_LIM_VS_TEMP_I                  1183
  #define NV_WCDMA_1900_TX_LIM_VS_FREQ_I                  1184
  #define NV_WCDMA_1900_ADJ_FACTOR_I                      1185
  #define NV_WCDMA_1900_EXP_HDET_VS_AGC_I                 1186
  #define NV_WCDMA_1900_HDET_OFF_I                        1187
  #define NV_WCDMA_1900_HDET_SPN_I                        1188
  #define NV_WCDMA_1900_ENC_BTF_I                         1189
  #define NV_RPLMNACT_I                                   1190
  #define NV_PS_DATA_ORIG_PREF_I                          1191
  #define NV_HDR_AN_AUTH_PASSWD_LONG_I                    1192
  #define NV_DS_MIP_QC_HANDDOWN_TO_1X_OPT_I               1193
  #define NV_HDR_AN_AUTH_USER_ID_LONG_I                   1194
  #define NV_PCS_LNA_BYPASS_TIMER_0_I                     1195
  #define NV_WCDMA_AGC_PA_ON_RISE_DELAY_I                 1196
  #define NV_WCDMA_AGC_PA_ON_FALL_DELAY_I                 1197
  #define NV_WCDMA_AGC_TX_ON_RISE_DELAY_I                 1198
  #define NV_WCDMA_AGC_TX_ON_FALL_DELAY_I                 1199
  #define NV_WCDMA_AGC_UPDATE_TX_AGC_TIME_I               1200
  #define NV_WCDMA_1900_AGC_PA_ON_RISE_DELAY_I            1201
  #define NV_WCDMA_1900_AGC_PA_ON_FALL_DELAY_I            1202
  #define NV_WCDMA_1900_AGC_TX_ON_RISE_DELAY_I            1203
  #define NV_WCDMA_1900_AGC_TX_ON_FALL_DELAY_I            1204
  #define NV_WCDMA_1900_AGC_UPDATE_TX_AGC_TIME_I          1205
  #define NV_PPP_CONFIG_DATA_I                            1206
  #define NV_CELL_1X_OLTA_BACKOFF_I                       1207
  #define NV_CELL_HDR_OLTA_BACKOFF_I                      1208
  #define NV_PCS_OLTA_BACKOFF_I                           1209
  #define NV_BC6_TX_LIM_VS_TEMP_I                         1210
  #define NV_C0_BC6_RX_CAL_CHAN_I                         1211
  #define NV_BC6_TX_LIN_MASTER0_I                         1212
  #define NV_BC6_TX_LIN_MASTER1_I                         1213
  #define NV_BC6_TX_COMP0_I                               1214
  #define NV_BC6_TX_COMP1_I                               1215
  #define NV_BC6_TX_LIM_VS_FREQ_I                         1216
  #define NV_BC6_EXP_HDET_VS_AGC_I                        1217
  #define NV_BC6_HDET_OFF_I                               1218
  #define NV_BC6_HDET_SPN_I                               1219
  #define NV_BC6_PA_R1_RISE_I                             1220
  #define NV_BC6_PA_R1_FALL_I                             1221
  #define NV_BC6_LNA_RANGE_POL_I                          1222
  #define NV_BC6_LNA_1_RISE_I                             1223
  #define NV_BC6_LNA_1_FALL_I                             1224
  #define NV_C0_BC6_LNA_RANGE_OFFSET_I                    1225
  #define NV_C1_BC6_LNA_RANGE_OFFSET_I                    1226
  #define NV_BC6_LNA_2_RISE_I                             1227
  #define NV_BC6_LNA_2_FALL_I                             1228
  #define NV_BC6_LNA_RANGE_12_OFFSET_I                    1229
  #define NV_C0_BC6_IM_LEVEL1_I                           1230
  #define NV_C0_BC6_IM_LEVEL2_I                           1231
  #define NV_C0_BC6_IM_LEVEL3_I                           1232
  #define NV_C0_BC6_IM_LEVEL4_I                           1233
  #define NV_C0_BC6_LNA_1_OFFSET_VS_FREQ_I                1234
  #define NV_C1_BC6_LNA_1_OFFSET_VS_FREQ_I                1235
  #define NV_BC6_AGC_PHASE_OFFSET_I                       1236
  #define NV_BC6_ADJ_FACTOR_I                             1237
  #define NV_BC6_RX_AGC_MINMAX_I                          1238
  #define NV_BC6_RX_AGC_MIN_11_I                          1239
  #define NV_BC6_ENC_BTF_I                                1240
  #define NV_BC6_TX_GAIN_ATTEN_LIMIT_I                    1241
  #define NV_BC6_LNA_3_FALL_I                             1242
  #define NV_BC6_LNA_3_RISE_I                             1243
  #define NV_BC6_LNA_3_OFFSET_I                           1244
  #define NV_C0_BC6_LNA_3_OFFSET_VS_FREQ_I                1245
  #define NV_C1_BC6_LNA_3_OFFSET_VS_FREQ_I                1246
  #define NV_BC6_LNA_4_FALL_I                             1247
  #define NV_BC6_LNA_4_RISE_I                             1248
  #define NV_C0_BC6_LNA_4_OFFSET_I                        1249
  #define NV_C1_BC6_LNA_4_OFFSET_I                        1250
  #define NV_C0_BC6_IM2_I_VALUE_I                         1251
  #define NV_C1_BC6_IM2_I_VALUE_I                         1252
  #define NV_C0_BC6_IM2_Q_VALUE_I                         1253
  #define NV_C1_BC6_IM2_Q_VALUE_I                         1254
  #define NV_C0_BC6_VGA_GAIN_OFFSET_I                     1255
  #define NV_C1_BC6_VGA_GAIN_OFFSET_I                     1256
  #define NV_C0_BC6_VGA_GAIN_OFFSET_VS_FREQ_I             1257
  #define NV_C1_BC6_VGA_GAIN_OFFSET_VS_FREQ_I             1258
  #define NV_C0_BC6_VGA_GAIN_OFFSET_VS_TEMP_I             1259
  #define NV_C1_BC6_VGA_GAIN_OFFSET_VS_TEMP_I             1260
  #define NV_BC6_P1_RISE_FALL_OFF_I                       1261
  #define NV_C0_BC6_LNA_4_OFFSET_VS_FREQ_I                1262
  #define NV_C1_BC6_LNA_4_OFFSET_VS_FREQ_I                1263
  #define NV_C0_BC6_P1_RISE_FALL_OFFSET_I                 1264
  #define NV_C1_BC6_P1_RISE_FALL_OFFSET_I                 1265
  #define NV_C0_BC6_DIGITAL_MIS_COMP_A_OFFSET_I           1266
  #define NV_C1_BC6_DIGITAL_MIS_COMP_A_OFFSET_I           1267
  #define NV_C0_BC6_DIGITAL_MIS_COMP_B_OFFSET_I           1268
  #define NV_C1_BC6_DIGITAL_MIS_COMP_B_OFFSET_I           1269
  #define NV_C0_BC6_IM2_TRANSCONDUCTOR_VALUE_I            1270
  #define NV_C1_BC6_IM2_TRANSCONDUCTOR_VALUE_I            1271
  #define NV_BC6_VCO_COARSE_TUNE_TABLE_I                  1272
  #define NV_GSM_PA_TEMP_COMP_INDEX_00_I                  1273
  #define NV_GSM_PA_TEMP_COMP_INDEX_01_I                  1274
  #define NV_GSM_PA_TEMP_COMP_INDEX_02_I                  1275
  #define NV_GSM_PA_TEMP_COMP_INDEX_03_I                  1276
  #define NV_GSM_PA_TEMP_COMP_INDEX_04_I                  1277
  #define NV_GSM_PA_TEMP_COMP_INDEX_05_I                  1278
  #define NV_GSM_PA_TEMP_COMP_INDEX_06_I                  1279
  #define NV_GSM_PA_TEMP_COMP_INDEX_07_I                  1280
  #define NV_GSM_PA_TEMP_COMP_INDEX_08_I                  1281
  #define NV_GSM_PA_TEMP_COMP_INDEX_09_I                  1282
  #define NV_GSM_PA_TEMP_COMP_INDEX_10_I                  1283
  #define NV_GSM_PA_TEMP_COMP_INDEX_11_I                  1284
  #define NV_GSM_PA_TEMP_COMP_INDEX_12_I                  1285
  #define NV_GSM_PA_TEMP_COMP_INDEX_13_I                  1286
  #define NV_DCS_PA_TEMP_COMP_INDEX_00_I                  1287
  #define NV_DCS_PA_TEMP_COMP_INDEX_01_I                  1288
  #define NV_DCS_PA_TEMP_COMP_INDEX_02_I                  1289
  #define NV_DCS_PA_TEMP_COMP_INDEX_03_I                  1290
  #define NV_DCS_PA_TEMP_COMP_INDEX_04_I                  1291
  #define NV_DCS_PA_TEMP_COMP_INDEX_05_I                  1292
  #define NV_DCS_PA_TEMP_COMP_INDEX_06_I                  1293
  #define NV_DCS_PA_TEMP_COMP_INDEX_07_I                  1294
  #define NV_DCS_PA_TEMP_COMP_INDEX_08_I                  1295
  #define NV_DCS_PA_TEMP_COMP_INDEX_09_I                  1296
  #define NV_DCS_PA_TEMP_COMP_INDEX_10_I                  1297
  #define NV_DCS_PA_TEMP_COMP_INDEX_11_I                  1298
  #define NV_DCS_PA_TEMP_COMP_INDEX_12_I                  1299
  #define NV_DCS_PA_TEMP_COMP_INDEX_13_I                  1300
  #define NV_DCS_PA_TEMP_COMP_INDEX_14_I                  1301
  #define NV_GSM_AMR_CALL_CONFIG_I                        1302
  #define NV_GSM_PA_TEMP_COMP_INT8_INDEX_14_I             1303
  #define NV_DCS_PA_TEMP_COMP_INT8_INDEX_15_I             1304
  #define NV_GMM_PTMSI_SIG_TOBE_DELETED_I                 1305
  #define NV_C0_BC6_TX_CAL_CHAN_I                         1306
  #define NV_CDMA_TX_CAL_CHAN_I                           1307
  #define NV_CDMA_RX_CAL_CHAN_I                           1308
  #define NV_PCS_RX_CAL_CHAN_I                            1309
  #define NV_PCS_TX_CAL_CHAN_I                            1310
  #define NV_SEC_DEVICE_KEY_I                             1311
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_00_I              1312
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_01_I              1313
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_02_I              1314
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_03_I              1315
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_04_I              1316
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_05_I              1317
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_06_I              1318
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_07_I              1319
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_08_I              1320
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_09_I              1321
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_10_I              1322
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_11_I              1323
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_12_I              1324
  #define NV_GSM_850_PA_TEMP_COMP_INDEX_13_I              1325
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_00_I             1326
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_01_I             1327
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_02_I             1328
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_03_I             1329
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_04_I             1330
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_05_I             1331
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_06_I             1332
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_07_I             1333
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_08_I             1334
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_09_I             1335
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_10_I             1336
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_11_I             1337
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_12_I             1338
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_13_I             1339
  #define NV_GSM_1900_PA_TEMP_COMP_INDEX_14_I             1340
  #define NV_TCP_GRACEFUL_DORMANT_CLOSE_I                 1341
  #define NV_INTERFREQ_ENABLED_I                          1342
  #define NV_EPLMN_ENABLED_I                              1343
  #define NV_DTMF_I                                       1344
  #define NV_TRK_LO_ADJ_DEFAULT_I                         1345
  #define NV_TRK_LO_ADJ_SLOPE_DEFAULT_I                   1346
  #define NV_WCDMA_PA_GAIN_UP_TIME_I                      1347
  #define NV_WCDMA_PA_GAIN_DOWN_TIME_I                    1348
  #define NV_BC6_GPS1_RF_DELAY_I                          1349
  #define NV_BC6_RF_TUNE_RESERVED_I                       1350
  #define NV_BC6_TX_LIN_MASTER2_I                         1351
  #define NV_BC6_TX_LIN_MASTER3_I                         1352
  #define NV_BC6_TX_COMP2_I                               1353
  #define NV_BC6_TX_COMP3_I                               1354
  #define NV_BC6_PA_R2_RISE_I                             1355
  #define NV_BC6_PA_R2_FALL_I                             1356
  #define NV_BC6_PA_R3_RISE_I                             1357
  #define NV_BC6_PA_R3_FALL_I                             1358
  #define NV_C0_BC6_LNA_2_OFFSET_VS_FREQ_I                1359
  #define NV_C0_BC6_LNA_1_OFFSET_I                        1360
  #define NV_C0_BC6_LNA_2_OFFSET_I                        1361
  #define NV_C0_BC6_LNA_3_OFFSET_I                        1362
  #define NV_C0_BC6_LNA_1_RISE_I                          1363
  #define NV_C0_BC6_LNA_1_FALL_I                          1364
  #define NV_C0_BC6_LNA_2_RISE_I                          1365
  #define NV_C0_BC6_LNA_2_FALL_I                          1366
  #define NV_C0_BC6_LNA_3_RISE_I                          1367
  #define NV_C0_BC6_LNA_3_FALL_I                          1368
  #define NV_C0_BC6_LNA_4_RISE_I                          1369
  #define NV_C0_BC6_LNA_4_FALL_I                          1370
  #define NV_C1_BC6_TX_CAL_CHAN_I                         1371
  #define NV_C1_BC6_RX_CAL_CHAN_I                         1372
  #define NV_C1_BC6_LNA_2_OFFSET_VS_FREQ_I                1373
  #define NV_C1_BC6_LNA_1_OFFSET_I                        1374
  #define NV_C1_BC6_LNA_2_OFFSET_I                        1375
  #define NV_C1_BC6_LNA_3_OFFSET_I                        1376
  #define NV_C1_BC6_LNA_1_RISE_I                          1377
  #define NV_C1_BC6_LNA_1_FALL_I                          1378
  #define NV_C1_BC6_LNA_2_RISE_I                          1379
  #define NV_C1_BC6_LNA_2_FALL_I                          1380
  #define NV_C1_BC6_LNA_3_RISE_I                          1381
  #define NV_C1_BC6_LNA_3_FALL_I                          1382
  #define NV_C1_BC6_LNA_4_RISE_I                          1383
  #define NV_C1_BC6_LNA_4_FALL_I                          1384
  #define NV_C1_BC6_IM_LEVEL1_I                           1385
  #define NV_C1_BC6_IM_LEVEL2_I                           1386
  #define NV_C1_BC6_IM_LEVEL3_I                           1387
  #define NV_C1_BC6_IM_LEVEL4_I                           1388
  #define NV_BC5_GPS1_RF_DELAY_I                          1389
  #define NV_BC5_RF_TUNE_RESERVED_I                       1390
  #define NV_BC5_TX_LIM_VS_TEMP_I                         1391
  #define NV_BC5_TX_LIN_MASTER0_I                         1392
  #define NV_BC5_TX_LIN_MASTER1_I                         1393
  #define NV_BC5_TX_LIN_MASTER2_I                         1394
  #define NV_BC5_TX_LIN_MASTER3_I                         1395
  #define NV_BC5_TX_COMP0_I                               1396
  #define NV_BC5_TX_COMP1_I                               1397
  #define NV_BC5_TX_COMP2_I                               1398
  #define NV_BC5_TX_COMP3_I                               1399
  #define NV_BC5_TX_LIM_VS_FREQ_I                         1400
  #define NV_BC5_PA_R1_RISE_I                             1401
  #define NV_BC5_PA_R1_FALL_I                             1402
  #define NV_BC5_PA_R2_RISE_I                             1403
  #define NV_BC5_PA_R2_FALL_I                             1404
  #define NV_BC5_PA_R3_RISE_I                             1405
  #define NV_BC5_PA_R3_FALL_I                             1406
  #define NV_BC5_HDET_OFF_I                               1407
  #define NV_BC5_HDET_SPN_I                               1408
  #define NV_BC5_EXP_HDET_VS_AGC_I                        1409
  #define NV_BC5_ENC_BTF_I                                1410
  #define NV_BC5_VCO_COARSE_TUNE_TABLE_I                  1411
  #define NV_BC5_P1_RISE_FALL_OFF_I                       1412
  #define NV_C0_BC5_TX_CAL_CHAN_I                         1413
  #define NV_C0_BC5_RX_CAL_CHAN_I                         1414
  #define NV_C0_BC5_LNA_1_OFFSET_VS_FREQ_I                1415
  #define NV_C0_BC5_LNA_2_OFFSET_VS_FREQ_I                1416
  #define NV_C0_BC5_LNA_3_OFFSET_VS_FREQ_I                1417
  #define NV_C0_BC5_LNA_4_OFFSET_VS_FREQ_I                1418
  #define NV_C0_BC5_LNA_1_OFFSET_I                        1419
  #define NV_C0_BC5_LNA_2_OFFSET_I                        1420
  #define NV_C0_BC5_LNA_3_OFFSET_I                        1421
  #define NV_C0_BC5_LNA_4_OFFSET_I                        1422
  #define NV_C0_BC5_IM2_I_VALUE_I                         1423
  #define NV_C0_BC5_IM2_Q_VALUE_I                         1424
  #define NV_C0_BC5_VGA_GAIN_OFFSET_I                     1425
  #define NV_C0_BC5_VGA_GAIN_OFFSET_VS_FREQ_I             1426
  #define NV_C0_BC5_IM2_TRANSCONDUCTOR_VALUE_I            1427
  #define NV_C0_BC5_LNA_1_RISE_I                          1428
  #define NV_C0_BC5_LNA_1_FALL_I                          1429
  #define NV_C0_BC5_LNA_2_RISE_I                          1430
  #define NV_C0_BC5_LNA_2_FALL_I                          1431
  #define NV_C0_BC5_LNA_3_RISE_I                          1432
  #define NV_C0_BC5_LNA_3_FALL_I                          1433
  #define NV_C0_BC5_LNA_4_RISE_I                          1434
  #define NV_C0_BC5_LNA_4_FALL_I                          1435
  #define NV_C0_BC5_IM_LEVEL1_I                           1436
  #define NV_C0_BC5_IM_LEVEL2_I                           1437
  #define NV_C0_BC5_IM_LEVEL3_I                           1438
  #define NV_C0_BC5_IM_LEVEL4_I                           1439
  #define NV_C1_BC5_TX_CAL_CHAN_I                         1440
  #define NV_C1_BC5_RX_CAL_CHAN_I                         1441
  #define NV_C1_BC5_LNA_1_OFFSET_VS_FREQ_I                1442
  #define NV_C1_BC5_LNA_2_OFFSET_VS_FREQ_I                1443
  #define NV_C1_BC5_LNA_3_OFFSET_VS_FREQ_I                1444
  #define NV_C1_BC5_LNA_4_OFFSET_VS_FREQ_I                1445
  #define NV_C1_BC5_LNA_1_OFFSET_I                        1446
  #define NV_C1_BC5_LNA_2_OFFSET_I                        1447
  #define NV_C1_BC5_LNA_3_OFFSET_I                        1448
  #define NV_C1_BC5_LNA_4_OFFSET_I                        1449
  #define NV_C1_BC5_IM2_I_VALUE_I                         1450
  #define NV_C1_BC5_IM2_Q_VALUE_I                         1451
  #define NV_C1_BC5_VGA_GAIN_OFFSET_I                     1452
  #define NV_C1_BC5_VGA_GAIN_OFFSET_VS_FREQ_I             1453
  #define NV_C1_BC5_IM2_TRANSCONDUCTOR_VALUE_I            1454
  #define NV_C1_BC5_LNA_1_RISE_I                          1455
  #define NV_C1_BC5_LNA_1_FALL_I                          1456
  #define NV_C1_BC5_LNA_2_RISE_I                          1457
  #define NV_C1_BC5_LNA_2_FALL_I                          1458
  #define NV_C1_BC5_LNA_3_RISE_I                          1459
  #define NV_C1_BC5_LNA_3_FALL_I                          1460
  #define NV_C1_BC5_LNA_4_RISE_I                          1461
  #define NV_C1_BC5_LNA_4_FALL_I                          1462
  #define NV_C1_BC5_IM_LEVEL1_I                           1463
  #define NV_C1_BC5_IM_LEVEL2_I                           1464
  #define NV_C1_BC5_IM_LEVEL3_I                           1465
  #define NV_C1_BC5_IM_LEVEL4_I                           1466
  #define NV_BC4_GPS1_RF_DELAY_I                          1467
  #define NV_BC4_RF_TUNE_RESERVED_I                       1468
  #define NV_BC4_TX_LIM_VS_TEMP_I                         1469
  #define NV_BC4_TX_LIN_MASTER0_I                         1470
  #define NV_BC4_TX_LIN_MASTER1_I                         1471
  #define NV_BC4_TX_LIN_MASTER2_I                         1472
  #define NV_BC4_TX_LIN_MASTER3_I                         1473
  #define NV_BC4_TX_COMP0_I                               1474
  #define NV_BC4_TX_COMP1_I                               1475
  #define NV_BC4_TX_COMP2_I                               1476
  #define NV_BC4_TX_COMP3_I                               1477
  #define NV_BC4_TX_LIM_VS_FREQ_I                         1478
  #define NV_BC4_PA_R1_RISE_I                             1479
  #define NV_BC4_PA_R1_FALL_I                             1480
  #define NV_BC4_PA_R2_RISE_I                             1481
  #define NV_BC4_PA_R2_FALL_I                             1482
  #define NV_BC4_PA_R3_RISE_I                             1483
  #define NV_BC4_PA_R3_FALL_I                             1484
  #define NV_BC4_HDET_OFF_I                               1485
  #define NV_BC4_HDET_SPN_I                               1486
  #define NV_BC4_EXP_HDET_VS_AGC_I                        1487
  #define NV_BC4_ENC_BTF_I                                1488
  #define NV_BC4_VCO_COARSE_TUNE_TABLE_I                  1489
  #define NV_BC4_P1_RISE_FALL_OFF_I                       1490
  #define NV_C0_BC4_TX_CAL_CHAN_I                         1491
  #define NV_C0_BC4_RX_CAL_CHAN_I                         1492
  #define NV_C0_BC4_LNA_1_OFFSET_VS_FREQ_I                1493
  #define NV_C0_BC4_LNA_2_OFFSET_VS_FREQ_I                1494
  #define NV_C0_BC4_LNA_3_OFFSET_VS_FREQ_I                1495
  #define NV_C0_BC4_LNA_4_OFFSET_VS_FREQ_I                1496
  #define NV_C0_BC4_LNA_1_OFFSET_I                        1497
  #define NV_C0_BC4_LNA_2_OFFSET_I                        1498
  #define NV_C0_BC4_LNA_3_OFFSET_I                        1499
  #define NV_C0_BC4_LNA_4_OFFSET_I                        1500
  #define NV_C0_BC4_IM2_I_VALUE_I                         1501
  #define NV_C0_BC4_IM2_Q_VALUE_I                         1502
  #define NV_C0_BC4_VGA_GAIN_OFFSET_I                     1503
  #define NV_C0_BC4_VGA_GAIN_OFFSET_VS_FREQ_I             1504
  #define NV_C0_BC4_IM2_TRANSCONDUCTOR_VALUE_I            1505
  #define NV_C0_BC4_LNA_1_RISE_I                          1506
  #define NV_C0_BC4_LNA_1_FALL_I                          1507
  #define NV_C0_BC4_LNA_2_RISE_I                          1508
  #define NV_C0_BC4_LNA_2_FALL_I                          1509
  #define NV_C0_BC4_LNA_3_RISE_I                          1510
  #define NV_C0_BC4_LNA_3_FALL_I                          1511
  #define NV_C0_BC4_LNA_4_RISE_I                          1512
  #define NV_C0_BC4_LNA_4_FALL_I                          1513
  #define NV_C0_BC4_IM_LEVEL1_I                           1514
  #define NV_C0_BC4_IM_LEVEL2_I                           1515
  #define NV_C0_BC4_IM_LEVEL3_I                           1516
  #define NV_C0_BC4_IM_LEVEL4_I                           1517
  #define NV_C1_BC4_TX_CAL_CHAN_I                         1518
  #define NV_C1_BC4_RX_CAL_CHAN_I                         1519
  #define NV_C1_BC4_LNA_1_OFFSET_VS_FREQ_I                1520
  #define NV_C1_BC4_LNA_2_OFFSET_VS_FREQ_I                1521
  #define NV_C1_BC4_LNA_3_OFFSET_VS_FREQ_I                1522
  #define NV_C1_BC4_LNA_4_OFFSET_VS_FREQ_I                1523
  #define NV_C1_BC4_LNA_1_OFFSET_I                        1524
  #define NV_C1_BC4_LNA_2_OFFSET_I                        1525
  #define NV_C1_BC4_LNA_3_OFFSET_I                        1526
  #define NV_C1_BC4_LNA_4_OFFSET_I                        1527
  #define NV_C1_BC4_IM2_I_VALUE_I                         1528
  #define NV_C1_BC4_IM2_Q_VALUE_I                         1529
  #define NV_C1_BC4_VGA_GAIN_OFFSET_I                     1530
  #define NV_C1_BC4_VGA_GAIN_OFFSET_VS_FREQ_I             1531
  #define NV_C1_BC4_IM2_TRANSCONDUCTOR_VALUE_I            1532
  #define NV_C1_BC4_LNA_1_RISE_I                          1533
  #define NV_C1_BC4_LNA_1_FALL_I                          1534
  #define NV_C1_BC4_LNA_2_RISE_I                          1535
  #define NV_C1_BC4_LNA_2_FALL_I                          1536
  #define NV_C1_BC4_LNA_3_RISE_I                          1537
  #define NV_C1_BC4_LNA_3_FALL_I                          1538
  #define NV_C1_BC4_LNA_4_RISE_I                          1539
  #define NV_C1_BC4_LNA_4_FALL_I                          1540
  #define NV_C1_BC4_IM_LEVEL1_I                           1541
  #define NV_C1_BC4_IM_LEVEL2_I                           1542
  #define NV_C1_BC4_IM_LEVEL3_I                           1543
  #define NV_C1_BC4_IM_LEVEL4_I                           1544
  #define NV_BC3_GPS1_RF_DELAY_I                          1545
  #define NV_BC3_RF_TUNE_RESERVED_I                       1546
  #define NV_BC3_TX_LIM_VS_TEMP_I                         1547
  #define NV_BC3_TX_LIN_MASTER0_I                         1548
  #define NV_BC3_TX_LIN_MASTER1_I                         1549
  #define NV_BC3_TX_LIN_MASTER2_I                         1550
  #define NV_BC3_TX_LIN_MASTER3_I                         1551
  #define NV_BC3_TX_COMP0_I                               1552
  #define NV_BC3_TX_COMP1_I                               1553
  #define NV_BC3_TX_COMP2_I                               1554
  #define NV_BC3_TX_COMP3_I                               1555
  #define NV_BC3_TX_LIM_VS_FREQ_I                         1557
  #define NV_BC3_PA_R1_RISE_I                             1558
  #define NV_BC3_PA_R1_FALL_I                             1559
  #define NV_BC3_PA_R2_RISE_I                             1560
  #define NV_BC3_PA_R2_FALL_I                             1561
  #define NV_BC3_PA_R3_RISE_I                             1562
  #define NV_BC3_PA_R3_FALL_I                             1563
  #define NV_BC3_HDET_OFF_I                               1564
  #define NV_BC3_HDET_SPN_I                               1565
  #define NV_BC3_EXP_HDET_VS_AGC_I                        1566
  #define NV_BC3_ENC_BTF_I                                1567
  #define NV_BC3_VCO_COARSE_TUNE_TABLE_I                  1568
  #define NV_BC3_P1_RISE_FALL_OFF_I                       1569
  #define NV_C0_BC3_TX_CAL_CHAN_I                         1570
  #define NV_C0_BC3_RX_CAL_CHAN_I                         1571
  #define NV_C0_BC3_LNA_1_OFFSET_VS_FREQ_I                1572
  #define NV_C0_BC3_LNA_2_OFFSET_VS_FREQ_I                1573
  #define NV_C0_BC3_LNA_3_OFFSET_VS_FREQ_I                1574
  #define NV_C0_BC3_LNA_4_OFFSET_VS_FREQ_I                1575
  #define NV_C0_BC3_LNA_1_OFFSET_I                        1576
  #define NV_C0_BC3_LNA_2_OFFSET_I                        1577
  #define NV_C0_BC3_LNA_3_OFFSET_I                        1578
  #define NV_C0_BC3_LNA_4_OFFSET_I                        1579
  #define NV_C0_BC3_IM2_I_VALUE_I                         1580
  #define NV_C0_BC3_IM2_Q_VALUE_I                         1581
  #define NV_C0_BC3_VGA_GAIN_OFFSET_I                     1582
  #define NV_C0_BC3_VGA_GAIN_OFFSET_VS_FREQ_I             1583
  #define NV_C0_BC3_IM2_TRANSCONDUCTOR_VALUE_I            1584
  #define NV_C0_BC3_LNA_1_RISE_I                          1585
  #define NV_C0_BC3_LNA_1_FALL_I                          1586
  #define NV_C0_BC3_LNA_2_RISE_I                          1587
  #define NV_C0_BC3_LNA_2_FALL_I                          1588
  #define NV_C0_BC3_LNA_3_RISE_I                          1589
  #define NV_C0_BC3_LNA_3_FALL_I                          1590
  #define NV_C0_BC3_LNA_4_RISE_I                          1591
  #define NV_C0_BC3_LNA_4_FALL_I                          1592
  #define NV_C0_BC3_IM_LEVEL1_I                           1593
  #define NV_C0_BC3_IM_LEVEL2_I                           1594
  #define NV_C0_BC3_IM_LEVEL3_I                           1595
  #define NV_C0_BC3_IM_LEVEL4_I                           1596
  #define NV_C1_BC3_TX_CAL_CHAN_I                         1597
  #define NV_C1_BC3_RX_CAL_CHAN_I                         1598
  #define NV_C1_BC3_LNA_1_OFFSET_VS_FREQ_I                1599
  #define NV_C1_BC3_LNA_2_OFFSET_VS_FREQ_I                1600
  #define NV_C1_BC3_LNA_3_OFFSET_VS_FREQ_I                1601
  #define NV_C1_BC3_LNA_4_OFFSET_VS_FREQ_I                1602
  #define NV_C1_BC3_LNA_1_OFFSET_I                        1603
  #define NV_C1_BC3_LNA_2_OFFSET_I                        1604
  #define NV_C1_BC3_LNA_3_OFFSET_I                        1605
  #define NV_C1_BC3_LNA_4_OFFSET_I                        1606
  #define NV_C1_BC3_IM2_I_VALUE_I                         1607
  #define NV_C1_BC3_IM2_Q_VALUE_I                         1608
  #define NV_C1_BC3_VGA_GAIN_OFFSET_I                     1609
  #define NV_C1_BC3_VGA_GAIN_OFFSET_VS_FREQ_I             1610
  #define NV_C1_BC3_IM2_TRANSCONDUCTOR_VALUE_I            1611
  #define NV_C1_BC3_LNA_1_RISE_I                          1612
  #define NV_C1_BC3_LNA_1_FALL_I                          1613
  #define NV_C1_BC3_LNA_2_RISE_I                          1614
  #define NV_C1_BC3_LNA_2_FALL_I                          1615
  #define NV_C1_BC3_LNA_3_RISE_I                          1616
  #define NV_C1_BC3_LNA_3_FALL_I                          1617
  #define NV_C1_BC3_LNA_4_RISE_I                          1618
  #define NV_C1_BC3_LNA_4_FALL_I                          1619
  #define NV_C1_BC3_IM_LEVEL1_I                           1620
  #define NV_C1_BC3_IM_LEVEL2_I                           1621
  #define NV_C1_BC3_IM_LEVEL3_I                           1622
  #define NV_C1_BC3_IM_LEVEL4_I                           1623
  #define NV_BC1_GPS1_RF_DELAY_I                          1624
  #define NV_BC1_RF_TUNE_RESERVED_I                       1625
  #define NV_BC1_TX_LIM_VS_TEMP_I                         1626
  #define NV_BC1_TX_LIN_MASTER0_I                         1627
  #define NV_BC1_TX_LIN_MASTER1_I                         1628
  #define NV_BC1_TX_LIN_MASTER2_I                         1629
  #define NV_BC1_TX_LIN_MASTER3_I                         1630
  #define NV_BC1_TX_COMP0_I                               1631
  #define NV_BC1_TX_COMP1_I                               1632
  #define NV_BC1_TX_COMP2_I                               1633
  #define NV_BC1_TX_COMP3_I                               1634
  #define NV_BC1_TX_LIM_VS_FREQ_I                         1635
  #define NV_BC1_PA_R1_RISE_I                             1636
  #define NV_BC1_PA_R1_FALL_I                             1637
  #define NV_BC1_PA_R2_RISE_I                             1638
  #define NV_BC1_PA_R2_FALL_I                             1639
  #define NV_BC1_PA_R3_RISE_I                             1640
  #define NV_BC1_PA_R3_FALL_I                             1641
  #define NV_BC1_HDET_OFF_I                               1642
  #define NV_BC1_HDET_SPN_I                               1643
  #define NV_BC1_EXP_HDET_VS_AGC_I                        1644
  #define NV_BC1_ENC_BTF_I                                1645
  #define NV_BC1_VCO_COARSE_TUNE_TABLE_I                  1646
  #define NV_BC1_P1_RISE_FALL_OFF_I                       1647
  #define NV_C0_BC1_TX_CAL_CHAN_I                         1648
  #define NV_C0_BC1_RX_CAL_CHAN_I                         1649
  #define NV_C0_BC1_LNA_1_OFFSET_VS_FREQ_I                1650
  #define NV_C0_BC1_LNA_2_OFFSET_VS_FREQ_I                1651
  #define NV_C0_BC1_LNA_3_OFFSET_VS_FREQ_I                1652
  #define NV_C0_BC1_LNA_4_OFFSET_VS_FREQ_I                1653
  #define NV_C0_BC1_LNA_1_OFFSET_I                        1654
  #define NV_C0_BC1_LNA_2_OFFSET_I                        1655
  #define NV_C0_BC1_LNA_3_OFFSET_I                        1666
  #define NV_C0_BC1_LNA_4_OFFSET_I                        1667
  #define NV_C0_BC1_IM2_I_VALUE_I                         1668
  #define NV_C0_BC1_IM2_Q_VALUE_I                         1669
  #define NV_C0_BC1_VGA_GAIN_OFFSET_I                     1670
  #define NV_C0_BC1_VGA_GAIN_OFFSET_VS_FREQ_I             1671
  #define NV_C0_BC1_IM2_TRANSCONDUCTOR_VALUE_I            1672
  #define NV_C0_BC1_LNA_1_RISE_I                          1673
  #define NV_C0_BC1_LNA_1_FALL_I                          1674
  #define NV_C0_BC1_LNA_2_RISE_I                          1675
  #define NV_C0_BC1_LNA_2_FALL_I                          1676
  #define NV_C0_BC1_LNA_3_RISE_I                          1677
  #define NV_C0_BC1_LNA_3_FALL_I                          1678
  #define NV_C0_BC1_LNA_4_RISE_I                          1679
  #define NV_C0_BC1_LNA_4_FALL_I                          1680
  #define NV_C0_BC1_IM_LEVEL1_I                           1681
  #define NV_C0_BC1_IM_LEVEL2_I                           1682
  #define NV_C0_BC1_IM_LEVEL3_I                           1683
  #define NV_C0_BC1_IM_LEVEL4_I                           1684
  #define NV_C1_BC1_TX_CAL_CHAN_I                         1685
  #define NV_C1_BC1_RX_CAL_CHAN_I                         1686
  #define NV_C1_BC1_LNA_1_OFFSET_VS_FREQ_I                1687
  #define NV_C1_BC1_LNA_2_OFFSET_VS_FREQ_I                1689
  #define NV_C1_BC1_LNA_3_OFFSET_VS_FREQ_I                1690
  #define NV_C1_BC1_LNA_4_OFFSET_VS_FREQ_I                1691
  #define NV_C1_BC1_LNA_1_OFFSET_I                        1692
  #define NV_C1_BC1_LNA_2_OFFSET_I                        1693
  #define NV_C1_BC1_LNA_3_OFFSET_I                        1694
  #define NV_C1_BC1_LNA_4_OFFSET_I                        1695
  #define NV_C1_BC1_IM2_I_VALUE_I                         1696
  #define NV_C1_BC1_IM2_Q_VALUE_I                         1697
  #define NV_C1_BC1_VGA_GAIN_OFFSET_I                     1698
  #define NV_C1_BC1_VGA_GAIN_OFFSET_VS_FREQ_I             1699
  #define NV_C1_BC1_IM2_TRANSCONDUCTOR_VALUE_I            1700
  #define NV_C1_BC1_LNA_1_RISE_I                          1701
  #define NV_C1_BC1_LNA_1_FALL_I                          1702
  #define NV_C1_BC1_LNA_2_RISE_I                          1703
  #define NV_C1_BC1_LNA_2_FALL_I                          1704
  #define NV_C1_BC1_LNA_3_RISE_I                          1705
  #define NV_C1_BC1_LNA_3_FALL_I                          1706
  #define NV_C1_BC1_LNA_4_RISE_I                          1707
  #define NV_C1_BC1_LNA_4_FALL_I                          1708
  #define NV_C1_BC1_IM_LEVEL1_I                           1709
  #define NV_C1_BC1_IM_LEVEL2_I                           1710
  #define NV_C1_BC1_IM_LEVEL3_I                           1711
  #define NV_C1_BC1_IM_LEVEL4_I                           1712
  #define NV_BC0_GPS1_RF_DELAY_I                          1713
  #define NV_BC0_RF_TUNE_RESERVED_I                       1714
  #define NV_BC0_TX_LIM_VS_TEMP_I                         1715
  #define NV_BC0_TX_LIN_MASTER0_I                         1716
  #define NV_BC0_TX_LIN_MASTER1_I                         1717
  #define NV_BC0_TX_LIN_MASTER2_I                         1718
  #define NV_BC0_TX_LIN_MASTER3_I                         1719
  #define NV_BC0_TX_COMP0_I                               1720
  #define NV_BC0_TX_COMP1_I                               1721
  #define NV_BC0_TX_COMP2_I                               1722
  #define NV_BC0_TX_COMP3_I                               1723
  #define NV_BC0_TX_LIM_VS_FREQ_I                         1724
  #define NV_BC0_PA_R1_RISE_I                             1725
  #define NV_BC0_PA_R1_FALL_I                             1726
  #define NV_BC0_PA_R2_RISE_I                             1727
  #define NV_BC0_PA_R2_FALL_I                             1728
  #define NV_BC0_PA_R3_RISE_I                             1729
  #define NV_BC0_PA_R3_FALL_I                             1730
  #define NV_BC0_HDET_OFF_I                               1731
  #define NV_BC0_HDET_SPN_I                               1732
  #define NV_BC0_EXP_HDET_VS_AGC_I                        1733
  #define NV_BC0_ENC_BTF_I                                1734
  #define NV_BC0_VCO_COARSE_TUNE_TABLE_I                  1735
  #define NV_BC0_P1_RISE_FALL_OFF_I                       1736
  #define NV_C0_BC0_TX_CAL_CHAN_I                         1737
  #define NV_C0_BC0_RX_CAL_CHAN_I                         1738
  #define NV_C0_BC0_LNA_1_OFFSET_VS_FREQ_I                1739
  #define NV_C0_BC0_LNA_2_OFFSET_VS_FREQ_I                1740
  #define NV_C0_BC0_LNA_3_OFFSET_VS_FREQ_I                1741
  #define NV_C0_BC0_LNA_4_OFFSET_VS_FREQ_I                1742
  #define NV_C0_BC0_LNA_1_OFFSET_I                        1743
  #define NV_C0_BC0_LNA_2_OFFSET_I                        1744
  #define NV_C0_BC0_LNA_3_OFFSET_I                        1745
  #define NV_C0_BC0_LNA_4_OFFSET_I                        1746
  #define NV_C0_BC0_IM2_I_VALUE_I                         1747
  #define NV_C0_BC0_IM2_Q_VALUE_I                         1748
  #define NV_C0_BC0_VGA_GAIN_OFFSET_I                     1749
  #define NV_C0_BC0_VGA_GAIN_OFFSET_VS_FREQ_I             1750
  #define NV_C0_BC0_IM2_TRANSCONDUCTOR_VALUE_I            1751
  #define NV_C0_BC0_LNA_1_RISE_I                          1752
  #define NV_C0_BC0_LNA_1_FALL_I                          1753
  #define NV_C0_BC0_LNA_2_RISE_I                          1754
  #define NV_C0_BC0_LNA_2_FALL_I                          1755
  #define NV_C0_BC0_LNA_3_RISE_I                          1756
  #define NV_C0_BC0_LNA_3_FALL_I                          1757
  #define NV_C0_BC0_LNA_4_RISE_I                          1758
  #define NV_C0_BC0_LNA_4_FALL_I                          1759
  #define NV_C0_BC0_IM_LEVEL1_I                           1760
  #define NV_C0_BC0_IM_LEVEL2_I                           1761
  #define NV_C0_BC0_IM_LEVEL3_I                           1762
  #define NV_C0_BC0_IM_LEVEL4_I                           1763
  #define NV_C1_BC0_TX_CAL_CHAN_I                         1764
  #define NV_C1_BC0_RX_CAL_CHAN_I                         1765
  #define NV_C1_BC0_LNA_1_OFFSET_VS_FREQ_I                1766
  #define NV_C1_BC0_LNA_2_OFFSET_VS_FREQ_I                1767
  #define NV_C1_BC0_LNA_3_OFFSET_VS_FREQ_I                1768
  #define NV_C1_BC0_LNA_4_OFFSET_VS_FREQ_I                1769
  #define NV_C1_BC0_LNA_1_OFFSET_I                        1770
  #define NV_C1_BC0_LNA_2_OFFSET_I                        1771
  #define NV_C1_BC0_LNA_3_OFFSET_I                        1772
  #define NV_C1_BC0_LNA_4_OFFSET_I                        1773
  #define NV_C1_BC0_IM2_I_VALUE_I                         1774
  #define NV_C1_BC0_IM2_Q_VALUE_I                         1775
  #define NV_C1_BC0_VGA_GAIN_OFFSET_I                     1776
  #define NV_C1_BC0_VGA_GAIN_OFFSET_VS_FREQ_I             1777
  #define NV_C1_BC0_IM2_TRANSCONDUCTOR_VALUE_I            1778
  #define NV_C1_BC0_LNA_1_RISE_I                          1779
  #define NV_C1_BC0_LNA_1_FALL_I                          1780
  #define NV_C1_BC0_LNA_2_RISE_I                          1781
  #define NV_C1_BC0_LNA_2_FALL_I                          1782
  #define NV_C1_BC0_LNA_3_RISE_I                          1783
  #define NV_C1_BC0_LNA_3_FALL_I                          1784
  #define NV_C1_BC0_LNA_4_RISE_I                          1785
  #define NV_C1_BC0_LNA_4_FALL_I                          1786
  #define NV_C1_BC0_IM_LEVEL1_I                           1787
  #define NV_C1_BC0_IM_LEVEL2_I                           1788
  #define NV_C1_BC0_IM_LEVEL3_I                           1789
  #define NV_C1_BC0_IM_LEVEL4_I                           1790
  #define NV_RFR_BB_FILTER_I                              1791
  #define NV_RFR_IQ_LINE_RESISTOR_I                       1792
  #define NV_WCDMA_RFR_VCO_COARSE_TUNING_I                1793
  #define NV_RFR_VCO_COARSE_TUNING_1900_I                 1794
  #define NV_WCDMA_TX_ROT_ANGLE_PA_STATE_00_I             1795
  #define NV_WCDMA_TX_ROT_ANGLE_PA_STATE_01_I             1796
  #define NV_WCDMA_TX_ROT_ANGLE_PA_STATE_10_I             1797
  #define NV_WCDMA_TX_ROT_ANGLE_PA_STATE_11_I             1798
  #define NV_AMR_I                                        1799
  #define NV_WCDMA_SPIKE_MITIGATION_ENABLED_I             1800
  #define NV_PA_COMPENSATE_UP_I                           1801
  #define NV_PA_COMPENSATE_DOWN_I                         1802
  #define NV_SN_PPP_STATUS_I                              1803
  #define NV_DS_UCSD_RLPV2_DEFAULT_I                      1804
  #define NV_SELECT_TECH_FOR_CARD_I                       1805
  #define NV_PPP_NCP_REMOTE_INITIATE_I                    1806
  #define NV_DS_UCSD_RLP_VERSION_GSM_I                    1807
  #define NV_DS_UCSD_RLP_VERSION_WCDMA_I                  1808
  #define NV_DS_ATCOP_RLP_VERSION_DEFAULT_I               1809
  #define NV_DS_UCSD_RECOVERY_MODE_SREJ_I                 1810
  #define NV_TCP_KEEPALIVE_IDLE_TIME_I                    1811
  #define NV_RF_TUNE_RESERVED_I                           1812
  #define NV_DATA_FORCE_CDMA_PKT_STR_I                    1813
  #define NV_WCDMA_800_VGA_GAIN_OFFSET_I                  1814
  #define NV_WCDMA_800_VGA_GAIN_OFFSET_VS_FREQ_I          1815
  #define NV_WCDMA_800_VGA_GAIN_OFFSET_VS_TEMP_I          1816
  #define NV_WCDMA_800_LNA_RANGE_RISE_2_I                 1817
  #define NV_WCDMA_800_LNA_RANGE_RISE_3_I                 1818
  #define NV_WCDMA_800_LNA_RANGE_FALL_2_I                 1819
  #define NV_WCDMA_800_LNA_RANGE_FALL_3_I                 1820
  #define NV_WCDMA_800_IM_LEVEL_2_I                       1821
  #define NV_WCDMA_800_IM_LEVEL_3_I                       1822
  #define NV_WCDMA_800_LNA_RANGE_OFFSET_2_I               1823
  #define NV_WCDMA_800_LNA_RANGE_OFFSET_3_I               1824
  #define NV_WCDMA_800_LNA_OFFSET_VS_FREQ_2_I             1825
  #define NV_WCDMA_800_LNA_OFFSET_VS_FREQ_3_I             1826
  #define NV_WCDMA_800_IM2_I_VALUE_I                      1827
  #define NV_WCDMA_800_IM2_Q_VALUE_I                      1828
  #define NV_WCDMA_800_IM2_TRANSCONDUCTOR_VALUE_I         1829
  #define NV_WCDMA_800_RX_AGC_MIN_2_I                     1830
  #define NV_WCDMA_800_RX_AGC_MIN_3_I                     1831
  #define NV_WCDMA_800_MAX_TX_POWER_I                     1832
  #define NV_WCDMA_800_OUT_OF_SERVICE_THRESH_I            1833
  #define NV_WCDMA_800_LNA_RANGE_RISE_I                   1834
  #define NV_WCDMA_800_LNA_RANGE_FALL_I                   1835
  #define NV_WCDMA_800_IM_LEVEL_I                         1836
  #define NV_WCDMA_800_NONBYPASS_TIMER_I                  1837
  #define NV_WCDMA_800_BYPASS_TIMER_I                     1838
  #define NV_WCDMA_800_LNA_RANGE_OFFSET_I                 1839
  #define NV_WCDMA_800_LNA_OFFSET_VS_FREQ_I               1840
  #define NV_WCDMA_800_RX_AGC_MIN_I                       1841
  #define NV_WCDMA_800_RX_AGC_MAX_I                       1842
  #define NV_WCDMA_800_AGC_PHASE_OFFSET_I                 1843
  #define NV_WCDMA_800_TX_LIN_MASTER_0_I                  1844
  #define NV_WCDMA_800_TX_LIN_MASTER_1_I                  1845
  #define NV_WCDMA_800_TX_COMP_VS_FREQ_0_I                1846
  #define NV_WCDMA_800_TX_COMP_VS_FREQ_1_I                1847
  #define NV_WCDMA_800_TX_LIN_VS_TEMP_0_I                 1848
  #define NV_WCDMA_800_TX_LIN_VS_TEMP_1_I                 1849
  #define NV_WCDMA_800_TX_SLP_VS_TEMP_0_I                 1850
  #define NV_WCDMA_800_TX_SLP_VS_TEMP_1_I                 1860
  #define NV_WCDMA_800_R1_RISE_I                          1861
  #define NV_WCDMA_800_R1_FALL_I                          1862
  #define NV_WCDMA_800_TX_LIM_VS_TEMP_I                   1863
  #define NV_WCDMA_800_TX_LIM_VS_FREQ_I                   1864
  #define NV_WCDMA_800_ADJ_FACTOR_I                       1865
  #define NV_WCDMA_800_EXP_HDET_VS_AGC_I                  1866
  #define NV_WCDMA_800_HDET_OFF_I                         1867
  #define NV_WCDMA_800_HDET_SPN_I                         1868
  #define NV_WCDMA_800_ENC_BTF_I                          1869
  #define NV_WCDMA_800_AGC_PA_ON_RISE_DELAY_I             1870
  #define NV_WCDMA_800_AGC_PA_ON_FALL_DELAY_I             1871
  #define NV_WCDMA_800_AGC_TX_ON_RISE_DELAY_I             1872
  #define NV_WCDMA_800_AGC_TX_ON_FALL_DELAY_I             1873
  #define NV_WCDMA_800_AGC_UPDATE_TX_AGC_TIME_I           1874
  #define NV_PA_R_MAP_I                                   1875
  #define NV_PS_IPV6_IID_I                                1876
  #define NV_RF_BC_CONFIG_I                               1877
  #define NV_RF_HW_CONFIG_I                               1878
  #define NV_BC0_HDR_IM_FALL_I                            1879
  #define NV_BC0_HDR_IM_RISE_I                            1880
  #define NV_VCO_TEMP_I                                   1881
  #define NV_VCO_DEFAULT_I                                1882
  #define NV_VCO_SLOPE_I                                  1883
  #define NV_VCO_SLOPE_RANGE_I                            1884
  #define NV_RGS_TIME_I                                   1885
  #define NV_RGS_TYPE_I                                   1886
  #define NV_RGS_TEMP_I                                   1887
  #define NV_RGS_ROT_I                                    1888
  #define NV_RGS_VCO_I                                    1889
  #define NV_BC0_HDR_IM_LEVEL_I                           1890
  #define NV_GSM_TX_BURST_OFFSET_ADJ_I                    1891
  #define NV_DIAG_DEBUG_CONTROL_I                         1892
  #define NV_QVP_APP_DEFAULT_CAPABILITY_TYPE_I            1893
  #define NV_RR_STORED_LAST_BEST_ARFCNS_BAND_I            1894
  #define NV_DIAG_DEBUG_DETAIL_I                          1895
  #define NV_IPV6_ENABLED_I                               1896
  #define NV_IPV6_SM_CONFIG_I                             1897
  #define NV_C1_BC0_VCO_COARSE_TUNE_TABLE_I               1898
  #define NV_C1_BC1_VCO_COARSE_TUNE_TABLE_I               1899
  #define NV_C1_BC3_VCO_COARSE_TUNE_TABLE_I               1900
  #define NV_C1_BC4_VCO_COARSE_TUNE_TABLE_I               1901
  #define NV_C1_BC5_VCO_COARSE_TUNE_TABLE_I               1902
  #define NV_C1_BC6_VCO_COARSE_TUNE_TABLE_I               1903
  #define NV_C1_RFR_BB_FILTER_I                           1904
  #define NV_IPV6_PRIMARY_DNS_I                           1905
  #define NV_IPV6_SECONDARY_DNS_I                         1906
  #define NV_AUTH_REQUIRE_PASSWORD_ENCRYPTION_I           1907
  #define NV_WCDMA_PRACH_R1_RISE_OFFSET_I                 1908
  #define NV_WCDMA_1900_PRACH_R1_RISE_OFFSET_I            1909
  #define NV_WCDMA_PRACH_R1_FALL_OFFSET_I                 1910
  #define NV_WCDMA_1900_PRACH_R1_FALL_OFFSET_I            1911
  #define NV_WCDMA_800_PRACH_R1_FALL_OFFSET_I             1912
  #define NV_AAGPS_MAX_OSC_UNC_I                          1913
  #define NV_AAGPS_MAX_OSC_UNC_RATE_I                     1914
  #define NV_AAGPS_PROCESSING_LOSSES_I                    1915
  #define NV_AAGPS_MAX_PLATFORM_VELOCITY_I                1916
  #define NV_AAGPS_MAX_PLATFORM_ACCL_I                    1917
  #define NV_AAGPS_DEFAULT_QOS_TIME_I                     1918
  #define NV_AAGPS_RAPID_FIX_REPORT_MAX_LATENCY_I         1919
  #define NV_AAGPS_POSITIONING_MODES_SUPPORTED_I          1920
  #define NV_AAGPS_DEFAULT_REF_TIME_UNC_I                 1921
  #define NV_AAGPS_DEFAULT_REF_POSITION_UNC_I             1922
  #define NV_AAGPS_APP_TRACKING_GPSIDLE_THSLD_I           1923
  #define NV_AAGPS_GPS_LOCK_CONTROL_I                     1924
  #define NV_AAGPS_DEFAULT_URL_I                          1925
  #define NV_AAGPS_DEFAULT_IP_ADDRESS_I                   1926
  #define NV_AAGPS_TRANSPORT_TYPE_I                       1927
  #define NV_AAGPS_KEEP_WARM_MODE_I                       1928
  #define NV_AAGPS_2G_MO_LRSUPPORT_I                      1929
  #define NV_AAGPS_EMERGENCY_SERVICES_SPPRT_I             1930
  #define NV_WCDMA_800_PRACH_R1_RISE_OFFSET_I             1931
  #define NV_PDSN_AS_PROXY_IPV6_DNS_SERVER_I              1932
  #define NV_HDRAMP_HARDWARE_ID_I                         1933
  #define NV_AAGPS_PROTOCOL_SELECT_I                      1934
  #define NV_AAGPS_APP_TRKG_PERIODIC_REQ_DLY_MARGIN_I     1935
  #define NV_AAGPS_DEFAULT_QOS_UNC_I                      1936
  #define NV_AAGPS_APP_TRACKING_GPSON_THSLD_I             1937
  #define NV_AAGPS_MT_LRSUPPORT_I                         1940
  #define NV_IPV6_FAILOVER_CONFIG_I                       1941
  #define NV_UIM_USE_CAVE_FOR_AN_AUTH_I                   1942
  #define NV_MEID_I                                       1943
  #define NV_GPS1_CALL_RELATED_I                          1944
  #define NV_RF_ANTSEL_GSM_DEFAULT_I                      1945
  #define NV_RF_ANTSEL_GSM_850_TX_I                       1946
  #define NV_RF_ANTSEL_GSM_850_RX_I                       1947
  #define NV_RF_ANTSEL_GSM_900_TX_I                       1948
  #define NV_RF_ANTSEL_GSM_900_RX_I                       1949
  #define NV_RF_ANTSEL_GSM_1800_TX_I                      1950
  #define NV_RF_ANTSEL_GSM_1800_RX_I                      1951
  #define NV_RF_ANTSEL_GSM_1900_TX_I                      1952
  #define NV_RF_ANTSEL_GSM_1900_RX_I                      1953
  #define NV_RF_ANTSEL_UMTS_800_I                         1954
  #define NV_RF_ANTSEL_UMTS_1900_I                        1955
  #define NV_RF_ANTSEL_UMTS_2100_I                        1956
  #define NV_TCP_SACK_TIMESTAMP_ENABLED_I                 1957
  #define NV_PRL_PREF_I                                   1958
  #define NV_AAGPS_DEFAULT_IP_PORT_I                      1959
  #define NV_AAGPS_3G_MO_LRSUPPORT_I                      1960
  #define NV_AAGPS_DEVELOPMENT_TEST_CONTROL_I             1961
  #define NV_DIAG_DEBUG_MAX_FILES_I                       1962
  #define NV_WCDMA_800_PA_COMPENSATE_UP_I                 1963
  #define NV_WCDMA_800_PA_COMPENSATE_DOWN_I               1964
  #define NV_WCDMA_1900_PA_COMPENSATE_UP_I                1965
  #define NV_WCDMA_1900_PA_COMPENSATE_DOWN_I              1966
  #define NV_WCDMA_800_PA_GAIN_UP_TIME_I                  1967
  #define NV_WCDMA_800_PA_GAIN_DOWN_TIME_I                1968
  #define NV_WCDMA_1900_PA_GAIN_UP_TIME_I                 1969
  #define NV_WCDMA_1900_PA_GAIN_DOWN_TIME_I               1970
  #define NV_WCDMA_TX_CAL_CHAN_I                          1971
  #define NV_WCDMA_RX_CAL_CHAN_I                          1972
  #define NV_WCDMA_1900_TX_CAL_CHAN_I                     1973
  #define NV_WCDMA_1900_RX_CAL_CHAN_I                     1974
  #define NV_WCDMA_800_TX_CAL_CHAN_I                      1975
  #define NV_WCDMA_800_RX_CAL_CHAN_I                      1976
  #define NV_BREW_CARRIER_ID_I                            1977
  #define NV_BREW_PLATFORM_ID_I                           1978
  #define NV_BREW_BKEY_I                                  1979
  #define NV_BREW_SERVER_I                                1980
  #define NV_BREW_DOWNLOAD_FLAGS_I                        1981
  #define NV_BREW_AUTH_POLICY_I                           1982
  #define NV_BREW_PRIVACY_POLICY_I                        1983
  #define NV_BREW_SUBSCRIBER_ID_I                         1984
  #define NV_WCDMA_RX_DELAY_I                             1985
  #define NV_WCDMA_800_RX_DELAY_I                         1986
  #define NV_WCDMA_1900_RX_DELAY_I                        1987
  #define NV_AAGPS_DEVELOPMENT_TEST_CONTROL2_I            1988
  #define NV_AAGPS_DEVELOPMENT_TEST_CONTROL3_I            1989
  #define NV_AAGPS_DEVELOPMENT_TEST_CONTROL4_I            1990
  #define NV_AAGPS_DEVELOPMENT_TEST_CONTROL5_I            1991
  #define NV_MEID_CD_I                                    1992
  #define NV_GPS1_VX_LCS_AGENT_I                          1993
  #define NV_GPS1_VX_APP_TRUSTED_SETTINGS_I               1994
  #define NV_GPS1_VX_NI_TELESERVICE_ID_I                  1995
  #define NV_GPS1_VX_LCS_AGENT_PREV6_ONLY_I               1996
  #define NV_GPS1_VX_MO_MAX_DURATION_I                    1997
  #define NV_GPS1_OOS_OPERATION_PREF_I                    1998
  #define NV_GPS1_VX_GPS_DURING_VOICE_CALL_I              1999
  #define NV_WLAN_TECH_PREF_I                             2000
  #define NV_DS_UCSD_RLP_ADM_IDLE_I                       2001
  #define NV_PPP_CCP_REJECT_I                             2002
  #define NV_WLAN_SCAN_PREF_I                             2003
  #define NV_HDRBCMCS_OVHD_PERIOD_I                       2004
  #define NV_HDRBCMCS_PAGE_REG_PERIOD_I                   2005
  #define NV_HDRBCMCS_DYN_REG_PERIOD_I                    2006
  #define NV_HDRBCMCS_MONITOR_PERIOD_I                    2007
  #define NV_HDRBCMCS_NUM_PERIODS_I                       2008
  #define NV_WCDMA_TX_LIN_MASTER_2_I                      2009
  #define NV_WCDMA_TX_LIN_MASTER_3_I                      2010
  #define NV_WCDMA_TX_COMP_VS_FREQ_2_I                    2011
  #define NV_WCDMA_TX_COMP_VS_FREQ_3_I                    2012
  #define NV_WCDMA_TX_LIN_VS_TEMP_2_I                     2013
  #define NV_WCDMA_TX_LIN_VS_TEMP_3_I                     2014
  #define NV_WCDMA_TX_SLP_VS_TEMP_2_I                     2015
  #define NV_WCDMA_TX_SLP_VS_TEMP_3_I                     2016
  #define NV_WCDMA_R2_RISE_I                              2017
  #define NV_WCDMA_R2_FALL_I                              2018
  #define NV_WCDMA_R3_RISE_I                              2019
  #define NV_WCDMA_R3_FALL_I                              2020
  #define NV_PA_COMPENSATE_UP_R2_I                        2021
  #define NV_PA_COMPENSATE_DOWN_R2_I                      2022
  #define NV_PA_COMPENSATE_UP_R3_I                        2023
  #define NV_PA_COMPENSATE_DOWN_R3_I                      2024
  #define NV_WCDMA_PRACH_R2_RISE_OFFSET_I                 2025
  #define NV_WCDMA_PRACH_R2_FALL_OFFSET_I                 2026
  #define NV_WCDMA_PRACH_R3_RISE_OFFSET_I                 2027
  #define NV_WCDMA_PRACH_R3_FALL_OFFSET_I                 2028
  #define NV_WCDMA_PA_RANGE_MAP_I                         2029
  #define NV_WCDMA_1900_TX_LIN_MASTER_2_I                 2030
  #define NV_WCDMA_1900_TX_LIN_MASTER_3_I                 2031
  #define NV_WCDMA_1900_TX_COMP_VS_FREQ_2_I               2032
  #define NV_WCDMA_1900_TX_COMP_VS_FREQ_3_I               2033
  #define NV_WCDMA_1900_TX_LIN_VS_TEMP_2_I                2034
  #define NV_WCDMA_1900_TX_LIN_VS_TEMP_3_I                2035
  #define NV_WCDMA_1900_TX_SLP_VS_TEMP_2_I                2036
  #define NV_WCDMA_1900_TX_SLP_VS_TEMP_3_I                2037
  #define NV_WCDMA_1900_R2_RISE_I                         2038
  #define NV_WCDMA_1900_R2_FALL_I                         2039
  #define NV_WCDMA_1900_R3_RISE_I                         2040
  #define NV_WCDMA_1900_R3_FALL_I                         2041
  #define NV_WCDMA_1900_PA_COMPENSATE_UP_R2_I             2042
  #define NV_WCDMA_1900_PA_COMPENSATE_DOWN_R2_I           2043
  #define NV_WCDMA_1900_PA_COMPENSATE_UP_R3_I             2044
  #define NV_WCDMA_1900_PA_COMPENSATE_DOWN_R3_I           2045
  #define NV_WCDMA_1900_TX_ROT_ANGLE_PA_STATE_00_I        2046
  #define NV_WCDMA_1900_TX_ROT_ANGLE_PA_STATE_01_I        2047
  #define NV_WCDMA_1900_TX_ROT_ANGLE_PA_STATE_10_I        2048
  #define NV_WCDMA_1900_TX_ROT_ANGLE_PA_STATE_11_I        2049
  #define NV_WCDMA_1900_PRACH_R2_RISE_OFFSET_I            2050
  #define NV_WCDMA_1900_PRACH_R2_FALL_OFFSET_I            2051
  #define NV_WCDMA_1900_PRACH_R3_RISE_OFFSET_I            2052
  #define NV_WCDMA_1900_PRACH_R3_FALL_OFFSET_I            2053
  #define NV_WCDMA_1900_PA_RANGE_MAP_I                    2054
  #define NV_WCDMA_800_TX_LIN_MASTER_2_I                  2055
  #define NV_WCDMA_800_TX_LIN_MASTER_3_I                  2056
  #define NV_WCDMA_800_TX_COMP_VS_FREQ_2_I                2057
  #define NV_WCDMA_800_TX_COMP_VS_FREQ_3_I                2058
  #define NV_WCDMA_800_TX_LIN_VS_TEMP_2_I                 2059
  #define NV_WCDMA_800_TX_LIN_VS_TEMP_3_I                 2060
  #define NV_WCDMA_800_TX_SLP_VS_TEMP_2_I                 2061
  #define NV_WCDMA_800_TX_SLP_VS_TEMP_3_I                 2062
  #define NV_WCDMA_800_R2_RISE_I                          2063
  #define NV_WCDMA_800_R2_FALL_I                          2064
  #define NV_WCDMA_800_R3_RISE_I                          2065
  #define NV_WCDMA_800_R3_FALL_I                          2066
  #define NV_WCDMA_800_PA_COMPENSATE_UP_R2_I              2067
  #define NV_WCDMA_800_PA_COMPENSATE_DOWN_R2_I            2068
  #define NV_WCDMA_800_PA_COMPENSATE_UP_R3_I              2069
  #define NV_WCDMA_800_PA_COMPENSATE_DOWN_R3_I            2070
  #define NV_WCDMA_800_TX_ROT_ANGLE_PA_STATE_00_I         2071
  #define NV_WCDMA_800_TX_ROT_ANGLE_PA_STATE_01_I         2072
  #define NV_WCDMA_800_TX_ROT_ANGLE_PA_STATE_10_I         2073
  #define NV_WCDMA_800_TX_ROT_ANGLE_PA_STATE_11_I         2074
  #define NV_WCDMA_800_PRACH_R2_RISE_OFFSET_I             2075
  #define NV_WCDMA_800_PRACH_R2_FALL_OFFSET_I             2076
  #define NV_WCDMA_800_PRACH_R3_RISE_OFFSET_I             2077
  #define NV_WCDMA_800_PRACH_R3_FALL_OFFSET_I             2078
  #define NV_WCDMA_800_PA_RANGE_MAP_I                     2079
  #define NV_BC0_VCO_COARSE_TUNE_2_I                      2080
  #define NV_BC1_VCO_COARSE_TUNE_2_I                      2081
  #define NV_BC3_VCO_COARSE_TUNE_2_I                      2082
  #define NV_BC4_VCO_COARSE_TUNE_2_I                      2083
  #define NV_BC5_VCO_COARSE_TUNE_2_I                      2084
  #define NV_BC6_VCO_COARSE_TUNE_2_I                      2085
  #define NV_GSM_PRUI_00_I                                2086
  #define NV_GSM_PRUI_01_I                                2087
  #define NV_GSM_PRUI_02_I                                2088
  #define NV_GSM_PRUI_03_I                                2089
  #define NV_GSM_PRUI_04_I                                2090
  #define NV_GSM_PRUI_05_I                                2091
  #define NV_GSM_PRUI_06_I                                2092
  #define NV_GSM_PRUI_07_I                                2093
  #define NV_GSM_PRUI_08_I                                2094
  #define NV_GSM_PRUI_09_I                                2095
  #define NV_GSM_PRUI_10_I                                2096
  #define NV_GSM_PRDI_00_I                                2097
  #define NV_GSM_PRDI_01_I                                2098
  #define NV_GSM_PRDI_02_I                                2099
  #define NV_GSM_PRDI_03_I                                2100
  #define NV_GSM_PRDI_04_I                                2101
  #define NV_GSM_PRDI_05_I                                2102
  #define NV_GSM_PRDI_06_I                                2103
  #define NV_GSM_PRDI_07_I                                2104
  #define NV_GSM_PRDI_08_I                                2105
  #define NV_GSM_PRDI_09_I                                2106
  #define NV_GSM_PRDI_10_I                                2107
  #define NV_GSM_PRDI_11_I                                2108
  #define NV_DCS_PRUI_00_I                                2109
  #define NV_DCS_PRUI_01_I                                2110
  #define NV_DCS_PRUI_02_I                                2111
  #define NV_DCS_PRUI_03_I                                2112
  #define NV_DCS_PRUI_04_I                                2113
  #define NV_DCS_PRUI_05_I                                2114
  #define NV_DCS_PRUI_06_I                                2115
  #define NV_DCS_PRUI_07_I                                2116
  #define NV_DCS_PRUI_08_I                                2117
  #define NV_DCS_PRUI_09_I                                2118
  #define NV_DCS_PRUI_10_I                                2119
  #define NV_DCS_PRUI_11_I                                2120
  #define NV_DCS_PRUI_12_I                                2121
  #define NV_DCS_PRDI_00_I                                2122
  #define NV_DCS_PRDI_01_I                                2123
  #define NV_DCS_PRDI_02_I                                2124
  #define NV_DCS_PRDI_03_I                                2125
  #define NV_DCS_PRDI_04_I                                2126
  #define NV_DCS_PRDI_05_I                                2127
  #define NV_DCS_PRDI_06_I                                2128
  #define NV_DCS_PRDI_07_I                                2129
  #define NV_DCS_PRDI_08_I                                2130
  #define NV_DCS_PRDI_09_I                                2131
  #define NV_DCS_PRDI_10_I                                2132
  #define NV_DCS_PRDI_11_I                                2133
  #define NV_DCS_PRDI_12_I                                2134
  #define NV_GSM_1900_PRUI_00_I                           2135
  #define NV_GSM_1900_PRUI_01_I                           2136
  #define NV_GSM_1900_PRUI_02_I                           2137
  #define NV_GSM_1900_PRUI_03_I                           2138
  #define NV_GSM_1900_PRUI_04_I                           2139
  #define NV_GSM_1900_PRUI_05_I                           2140
  #define NV_GSM_1900_PRUI_06_I                           2141
  #define NV_GSM_1900_PRUI_07_I                           2142
  #define NV_GSM_1900_PRUI_08_I                           2143
  #define NV_GSM_1900_PRUI_09_I                           2144
  #define NV_GSM_1900_PRUI_10_I                           2145
  #define NV_GSM_1900_PRUI_11_I                           2146
  #define NV_GSM_1900_PRUI_12_I                           2147
  #define NV_GSM_1900_PRDI_02_I                           2148
  #define NV_GSM_1900_PRDI_03_I                           2149
  #define NV_GSM_1900_PRDI_04_I                           2150
  #define NV_GSM_1900_PRDI_05_I                           2151
  #define NV_GSM_1900_PRDI_06_I                           2152
  #define NV_GSM_1900_PRDI_07_I                           2153
  #define NV_GSM_1900_PRDI_09_I                           2154
  #define NV_GSM_1900_PRDI_10_I                           2155
  #define NV_GSM_1900_PRDI_12_I                           2156
  #define NV_GSM_VL_TL_BRUI_14_I                          2157
  #define NV_GSM_VL_TL_BRUI_13_I                          2158
  #define NV_GSM_VL_TL_BRUI_12_I                          2159
  #define NV_GSM_VL_TL_BRDI_14_I                          2160
  #define NV_GSM_VL_TL_BRDI_13_I                          2161
  #define NV_GSM_VL_TL_BRDI_12_I                          2162
  #define NV_DCS_VL_TL_BRUI_15_I                          2163
  #define NV_DCS_VL_TL_BRUI_14_I                          2164
  #define NV_DCS_VL_TL_BRUI_13_I                          2165
  #define NV_DCS_VL_TL_BRDI_15_I                          2166
  #define NV_DCS_VL_TL_BRDI_14_I                          2167
  #define NV_DCS_VL_TL_BRDI_13_I                          2168
  #define NV_GSM_1900_VL_TL_BRUI_15_I                     2169
  #define NV_GSM_1900_VL_TL_BRUI_14_I                     2170
  #define NV_GSM_1900_VL_TL_BRUI_13_I                     2171
  #define NV_GSM_1900_VL_TL_BRDI_15_I                     2172
  #define NV_GSM_1900_VL_TL_BRDI_14_I                     2173
  #define NV_GSM_1900_VL_TL_BRDI_13_I                     2174
  #define NV_GSM_VM_TL_BRUI_14_I                          2175
  #define NV_GSM_VM_TL_BRUI_13_I                          2176
  #define NV_GSM_VM_TL_BRUI_12_I                          2177
  #define NV_GSM_VM_TL_BRDI_14_I                          2178
  #define NV_GSM_VM_TL_BRDI_13_I                          2179
  #define NV_GSM_VM_TL_BRDI_12_I                          2180
  #define NV_DCS_VM_TL_BRUI_15_I                          2181
  #define NV_DCS_VM_TL_BRUI_14_I                          2182
  #define NV_DCS_VM_TL_BRUI_13_I                          2183
  #define NV_DCS_VM_TL_BRDI_15_I                          2184
  #define NV_DCS_VM_TL_BRDI_14_I                          2185
  #define NV_DCS_VM_TL_BRDI_13_I                          2186
  #define NV_GSM_1900_VM_TL_BRUI_15_I                     2187
  #define NV_GSM_1900_VM_TL_BRUI_14_I                     2188
  #define NV_GSM_1900_VM_TL_BRUI_13_I                     2189
  #define NV_GSM_1900_VM_TL_BRDI_15_I                     2190
  #define NV_GSM_1900_VM_TL_BRDI_14_I                     2191
  #define NV_GSM_1900_VM_TL_BRDI_13_I                     2192
  #define NV_GSM_VH_TL_BRUI_14_I                          2193
  #define NV_GSM_VH_TL_BRUI_13_I                          2194
  #define NV_GSM_VH_TL_BRUI_12_I                          2195
  #define NV_GSM_VH_TL_BRDI_14_I                          2196
  #define NV_GSM_VH_TL_BRDI_13_I                          2197
  #define NV_GSM_VH_TL_BRDI_12_I                          2198
  #define NV_DCS_VH_TL_BRUI_15_I                          2199
  #define NV_DCS_VH_TL_BRUI_14_I                          2200
  #define NV_DCS_VH_TL_BRUI_13_I                          2201
  #define NV_DCS_VH_TL_BRDI_15_I                          2202
  #define NV_DCS_VH_TL_BRDI_14_I                          2203
  #define NV_DCS_VH_TL_BRDI_13_I                          2204
  #define NV_GSM_1900_VH_TL_BRUI_15_I                     2205
  #define NV_GSM_1900_VH_TL_BRUI_14_I                     2206
  #define NV_GSM_1900_VH_TL_BRUI_13_I                     2207
  #define NV_GSM_1900_VH_TL_BRDI_15_I                     2208
  #define NV_GSM_1900_VH_TL_BRDI_14_I                     2209
  #define NV_GSM_1900_VH_TL_BRDI_13_I                     2210
  #define NV_GSM_VL_TM_BRUI_14_I                          2211
  #define NV_GSM_VL_TM_BRUI_13_I                          2212
  #define NV_GSM_VL_TM_BRUI_12_I                          2213
  #define NV_GSM_VL_TM_BRDI_14_I                          2214
  #define NV_GSM_VL_TM_BRDI_13_I                          2215
  #define NV_GSM_VL_TM_BRDI_12_I                          2216
  #define NV_DCS_VL_TM_BRUI_15_I                          2217
  #define NV_DCS_VL_TM_BRUI_14_I                          2218
  #define NV_DCS_VL_TM_BRUI_13_I                          2219
  #define NV_DCS_VL_TM_BRDI_15_I                          2220
  #define NV_DCS_VL_TM_BRDI_14_I                          2221
  #define NV_DCS_VL_TM_BRDI_13_I                          2222
  #define NV_GSM_1900_VL_TM_BRUI_15_I                     2223
  #define NV_GSM_1900_VL_TM_BRUI_14_I                     2224
  #define NV_GSM_1900_VL_TM_BRUI_13_I                     2225
  #define NV_GSM_1900_VL_TM_BRDI_15_I                     2226
  #define NV_GSM_1900_VL_TM_BRDI_14_I                     2227
  #define NV_GSM_1900_VL_TM_BRDI_13_I                     2228
  #define NV_GSM_VM_TM_BRUI_14_I                          2229
  #define NV_GSM_VM_TM_BRUI_13_I                          2230
  #define NV_GSM_VM_TM_BRUI_12_I                          2231
  #define NV_GSM_VM_TM_BRDI_14_I                          2232
  #define NV_GSM_VM_TM_BRDI_13_I                          2233
  #define NV_GSM_VM_TM_BRDI_12_I                          2234
  #define NV_DCS_VM_TM_BRUI_15_I                          2235
  #define NV_DCS_VM_TM_BRUI_14_I                          2236
  #define NV_DCS_VM_TM_BRUI_13_I                          2237
  #define NV_DCS_VM_TM_BRDI_15_I                          2238
  #define NV_DCS_VM_TM_BRDI_14_I                          2239
  #define NV_DCS_VM_TM_BRDI_13_I                          2240
  #define NV_GSM_1900_VM_TM_BRUI_15_I                     2241
  #define NV_GSM_1900_VM_TM_BRUI_14_I                     2242
  #define NV_GSM_1900_VM_TM_BRUI_13_I                     2243
  #define NV_GSM_1900_VM_TM_BRDI_15_I                     2244
  #define NV_GSM_1900_VM_TM_BRDI_14_I                     2245
  #define NV_GSM_1900_VM_TM_BRDI_13_I                     2246
  #define NV_GSM_VH_TM_BRUI_14_I                          2247
  #define NV_GSM_VH_TM_BRUI_13_I                          2248
  #define NV_GSM_VH_TM_BRUI_12_I                          2249
  #define NV_GSM_VH_TM_BRDI_14_I                          2250
  #define NV_GSM_VH_TM_BRDI_13_I                          2251
  #define NV_GSM_VH_TM_BRDI_12_I                          2252
  #define NV_DCS_VH_TM_BRUI_15_I                          2253
  #define NV_DCS_VH_TM_BRUI_14_I                          2254
  #define NV_DCS_VH_TM_BRUI_13_I                          2255
  #define NV_DCS_VH_TM_BRDI_15_I                          2256
  #define NV_DCS_VH_TM_BRDI_14_I                          2257
  #define NV_DCS_VH_TM_BRDI_13_I                          2258
  #define NV_GSM_1900_VH_TM_BRUI_15_I                     2259
  #define NV_GSM_1900_VH_TM_BRUI_14_I                     2260
  #define NV_GSM_1900_VH_TM_BRUI_13_I                     2261
  #define NV_GSM_1900_VH_TM_BRDI_15_I                     2262
  #define NV_GSM_1900_VH_TM_BRDI_14_I                     2263
  #define NV_GSM_1900_VH_TM_BRDI_13_I                     2264
  #define NV_GSM_VL_TH_BRUI_14_I                          2265
  #define NV_GSM_VL_TH_BRUI_13_I                          2266
  #define NV_GSM_VL_TH_BRUI_12_I                          2267
  #define NV_GSM_VL_TH_BRDI_14_I                          2268
  #define NV_GSM_VL_TH_BRDI_13_I                          2269
  #define NV_GSM_VL_TH_BRDI_12_I                          2270
  #define NV_DCS_VL_TH_BRUI_15_I                          2271
  #define NV_DCS_VL_TH_BRUI_14_I                          2272
  #define NV_DCS_VL_TH_BRUI_13_I                          2273
  #define NV_DCS_VL_TH_BRDI_15_I                          2274
  #define NV_DCS_VL_TH_BRDI_14_I                          2275
  #define NV_DCS_VL_TH_BRDI_13_I                          2276
  #define NV_GSM_1900_VL_TH_BRUI_15_I                     2277
  #define NV_GSM_1900_VL_TH_BRUI_14_I                     2278
  #define NV_GSM_1900_VL_TH_BRUI_13_I                     2279
  #define NV_GSM_1900_VL_TH_BRDI_15_I                     2280
  #define NV_GSM_1900_VL_TH_BRDI_14_I                     2281
  #define NV_GSM_1900_VL_TH_BRDI_13_I                     2282
  #define NV_GSM_VM_TH_BRUI_14_I                          2283
  #define NV_GSM_VM_TH_BRUI_13_I                          2284
  #define NV_GSM_VM_TH_BRUI_12_I                          2285
  #define NV_GSM_VM_TH_BRDI_14_I                          2286
  #define NV_GSM_VM_TH_BRDI_13_I                          2287
  #define NV_GSM_VM_TH_BRDI_12_I                          2288
  #define NV_DCS_VM_TH_BRUI_15_I                          2289
  #define NV_DCS_VM_TH_BRUI_14_I                          2290
  #define NV_DCS_VM_TH_BRUI_13_I                          2291
  #define NV_DCS_VM_TH_BRDI_15_I                          2292
  #define NV_DCS_VM_TH_BRDI_14_I                          2293
  #define NV_DCS_VM_TH_BRDI_13_I                          2294
  #define NV_GSM_1900_VM_TH_BRUI_15_I                     2295
  #define NV_GSM_1900_VM_TH_BRUI_14_I                     2296
  #define NV_GSM_1900_VM_TH_BRUI_13_I                     2297
  #define NV_GSM_1900_VM_TH_BRDI_15_I                     2298
  #define NV_GSM_1900_VM_TH_BRDI_14_I                     2299
  #define NV_GSM_1900_VM_TH_BRDI_13_I                     2300
  #define NV_GSM_VH_TH_BRUI_14_I                          2301
  #define NV_GSM_VH_TH_BRUI_13_I                          2302
  #define NV_GSM_VH_TH_BRUI_12_I                          2303
  #define NV_GSM_VH_TH_BRDI_14_I                          2304
  #define NV_GSM_VH_TH_BRDI_13_I                          2305
  #define NV_GSM_VH_TH_BRDI_12_I                          2306
  #define NV_DCS_VH_TH_BRUI_15_I                          2307
  #define NV_DCS_VH_TH_BRUI_14_I                          2308
  #define NV_DCS_VH_TH_BRUI_13_I                          2309
  #define NV_DCS_VH_TH_BRDI_15_I                          2310
  #define NV_DCS_VH_TH_BRDI_14_I                          2311
  #define NV_DCS_VH_TH_BRDI_13_I                          2312
  #define NV_GSM_1900_VH_TH_BRUI_15_I                     2313
  #define NV_GSM_1900_VH_TH_BRUI_14_I                     2314
  #define NV_GSM_1900_VH_TH_BRUI_13_I                     2315
  #define NV_GSM_1900_VH_TH_BRDI_15_I                     2316
  #define NV_GSM_1900_VH_TH_BRDI_14_I                     2317
  #define NV_GSM_1900_VH_TH_BRDI_13_I                     2318
  #define NV_GSM_C0_TX_FREQ_COMP_I                        2319
  #define NV_DCS_C0_TX_FREQ_COMP_I                        2320
  #define NV_GSM_1900_C0_TX_FREQ_COMP_I                   2321
  #define NV_GSM_C1_TX_FREQ_COMP_I                        2322
  #define NV_DCS_C1_TX_FREQ_COMP_I                        2323
  #define NV_GSM1900_C1_TX_FREQ_COMP_I                    2324
  #define NV_GSM_ENABLE_TX_FREQ_COMP_VS_PCL_I             2325
  #define NV_DCS_ENABLE_TX_FREQ_COMP_VS_PCL_I             2326
  #define NV_GSM_1900_ENABLE_TX_FREQ_COMP_VS_PCL_I        2327
  #define NV_THERM_COMP_THRESHOLDS_I                      2328
  #define NV_VBATT_COMP_THRESHOLDS_I                      2329
  #define NV_WCDMA_C0_TX_COMP_VS_FREQ_0_I                 2330
  #define NV_WCDMA_C0_TX_COMP_VS_FREQ_1_I                 2331
  #define NV_WCDMA_C1_TX_COMP_VS_FREQ_0_I                 2332
  #define NV_WCDMA_C1_TX_COMP_VS_FREQ_1_I                 2333
  #define NV_WCDMA_TX_LIM_VS_VOLT_OFFSET_I                2334
  #define NV_GSM_VL_TL_PRUI_14_I                          2335
  #define NV_GSM_VL_TL_PRUI_13_I                          2336
  #define NV_GSM_VL_TL_PRUI_12_I                          2337
  #define NV_GSM_VL_TL_PRDI_14_I                          2338
  #define NV_GSM_VL_TL_PRDI_13_I                          2339
  #define NV_GSM_VL_TL_PRDI_12_I                          2340
  #define NV_DCS_VL_TL_PRUI_15_I                          2341
  #define NV_DCS_VL_TL_PRUI_14_I                          2342
  #define NV_DCS_VL_TL_PRUI_13_I                          2343
  #define NV_DCS_VL_TL_PRDI_15_I                          2344
  #define NV_DCS_VL_TL_PRDI_14_I                          2345
  #define NV_DCS_VL_TL_PRDI_13_I                          2346
  #define NV_GSM_1900_VL_TL_PRUI_15_I                     2347
  #define NV_GSM_1900_VL_TL_PRUI_14_I                     2348
  #define NV_GSM_1900_VL_TL_PRUI_13_I                     2349
  #define NV_GSM_1900_VL_TL_PRDI_15_I                     2350
  #define NV_GSM_1900_VL_TL_PRDI_14_I                     2351
  #define NV_GSM_1900_VL_TL_PRDI_13_I                     2352
  #define NV_GSM_VM_TL_PRUI_14_I                          2353
  #define NV_GSM_VM_TL_PRUI_13_I                          2354
  #define NV_GSM_VM_TL_PRUI_12_I                          2355
  #define NV_GSM_VM_TL_PRDI_14_I                          2356
  #define NV_GSM_VM_TL_PRDI_13_I                          2357
  #define NV_GSM_VM_TL_PRDI_12_I                          2358
  #define NV_DCS_VM_TL_PRUI_15_I                          2359
  #define NV_DCS_VM_TL_PRUI_14_I                          2360
  #define NV_DCS_VM_TL_PRUI_13_I                          2361
  #define NV_DCS_VM_TL_PRDI_15_I                          2362
  #define NV_DCS_VM_TL_PRDI_14_I                          2363
  #define NV_DCS_VM_TL_PRDI_13_I                          2364
  #define NV_GSM_1900_VM_TL_PRUI_15_I                     2365
  #define NV_GSM_1900_VM_TL_PRUI_14_I                     2366
  #define NV_GSM_1900_VM_TL_PRUI_13_I                     2367
  #define NV_GSM_1900_VM_TL_PRDI_15_I                     2368
  #define NV_GSM_1900_VM_TL_PRDI_14_I                     2369
  #define NV_GSM_1900_VM_TL_PRDI_13_I                     2370
  #define NV_GSM_VH_TL_PRUI_14_I                          2371
  #define NV_GSM_VH_TL_PRUI_13_I                          2372
  #define NV_GSM_VH_TL_PRUI_12_I                          2373
  #define NV_GSM_VH_TL_PRDI_14_I                          2374
  #define NV_GSM_VH_TL_PRDI_13_I                          2375
  #define NV_GSM_VH_TL_PRDI_12_I                          2376
  #define NV_DCS_VH_TL_PRUI_15_I                          2377
  #define NV_DCS_VH_TL_PRUI_14_I                          2378
  #define NV_DCS_VH_TL_PRUI_13_I                          2379
  #define NV_DCS_VH_TL_PRDI_15_I                          2380
  #define NV_DCS_VH_TL_PRDI_14_I                          2381
  #define NV_DCS_VH_TL_PRDI_13_I                          2382
  #define NV_GSM_1900_VH_TL_PRUI_15_I                     2383
  #define NV_GSM_1900_VH_TL_PRUI_14_I                     2384
  #define NV_GSM_1900_VH_TL_PRUI_13_I                     2385
  #define NV_GSM_1900_VH_TL_PRDI_15_I                     2386
  #define NV_GSM_1900_VH_TL_PRDI_14_I                     2387
  #define NV_GSM_1900_VH_TL_PRDI_13_I                     2388
  #define NV_GSM_VL_TM_PRUI_14_I                          2389
  #define NV_GSM_VL_TM_PRUI_13_I                          2390
  #define NV_GSM_VL_TM_PRUI_12_I                          2391
  #define NV_GSM_VL_TM_PRDI_14_I                          2392
  #define NV_GSM_VL_TM_PRDI_13_I                          2393
  #define NV_GSM_VL_TM_PRDI_12_I                          2394
  #define NV_DCS_VL_TM_PRUI_15_I                          2395
  #define NV_DCS_VL_TM_PRUI_14_I                          2396
  #define NV_DCS_VL_TM_PRUI_13_I                          2397
  #define NV_DCS_VL_TM_PRDI_15_I                          2398
  #define NV_DCS_VL_TM_PRDI_14_I                          2399
  #define NV_DCS_VL_TM_PRDI_13_I                          2400
  #define NV_GSM_1900_VL_TM_PRUI_15_I                     2401
  #define NV_GSM_1900_VL_TM_PRUI_14_I                     2402
  #define NV_GSM_1900_VL_TM_PRUI_13_I                     2403
  #define NV_GSM_1900_VL_TM_PRDI_15_I                     2404
  #define NV_GSM_1900_VL_TM_PRDI_14_I                     2405
  #define NV_GSM_1900_VL_TM_PRDI_13_I                     2406
  #define NV_GSM_VM_TM_PRUI_14_I                          2407
  #define NV_GSM_VM_TM_PRUI_13_I                          2408
  #define NV_GSM_VM_TM_PRUI_12_I                          2409
  #define NV_GSM_VM_TM_PRDI_14_I                          2410
  #define NV_GSM_VM_TM_PRDI_13_I                          2411
  #define NV_GSM_VM_TM_PRDI_12_I                          2412
  #define NV_DCS_VM_TM_PRUI_15_I                          2413
  #define NV_DCS_VM_TM_PRUI_14_I                          2414
  #define NV_DCS_VM_TM_PRUI_13_I                          2415
  #define NV_DCS_VM_TM_PRDI_15_I                          2416
  #define NV_DCS_VM_TM_PRDI_14_I                          2417
  #define NV_DCS_VM_TM_PRDI_13_I                          2418
  #define NV_GSM_1900_VM_TM_PRUI_15_I                     2419
  #define NV_GSM_1900_VM_TM_PRUI_14_I                     2420
  #define NV_GSM_1900_VM_TM_PRUI_13_I                     2421
  #define NV_GSM_1900_VM_TM_PRDI_15_I                     2422
  #define NV_GSM_1900_VM_TM_PRDI_14_I                     2423
  #define NV_GSM_1900_VM_TM_PRDI_13_I                     2424
  #define NV_GSM_VH_TM_PRUI_14_I                          2425
  #define NV_GSM_VH_TM_PRUI_13_I                          2426
  #define NV_GSM_VH_TM_PRUI_12_I                          2427
  #define NV_GSM_VH_TM_PRDI_14_I                          2428
  #define NV_GSM_VH_TM_PRDI_13_I                          2429
  #define NV_GSM_VH_TM_PRDI_12_I                          2430
  #define NV_DCS_VH_TM_PRUI_15_I                          2431
  #define NV_DCS_VH_TM_PRUI_14_I                          2432
  #define NV_DCS_VH_TM_PRUI_13_I                          2433
  #define NV_DCS_VH_TM_PRDI_15_I                          2434
  #define NV_DCS_VH_TM_PRDI_14_I                          2435
  #define NV_DCS_VH_TM_PRDI_13_I                          2436
  #define NV_GSM_1900_VH_TM_PRUI_15_I                     2437
  #define NV_GSM_1900_VH_TM_PRUI_14_I                     2438
  #define NV_GSM_1900_VH_TM_PRUI_13_I                     2439
  #define NV_GSM_1900_VH_TM_PRDI_15_I                     2440
  #define NV_GSM_1900_VH_TM_PRDI_14_I                     2441
  #define NV_GSM_1900_VH_TM_PRDI_13_I                     2442
  #define NV_GSM_VL_TH_PRUI_14_I                          2443
  #define NV_GSM_VL_TH_PRUI_13_I                          2444
  #define NV_GSM_VL_TH_PRUI_12_I                          2445
  #define NV_GSM_VL_TH_PRDI_14_I                          2446
  #define NV_GSM_VL_TH_PRDI_13_I                          2447
  #define NV_GSM_VL_TH_PRDI_12_I                          2448
  #define NV_DCS_VL_TH_PRUI_15_I                          2449
  #define NV_DCS_VL_TH_PRUI_14_I                          2450
  #define NV_DCS_VL_TH_PRUI_13_I                          2451
  #define NV_DCS_VL_TH_PRDI_15_I                          2452
  #define NV_DCS_VL_TH_PRDI_14_I                          2453
  #define NV_DCS_VL_TH_PRDI_13_I                          2454
  #define NV_GSM_1900_VL_TH_PRUI_15_I                     2455
  #define NV_GSM_1900_VL_TH_PRUI_14_I                     2456
  #define NV_GSM_1900_VL_TH_PRUI_13_I                     2457
  #define NV_GSM_1900_VL_TH_PRDI_15_I                     2458
  #define NV_GSM_1900_VL_TH_PRDI_14_I                     2459
  #define NV_GSM_1900_VL_TH_PRDI_13_I                     2460
  #define NV_GSM_VM_TH_PRUI_14_I                          2461
  #define NV_GSM_VM_TH_PRUI_13_I                          2462
  #define NV_GSM_VM_TH_PRUI_12_I                          2463
  #define NV_GSM_VM_TH_PRDI_14_I                          2464
  #define NV_GSM_VM_TH_PRDI_13_I                          2465
  #define NV_GSM_VM_TH_PRDI_12_I                          2466
  #define NV_DCS_VM_TH_PRUI_15_I                          2467
  #define NV_DCS_VM_TH_PRUI_14_I                          2468
  #define NV_DCS_VM_TH_PRUI_13_I                          2469
  #define NV_DCS_VM_TH_PRDI_15_I                          2470
  #define NV_DCS_VM_TH_PRDI_14_I                          2471
  #define NV_DCS_VM_TH_PRDI_13_I                          2472
  #define NV_GSM_1900_VM_TH_PRUI_15_I                     2473
  #define NV_GSM_1900_VM_TH_PRUI_14_I                     2474
  #define NV_GSM_1900_VM_TH_PRUI_13_I                     2475
  #define NV_GSM_1900_VM_TH_PRDI_15_I                     2476
  #define NV_GSM_1900_VM_TH_PRDI_14_I                     2477
  #define NV_GSM_1900_VM_TH_PRDI_13_I                     2478
  #define NV_GSM_VH_TH_PRUI_14_I                          2479
  #define NV_GSM_VH_TH_PRUI_13_I                          2480
  #define NV_GSM_VH_TH_PRUI_12_I                          2481
  #define NV_GSM_VH_TH_PRDI_14_I                          2482
  #define NV_GSM_VH_TH_PRDI_13_I                          2483
  #define NV_GSM_VH_TH_PRDI_12_I                          2484
  #define NV_DCS_VH_TH_PRUI_15_I                          2485
  #define NV_DCS_VH_TH_PRUI_14_I                          2486
  #define NV_DCS_VH_TH_PRUI_13_I                          2487
  #define NV_DCS_VH_TH_PRDI_15_I                          2488
  #define NV_DCS_VH_TH_PRDI_14_I                          2489
  #define NV_DCS_VH_TH_PRDI_13_I                          2490
  #define NV_GSM_1900_VH_TH_PRUI_15_I                     2491
  #define NV_GSM_1900_VH_TH_PRUI_14_I                     2492
  #define NV_GSM_1900_VH_TH_PRUI_13_I                     2493
  #define NV_GSM_1900_VH_TH_PRDI_15_I                     2494
  #define NV_GSM_1900_VH_TH_PRDI_14_I                     2495
  #define NV_GSM_1900_VH_TH_PRDI_13_I                     2496
  #define NV_FACTORY_DATA_1_I                             2497
  #define NV_FACTORY_DATA_2_I                             2498
  #define NV_FACTORY_DATA_3_I                             2499
  #define NV_FACTORY_DATA_4_I                             2500
  #define NV_GSM_PRUI_11_I                                2501
  #define NV_GSM_1900_PRDI_00_I                           2502
  #define NV_GSM_1900_PRDI_01_I                           2503
  #define NV_GSM_1900_PRDI_11_I                           2504
  #define NV_GSM_1900_PRDI_08_I                           2505
  #define NV_APPX5_PREF_I                                 2506
  #define NV_WLAN_NET_SEL_MODE_PREF_I                     2507
  #define NV_EDGE_FEATURE_SUPPORT_I                       2508
  #define NV_EDGE_MULTISLOT_CLASS_I                       2509
  #define NV_EDGE_8PSK_POWER_CLASS_I                      2510
  #define NV_EDGE_8PSK_POWER_CAPABILITY_I                 2511
  #define NV_GERAN_FEATURE_PACK_1_I                       2512
  #define NV_GSM_AMAM_MAX_PWR_I                           2513
  #define NV_GSM_AMAM_MIN_PWR_I                           2514
  #define NV_DCS_AMAM_MAX_PWR_I                           2515
  #define NV_DCS_AMAM_MIN_PWR_I                           2516
  #define NV_GSM_850_AMAM_MAX_PWR_I                       2517
  #define NV_GSM_850_AMAM_MIN_PWR_I                       2518
  #define NV_GSM_1900_AMAM_MAX_PWR_I                      2519
  #define NV_GSM_1900_AMAM_MIN_PWR_I                      2520
  #define NV_GSM_AMAM_MASTER_TBL_SEG1_F1_I                2521
  #define NV_GSM_AMAM_MASTER_TBL_SEG2_F1_I                2522
  #define NV_GSM_AMAM_MASTER_TBL_SEG3_F1_I                2523
  #define NV_GSM_AMAM_MASTER_TBL_SEG4_F1_I                2524
  #define NV_GSM_AMAM_MASTER_TBL_SEG5_F1_I                2525
  #define NV_GSM_AMAM_MASTER_TBL_SEG6_F1_I                2526
  #define NV_GSM_AMAM_MASTER_TBL_SEG7_F1_I                2527
  #define NV_GSM_AMAM_MASTER_TBL_SEG8_F1_I                2528
  #define NV_DCS_AMAM_MASTER_TBL_SEG1_F1_I                2529
  #define NV_DCS_AMAM_MASTER_TBL_SEG2_F1_I                2530
  #define NV_DCS_AMAM_MASTER_TBL_SEG3_F1_I                2531
  #define NV_DCS_AMAM_MASTER_TBL_SEG4_F1_I                2532
  #define NV_DCS_AMAM_MASTER_TBL_SEG5_F1_I                2533
  #define NV_DCS_AMAM_MASTER_TBL_SEG6_F1_I                2534
  #define NV_DCS_AMAM_MASTER_TBL_SEG7_F1_I                2535
  #define NV_DCS_AMAM_MASTER_TBL_SEG8_F1_I                2536
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG1_F1_I            2537
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG2_F1_I            2538
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG3_F1_I            2539
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG4_F1_I            2540
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG5_F1_I            2541
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG6_F1_I            2542
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG7_F1_I            2543
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG8_F1_I            2544
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG1_F1_I           2545
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG2_F1_I           2546
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG3_F1_I           2547
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG4_F1_I           2548
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG5_F1_I           2549
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG6_F1_I           2550
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG7_F1_I           2551
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG8_F1_I           2552
  #define NV_GSM_AMAM_MASTER_TBL_SEG1_F2_I                2553
  #define NV_GSM_AMAM_MASTER_TBL_SEG2_F2_I                2554
  #define NV_GSM_AMAM_MASTER_TBL_SEG3_F2_I                2555
  #define NV_GSM_AMAM_MASTER_TBL_SEG4_F2_I                2556
  #define NV_GSM_AMAM_MASTER_TBL_SEG5_F2_I                2557
  #define NV_GSM_AMAM_MASTER_TBL_SEG6_F2_I                2558
  #define NV_GSM_AMAM_MASTER_TBL_SEG7_F2_I                2559
  #define NV_GSM_AMAM_MASTER_TBL_SEG8_F2_I                2560
  #define NV_DCS_AMAM_MASTER_TBL_SEG1_F2_I                2561
  #define NV_DCS_AMAM_MASTER_TBL_SEG2_F2_I                2562
  #define NV_DCS_AMAM_MASTER_TBL_SEG3_F2_I                2563
  #define NV_DCS_AMAM_MASTER_TBL_SEG4_F2_I                2564
  #define NV_DCS_AMAM_MASTER_TBL_SEG5_F2_I                2565
  #define NV_DCS_AMAM_MASTER_TBL_SEG6_F2_I                2566
  #define NV_DCS_AMAM_MASTER_TBL_SEG7_F2_I                2567
  #define NV_DCS_AMAM_MASTER_TBL_SEG8_F2_I                2568
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG1_F2_I            2569
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG2_F2_I            2570
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG3_F2_I            2571
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG4_F2_I            2572
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG5_F2_I            2573
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG6_F2_I            2574
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG7_F2_I            2575
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG8_F2_I            2576
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG1_F2_I           2577
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG2_F2_I           2578
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG3_F2_I           2579
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG4_F2_I           2580
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG5_F2_I           2581
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG6_F2_I           2582
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG7_F2_I           2583
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG8_F2_I           2584
  #define NV_GSM_AMPM_MASTER_TBL_SEG1_F1_I                2585
  #define NV_GSM_AMPM_MASTER_TBL_SEG2_F1_I                2586
  #define NV_GSM_AMPM_MASTER_TBL_SEG3_F1_I                2587
  #define NV_GSM_AMPM_MASTER_TBL_SEG4_F1_I                2588
  #define NV_GSM_AMPM_MASTER_TBL_SEG5_F1_I                2589
  #define NV_GSM_AMPM_MASTER_TBL_SEG6_F1_I                2590
  #define NV_GSM_AMPM_MASTER_TBL_SEG7_F1_I                2591
  #define NV_GSM_AMPM_MASTER_TBL_SEG8_F1_I                2592
  #define NV_DCS_AMPM_MASTER_TBL_SEG1_F1_I                2593
  #define NV_DCS_AMPM_MASTER_TBL_SEG2_F1_I                2594
  #define NV_DCS_AMPM_MASTER_TBL_SEG3_F1_I                2595
  #define NV_DCS_AMPM_MASTER_TBL_SEG4_F1_I                2596
  #define NV_DCS_AMPM_MASTER_TBL_SEG5_F1_I                2597
  #define NV_DCS_AMPM_MASTER_TBL_SEG6_F1_I                2598
  #define NV_DCS_AMPM_MASTER_TBL_SEG7_F1_I                2599
  #define NV_DCS_AMPM_MASTER_TBL_SEG8_F1_I                2600
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG1_F1_I            2601
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG2_F1_I            2602
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG3_F1_I            2603
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG4_F1_I            2604
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG5_F1_I            2605
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG6_F1_I            2606
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG7_F1_I            2607
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG8_F1_I            2608
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG1_F1_I           2609
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG2_F1_I           2610
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG3_F1_I           2611
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG4_F1_I           2612
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG5_F1_I           2613
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG6_F1_I           2614
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG7_F1_I           2615
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG8_F1_I           2616
  #define NV_GSM_AMPM_MASTER_TBL_SEG1_F2_I                2617
  #define NV_GSM_AMPM_MASTER_TBL_SEG2_F2_I                2618
  #define NV_GSM_AMPM_MASTER_TBL_SEG3_F2_I                2619
  #define NV_GSM_AMPM_MASTER_TBL_SEG4_F2_I                2620
  #define NV_GSM_AMPM_MASTER_TBL_SEG5_F2_I                2621
  #define NV_GSM_AMPM_MASTER_TBL_SEG6_F2_I                2622
  #define NV_GSM_AMPM_MASTER_TBL_SEG7_F2_I                2623
  #define NV_GSM_AMPM_MASTER_TBL_SEG8_F2_I                2624
  #define NV_DCS_AMPM_MASTER_TBL_SEG1_F2_I                2625
  #define NV_DCS_AMPM_MASTER_TBL_SEG2_F2_I                2626
  #define NV_DCS_AMPM_MASTER_TBL_SEG3_F2_I                2627
  #define NV_DCS_AMPM_MASTER_TBL_SEG4_F2_I                2628
  #define NV_DCS_AMPM_MASTER_TBL_SEG5_F2_I                2629
  #define NV_DCS_AMPM_MASTER_TBL_SEG6_F2_I                2630
  #define NV_DCS_AMPM_MASTER_TBL_SEG7_F2_I                2631
  #define NV_DCS_AMPM_MASTER_TBL_SEG8_F2_I                2632
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG1_F2_I            2633
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG2_F2_I            2634
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG3_F2_I            2635
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG4_F2_I            2636
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG5_F2_I            2637
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG6_F2_I            2638
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG7_F2_I            2639
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG8_F2_I            2640
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG1_F2_I           2641
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG2_F2_I           2642
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG3_F2_I           2643
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG4_F2_I           2644
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG5_F2_I           2645
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG6_F2_I           2646
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG7_F2_I           2647
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG8_F2_I           2648
  #define NV_GSM_CALPATH_RSB_A_G1_I                       2649
  #define NV_GSM_CALPATH_RSB_B_G1_I                       2650
  #define NV_GSM_850_CALPATH_RSB_A_G1_I                   2651
  #define NV_GSM_850_CALPATH_RSB_B_G1_I                   2652
  #define NV_DCS_CALPATH_RSB_A_G1_I                       2653
  #define NV_DCS_CALPATH_RSB_B_G1_I                       2654
  #define NV_GSM_1900_CALPATH_RSB_A_G1_I                  2655
  #define NV_GSM_1900_CALPATH_RSB_B_G1_I                  2656
  #define NV_GSM_CALPATH_RSB_A_G2_I                       2657
  #define NV_GSM_CALPATH_RSB_B_G2_I                       2658
  #define NV_GSM_850_CALPATH_RSB_A_G2_I                   2659
  #define NV_GSM_850_CALPATH_RSB_B_G2_I                   2660
  #define NV_DCS_CALPATH_RSB_A_G2_I                       2661
  #define NV_DCS_CALPATH_RSB_B_G2_I                       2662
  #define NV_GSM_1900_CALPATH_RSB_A_G2_I                  2663
  #define NV_GSM_1900_CALPATH_RSB_B_G2_I                  2664
  #define NV_GSM_AMAM_GAIN_LOW_TEMP_I                     2665
  #define NV_GSM_AMAM_DC_LOW_TEMP_I                       2666
  #define NV_GSM_AMAM_GAIN_HIGH_TEMP_I                    2667
  #define NV_GSM_AMAM_DC_HIGH_TEMP_I                      2668
  #define NV_GSM_AMAM_GAIN_NOM_TEMP_I                     2669
  #define NV_GSM_AMAM_DC_NOM_TEMP_I                       2670
  #define NV_GSM_850_AMAM_GAIN_LOW_TEMP_I                 2671
  #define NV_GSM_850_AMAM_DC_LOW_TEMP_I                   2672
  #define NV_GSM_850_AMAM_GAIN_HIGH_TEMP_I                2673
  #define NV_GSM_850_AMAM_DC_HIGH_TEMP_I                  2674
  #define NV_GSM_850_AMAM_GAIN_NOM_TEMP_I                 2675
  #define NV_GSM_850_AMAM_DC_NOM_TEMP_I                   2676
  #define NV_DCS_AMAM_GAIN_LOW_TEMP_I                     2677
  #define NV_DCS_AMAM_DC_LOW_TEMP_I                       2678
  #define NV_DCS_AMAM_GAIN_HIGH_TEMP_I                    2679
  #define NV_DCS_AMAM_DC_HIGH_TEMP_I                      2680
  #define NV_DCS_AMAM_GAIN_NOM_TEMP_I                     2681
  #define NV_DCS_AMAM_DC_NOM_TEMP_I                       2682
  #define NV_GSM_1900_AMAM_GAIN_LOW_TEMP_I                2683
  #define NV_GSM_1900_AMAM_DC_LOW_TEMP_I                  2684
  #define NV_GSM_1900_AMAM_GAIN_HIGH_TEMP_I               2685
  #define NV_GSM_1900_AMAM_DC_HIGH_TEMP_I                 2686
  #define NV_GSM_1900_AMAM_GAIN_NOM_TEMP_I                2687
  #define NV_GSM_1900_AMAM_DC_NOM_TEMP_I                  2688
  #define NV_GSM_AMAM_ARFCN_I                             2689
  #define NV_DCS_AMAM_ARFCN_I                             2690
  #define NV_GSM_850_AMAM_ARFCN_I                         2691
  #define NV_GSM_1900_AMAM_ARFCN_I                        2692
  #define NV_ABNORMAL_EXIT_COUNT_I                        2693
  #define NV_SYS_STRUCT_FCT_FILE_NAME_I                   2694
  #define NV_SYS_STRUCT_FCT_FILE_XSUM_I                   2695
  #define NV_SYS_CUSTOM_INI_FILE_NAME_I                   2696
  #define NV_SYS_CUSTOM_INI_FILE_XSUM_I                   2697
  #define NV_SYS_STD_MAP_FILE_VER_I                       2698
  #define NV_SYS_STD_MAP_FILE_XSUM_I                      2699
  #define NV_SYS_SPC_DELTA_FILE_VER_I                     2700
  #define NV_SYS_SPC_DELTA_FILE_XSUM_I                    2701
  #define NV_LCD_ID_I                                     2702
  #define NV_WCDMA_PA_RANGE_FOR_DVS_I                     2703
  #define NV_WCDMA_PA_COMPENSATE_UP_WITH_DVS_I            2704
  #define NV_WCDMA_PA_COMPENSATE_DN_WITH_DVS_I            2705
  #define NV_WCDMA_1900_PA_RANGE_FOR_DVS_I                2706
  #define NV_WCDMA_1900_PA_COMPENSATE_UP_WITH_DVS_I       2707
  #define NV_WCDMA_1900_PA_COMPENSATE_DN_WITH_DVS_I       2708
  #define NV_WCDMA_800_PA_RANGE_FOR_DVS_I                 2709
  #define NV_WCDMA_800_PA_COMPENSATE_UP_WITH_DVS_I        2710
  #define NV_WCDMA_800_PA_COMPENSATE_DN_WITH_DVS_I        2711
  #define NV_WCDMA_MAX_PWR_BACKOFF_VOLTAGES_I             2712
  #define NV_WCDMA_MAX_PWR_BACKOFF_VOLT1_I                2713
  #define NV_WCDMA_MAX_PWR_BACKOFF_VOLT2_I                2714
  #define NV_WCDMA_MAX_PWR_BACKOFF_VOLT3_I                2715
  #define NV_WCDMA_1900_MAX_PWR_BACKOFF_VOLTAGES_I        2716
  #define NV_WCDMA_1900_MAX_PWR_BACKOFF_VOLT1_I           2717
  #define NV_WCDMA_1900_MAX_PWR_BACKOFF_VOLT2_I           2718
  #define NV_WCDMA_1900_MAX_PWR_BACKOFF_VOLT3_I           2719
  #define NV_WCDMA_800_MAX_PWR_BACKOFF_VOLTAGES_I         2720
  #define NV_WCDMA_800_MAX_PWR_BACKOFF_VOLT1_I            2721
  #define NV_WCDMA_800_MAX_PWR_BACKOFF_VOLT2_I            2722
  #define NV_WCDMA_800_MAX_PWR_BACKOFF_VOLT3_I            2723
  #define NV_WCDMA_HS_R1_RISE_I                           2724
  #define NV_WCDMA_HS_R1_FALL_I                           2725
  #define NV_WCDMA_HS_R2_RISE_I                           2726
  #define NV_WCDMA_HS_R2_FALL_I                           2727
  #define NV_WCDMA_HS_R3_RISE_I                           2728
  #define NV_WCDMA_HS_R3_FALL_I                           2729
  #define NV_WCDMA_1900_HS_R1_RISE_I                      2730
  #define NV_WCDMA_1900_HS_R1_FALL_I                      2731
  #define NV_WCDMA_1900_HS_R2_RISE_I                      2732
  #define NV_WCDMA_1900_HS_R2_FALL_I                      2733
  #define NV_WCDMA_1900_HS_R3_RISE_I                      2734
  #define NV_WCDMA_1900_HS_R3_FALL_I                      2735
  #define NV_WCDMA_800_HS_R1_RISE_I                       2736
  #define NV_WCDMA_800_HS_R1_FALL_I                       2737
  #define NV_WCDMA_800_HS_R2_RISE_I                       2738
  #define NV_WCDMA_800_HS_R2_FALL_I                       2739
  #define NV_WCDMA_800_HS_R3_RISE_I                       2740
  #define NV_WCDMA_800_HS_R3_FALL_I                       2741
  #define NV_GSM_AUTOCAL_PWR_DAC_F1_I                     2742
  #define NV_GSM_AMAM_DYNAMIC_RANGE_I                     2743
  #define NV_DCS_AUTOCAL_PWR_DAC_F1_I                     2744
  #define NV_DCS_AMAM_DYNAMIC_RANGE_I                     2745
  #define NV_GSM_850_AUTOCAL_PWR_DAC_F1_I                 2746
  #define NV_GSM_850_AMAM_DYNAMIC_RANGE_I                 2747
  #define NV_GSM_1900_AUTOCAL_PWR_DAC_F1_I                2748
  #define NV_GSM_1900_AMAM_DYNAMIC_RANGE_I                2749
  #define NV_GSM_CALPATH_RSB_I                            2750
  #define NV_DCS_CALPATH_RSB_I                            2751
  #define NV_GSM_850_CALPATH_RSB_I                        2752
  #define NV_GSM_1900_CALPATH_RSB_I                       2753
  #define NV_GSM_AMAM_SYS_GAIN_DC_CORR_I                  2754
  #define NV_GSM_850_AMAM_SYS_GAIN_DC_CORR_I              2755
  #define NV_DCS_AMAM_SYS_GAIN_DC_CORR_I                  2756
  #define NV_GSM_1900_AMAM_SYS_GAIN_DC_CORR_I             2757
  #define NV_GSM_AMAM_ARFCN_F1_I                          2758
  #define NV_DCS_AMAM_ARFCN_F1_I                          2759
  #define NV_GSM_850_AMAM_ARFCN_F1_I                      2760
  #define NV_GSM_1900_AMAM_ARFCN_F1_I                     2761
  #define NV_GSM_AMAM_ARFCN_F2_I                          2762
  #define NV_DCS_AMAM_ARFCN_F2_I                          2763
  #define NV_GSM_850_AMAM_ARFCN_F2_I                      2764
  #define NV_GSM_1900_AMAM_ARFCN_F2_I                     2765
  #define NV_GSM_AUTOCAL_PWR_DAC_F2_I                     2766
  #define NV_DCS_AUTOCAL_PWR_DAC_F2_I                     2767
  #define NV_GSM_850_AUTOCAL_PWR_DAC_F2_I                 2768
  #define NV_GSM_1900_AUTOCAL_PWR_DAC_F2_I                2769
  #define NV_GSM_POLAR_PATH_DELAY_I                       2770
  #define NV_DCS_POLAR_PATH_DELAY_I                       2771
  #define NV_GSM_850_POLAR_PATH_DELAY_I                   2772
  #define NV_GSM_1900_POLAR_PATH_DELAY_I                  2773
  #define NV_GSM_OPLL_BW_VAL_I                            2774
  #define NV_DCS_OPLL_BW_VAL_I                            2775
  #define NV_GSM_850_OPLL_BW_VAL_I                        2776
  #define NV_GSM_1900_OPLL_BW_VAL_I                       2777
  #define NV_GSM_BASEBAND_BW_VAL_I                        2778
  #define NV_DCS_BASEBAND_BW_VAL_I                        2779
  #define NV_GSM_850_BASEBAND_BW_VAL_I                    2780
  #define NV_GSM_1900_BASEBAND_BW_VAL_I                   2781
  #define NV_USB_CURRENT_DEVICE_I                         2782
  #define NV_GPS1_MIN_NUM_SVS_I                           2783
  #define NV_AAGPS_DEFAULT_ALLOW_RRC_I                    2784
  #define NV_AAGPS_DEFAULT_MTLR_GUARD_TIMER_I             2785
  #define NV_AAGPS_DEFAULT_SMLC_COMM_TIMEOUT_I            2786
  #define NV_AAGPS_DEFAULT_PRESUPL_UE_TIMER1_VALUE_I      2787
  #define NV_AAGPS_DEFAULT_PRESUPL_UE_TIMER2_VALUE_I      2788
  #define NV_AAGPS_DEFAULT_PRESUPL_UE_TIMER3_VALUE_I      2789
  #define NV_ACTIVE_EPZID_TYPE_I                          2790
  #define NV_C0_BC0_RX_CAL_CHAN_LRU_I                     2791
  #define NV_C1_BC0_RX_CAL_CHAN_LRU_I                     2792
  #define NV_C0_BC1_RX_CAL_CHAN_LRU_I                     2793
  #define NV_C1_BC1_RX_CAL_CHAN_LRU_I                     2794
  #define NV_C0_BC3_RX_CAL_CHAN_LRU_I                     2795
  #define NV_C1_BC3_RX_CAL_CHAN_LRU_I                     2796
  #define NV_C0_BC4_RX_CAL_CHAN_LRU_I                     2797
  #define NV_C1_BC4_RX_CAL_CHAN_LRU_I                     2798
  #define NV_C0_BC5_RX_CAL_CHAN_LRU_I                     2799
  #define NV_C1_BC5_RX_CAL_CHAN_LRU_I                     2800
  #define NV_C0_BC6_RX_CAL_CHAN_LRU_I                     2801
  #define NV_C1_BC6_RX_CAL_CHAN_LRU_I                     2802
  #define NV_CCM_VERSION_INFO_I                           2803
  #define NV_TURNOFF_COUNTER_I                            2804
  #define NV_POWERDOWN_STATUS_I                           2805
  #define NV_PHONE_POWER_ON_STATUS_I                      2806
  #define NV_FIRST_POWER_ON_TIME_I                        2807
  #define NV_SW_VERSION_INFO_I                            2808
  #define NV_SET_DATE_FORMAT_I                            2809
  #define NV_SET_TIME_FORMAT_I                            2810
  #define NV_SET_SHOW_TIME_I                              2811
  #define NV_SET_AUTO_TIME_I                              2812
  #define NV_SET_BUDDHIST_YEAR_I                          2813
  #define NV_BC0_HDR_P1_RISE_FALL_OFF_I                   2814
  #define NV_BC1_HDR_P1_RISE_FALL_OFF_I                   2815
  #define NV_BC3_HDR_P1_RISE_FALL_OFF_I                   2816
  #define NV_BC4_HDR_P1_RISE_FALL_OFF_I                   2817
  #define NV_BC5_HDR_P1_RISE_FALL_OFF_I                   2818
  #define NV_BC6_HDR_P1_RISE_FALL_OFF_I                   2819
  #define NV_DS_INCOMING_DATA_RLP_TIMEOUT_I               2820
  #define NV_DS_DEFAULT_INACTIVITY_RESTORE_TIMEOUT_I      2821
  #define NV_CHG_USB_NVDISABLE_VAL_I                      2822
  #define NV_CONSORTIUM_CONFIG_I                          2823
  #define NV_DEVICE_SERIAL_NO_I                           2824
  #define NV_DS_MIP_RM_NAI_I                              2825
  #define NV_SMS_BMC_READING_PREF_I                       2826
  #define NV_VOC_HS_MIC_GAIN_ADJUST_I                     2827
  #define NV_AUTO_POWER_OFF_I                             2828
  #define NV_FAST_SEARCH_I                                2829
  #define NV_UPLOADMEDIA_ALBUM_MENU_ENABLED_I             2830
  #define NV_UPLOADMEDIA_ALBUM_ADDR_I                     2831
  #define NV_UPLOADMEDIA_POSTCARD_MENU_ENABLED_I          2832
  #define NV_UPLOADMEDIA_POSTCARD_SEPARATOR_I             2833
  #define NV_UPLOADMEDIA_POSTCARD_ADDR_I                  2834
  #define NV_UPLOADMEDIA_POSTCARD_MAX_CHARACTERS_I        2835
  #define NV_UPLOADMEDIA_POSTCARD_MAX_RECIPIENTS_I        2836
  #define NV_UPLOADMEDIA_POSTCARD_AUTO_SAVE_I             2837
  #define NV_EMAIL_ACTIVE_PROFILE_I                       2838
  #define NV_BT_ACTIVE_I                                  2839
  #define NV_BT_VISIBLE_I                                 2840
  #define NV_BT_SAP_ENABLE_I                              2841
  #define NV_WCLOCK_AUTO_NITZ_ZONE_DST_I                  2842
  #define NV_TIMEZONE_I                                   2843
  #define NV_HDRSCP_BCMCS_ENABLE_I                        2844
  #define NV_WCDMA_1800_VGA_GAIN_OFFSET_I                 2845
  #define NV_WCDMA_1800_VGA_GAIN_OFFSET_VS_FREQ_I         2846
  #define NV_WCDMA_1800_VGA_GAIN_OFFSET_VS_TEMP_I         2847
  #define NV_WCDMA_1800_LNA_RANGE_RISE_2_I                2848
  #define NV_WCDMA_1800_LNA_RANGE_RISE_3_I                2849
  #define NV_WCDMA_1800_LNA_RANGE_FALL_2_I                2850
  #define NV_WCDMA_1800_LNA_RANGE_FALL_3_I                2851
  #define NV_WCDMA_1800_IM_LEVEL_2_I                      2852
  #define NV_WCDMA_1800_IM_LEVEL_3_I                      2853
  #define NV_WCDMA_1800_LNA_RANGE_OFFSET_2_I              2854
  #define NV_WCDMA_1800_LNA_RANGE_OFFSET_3_I              2855
  #define NV_WCDMA_1800_LNA_OFFSET_VS_FREQ_2_I            2856
  #define NV_WCDMA_1800_LNA_OFFSET_VS_FREQ_3_I            2857
  #define NV_WCDMA_1800_IM2_I_VALUE_I                     2858
  #define NV_WCDMA_1800_IM2_Q_VALUE_I                     2859
  #define NV_WCDMA_1800_IM2_TRANSCONDUCTOR_VALUE_I        2860
  #define NV_WCDMA_1800_RX_AGC_MIN_2_I                    2861
  #define NV_WCDMA_1800_RX_AGC_MIN_3_I                    2862
  #define NV_WCDMA_1800_LNA_RANGE_RISE_I                  2863
  #define NV_WCDMA_1800_LNA_RANGE_FALL_I                  2864
  #define NV_WCDMA_1800_IM_LEVEL_I                        2865
  #define NV_WCDMA_1800_NONBYPASS_TIMER_I                 2866
  #define NV_WCDMA_1800_BYPASS_TIMER_I                    2867
  #define NV_WCDMA_1800_LNA_RANGE_OFFSET_I                2868
  #define NV_WCDMA_1800_LNA_OFFSET_VS_FREQ_I              2869
  #define NV_WCDMA_1800_RX_AGC_MIN_I                      2870
  #define NV_WCDMA_1800_RX_AGC_MAX_I                      2871
  #define NV_WCDMA_1800_AGC_PHASE_OFFSET_I                2872
  #define NV_WCDMA_1800_TX_LIN_MASTER_0_I                 2873
  #define NV_WCDMA_1800_TX_LIN_MASTER_1_I                 2874
  #define NV_WCDMA_1800_TX_LIN_MASTER_2_I                 2875
  #define NV_WCDMA_1800_TX_LIN_MASTER_3_I                 2876
  #define NV_WCDMA_1800_TX_COMP_VS_FREQ_0_I               2877
  #define NV_WCDMA_1800_TX_COMP_VS_FREQ_1_I               2878
  #define NV_WCDMA_1800_TX_COMP_VS_FREQ_2_I               2879
  #define NV_WCDMA_1800_TX_COMP_VS_FREQ_3_I               2880
  #define NV_WCDMA_1800_TX_LIN_VS_TEMP_0_I                2881
  #define NV_WCDMA_1800_TX_LIN_VS_TEMP_1_I                2882
  #define NV_WCDMA_1800_TX_LIN_VS_TEMP_2_I                2883
  #define NV_WCDMA_1800_TX_LIN_VS_TEMP_3_I                2884
  #define NV_WCDMA_1800_TX_SLP_VS_TEMP_0_I                2885
  #define NV_WCDMA_1800_TX_SLP_VS_TEMP_1_I                2886
  #define NV_WCDMA_1800_TX_SLP_VS_TEMP_2_I                2887
  #define NV_WCDMA_1800_TX_SLP_VS_TEMP_3_I                2888
  #define NV_WCDMA_1800_R1_RISE_I                         2889
  #define NV_WCDMA_1800_R1_FALL_I                         2890
  #define NV_WCDMA_1800_TX_LIM_VS_TEMP_I                  2891
  #define NV_WCDMA_1800_TX_LIM_VS_FREQ_I                  2892
  #define NV_WCDMA_1800_ADJ_FACTOR_I                      2893
  #define NV_WCDMA_1800_EXP_HDET_VS_AGC_I                 2894
  #define NV_WCDMA_1800_HDET_OFF_I                        2895
  #define NV_WCDMA_1800_HDET_SPN_I                        2896
  #define NV_WCDMA_1800_MAX_TX_POWER_I                    2897
  #define NV_WCDMA_1800_OUT_OF_SERVICE_THRESH_I           2898
  #define NV_WCDMA_1800_ENC_BTF_I                         2899
  #define NV_WCDMA_1800_RX_DELAY_I                        2900
  #define NV_WCDMA_1800_AGC_PA_ON_RISE_DELAY_I            2901
  #define NV_WCDMA_1800_AGC_PA_ON_FALL_DELAY_I            2902
  #define NV_WCDMA_1800_AGC_TX_ON_RISE_DELAY_I            2903
  #define NV_WCDMA_1800_AGC_TX_ON_FALL_DELAY_I            2904
  #define NV_WCDMA_1800_AGC_UPDATE_TX_AGC_TIME_I          2905
  #define NV_WCDMA_1800_PA_GAIN_UP_TIME_I                 2906
  #define NV_WCDMA_1800_PA_GAIN_DOWN_TIME_I               2907
  #define NV_WCDMA_1800_TX_ROT_ANGLE_PA_STATE_00_I        2908
  #define NV_WCDMA_1800_TX_ROT_ANGLE_PA_STATE_01_I        2909
  #define NV_WCDMA_1800_TX_ROT_ANGLE_PA_STATE_10_I        2910
  #define NV_WCDMA_1800_TX_ROT_ANGLE_PA_STATE_11_I        2911
  #define NV_RFR_VCO_COARSE_TUNING_1800_I                 2912
  #define NV_WCDMA_1800_PA_COMPENSATE_UP_I                2913
  #define NV_WCDMA_1800_PA_COMPENSATE_DOWN_I              2914
  #define NV_WCDMA_1800_PRACH_R1_RISE_OFFSET_I            2915
  #define NV_WCDMA_1800_PRACH_R1_FALL_OFFSET_I            2916
  #define NV_WCDMA_1800_TX_CAL_CHAN_I                     2917
  #define NV_WCDMA_1800_RX_CAL_CHAN_I                     2918
  #define NV_WCDMA_1800_R2_RISE_I                         2919
  #define NV_WCDMA_1800_R2_FALL_I                         2920
  #define NV_WCDMA_1800_R3_RISE_I                         2921
  #define NV_WCDMA_1800_R3_FALL_I                         2922
  #define NV_WCDMA_1800_PA_COMPENSATE_UP_R2_I             2923
  #define NV_WCDMA_1800_PA_COMPENSATE_DOWN_R2_I           2924
  #define NV_WCDMA_1800_PA_COMPENSATE_UP_R3_I             2925
  #define NV_WCDMA_1800_PA_COMPENSATE_DOWN_R3_I           2926
  #define NV_WCDMA_1800_PRACH_R2_RISE_OFFSET_I            2927
  #define NV_WCDMA_1800_PRACH_R2_FALL_OFFSET_I            2928
  #define NV_WCDMA_1800_PRACH_R3_RISE_OFFSET_I            2929
  #define NV_WCDMA_1800_PRACH_R3_FALL_OFFSET_I            2930
  #define NV_WCDMA_1800_PA_RANGE_MAP_I                    2931
  #define NV_WCDMA_1800_PA_RANGE_FOR_DVS_I                2932
  #define NV_WCDMA_1800_PA_COMPENSATE_UP_WITH_DVS_I       2933
  #define NV_WCDMA_1800_PA_COMPENSATE_DN_WITH_DVS_I       2934
  #define NV_WCDMA_1800_MAX_PWR_BACKOFF_VOLTAGES_I        2935
  #define NV_WCDMA_1800_MAX_PWR_BACKOFF_VOLT1_I           2936
  #define NV_WCDMA_1800_MAX_PWR_BACKOFF_VOLT2_I           2937
  #define NV_WCDMA_1800_MAX_PWR_BACKOFF_VOLT3_I           2938
  #define NV_WCDMA_1800_HS_R1_RISE_I                      2939
  #define NV_WCDMA_1800_HS_R1_FALL_I                      2940
  #define NV_WCDMA_1800_HS_R2_RISE_I                      2941
  #define NV_WCDMA_1800_HS_R2_FALL_I                      2942
  #define NV_WCDMA_1800_HS_R3_RISE_I                      2943
  #define NV_WCDMA_1800_HS_R3_FALL_I                      2944
  #define NV_WCDMA_1800_DCH_AGC_UPDATE_TX_AGC_TIME_I      2945
  #define NV_WCDMA_1800_AGC_TX_ADJ_PDM_DELAY_I            2946
  #define NV_WCDMA_1900_DCH_AGC_UPDATE_TX_AGC_TIME_I      2947
  #define NV_WCDMA_1900_AGC_TX_ADJ_PDM_DELAY_I            2948
  #define NV_WCDMA_800_DCH_AGC_UPDATE_TX_AGC_TIME_I       2949
  #define NV_WCDMA_800_AGC_TX_ADJ_PDM_DELAY_I             2950
  #define NV_WCDMA_DCH_AGC_UPDATE_TX_AGC_TIME_I           2951
  #define NV_WCDMA_AGC_TX_ADJ_PDM_DELAY_I                 2952
  #define NV_DS_SIP_RM_NAI_I                              2953
  #define NV_BAND_PREF_32_63_I                            2954
  #define NV_MMS_MAX_MSG_SIZE1_I                          2955
  #define NV_MMS_MAX_MSG_SIZE2_I                          2956
  #define NV_MMS_MAX_MSG_SIZE3_I                          2957
  #define NV_MMS_MAX_SIZE_USER_SELECTABLE_I               2958
  #define NV_MMS_ACTIVE_MAX_MSG_SIZE_I                    2959
  #define NV_MMS_ACTIVE_PROFILE_I                         2960
  #define NV_MMS_HIDE_NUMBER_I                            2961
  #define NV_MMS_REQ_DELIVERY_RPT_I                       2962
  #define NV_MMS_REQ_READ_RPT_I                           2963
  #define NV_MMS_PRIORITY_I                               2964
  #define NV_MMS_VALIDITY_PERIOD_I                        2965
  #define NV_MMS_SLIDE_DURATION_I                         2966
  #define NV_MMS_RETRIEVAL_HOME_I                         2967
  #define NV_MMS_RETRIEVAL_ROAM_I                         2968
  #define NV_MMS_DELIVERY_TIME_I                          2969
  #define NV_MMS_ALLOW_ANON_MSG_I                         2970
  #define NV_MMS_CREATION_MODE_I                          2971
  #define NV_MMS_AUTOSIG_I                                2972
  #define NV_MMS_AUTO_SAVE_I                              2973
  #define NV_MMS_ALLOW_READ_RPT_I                         2974
  #define NV_MMS_ALLOW_DELIVERY_RPT_I                     2975
  #define NV_MMS_MAX_RECIPIENTS_I                         2976
  #define NV_MMS_MAX_STORED_MMS_I                         2977
  #define NV_MMS_SIGNATURE_ACTIVE_TEMPLATE_I              2978
  #define NV_BT_FILELOCATION_ONDEVICE_I                   2979
  #define NV_WCDMA_UTRAN_TX_LIM_VS_TEMP_OFFSET_I          2980
  #define NV_WCDMA_1800_UTRAN_TX_LIM_VS_TEMP_OFFSET_I     2981
  #define NV_WCDMA_800_UTRAN_TX_LIM_VS_TEMP_OFFSET_I      2982
  #define NV_WCDMA_1900_UTRAN_TX_LIM_VS_TEMP_OFFSET_I     2983
  #define NV_SENDVIA_CFG_I                                2984
  #define   NV_PU_PROMPT_ENABLED_I                          2985
  #define NV_USER_GREETING_I                              2986
  #define NV_SCREENSAVER_STYLE_I                          2987
  #define NV_SCREENSAVER_TIMEOUT_I                        2988
  #define NV_MESSAGING_FONT_I                             2989
  #define NV_SYNCML_DM_ACTIVEPROFILE_I                    2990
  #define NV_SYNCML_DS_ACTIVEPROFILE_I                    2991
  #define NV_SYNCML_SYNCDIRECTION_I                       2992
  #define NV_SYNCML_DATATOSYNC_I                          2993
  #define NV_SYNCML_APPSTOSYNC_I                          2994
  #define NV_MS_SMS_ACTIVE_PROFILE_I                      2995
  #define NV_MS_SMS_TEXT_SIZE_I                           2996
  #define NV_MS_SMS_AUTOHEADER_I                          2997
  #define NV_MS_SMS_AUTOSIGNATURE_I                       2998
  #define NV_MS_SMS_HEADER_ACTIVE_TEMPLATE_I              2999
  #define NV_MS_SMS_SIGNATURE_ACTIVE_TEMPLATE_I           3000
  #define NV_MS_SMS_AUTOSAVE_I                            3001
  #define NV_MS_SMS_AUTODELETE_I                          3002
  #define NV_MS_SMS_ALLOW_EMOTICONS_I                     3003
  #define NV_MS_SMS_MAX_SEGMENTS_I                        3004
  #define NV_MS_SMS_MAX_RECIPIENTS_I                      3005
  #define NV_MS_SMS_MAX_NUMBER_OF_SMS_I                   3006
  #define NV_MS_SMS_MAX_TEMPLATES_I                       3007
  #define NV_MS_SMS_OPCO_TYPES_SUPPORTED_I                3008
  #define NV_MS_SMS_SMSC_ADDRESS1_I                       3009
  #define NV_MS_SMS_SMSC_ADDRESS2_I                       3010
  #define NV_MS_SMS_SMSC_ADDRESS3_I                       3011
  #define NV_MS_SMS_SMSC_ADDRESS4_I                       3012
  #define NV_MS_SMS_SMSC_ADDRESS5_I                       3013
  #define NV_WCDMA_MAX_TX_POWER_DCH_PC4_I                 3014
  #define NV_POC_SHOW_PT_MENU_I                           3015
  #define NV_POC_SERVER_IP1_I                             3016
  #define NV_POC_SERVER_IP2_I                             3017
  #define NV_POC_SERVER_PORT_I                            3018
  #define NV_POC_NAI_I                                    3019
  #define NV_POC_BILLING_SERVICE_I                        3020
  #define NV_POC_GLM_PASSWORD_I                           3021
  #define NV_POC_RTP_PORT_I                               3022
  #define NV_POC_SIP_PORT_I                               3023
  #define NV_POC_IS_SIG_COMP_I                            3024
  #define NV_POC_MAX_AUTH_RETRIES_I                       3025
  #define NV_POC_CONNECTION_PROFILE_I                     3026
  #define NV_RF_ANTSEL_UMTS_1800_I                        3027
  #define NV_IM_SHOW_MENU_I                               3028
  #define NV_IM_CONNECTION_PROFILE_I                      3029
  #define NV_IM_PRIMARY_IP_ADDR_I                         3030
  #define NV_IM_PRIMARY_PORT_I                            3031
  #define NV_IM_ENCODING_METHOD_I                         3032
  #define NV_IM_SERVER_NAME_I                             3033
  #define NV_IM_WV_VERSION_I                              3034
  #define NV_BC0_PA_DVS_VOLTAGE_I                         3035
  #define NV_BC1_PA_DVS_VOLTAGE_I                         3036
  #define NV_BC3_PA_DVS_VOLTAGE_I                         3037
  #define NV_BC4_PA_DVS_VOLTAGE_I                         3038
  #define NV_BC5_PA_DVS_VOLTAGE_I                         3039
  #define NV_BC6_PA_DVS_VOLTAGE_I                         3040
  #define NV_EXT_OP_LIST_ENTRY_VALID_I                    3041
  #define NV_EXT_OP_LIST_ENTRY_NAME_I                     3042
  #define NV_EXT_OP_LIST_ENTRY_PLMN_I                     3043
  #define NV_BM_BAT_STATS_I                               3044
  #define NV_DISPLAY_LANGUAGE_OPTIONS_I                   3045
  #define NV_DISPLAY_LANGUAGE_I                           3046
  #define NV_INPUT_LANGUAGE_MODE_I                        3047
  #define NV_INPUT_LANGUAGE_OPTIONS_I                     3048
  #define NV_INPUT_LANGUAGE_I                             3049
  #define NV_SYS_CONVERT_SCRIPT_VER_I                     3050
  #define NV_SYS_PROD_SPEC_CONVERT_SCRIPT_VER_I           3051
  #define NV_SYS_MANUAL_CONVERT_SCRIPT_VER_I              3052
  #define NV_IRDA_ACTIVE_I                                3053
  #define NV_IRDA_FILE_LOCATION_I                         3054
  #define NV_GSM_RAMP_UP_STEPS_I                          3055
  #define NV_GSM_RAMP_UP_RAISE_COSINE_POWER_I             3056
  #define NV_GSM_RAMP_DOWN_STEPS_I                        3057
  #define NV_GSM_RAMP_DOWN_RAISE_COSINE_POWER_I           3058
  #define NV_GSM_POWER_LEVELS_I                           3059
  #define NV_DCS_POWER_LEVELS_I                           3060
  #define NV_GSM_850_POWER_LEVELS_I                       3061
  #define NV_GSM_1900_POWER_LEVELS_I                      3062
  #define NV_GSM_PA_EN_START_I                            3063
  #define NV_GSM_ANT_TIMING_REL_TO_PA_EN_START_I          3064
  #define NV_DCS_PA_EN_START_I                            3065
  #define NV_DCS_ANT_TIMING_REL_TO_PA_EN_START_I          3066
  #define NV_GSM_850_PA_EN_START_I                        3067
  #define NV_GSM_1900_PA_EN_START_I                       3068
  #define NV_GSM_1900_ANT_TIMING_REL_TO_PA_EN_START_I     3069
  #define NV_GSM_PA_EN_STOP_I                             3070
  #define NV_GSM_ANT_TIMING_REL_TO_PA_EN_STOP_I           3071
  #define NV_DCS_PA_EN_STOP_I                             3072
  #define NV_DCS_ANT_TIMING_REL_TO_PA_EN_STOP_I           3073
  #define NV_GSM_850_PA_EN_STOP_I                         3074
  #define NV_GSM_850_ANT_TIMING_REL_TO_PA_EN_STOP_I       3075
  #define NV_GSM_1900_PA_EN_STOP_I                        3076
  #define NV_GSM_1900_ANT_TIMING_REL_TO_PA_EN_STOP_I      3077
  #define NV_GSM_AMAM_MASTER_TBL_SEG1_F3_I                3078
  #define NV_GSM_AMAM_MASTER_TBL_SEG2_F3_I                3079
  #define NV_GSM_AMAM_MASTER_TBL_SEG3_F3_I                3080
  #define NV_GSM_AMAM_MASTER_TBL_SEG4_F3_I                3081
  #define NV_GSM_AMAM_MASTER_TBL_SEG5_F3_I                3082
  #define NV_GSM_AMAM_MASTER_TBL_SEG6_F3_I                3083
  #define NV_GSM_AMAM_MASTER_TBL_SEG7_F3_I                3084
  #define NV_GSM_AMAM_MASTER_TBL_SEG8_F3_I                3085
  #define NV_DCS_AMAM_MASTER_TBL_SEG1_F3_I                3086
  #define NV_DCS_AMAM_MASTER_TBL_SEG2_F3_I                3087
  #define NV_DCS_AMAM_MASTER_TBL_SEG3_F3_I                3088
  #define NV_DCS_AMAM_MASTER_TBL_SEG4_F3_I                3089
  #define NV_DCS_AMAM_MASTER_TBL_SEG5_F3_I                3090
  #define NV_DCS_AMAM_MASTER_TBL_SEG6_F3_I                3091
  #define NV_DCS_AMAM_MASTER_TBL_SEG7_F3_I                3092
  #define NV_DCS_AMAM_MASTER_TBL_SEG8_F3_I                3093
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG1_F3_I            3094
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG2_F3_I            3095
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG3_F3_I            3096
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG4_F3_I            3097
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG5_F3_I            3098
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG6_F3_I            3099
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG7_F3_I            3100
  #define NV_GSM_850_AMAM_MASTER_TBL_SEG8_F3_I            3101
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG1_F3_I           3102
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG2_F3_I           3103
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG3_F3_I           3104
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG4_F3_I           3105
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG5_F3_I           3106
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG6_F3_I           3107
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG7_F3_I           3108
  #define NV_GSM_1900_AMAM_MASTER_TBL_SEG8_F3_I           3109
  #define NV_GSM_AMPM_MASTER_TBL_SEG1_F3_I                3110
  #define NV_GSM_AMPM_MASTER_TBL_SEG2_F3_I                3111
  #define NV_GSM_AMPM_MASTER_TBL_SEG3_F3_I                3112
  #define NV_GSM_AMPM_MASTER_TBL_SEG4_F3_I                3113
  #define NV_GSM_AMPM_MASTER_TBL_SEG5_F3_I                3114
  #define NV_GSM_AMPM_MASTER_TBL_SEG6_F3_I                3115
  #define NV_GSM_AMPM_MASTER_TBL_SEG7_F3_I                3116
  #define NV_GSM_AMPM_MASTER_TBL_SEG8_F3_I                3117
  #define NV_DCS_AMPM_MASTER_TBL_SEG1_F3_I                3118
  #define NV_DCS_AMPM_MASTER_TBL_SEG2_F3_I                3119
  #define NV_DCS_AMPM_MASTER_TBL_SEG3_F3_I                3120
  #define NV_DCS_AMPM_MASTER_TBL_SEG4_F3_I                3121
  #define NV_DCS_AMPM_MASTER_TBL_SEG5_F3_I                3122
  #define NV_DCS_AMPM_MASTER_TBL_SEG6_F3_I                3123
  #define NV_DCS_AMPM_MASTER_TBL_SEG7_F3_I                3124
  #define NV_DCS_AMPM_MASTER_TBL_SEG8_F3_I                3125
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG1_F3_I            3126
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG2_F3_I            3127
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG3_F3_I            3128
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG4_F3_I            3129
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG5_F3_I            3130
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG6_F3_I            3131
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG7_F3_I            3132
  #define NV_GSM_850_AMPM_MASTER_TBL_SEG8_F3_I            3133
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG1_F3_I           3134
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG2_F3_I           3135
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG3_F3_I           3136
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG4_F3_I           3137
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG5_F3_I           3138
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG6_F3_I           3139
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG7_F3_I           3140
  #define NV_GSM_1900_AMPM_MASTER_TBL_SEG8_F3_I           3141
  #define NV_GSM_AMAM_ARFCN_F3_I                          3142
  #define NV_DCS_AMAM_ARFCN_F3_I                          3143
  #define NV_GSM_850_AMAM_ARFCN_F3_I                      3144
  #define NV_GSM_1900_AMAM_ARFCN_F3_I                     3145
  #define NV_GSM_AUTOCAL_PWR_DAC_F3_I                     3146
  #define NV_DCS_AUTOCAL_PWR_DAC_F3_I                     3147
  #define NV_GSM_850_AUTOCAL_PWR_DAC_F3_I                 3148
  #define NV_GSM_1900_AUTOCAL_PWR_DAC_F3_I                3149
  #define NV_GSM_850_ANT_TIMING_REL_TO_PA_EN_START_I      3150
  #define NV_GSM_RTR6250_RSB_I                            3151
  #define NV_DCS_RTR6250_RSB_I                            3152
  #define NV_GSM_850_RTR6250_RSB_I                        3153
  #define NV_GSM_1900_RTR6250_RSB_I                       3154
  #define NV_DISPLAY_LANGUAGE_AUTO_I                      3155
  #define NV_INPUT_LANGUAGE_AUTO_I                        3156
  #define NV_BROWSER_DISPLAY_SPLASH_I                     3157
  #define NV_BROWSER_HTTP_REFERER_I                       3158
  #define NV_BROWSER_ACTIVE_PROFILE_I                     3159
  #define NV_BROWSER_DISABLE_IMAGE_I                      3160
  #define NV_BROWSER_DISABLE_SOUND_I                      3161
  #define NV_BROWSER_DISABLE_OBJECT_I                     3162
  #define NV_BROWSER_MAILTO_PHONENUM_I                    3163
  #define NV_BROWSER_MAILTO_EMAIL_I                       3164
  #define NV_BROWSER_COOKIE_ENABLE_I                      3165
  #define NV_BROWSER_SECURE_PROMPT_I                      3166
  #define NV_BROWSER_IDCACHE_I                            3167
  #define NV_BROWSER_TITLE_REGION_I                       3168
  #define NV_BROWSER_SHOWSESSIONINFO_I                    3169
  #define NV_CURRENTLY_ACTIVE_PROFILE_I                   3170
  #define NV_ALLOW_MP3_RINGERS_I                          3171
  #define NV_ALLOW_AACPLUS_RINGERS_I                      3172
  #define NV_ALLOW_NON_DRM_RINGERS_I                      3173
  #define NV_CBS_ENABLED_I                                3174
  #define NV_CBS_MAX_TOPIC_INDEX_I                        3175
  #define NV_CBS_MIN_TOPIC_INDEX_I                        3176
  #define NV_CBS_ALLOW_RECEIVE_I                          3177
  #define NV_CBS_DISPLAY_CELL_INFO_I                      3178
  #define NV_CBS_NUM_SELECTED_TOPICS_I                    3179
  #define NV_IRDA_DEVICE_NAME_I                           3180
  #define NV_IRDA_PNP_DEVICE_ID_I                         3181
  #define NV_IRDA_PNP_MANUFACTURER_I                      3182
  #define NV_IRDA_PNP_NAME_I                              3183
  #define NV_IRDA_PNP_DEVICE_CATEGORY_I                   3184
  #define NV_IRDA_PNP_COMPATIBILITY_COUNT_I               3185
  #define NV_IRDA_PNP_STATUS_I                            3186
  #define NV_IRDA_PNP_VERSION_I                           3187
  #define NV_DISPLAY_LANGUAGE_GROUP_NUM_I                 3188
  #define NV_POC_AUTO_ANSWER_I                            3189
  #define NV_POC_INCOMING_CALL_TIMEOUT_I                  3190
  #define NV_POC_AUTO_LOGIN_I                             3191
  #define NV_POC_WILDCARDS_I                              3192
  #define NV_POC_HISTORY_LENGTH_I                         3193
  #define NV_POC_SECONDARY_PDP_CONTEXT_I                  3194
  #define NV_POC_EARLY_SESSION_I                          3195
  #define NV_POC_QOS_MODE_I                               3196
  #define NV_POC_MAX_CONCURRENT_USER_LIMIT1_I             3197
  #define NV_POC_MAX_CONCURRENT_USER_LIMIT2_I             3198
  #define NV_POC_MAX_CONCURRENT_USER_LIMIT3_I             3199
  #define NV_POC_BUFFERED_PACKETS_I                       3200
  #define NV_POC_SPEAKER_PHONE_I                          3201
  #define NV_IM_NOTIFICATION_I                            3202
  #define NV_IM_AUTO_LOGIN_I                              3203
  #define NV_IM_SUPPORTED_BEARERS_I                       3204
  #define NV_IM_SUPPORTED_CIR_METHODS_I                   3205
  #define NV_IM_MAX_SEARCH_RESULTS_I                      3206
  #define NV_IM_SHORT_LOGIN_SEQUENCE_I                    3207
  #define NV_IM_NO_CONTACTS_EXIST_I                       3208
  #define NV_IM_SEND_FILE_DISABLED_I                      3209
  #define NV_IM_VERSION_DISCOVERY_I                       3210
  #define NV_IM_LOGIN_TYPE_I                              3211
  #define NV_IM_INITIAL_DELIVERY_METHOD_I                 3212
  #define NV_IM_ANY_CONTENT_I                             3213
  #define NV_IM_ACCEPTED_CHAR_SETS_I                      3214
  #define NV_IM_ACCEPTED_CONTENT_TYPES_I                  3215
  #define NV_IM_ACCEPTED_TRANSFER_ENCODINGS_I             3216
  #define NV_IM_ACCEPTED_CONTENT_LENGTH_I                 3217
  #define NV_IM_PARSER_SIZE_I                             3218
  #define NV_IM_MAX_SAVED_CONVERSATIONS_I                 3219
  #define NV_IM_MAX_CONCURRENT_CONVERSATIONS_I            3220
  #define NV_IM_SUPPORTED_BEARER_COUNT_I                  3221
  #define NV_IM_SERVER_PORT_I                             3222
  #define NV_IM_HIDE_SERVER_I                             3223
  #define NV_IM_ALLOW_CHANGE_SERVER_I                     3224
  #define NV_IM_INTERNET_PROFILE_I                        3225
  #define NV_IM_KNOCK_SERVICE_TIMEOUT_I                   3226
  #define NV_IM_PASSWORD_I                                3227
  #define NV_IM_CIR_PORT_I                                3228
  #define NV_IM_SCHEMA_COUNT_I                            3229
  #define NV_IM_CIR_METHODS_COUNT_I                       3230
  #define NV_IM_MULTIPLE_TRANSACTIONS_I                   3231
  #define NV_IM_SMSC_ADDRESS_I                            3232
  #define NV_IM_OPTIONAL_HEADER_I                         3233
  #define NV_IM_DIGEST_SCHEMAS_I                          3234
  #define NV_POC_LIMIT_SELECTION_I                        3235
  #define NV_IM_USERID_I                                  3236
  #define NV_BC0_VCO_TUNE_2_I                             3237
  #define NV_BC1_VCO_TUNE_2_I                             3238
  #define NV_BC3_VCO_TUNE_2_I                             3239
  #define NV_BC4_VCO_TUNE_2_I                             3240
  #define NV_BC5_VCO_TUNE_2_I                             3241
  #define NV_BC6_VCO_TUNE_2_I                             3242
  #define NV_MM_ENABLE_REAL_I                             3243
  #define NV_DIAG_DEBUG_CALL_TRACE_I                      3244
  #define NV_ENABLE_FASTTRACK_I                           3245
  #define NV_IM_EDIT_MESSENGER_ID_PSWD_I                  3246
  #define NV_IM_SAFETY_TIP_I                              3247
  #define NV_IM_START_STRING_I                            3248
  #define NV_IM_MAX_RECEIVED_FILE_LIMIT_I                 3249
  #define NV_WAP_AUTO_CONNECT_I                           3250
  #define NV_WAP_LOCKOUT_TIME_I                           3251
  #define NV_DIAG_SPC_UNLOCK_TTL_I                        3252
  #define NV_C0_BC0_IM2_LPM_1_I                           3253
  #define NV_C0_BC1_IM2_LPM_1_I                           3254
  #define NV_C0_BC3_IM2_LPM_1_I                           3255
  #define NV_C0_BC4_IM2_LPM_1_I                           3256
  #define NV_C0_BC5_IM2_LPM_1_I                           3257
  #define NV_C0_BC6_IM2_LPM_1_I                           3258
  #define NV_C0_BC0_IM2_LPM_2_I                           3259
  #define NV_C0_BC1_IM2_LPM_2_I                           3260
  #define NV_C0_BC3_IM2_LPM_2_I                           3261
  #define NV_C0_BC4_IM2_LPM_2_I                           3262
  #define NV_C0_BC5_IM2_LPM_2_I                           3263
  #define NV_C0_BC6_IM2_LPM_2_I                           3264
  #define NV_C0_BC0_INTELLICEIVER_CAL_I                   3265
  #define NV_C0_BC1_INTELLICEIVER_CAL_I                   3266
  #define NV_C0_BC3_INTELLICEIVER_CAL_I                   3267
  #define NV_C0_BC4_INTELLICEIVER_CAL_I                   3268
  #define NV_C0_BC5_INTELLICEIVER_CAL_I                   3269
  #define NV_C0_BC6_INTELLICEIVER_CAL_I                   3270
  #define NV_C0_BC0_LNA_SWITCHPOINTS_LPM_1_I              3271
  #define NV_C0_BC1_LNA_SWITCHPOINTS_LPM_1_I              3272
  #define NV_C0_BC3_LNA_SWITCHPOINTS_LPM_1_I              3273
  #define NV_C0_BC4_LNA_SWITCHPOINTS_LPM_1_I              3274
  #define NV_C0_BC5_LNA_SWITCHPOINTS_LPM_1_I              3275
  #define NV_C0_BC6_LNA_SWITCHPOINTS_LPM_1_I              3276
  #define NV_C0_BC0_LNA_SWITCHPOINTS_LPM_2_I              3277
  #define NV_C0_BC1_LNA_SWITCHPOINTS_LPM_2_I              3278
  #define NV_C0_BC3_LNA_SWITCHPOINTS_LPM_2_I              3279
  #define NV_C0_BC4_LNA_SWITCHPOINTS_LPM_2_I              3280
  #define NV_C0_BC5_LNA_SWITCHPOINTS_LPM_2_I              3281
  #define NV_C0_BC6_LNA_SWITCHPOINTS_LPM_2_I              3282
  #define NV_RFR_VCO_COARSE_TUNING_800_I                  3283
  #define NV_POC_NETINITDEREG_I                           3284
  #define NV_POC_APP_TIMEOUT_I                            3285
  #define NV_POC_REGISTRATION_TIMEOUT_I                   3286
  #define NV_POC_GLM_TIMEOUT_I                            3287
  #define NV_JAVA_CONNECTION_PROFILE_ID_I                 3288
  #define NV_JAVA_INTERNET_PROFILE_ID_I                   3289
  #define NV_ENABLE_EXT_GPS_ANTENNA_PWR_SUPPLY_I          3290
  #define NV_PRESUPL_WAP_GATEWAY_ADDRESS_I                3291
  #define NV_PRESUPL_WAP_GATEWAY_PORT_I                   3292
  #define NV_GPS1_POSITION_REPORT_I                       3293
  #define NV_SET_VOICE_CALL_TONE_I                        3294
  #define NV_CONN_PROFILE_UNPW_RO_OVERRIDE_I              3295
  #define NV_INTERNET_PROFILE_UNPW_RO_OVERRIDE_I          3296
  #define NV_AAGPS_RTI_VALIDITY_DUR_I                     3297
  #define NV_IPV6_UMTS_FAILOVER_CONFIG_I                  3298
  #define NV_POC_FORBID_CHANGE_USERID_I                   3299
  #define NV_POC_WTUSER_PASSWORD_I                        3300
  #define NV_CBS_MAX_MSG_PER_TOPIC_I                      3301
  #define NV_BROWSER_FWDURL_TO_I                          3302
  #define NV_BROWSER_WAP_SIM_COMBINELOCK_I                3303
  #define NV_BROWSER_STARTPAGE_READONLY_I                 3304
  #define NV_CMGR_DISPLAY_RO_FOR_MISSING_DCF_I            3305
  #define NV_CMGR_PROMPT_FOR_RO_DELETE_I                  3306
  #define NV_CMGR_AUTO_REDIRECT_TO_LICENSE_SERVER_I       3307
  #define NV_SET_DRM_CONTENT_PROMPT_I                     3308
  #define NV_CMGR_WD_REMAINING_HOURS_1_THRESHOLD_I        3309
  #define NV_CMGR_WD_REMAINING_HOURS_2_THRESHOLD_I        3310
  #define NV_CMGR_WD_RUN_EVERY_HOURS_I                    3311
  #define NV_SET_DRM_EXPIRE_WARNING_I                     3312
  #define NV_CMGR_MAX_PREVIEW_DATA_SIZE_I                 3313
  #define NV_BROWSER_DISABLE_IMAGE_RO_I                   3314
  #define NV_BROWSER_DISABLE_SOUND_RO_I                   3315
  #define NV_BROWSER_TIMEOUT_I                            3316
  #define NV_BROWSER_TIMEOUT_RO_I                         3317
  #define NV_BROWSER_SECURE_PROMPT_RO_I                   3318
  #define NV_BROWSER_FONTSIZE_I                           3319
  #define NV_BROWSER_TEXTWRAP_I                           3320
  #define NV_BROWSER_SCROLLSTEP_I                         3321
  #define NV_BROWSER_EXIT_PROMPT_I                        3322
  #define NV_BROWSER_SHOW_TITLE_REGION_I                  3323
  #define NV_BROWSER_JUMP_PORTAL_NAME_I                   3324
  #define NV_BROWSER_JUMP_EMBDLNK1_NAME_I                 3325
  #define NV_BROWSER_JUMP_EMBDLNK2_NAME_I                 3326
  #define NV_BROWSER_JUMP_EMBDLNK3_NAME_I                 3327
  #define NV_BROWSER_JUMP_EMBDLNK4_NAME_I                 3328
  #define NV_BROWSER_JUMP_EMBDLNK5_NAME_I                 3329
  #define NV_BROWSER_JUMP_EMBDLNK6_NAME_I                 3330
  #define NV_BROWSER_JUMP_EMBDLNK7_NAME_I                 3331
  #define NV_BROWSER_JUMP_EMBDLNK8_NAME_I                 3332
  #define NV_VOICE_MAIL_LINE1_I                           3333
  #define NV_VOICE_MAIL_USE_SIM_NUMBER_I                  3334
  #define NV_VOICE_MAIL_NOTIFY_I                          3335
  #define NV_VOICE_MAIL_LINE2_I                           3336
  #define NV_CAMERA_APP_SAVE_LOCATION_I                   3337
  #define NV_VT_SHOW_MY_IMAGE_I                           3338
  #define NV_VT_AUTO_REDIAL_I                             3339
  #define NV_SET_RINGER_VOLUME_I                          3340
  #define NV_WCDMA_C0_TX_LIM_VS_FREQ_I                    3341
  #define NV_SOS_KEY_ENABLED_I                            3342
  #define NV_SOS_NUMBER_I                                 3343
  #define NV_WAP_TRUSTED_DOMAIN_I                         3344
  #define NV_WAP_PUSH_AUTOLOAD_I                          3345
  #define NV_IM_SERVER_ADDRESS_I                          3346
  #define NV_POC_TIMEOUT_SCALE_I                          3347
  #define NV_MR_DEFAULTS_STORED_I                         3348
  #define NV_SET_PLAY_STARTUP_SOUND_I                     3349
  #define NV_SET_PLAY_SHUTDOWN_SOUND_I                    3350
  #define NV_SET_PLAY_STARTUP_ANIMATION_I                 3351
  #define NV_SET_PLAY_SHUTDOWN_ANIMATION_I                3352
  #define NV_GSM_POLAR_RAMP_PROFILE_I                     3353
  #define NV_GPS1_MSB_BACK_OFF_FACTOR_I                   3354
  #define NV_GPS1_MSB_BACK_OFF_MIN_I                      3355
  #define NV_GPS1_MSB_BACK_OFF_MAX_I                      3356
  #define NV_GPS1_MSB_BACK_OFF_RESET_I                    3357
  #define NV_GPS1_MSB_THROTTLE_ENABLE_I                   3358
  #define NV_MANUAL_PLMN_SEL_I                            3359
  #define NV_MANUAL_PLMN_SELECTION_I                      3360
  #define NV_CONSORTIUM_CONFIG_NUMB_I                     3361
  #define NV_HDR_EQUALIZER_CTRL_I                         3362
  #define NV_WLAN_ENABLE_PS_MODE_I                        3363
  #define NV_MF_700_LNA_RISE_2_I                          3364
  #define NV_MF_700_LNA_RISE_3_I                          3365
  #define NV_MF_700_LNA_RISE_4_I                          3366
  #define NV_MF_700_LNA_FALL_2_I                          3367
  #define NV_MF_700_LNA_FALL_3_I                          3368
  #define NV_MF_700_LNA_FALL_4_I                          3369
  #define NV_MF_700_AGC_VS_FREQ_I                         3370
  #define NV_MF_700_RX_CAL_CHAN_I                         3371
  #define NV_MF_HW_CONFIG_I                               3372
  #define NV_MF_BAND_CONFIG_I                             3373
  #define NV_MF_AFC_LOOP_PARAMS_I                         3374
  #define NV_LAST_REGISTERED_SCI_I                        3375
  #define NV_MMS_MAX_CHARS_SLIDE_I                        3376
  #define NV_MMS_MAX_NUMBER_OF_SLIDES_I                   3377
  #define NV_MMS_MAX_SUBJECT_SIZE_I                       3378
  #define NV_QVP_APP_DEFAULT_AUDIO_CAPABILITY_TYPE_I      3379
  #define NV_QVP_APP_DEFAULT_VIDEO_CAPABILITY_TYPE_I      3380
  #define NV_HDRMRLP_NUM_BYTES_TO_LOG_I                   3381
  #define NV_SECTIME_TIME_OFFSETS_I                       3382
  #define NV_DS_UCSD_NT_CONNECT_STATE_I                   3383
  #define NV_MAX_I                                        3384
  #define NV_CFGI_PID_SYS_EFS_FILE_NAME					  3497
  #define NV_TIME_TOD_OFFSET_I							  4267
	
  #define NV_QISDA_LOC_FILENAME							  6105

  #define NV_RESTORE_SUCCESS_I							  6107
  #define NV_RESTORE_CNV_SUCCESS_I							  6108
#define NV_RESTORE_6240_SUCCESS_I							  7107
#define NV_RESTORE_6240_CNV_SUCCESS_I							  7108

  #define NV_QISDA_EM__ENABLE_PHONE_ID_INFO_I			  8102
  #define NV_QISDA_EM__ENABLE_SWHW_INFO_CUSTOMER_I        8103
  #define NV_QISDA_EM__ENABLE_SWHW_INFO_RD_I              8104
  #define NV_QISDA_EM__ENABLE_MFG_TEST_I				  8105
  #define NV_QISDA_EM__ENABLE_TEXT_LABEL_TEST_I           8106
  #define NV_QISDA_EM__ENABLE_LCD_TEST_I                  8107
  #define NV_QISDA_EM__ENABLE_SLT_ALT_TEST_I              8108
  #define NV_QISDA_EM__ENABLE_LANGUAGE_SWITCH_I           8109
  #define NV_QISDA_EM__ENABLE_EFEM_I                      8110
  #define NV_QISDA_EM__ENABLE_OTHERS_I                    8125
  #define NV_QISDA_SET_TOOL_MASTERCLEAR_ENABLED_I		  8133
  
  //This nv is used after SetRealTimeClock, and next time you start unit, the assistant won't pop up (just this time).
  #define NV_QISDA_SET__BLOCK_SA_I		  8213

 /*-------------------------------------------------------------------------*/
  #define NV_QC_ITEMS_ENUM_PAD                            0x7FFF
  
typedef unsigned short nv_items_enum_type;


#endif


/*=========================================================================*/
/* NVM Items Type Definitions.                                             */
/*=========================================================================*/

/* Type for generic minimum/maximum type */
typedef PACKED struct { 
  /* minimum */
  byte                                             min;
  /* maximum */
  byte                                             max;
} nv_minmax_type;

/* Type to hold security code. */
/* 
 * The security code is fixed length and is stored as ASCII string.
 */
typedef PACKED struct { 
  /* Security code array */
  byte                                             digits[NV_SEC_CODE_SIZE];
} nv_sec_code_type;

/* Generic enabled/disabled per NAM type */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Enabled flag */
  byte                                             enabled;
} nv_enabled_type;

/* Type to hold authentication A key and the associated NAM id. */
/* 
 * The number is 64 bits per IS-54 appendix A (CAI Appendix X).
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* A key array */
  qword                                            key;
} nv_a_key_type;

/* Type to hold authentication A key 16 bit CRC chksum. */
/* 
 * The checksum is generated with a generator polynomial 
 * as used for CDMA reverse and forward traffic signaling messages, 
 * per CAI sections 6.7.2.2.2 and 7.8.3.2. Exact security and protection 
 * of the A-Key is for now TBD.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Chcksum */
  word                                             chksum;
} nv_a_key_chksum_type;

/* Type to hold SSD (A or B) variable and the associated NAM id. */
/* 
 * Each SSD is 64 bits, per CAI sections 2.3.12.1.1 and 6.3.12.1.1
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* SSD array */
  qword                                            ssd;
} nv_ssd_type;

/* Type to hold SSD (A or B) 16 bit CRC checksum */
/* 
 * The checksum is generated with a generator polynomial as used
 * for CDMA reverse and forward traffic signaling messages, per CAI sections
 * 6.7.2.2.2 and 7.7.3.2
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Chcksum */
  word                                             chksum;
} nv_ssd_chksum_type;

/* Type to hold user id for Password Authentication Protocol */
typedef PACKED struct { 
  /* Length of user_id */
  byte                                             user_id_len;
  /* The user_id */
  byte                                             user_id[NV_MAX_PAP_USER_ID_LENGTH];
} nv_pap_user_id_type;

/* Type to hold password for Password Authentication Protocol */
typedef PACKED struct { 
  /* Length of Password */
  byte                                             password_len;
  /* The Password */
  byte                                             password[NV_MAX_PAP_PASSWORD_LENGTH];
} nv_pap_password_type;

/* Type to hold simple IP PPP password */
typedef PACKED struct { 
  /* Length of Password */
  byte                                             password_len;
  /* The Password */
  byte                                             password[NV_MAX_PPP_PASSWORD_LENGTH];
} nv_ppp_password_type;

/* Type to hold user id for PPP authentication */
typedef PACKED struct { 
  /* Length of user id */
  byte                                             user_id_len;
  /* The user id */
  byte                                             user_id[NV_MAX_PPP_USER_ID_LENGTH];
} nv_ppp_user_id_type;

/* Type for NV_SEC_DEVICE_KEY_I */
typedef PACKED struct { 
  
  uint8                                            device_key_len;
  
  uint8                                            device_key_data[NV_SEC_DEVICE_KEY_MAX_LEN];
} nv_sec_device_key_type;

/* Type to hold ESN */
/* 
 * The ESN and its checksum are write-once protected and the NV
 * task will not write to NV an ESN or its checksum if the stored ESN or its
 * checksum are non-zero
 */
typedef PACKED struct { 
  /* esn */
  dword                                            esn;
} nv_esn_type;

/* Type to hold ESN checksum */
/* 
 * The checksum is 30 bit CRC with generator polynomial as used for
 * CDMA sync channel signalling, per CAI section 7.7.1.2.2. The ESN 
 * and its checksum are write-once proteted and the NV task will not 
 * write to NV an ESN or its checksum if the stored ESN, or its checksum 
 * or the internal valid flag are not valid. This item can be written 
 * only once internally, by the NV task.
 * The status of this item can be read externally by other tasks to verify 
 * that the ESN has been correctly programmed to NV.
 */
typedef PACKED struct { 
  /* esn chksum */
  dword                                            chksum;
} nv_esn_chksum_type;

/* Type to hold configuration checksum */
/* 
 * The checksum is a simple 0xFFFF marker which indicates that
 * configuration parameters have been programmed and are valid
 */
typedef PACKED struct { 
  /* Config checksum */
  word                                             chksum;
} nv_config_chksum_type;

/* Type to hold NAM data checksum. */
/* 
 * The checksum is a simple 0xFFFF marker which is set to 
 * indicate that NAM parameters have been programmed and are valid.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* The checksum */
  word                                             chksum;
} nv_nam_chksum_type;

/* Type to hold run timer, with units as shown. */
/* 
 * The range is a zillion years.
 * Timer             units
 * -----             -----
 * Run Time          minutes
 */
typedef PACKED struct { 
  /* hold the run timer */
  dword                                            time;
} nv_run_time_type;

/* Type to hold maintenance order and reason code */
/* 
 * Maintenance reason is per IS-95 section 7.7.4
 */
typedef PACKED struct { 
  /* Set when maintenance order received */
  boolean                                          maint_order;
  /* Maintenance reason received in the order */
  byte                                             maint_reason;
} nv_maintrsn_type;

/* Type to hold lock order and reason code */
/* 
 * Lock reason is per IS-95 section 7.7.4
 */
typedef PACKED struct { 
  /* Set when lock order received and until unlocked */
  boolean                                          lock_order;
  /* Lock reason received in the order */
  byte                                             lock_reason;
} nv_lckrsn_type;

/* Type to hold error log. */
/* 
 * Up to NV_MAX_ERR_LOG error codes are stored, each with number of times
 * detected, file name, and line number
 */
typedef PACKED struct { 
  /* Storage address from 0 to NV_MAX_ERR_LOG-1 */
  byte                                             address;
  /* Number of occurrences (0=full, FF=empty) */
  byte                                             err_count;
  /* File name string */
  byte                                             file_name[NV_ERR_FILE_NAME_LEN];
  /* Line number in file */
  word                                             line_num;
  /* TRUE if fatal error */
  boolean                                          fatal;
} nv_err_log_type;

/* Type to hold Field Service Code */
/* 
 * Fixed length and is stored as ASCII string.
 */
typedef PACKED struct { 
  /* Field Service Code */
  byte                                             fsc[NV_FSC_SIZ];
} nv_fsc_type;

/* Type to hold fsc2 */
typedef PACKED struct { 
  /* fsc2 */
  dword                                            fsc2;
} nv_fsc2_type;

/* Type to hold fsc2 checksum */
typedef PACKED struct { 
  /* fsc2_chksum */
  dword                                            fsc2_chksum;
} nv_fsc2_chksum_type;

/* Type to hold warranty date code and changes */
typedef PACKED struct { 
  /* Warranty date code */
  byte                                             wdc[NV_WDC_LTRS];
  /* in case the wdc def. changes */
  byte                                             extra[3];
} nv_wdc_type;

/* Type for rental timer */
typedef PACKED struct { 
  /* total number of ticks of the clock */
  dword                                            ticks;
} nv_rental_timer_type;

/* Type for Peek operation */
typedef PACKED struct { 
  /* Where to start peek from */
  word                                             address;
  /* How many bytes to peek */
  byte                                             length;
  /* Returned peek data */
  byte                                             mem[NV_MAX_PEEK_SIZE];
} nv_peek_type;

/* Type for Poke operation */
typedef PACKED struct { 
  /* Where to start poke */
  word                                             address;
  /* How many bytes to poke */
  byte                                             length;
  /* poke data */
  byte                                             mem[NV_MAX_POKE_SIZE];
} nv_poke_type;

/* UP encryption key */
typedef PACKED struct { 
  /* UP link info table index */
  byte                                             index;
  /* Access key */
  byte                                             key[NV_UP_MAX_KEY_SIZE];
} nv_up_key_type;

/* DATA SERVICES default SIO baud rate */
typedef  word  nv_sio_baudrate_type;
  
  #define  NV_SIO_BAUDRATE_AUTO                          ((nv_sio_baudrate_type)0)
  
  #define  NV_SIO_BAUDRATE_45                            ((nv_sio_baudrate_type)1)
  
  #define  NV_SIO_BAUDRATE_50                            ((nv_sio_baudrate_type)2)
  
  #define  NV_SIO_BAUDRATE_75                            ((nv_sio_baudrate_type)3)
  
  #define  NV_SIO_BAUDRATE_110                           ((nv_sio_baudrate_type)4)
  
  #define  NV_SIO_BAUDRATE_150                           ((nv_sio_baudrate_type)5)
  
  #define  NV_SIO_BAUDRATE_300                           ((nv_sio_baudrate_type)6)
  
  #define  NV_SIO_BAUDRATE_600                           ((nv_sio_baudrate_type)7)
  
  #define  NV_SIO_BAUDRATE_1200                          ((nv_sio_baudrate_type)8)
  
  #define  NV_SIO_BAUDRATE_2400                          ((nv_sio_baudrate_type)9)
  
  #define  NV_SIO_BAUDRATE_4800                          ((nv_sio_baudrate_type)10)
  
  #define  NV_SIO_BAUDRATE_9600                          ((nv_sio_baudrate_type)11)
  
  #define  NV_SIO_BAUDRATE_14400                         ((nv_sio_baudrate_type)12)
  
  #define  NV_SIO_BAUDRATE_19200                         ((nv_sio_baudrate_type)13)
  
  #define  NV_SIO_BAUDRATE_38400                         ((nv_sio_baudrate_type)14)
  
  #define  NV_SIO_BAUDRATE_57600                         ((nv_sio_baudrate_type)15)
  
  #define  NV_SIO_BAUDRATE_76800                         ((nv_sio_baudrate_type)16)
  
  #define  NV_SIO_BAUDRATE_115200                        ((nv_sio_baudrate_type)17)
  
  #define  NV_SIO_BAUDRATE_230400                        ((nv_sio_baudrate_type)18)
  
  #define  NV_SIO_BAUDRATE_BEST                          ((nv_sio_baudrate_type)32766)
  
  #define  NV_SIO_BAUDRATE_MAX                           ((nv_sio_baudrate_type)32767)

/* Type of NV_JCDMA_DS_F92_I */
typedef  word  nv_jcdma_ds_f92_enum_type;
  /* Async/Fax 9600bps */
  #define  NV_JCDMA_DS_F92_ASYNC_FAX_96                  ((nv_jcdma_ds_f92_enum_type)0)
  /* Async/Fax 14400bps */
  #define  NV_JCDMA_DS_F92_ASYNC_FAX_144                 ((nv_jcdma_ds_f92_enum_type)1)
  /* Packet 9600bps */
  #define  NV_JCDMA_DS_F92_PACKET_96                     ((nv_jcdma_ds_f92_enum_type)2)
  /* Packet 14400bps */
  #define  NV_JCDMA_DS_F92_PACKET_144                    ((nv_jcdma_ds_f92_enum_type)3)
  /* Packet 64kbps */
  #define  NV_JCDMA_DS_F92_PACKET_HIGH                   ((nv_jcdma_ds_f92_enum_type)4)

/* Type for EVRC Priority, EVRC first or 13K first */
typedef  word  nv_evrc_pri_enum_type;
  /* Priority: EVRC first */
  #define  NV_EVRC_1ST                                   ((nv_evrc_pri_enum_type)0)
  /* Priority: 13K first */
  #define  NV_EVRC_13K_1ST                               ((nv_evrc_pri_enum_type)1)

/* Enum Type to hold preferred serving system. */
typedef  word  nv_sys_enum_type;
  /* A only */
  #define  NV_SYS_A_ONLY                                 ((nv_sys_enum_type)0)
  /* A then B */
  #define  NV_SYS_A_PREF                                 ((nv_sys_enum_type)1)
  /* B only */
  #define  NV_SYS_B_ONLY                                 ((nv_sys_enum_type)2)
  /* B then A */
  #define  NV_SYS_B_PREF                                 ((nv_sys_enum_type)3)
  /* Home SID only */
  #define  NV_SYS_HOME_ONLY                              ((nv_sys_enum_type)4)
  /* Home SID preferred */
  #define  NV_SYS_HOME_PREF                              ((nv_sys_enum_type)5)

/* Type to hold preferred serving system and the associated NAM. */
/* 
 * Type is per CAI section 2.3.10.1.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Preferred system per above enum */
  nv_sys_enum_type                                 sys;
} nv_pref_serv_type;

/* Type to hold SID(s) for lockout. */
/* 
 * The phone will reject acquisition if any of these SID(s) is acquired.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* SID */
  word                                             sid[NV_MAX_SID_LOCK];
} nv_sid_lock_type;

/* Type to hold SID(s) for acquisition. */
/* 
 * The phone will allow acquisition only on these SID(s).
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* SID */
  word                                             sid[NV_MAX_SID_ACQ];
} nv_sid_acq_type;

/* Type to hold MIN1p for 2 MINs along with the associated NAM id. */
/* 
 * The number is 24 bits, per CAI section 2.3.1.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* MIN1 */
  dword                                            min1[NV_MAX_MINS];
} nv_min1_type;

/* Type to hold MIN2p for 2 MINs along with the associated NAM id. */
/* 
 * The number is 10 bits, per CAI section 2.3.1.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* MIN2 */
  word                                             min2[NV_MAX_MINS];
} nv_min2_type;

/* Type to hold FIRSTCHPp and associated NAM. */
/* 
 * Value is 11 bits, per CAI section 2.3.7.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* FIRSTCHPp channel */
  word                                             channel;
} nv_firstchp_type;

/* Type to hold SID and associated NAM. */
/* 
 * The SID is 15 bits, per CAI section 2.3.8.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* SID */
  word                                             sid;
} nv_sid_type;

/* Enumeration for possible registration values. */
typedef  word  nv_analog_reg_enum_type;
  /* Autonomous registration disabled */
  #define  NV_DISABLED                                   ((nv_analog_reg_enum_type)0)
  /* Autonomuos registration enabled, tell location */
  #define  NV_WHEREABOUTS_KNOWN                          ((nv_analog_reg_enum_type)1)
  /* Autonomous registration enabled, hide location */
  #define  NV_WHEREABOUTS_UNKNOWN                        ((nv_analog_reg_enum_type)2)

/* Type to hold analog registration type, along with associated NAM id */
/* 
 * Type includes enumeration for possible registration values.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Registration kind per enum above */
  nv_analog_reg_enum_type                          kind;
} nv_analog_reg_type;

/* Type to hold CDMA channel and associated NAM. */
/* 
 * Value is 11 bits for Primary and Secondary channels, 
 * per CAI section 6.1.1.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* A carrier channel number */
  word                                             channel_a;
  /* B carrier channel number */
  word                                             channel_b;
} nv_cdmach_type;

/* Type to hold last CDMA channel the mobile was on */
/* 
 * Value is 11 bits for Primary and Secondary channels, 
 * per CAI section 6.1.1.
 */
typedef PACKED struct { 
  /* A carrier channel number */
  word                                             channel_a;
  /* B carrier channel number */
  word                                             channel_b;
} nv_last_cdmach_type;

/* Type to hold CDMA mobile termination type along with associated NAM. */
/* 
 * To be used for the MOB_TERM_... variables for registration.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Registration enabled */
  boolean                                          enabled[NV_MAX_MINS];
} nv_mob_term_type;

/* Type for ACCOLCp, along with associated NAM id. */
/* 
 * Value is 4 bit, per CAI section 2.3.5
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* ACCLOCp class */
  byte                                             ACCOLCpClass[NV_MAX_MINS];
} nv_accolc_type;

/* Block or System Enum Type */
typedef  word  nv_block_or_sys_enum_type;
  /* PCS Block A */
  #define  NV_PCS_BLOCK_A                                ((nv_block_or_sys_enum_type)0)
  /* PCS Block B */
  #define  NV_PCS_BLOCK_B                                ((nv_block_or_sys_enum_type)1)
  /* PCS Block C */
  #define  NV_PCS_BLOCK_C                                ((nv_block_or_sys_enum_type)2)
  /* PCS Block D */
  #define  NV_PCS_BLOCK_D                                ((nv_block_or_sys_enum_type)3)
  /* PCS Block E */
  #define  NV_PCS_BLOCK_E                                ((nv_block_or_sys_enum_type)4)
  /* PCS Block F */
  #define  NV_PCS_BLOCK_F                                ((nv_block_or_sys_enum_type)5)
  /* Cellular System A */
  #define  NV_CELLULAR_SYS_A                             ((nv_block_or_sys_enum_type)6)
  /* Cellular System B */
  #define  NV_CELLULAR_SYS_B                             ((nv_block_or_sys_enum_type)7)
  /* Invalid System */
  #define  NV_BLOCK_OR_SYS_INVALID                       ((nv_block_or_sys_enum_type)8)
  /* PCS Block G */
  #define  NV_PCS_BLOCK_G                                ((nv_block_or_sys_enum_type)9)
  /* PCS Block H */
  #define  NV_PCS_BLOCK_H                                ((nv_block_or_sys_enum_type)10)

/* Type to hold ZONE_LIST, per CAI section 6.3.4. */
typedef PACKED struct { 
  /* REG_ZONEsp */
  word                                             reg_zone;
  /* SIDsp */
  word                                             sid;
  /* NIDsp */
  word                                             nid;
  /* block_or_sys */
  nv_block_or_sys_enum_type                        block_or_sys;
  /* band_class */
  byte                                             band_class;
} nv_zone_list_type;

/* Type to hold SID_NID_LIST, per IS-95A section 6.3.4. */
typedef PACKED struct { 
  /* sid */
  word                                             sid;
  /* nid */
  word                                             nid;
  /* block_or_sys */
  nv_block_or_sys_enum_type                        block_or_sys;
  /* band_class */
  byte                                             band_class;
} nv_sid_nid_list_type;

/* Type to hold distance based registration paremeters. */
/* 
 * Per CAI section 6.3.4.
 */
typedef PACKED struct { 
  /* BASE_LAT_REGsp */
  dword                                            base_lat_reg;
  /* BASE_LONG_REGsp */
  dword                                            base_long_reg;
  /* BASE_DIST_REGsp */
  word                                             reg_dist_reg;
} nv_dist_reg_type;

/* Type to hold call timers and associated NAM id. */
/* 
 * Each NAM has its own set of these timers with units as shown.
 * The range of these timers is more than 100 years.
 *    Timer                     units
 *    -----                     -----
 *    Call Time                 seconds
 *    Air Time                  minutes
 *    Roam Time                 minutes
 *    Life Time                 minutes
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Time */
  dword                                            time;
} nv_call_time_type;


typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  
  word                                             table[NV_MRU_TABLE_SIZE];
} nv_mru_table_type;

/* Type to hold SID+NID pairs. */
/* 
 * The SID is 15 bits, per CAI 2.3.8, and the NID is 16 bits, 
 * per CAI section 2.3.10.3.
 */
typedef PACKED struct { 
  /* 15 bits, per CAI 2.3.8 */
  word                                             sid;
  /* 16 bits, per CAI section 2.3.10.3 */
  word                                             nid;
} nv_sid_nid_pair_type;

/* Type to hold 'home' SID+NID pairs for CDMA acquisition */
/* 
 * The type also holds NAM id. Note that this item is NOT
 * 'per-MIN'
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* SID+NID pair */
  nv_sid_nid_pair_type                             pair[NV_MAX_HOME_SID_NID];
} nv_home_sid_nid_type;

/* Type to hold SID+NID pairs to be locked out from CDMA acquisition. */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* SID+NID Pair */
  nv_sid_nid_pair_type                             pair[NV_MAX_SID_NID_LOCK];
} nv_sid_nid_lock_type;

/* Type to hold IMSI type */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* International Mobile Station ID */
  qword                                            imsi;
} nv_imsi_type;

/* System type (A or B) */
typedef  word  nv_system_type;
  /* System A */
  #define  NV_SYSTEM_A                                   ((nv_system_type)0)
  /* System B */
  #define  NV_SYSTEM_B                                   ((nv_system_type)1)

/* Specifies either a channel or cellular system */
typedef PACKED union { 
  /* The CDMA channel to acquire */
  word                                             cdma_channel;
  /* The cellular system: A or B */
  nv_system_type                                   cellular_system;
} nv_cs_union_type;

/* Type for EVRC preferred voice service options. */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* evrc_capability_enabled */
  boolean                                          evrc_capability_enabled;
  /* home_page_voice_so */
  word                                             home_page_voice_so;
  /* home_orig_voice_so */
  word                                             home_orig_voice_so;
  /* roam_orig_voice_so */
  word                                             roam_orig_voice_so;
} nv_pref_voice_so_type;

/* Type to hold IMSI MCC , along with the associated NAM id. */
/* 
 * The number is 24 bits
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* imsi_mcc */
  word                                             imsi_mcc;
} nv_imsi_mcc_type;

/* Type to hold IMSI_11_12 for 4 MINs along with the associated NAM id */
/* 
 * The number is 8 bits.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* imsi_11_12 */
  byte                                             imsi_11_12;
} nv_imsi_11_12_type;

/* Type to hold IMSI length along with associated NAM id */
/* 
 * The number is 3 bits, per J-STD-008 section 2.3.1.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Length of the IMSI for this NAM */
  byte                                             num;
} nv_imsi_addr_num_type;

/* Type to hold TMSI length, along with the associated NAM id. */
/* 
 * The number is 4 bits, per J-STD-008 section 2.3.15.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* TMSI zone length */
  byte                                             length;
} nv_tmsi_zone_length_type;

/* Type to hold TMSI zone, along with the associated NAM id. */
/* 
 * The number is 64 bits, per J-STD-008 section 2.3.15.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* The TMSI zone */
  qword                                            zone;
} nv_tmsi_zone_type;

/* Type to hold TMSI code, along with the associated NAM id. */
/* 
 * The number is 32 bits, per J-STD-008 section 2.3.15.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* The TMSI code */
  dword                                            code;
} nv_tmsi_code_type;

/* Type to hold TMSI expiration timer, along with the associated NAM id. */
/* 
 * The number is 24 bits, per J-STD-008 section 2.3.15.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* The TMSI expiration timer */
  dword                                            time;
} nv_tmsi_exp_time_type;

/* Type to hold the subscribers' home block (3 bits), along with the */
/* 
 * associated NAM id.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Home block */
  byte                                             block;
} nv_home_block_type;

/* Type to hold DIR_NUMBER with associated NAM id */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Directory Number */
  byte                                             dir_number[NV_DIR_NUMB_SIZ];
} nv_dir_number_type;

/* Type to hold mobile directory number */
/* 
 * (per IS-683) section 3.5.2.2).
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Number of digits */
  byte                                             n_digits;
  /* The digits */
  byte                                             digitn[NV_DIR_NUMB_PCS_SIZ];
} nv_mob_dir_data_type;

/* PN Id type */
typedef PACKED struct { 
  /* PN Id */
  byte                                             data[NV_PN_ID_TABLE_SIZE];
} nv_pn_id_type;

/* Same structure as nv_pn_id_type but for use in union nv_items_type */
typedef PACKED struct { 
  /* PN Id */
  byte                                             data;
} nv_pn_id_union_type;

/* Type for User Zone Table */
typedef PACKED struct { 
  /* Which table index? */
  byte                                             index;
  /* Roam Indicator value */
  byte                                             roam_ind;
  /* Control type */
  byte                                             control;
  /* The text entry */
  byte                                             text[NV_USER_ZONE_ENTRY_LENGTH];
} nv_user_zone_type;

/* Type to hold CDMA data information for OTASP Commit operation */
typedef PACKED struct { 
  /* Number of IMSI address digits */
  byte                                             imsi_addr_num;
  /* Mobile country code */
  word                                             mcc;
  /* 11th and 12th digits of IMSI */
  byte                                             imsi_11_12;
  /* Corresponds to old min1 */
  dword                                            imsi_s1;
  /* Corresponds to old min2 */
  word                                             imsi_s2;
  /* Access Overload Class */
  byte                                             accolc;
  /* Termination Indicator for the home system */
  boolean                                          mob_term_home;
  /* Termination indicator for SID roaming */
  boolean                                          mob_term_for_sid;
  /* Termination indicator for NID roaming */
  boolean                                          mob_term_for_nid;
  /* System Identification and Network Identification Pair */
  nv_sid_nid_pair_type                             pair[NV_MAX_SID_NID];
} nv_cdma_data_type;

/* Type to hold AMPS NAM information for 800 MHz cellular. */
/* 
 * Includes information from the Cellular parameter block (IS-683 section
 * 4.5.2.1
 */
typedef PACKED struct { 
  /* First paging channel for the home system */
  word                                             firstchp;
  /* Analog home system identification */
  word                                             home_sid;
} nv_amps_data_type;

/* FOR OTASP COMMIT operation -- type to hold the IMSI-T parameters */
typedef PACKED struct { 
  
  dword                                            s1;
  
  word                                             s2;
  
  byte                                             imsi_t_11_12;
  
  word                                             mcc;
  
  byte                                             addr_num;
} nv_imsi_t_data_type;

/* Roaming list type */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  
  word                                             prl_version;
  
  word                                             size;
  
  boolean                                          valid;
  
  byte                                             roaming_list[NV_ROAMING_LIST_MAX_SIZE];
} nv_roaming_list_type;

/* type to hold the consolidated data to be commited. */
/* 
 * This type also stores the control flags
 */
typedef PACKED struct { 
  /* Which NAM the data is for */
  byte                                             nam;
  /* Commit mobile directory number if set */
  boolean                                          commit_mob_dir;
  /* Commit CDMA information if set */
  boolean                                          commit_ftc_cdma;
  /* Commit AMPS NAM information if set */
  boolean                                          commit_ftc_amps;
  /* Commit roaming list if set */
  boolean                                          commit_roam_list;
  /* Commit SPC if set */
  boolean                                          commit_spc;
  /* Commit IMSI_T parms if set */
  boolean                                          commit_imsi_t;
  /* Commit nam lock parms if set */
  boolean                                          commit_nam_lock;
  /* The data to commit to nv */
  nv_mob_dir_data_type                             mob_dir;
  /* The data to commit to nv */
  nv_cdma_data_type                                ftc_cdma;
  /* The data to commit to nv */
  nv_amps_data_type                                ftc_amps;
  /* The data to commit to nv */
  nv_roaming_list_type                             *roam_list_ptr;
  /* The data to commit to nv */
  nv_sec_code_type                                 spc;
  /* The data to commit to nv */
  nv_imsi_t_data_type                              imsi_t;
  /* The data to commit to nv */
  nv_enabled_type                                  nam_lock;
} nv_otasp_commit_type;

/* Specifies either a channel, cellular system or plmn */
typedef PACKED union { 
  /* The CDMA channel to acquire */
  word                                             cdma_channel;
  /* The cellular system: A or B */
  nv_system_type                                   cellular_system;
  
  byte                                             plmn[3];
} nv_sid_union_type;

/* An MRU3 table entry */
typedef PACKED struct { 
  /* The mode */
  byte                                             mode;
  /* The band bit mask */
  dword                                            band_mask;
  /* System id */
  nv_sid_union_type                                sid;
  /* Reserved bytes to make sure the size */
  byte                                             spare[2];
} nv_mru3_table_entry_type;

/* Type for NV_MRU3_TABLE_I */
typedef PACKED struct { 
  /* NAM id 0 - N */
  byte                                             nam;
  
  nv_mru3_table_entry_type                         entry[NV_MRU_TABLE_SIZE];
} nv_mru3_table_type;

/* An MRU2 Table entry */
typedef PACKED struct { 
  /*  The mode: AMPS or CDMA */
  byte                                             mode;
  /* The band class: cellular or PCS */
  byte                                             band_class;
  /* The CDMA channel or cellular system */
  nv_cs_union_type                                 cs;
} nv_mru2_table_entry_type;

/* The MRU2 Table */
typedef PACKED struct { 
  /* NAM id 0..N */
  byte                                             nam;
  /* table entry */
  nv_mru2_table_entry_type                         entry[NV_MRU2_TABLE_SIZE];
} nv_mru2_table_type;

/* Acquire band class */
typedef  word  nv_band_pref_enum_type;
  /* class 0, System A */
  #define  NV_BAND_PREF_BC0_A                            ((nv_band_pref_enum_type)1)
  /* class 0, System B */
  #define  NV_BAND_PREF_BC0_B                            ((nv_band_pref_enum_type)2)
  /* class 0 */
  #define  NV_BAND_PREF_BC0                              ((nv_band_pref_enum_type)3)
  /* class 1 */
  #define  NV_BAND_PREF_BC1                              ((nv_band_pref_enum_type)4)
  /* class 3 */
  #define  NV_BAND_PREF_BC3                              ((nv_band_pref_enum_type)16)
  /* class 4 */
  #define  NV_BAND_PREF_BC4                              ((nv_band_pref_enum_type)32)
  /* class 5 */
  #define  NV_BAND_PREF_BC5                              ((nv_band_pref_enum_type)64)
  /* class 8 - DCS 1800 Band */
  #define  NV_BAND_PREF_GSM_DCS_1800                     ((nv_band_pref_enum_type)128)
  /* class 9 - Extended GSM (E-GSM) 900 Band */
  #define  NV_BAND_PREF_GSM_EGSM_900                     ((nv_band_pref_enum_type)256)
  /* class 9P - Standard or Primary GSM (P-GSM) 900 Band */
  #define  NV_BAND_PREF_GSM_PGSM_900                     ((nv_band_pref_enum_type)512)
  /* any class */
  #define  NV_BAND_PREF_ANY                              ((nv_band_pref_enum_type)65535)

/* band pref type */
typedef PACKED struct { 
  /* nam */
  byte                                             nam;
  /* band */
  nv_band_pref_enum_type                           band;
} nv_band_pref_type;

/* system selection roam preferences */
typedef  word  nv_roam_pref_enum_type;
  
  #define  NV_ROAM_PREF_HOME                             ((nv_roam_pref_enum_type)1)
  
  #define  NV_ROAM_PREF_AFFIL                            ((nv_roam_pref_enum_type)3)
  
  #define  NV_ROAM_PREF_ANY                              ((nv_roam_pref_enum_type)255)

/* roam pref type */
typedef PACKED struct { 
  /* nam */
  byte                                             nam;
  /* roam */
  nv_roam_pref_enum_type                           roam;
} nv_roam_pref_type;


typedef PACKED struct { 
  /* nam ID 0-n */
  byte                                             nam;
  /* prl_version */
  word                                             prl_version;
  /* size */
  word                                             size;
  /* valid bit */
  boolean                                          valid;
  /* roaming list */
  byte                                             roaming_list[NV_SIZE_OF_ROAMING_LIST_IN_UNION_TYPE];
} nv_roaming_list_union_type;

/* Only Roaming list type header */
typedef PACKED struct { 
  /* NAM Id 0-n */
  byte                                             nam;
  /* prl_version */
  word                                             prl_version;
  /* size */
  word                                             size;
  /* valid bit */
  boolean                                          valid;
} nv_roaming_list_header_type;

/* Same structure as roaming_list_type */
/* 
 * But adding some buffer bytes at the end of
 * roaming_list FASTPRL. This structure is used in RAM
 */
typedef PACKED struct { 
  /* NAM Id 0-n */
  byte                                             nam;
  /* prl_version */
  word                                             prl_version;
  /* size */
  word                                             size;
  /* valid bit */
  boolean                                          valid;
  /* Roaming list */
  byte                                             roaming_list[NV_SIZE_OF_RAM_ROAMING_LIST];
} nv_ram_roaming_list_type;

/* Type to hold analog/digital prefered mode, and the associated NAM */
typedef  word  nv_mode_enum_type;
  /* CDMA then Analog */
  #define  NV_MODE_DIGITAL_PREF                          ((nv_mode_enum_type)0)
  /* CDMA only */
  #define  NV_MODE_DIGITAL_ONLY                          ((nv_mode_enum_type)1)
  /* Analog then CDMA */
  #define  NV_MODE_ANALOG_PREF                           ((nv_mode_enum_type)2)
  /* Analog only */
  #define  NV_MODE_ANALOG_ONLY                           ((nv_mode_enum_type)3)
  /* Determine mode automatically */
  #define  NV_MODE_AUTOMATIC                             ((nv_mode_enum_type)4)
  /* Emergency mode */
  #define  NV_MODE_E911                                  ((nv_mode_enum_type)5)
  /* Restrict to home only */
  #define  NV_MODE_HOME_ONLY                             ((nv_mode_enum_type)6)
  /* Restrict to PCS home only */
  #define  NV_MODE_PCS_CDMA_ONLY                         ((nv_mode_enum_type)7)
  /* Restrict to cellular home only */
  #define  NV_MODE_CELL_CDMA_ONLY                        ((nv_mode_enum_type)8)
  
  #define  NV_MODE_CDMA_ONLY                             ((nv_mode_enum_type)9)
  
  #define  NV_MODE_HDR_ONLY                              ((nv_mode_enum_type)10)
  
  #define  NV_MODE_CDMA_AMPS_ONLY                        ((nv_mode_enum_type)11)
  
  #define  NV_MODE_GPS_ONLY                              ((nv_mode_enum_type)12)
  /* Service is limited to GSM only */
  #define  NV_MODE_GSM_ONLY                              ((nv_mode_enum_type)13)
  /* Service is limited to WCDMA only */
  #define  NV_MODE_WCDMA_ONLY                            ((nv_mode_enum_type)14)

/* Preferred mode */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Preferred mode per enum above */
  nv_mode_enum_type                                mode;
} nv_pref_mode_type;

/* Type to hold the call history */
/* 
 * COUNT parameter and the associated NAM id, per CAI section 2.3.12.1.3.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* COUNTsp */
  byte                                             count;
} nv_count_type;

/* Type to hold SID+NID pairs for CDMA acquisition along with NAM id. */
/* 
 * NID is 16 bits, per CAI section 2.3.10.3.  There are up to 4 SID+NID
 * pairs, in descending preferrence (0=first, 3=last).
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* SID+NID Pair */
  nv_sid_nid_pair_type                             pair[NV_MAX_MINS][NV_MAX_SID_NID];
} nv_sid_nid_type;

/* Type to hold MIN data checksum. */
/* 
 * The checksum is a simple 0xFFFF marker which specifies that MIN
 * parameters have been programmed and are valid.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Checksum */
  word                                             chksum[NV_MAX_MINS];
} nv_min_chksum_type;

/* Type to hold ORIG_MIN id, along with the associated NAM id. */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* MIN id 0-N */
  byte                                             id;
} nv_orig_min_type;

/* Type to hold the name of each NAM, along with the associated NAM id */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* NAM name string */
  byte                                             name[NV_MAX_LTRS];
} nv_name_nam_type;

/* System Preference */
typedef  word  nv_sys_pref_enum_type;
  /* A only */
  #define  NV_SP_A_ONLY                                  ((nv_sys_pref_enum_type)0)
  /* B only */
  #define  NV_SP_B_ONLY                                  ((nv_sys_pref_enum_type)1)
  /* Home only */
  #define  NV_SP_HOME_ONLY                               ((nv_sys_pref_enum_type)2)
  /* Home preferred */
  #define  NV_SP_STANDARD                                ((nv_sys_pref_enum_type)3)

/* Type to hold the system preference and the associated NAM. */
/* 
 * This item replaces NV_CDMA_PREF_SERV_I and NV_ANALOG_PREF_SERV_I for 
 * SSPR 800.
 */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* Preferred system per above enum */
  nv_sys_pref_enum_type                            sys;
} nv_sys_pref_type;

/* Preferences for ps data calls. */
typedef  word  nv_ps_data_orig_pref_enum_type;
  
  #define  NV_PS_DATA_ORIG_PREF_CDMA_ONLY                ((nv_ps_data_orig_pref_enum_type)0)
  
  #define  NV_PS_DATA_ORIG_PREF_CDMA_HDR                 ((nv_ps_data_orig_pref_enum_type)1)
  
  #define  NV_PS_DATA_ORIG_PREF_CDMA_HDR_IF_CHINA        ((nv_ps_data_orig_pref_enum_type)2)
  
  #define  NV_PS_DATA_ORIG_PREF_GW_ONLY                  ((nv_ps_data_orig_pref_enum_type)3)
  
  #define  NV_PS_DATA_ORIG_PREF_ANY                      ((nv_ps_data_orig_pref_enum_type)4)

/* Microbrowser data table type */
typedef PACKED struct { 
  /* Which array element */
  byte                                             index;
  /* The data */
  byte                                             data[NV_UBROWSER_ELEMENT_SIZE];
} nv_ubrowser_type;

/* Type of DATA SERVICES default SIO baud */
typedef  word  nv_sio_baud_type;
  
  #define  NV_SIO_BITRATE_AUTO                           ((nv_sio_baud_type)0)
  
  #define  NV_SIO_BITRATE_45                             ((nv_sio_baud_type)1)
  
  #define  NV_SIO_BITRATE_50                             ((nv_sio_baud_type)2)
  
  #define  NV_SIO_BITRATE_75                             ((nv_sio_baud_type)3)
  
  #define  NV_SIO_BITRATE_110                            ((nv_sio_baud_type)4)
  
  #define  NV_SIO_BITRATE_150                            ((nv_sio_baud_type)5)
  
  #define  NV_SIO_BITRATE_300                            ((nv_sio_baud_type)6)
  
  #define  NV_SIO_BITRATE_600                            ((nv_sio_baud_type)7)
  
  #define  NV_SIO_BITRATE_1200                           ((nv_sio_baud_type)8)
  
  #define  NV_SIO_BITRATE_2400                           ((nv_sio_baud_type)9)
  
  #define  NV_SIO_BITRATE_4800                           ((nv_sio_baud_type)10)
  
  #define  NV_SIO_BITRATE_9600                           ((nv_sio_baud_type)11)
  
  #define  NV_SIO_BITRATE_19200                          ((nv_sio_baud_type)12)
  
  #define  NV_SIO_BITRATE_38400                          ((nv_sio_baud_type)13)
  
  #define  NV_SIO_BITRATE_57600                          ((nv_sio_baud_type)14)
  
  #define  NV_SIO_BITRATE_115200                         ((nv_sio_baud_type)15)
  
  #define  NV_SIO_BITRATE_230400                         ((nv_sio_baud_type)16)
  
  #define  NV_SIO_BITRATE_BEST                           ((nv_sio_baud_type)17)
  
  #define  NV_SIO_BITRATE_MAX                            ((nv_sio_baud_type)18)

/* One-time startup configuration for DIAG services type. */
typedef PACKED struct { 
  
  byte                                             event_config;
  
  byte                                             msg_level;
  
  byte                                             logmask[NV_DIAG_RESTART_CONFIG_LOGMASK_SIZE];
  
  byte                                             reserved[4];
} nv_diag_restart_config_type;

/* Type to hold IP address information */
typedef PACKED struct { 
  /* IP address table */
  byte                                             ip[NV_IP_ADDRESSES_PER_ENTRY];
  /* Port address */
  word                                             port;
} nv_ip_address_type;

/* Type to hold Unwired Planet link info */
typedef PACKED struct { 
  /* UP link info table index */
  byte                                             index;
  /* Number of valid ip addresses */
  word                                             numAddr;
  /* IP address */
  nv_ip_address_type                               addr[NV_IP_ADDRESS_TABLE_SIZE];
  /* Length of key field */
  byte                                             key_length;
  /* Obsolete key is stored in NV_UP_KEY_I */
  byte                                             obsolete[NV_UP_MAX_KEY_SIZE];
} nv_up_link_info_type;

/* UP parameters type */
typedef PACKED struct { 
  /* Last active IP address */
  byte                                             curr_gateway;
  /* Last alert state */
  byte                                             alert_state;
  /* Disconnect time-out value */
  byte                                             disconnect_timer;
  /* permanent storage */
  byte                                             perm_storage[NV_UP_MAX_PERM_STORE_SIZE];
} nv_up_parms_type;

/* UP alerts type */
typedef PACKED struct { 
  /* To specify which of the 9 records to access */
  byte                                             index;
  /* Alert name */
  byte                                             alert_name[NV_UP_ALERT_NAME_SIZE];
  /* Alert status */
  byte                                             alert_status;
  /* Alert Id */
  word                                             alert_id;
} nv_up_alert_record_type;

/* UP cache type */
typedef PACKED struct { 
  /* The UP cache */
  byte                                             cache[NV_UP_MAX_CACHE_SIZE];
} nv_up_cache_type;

/* Same structure as nv_up_cache_type but for use in union nv_item_type */
typedef PACKED union { 
  /* UP cache */
  byte                                             cache;
} nv_up_cache_union_type;

/* Type for V5.2 control functionality */
typedef  word  nv_v52_control_enum_type;
  /* V5.2 support disabled, functionality bypassed */
  #define  NV_V52_DISABLED                               ((nv_v52_control_enum_type)0)
  /* V5.2 support enabled, with no local buffering */
  #define  NV_V52_ENABLED                                ((nv_v52_control_enum_type)1)
  /* V5.2 support enabled, with local buffering */
  #define  NV_V52_LOCAL_BUFFERING                        ((nv_v52_control_enum_type)2)
  /* V5.2 support reserved field */
  #define  NV_V52_FUTURE_SUPPORT                         ((nv_v52_control_enum_type)3)

/* Type for analog fax mode */
typedef  word  nv_afax_type;
  /* Analog Fax end-to-end */
  #define  NV_AFAX_ETE                                   ((nv_afax_type)0)
  /* Analog Fax Class 2.0 */
  #define  NV_AFAX_CLASS2                                ((nv_afax_type)1)

/* Type to hold the dial string used for originating packet data calls */
typedef PACKED struct { 
  /* Number of digits */
  byte                                             num_digits;
  /* The digit array */
  byte                                             digits[NV_MAX_PKT_ORIG_DIGITS];
} nv_data_pkt_orig_str_type;

/* Type to hold the general info. of a Mobile IP user prof */
typedef PACKED struct { 
  /* entry index */
  byte                                             index;
  /* Length of User NAI field */
  byte                                             nai_length;
  /* Network Access Identifier */
  byte                                             nai[NV_MAX_NAI_LENGTH];
  /* SPI set 1 bit */
  boolean                                          mn_ha_spi_set;
  /* Security Parameter Index for MN-HA authentication */
  dword                                            mn_ha_spi;
  /* SPI set 1 bit */
  boolean                                          mn_aaa_spi_set;
  /* Security Parameter Index for MN-AAA authentication */
  dword                                            mn_aaa_spi;
  /* Reverse tunneling preference */
  boolean                                          rev_tun_pref;
  /* IP address of mobile set to 0 for dynamic home address */
  dword                                            home_addr;
  /* Primary Home Agent IP address */
  dword                                            primary_ha_addr;
  /* Secondary Home Agent IP address */
  dword                                            secondary_ha_addr;
} nv_ds_mip_gen_user_prof_type;

/* Type to hold the shared secret info. of a Mobile IP user prof */
typedef PACKED struct { 
  /* entry index */
  byte                                             index;
  /* Length of MN-HA shared secret */
  byte                                             mn_ha_shared_secret_length;
  /* MN-HA shared secret */
  byte                                             mn_ha_shared_secret[NV_MAX_MN_HA_SHARED_SECRET_LEN];
  /* Length of MN-AAA shared secret */
  byte                                             mn_aaa_shared_secret_length;
  /* MN_AAA shared secret */
  byte                                             mn_aaa_shared_secret[NV_MAX_MN_AAA_SHARED_SECRET_LEN];
} nv_ds_mip_ss_user_prof_type;

/* Type for timebase diff. between home agent and mobile */
typedef PACKED struct { 
  /* entry index */
  byte                                             index;
  /* time difference */
  uint32                                           time_delta;
} nv_ds_mip_mn_ha_time_delta_type;

/* Type for Authentication */
typedef  word  nv_ppp_auth_enum_type;
  
  #define  NV_NO_AUTH                                    ((nv_ppp_auth_enum_type)0)
  
  #define  NV_PAP                                        ((nv_ppp_auth_enum_type)1)
  
  #define  NV_CHAP                                       ((nv_ppp_auth_enum_type)2)

/* Type for Public Key Organization Identifier */
typedef PACKED struct { 
  /* entry index */
  byte                                             index;
  
  byte                                             pkoid;
} nv_ds_mip_dmu_pkoid_type;

/* Type for Mobile Node Authenticator */
typedef PACKED struct { 
  /* entry index */
  byte                                             index;
  
  byte                                             mn_auth[3];
} nv_ds_mip_dmu_mn_auth_type;


typedef  word  nv_rtsp_proxy_server_flag_type;
  
  #define  NV_ADDR_INVALID                               ((nv_rtsp_proxy_server_flag_type)0)
  
  #define  NV_IPV4_ADDR_MASK                             ((nv_rtsp_proxy_server_flag_type)1)
  
  #define  NV_IPV6_ADDR_MASK                             ((nv_rtsp_proxy_server_flag_type)2)


typedef PACKED union { 
  
  uint32                                           v4;
  
  uint64                                           v6[2];
} nv_rtsp_proxy_server_addr;

/* Type for NV_RTSP_PROXY_SERVER_ADDR_I */
typedef PACKED struct { 
  
  nv_rtsp_proxy_server_flag_type                   flags;
  
  uint16                                           port;
  
  nv_rtsp_proxy_server_addr                        addr;
} nv_rtsp_proxy_server_addr_type;

/* Operating Mode Type */
typedef  word  nv_operating_mode_enum_type;
  /* GSM/GPRS Mode */
  #define  NV_OPMODE_GPRS                                ((nv_operating_mode_enum_type)1)
  /* WCDMA Mode */
  #define  NV_OPMODE_WCDMA                               ((nv_operating_mode_enum_type)2)
  /* CDMA/1x Mode */
  #define  NV_OPMODE_CDMA                                ((nv_operating_mode_enum_type)4)

/* Type for NV_PKT_DIAL_STRINGS_I */
typedef PACKED struct { 
  /* DS Packet Dial String */
  byte                                             dial_string[NV_PKT_DIAL_STRING_SIZE];
  /* DS Call Type Operating Modes */
  nv_operating_mode_enum_type                      call_type;
  /* DS Permitted Operating Modes */
  nv_operating_mode_enum_type                      modes_permitted;
} nv_pkt_dial_string_type;

/* Type for NV_PPP_CONFIG_DATA_I */
typedef PACKED struct { 
  /* entry index */
  byte                                             index;
  
  uint16                                           lcp_term_timeout;
  
  uint16                                           lcp_ack_timeout;
  
  uint8                                            lcp_req_try;
  
  uint8                                            lcp_nak_try;
  
  uint8                                            lcp_term_try;
  
  uint8                                            auth_retry;
  
  uint16                                           auth_timeout;
  
  uint16                                           ipcp_term_timeout;
  
  uint16                                           ipcp_ack_timeout;
  
  uint8                                            ipcp_req_try;
  
  uint8                                            ipcp_nak_try;
  
  uint8                                            ipcp_term_try;
  
  uint8                                            ipcp_compression_enable;
  
  uint16                                           ipv6cp_term_timeout;
  
  uint16                                           ipv6cp_ack_timeout;
  
  uint8                                            ipv6cp_req_try;
  
  uint8                                            ipv6cp_nak_try;
  
  uint8                                            ipv6cp_term_try;
  
  uint8                                            ipv6cp_compression_enable;
} nv_ppp_configure_data_type;

/* Type for NV_PPP_NCP_REMOTE_INITIATE_I */
typedef PACKED struct {
  /* entry index */
  byte                                             index;
 
  byte                                             ipcp;
 
  byte                                             ipv6cp;
} nv_ppp_ncp_remote_initiate_type;
 
/* Type for NV_PS_IPV6_IID_I */
typedef PACKED struct {
 
  byte                                             ipv6_iid_enum_type;
 
  uint64                                           iid_val;
} nv_ps_ipv6_iid_type;
 
/* Type for NV_IPV6_SM_CONFIG_I  */
typedef PACKED struct {
 
  int16                                            init_sol_delay;
 
  int16                                            sol_interval;
 
  int16                                            resol_interval;
 
  int16                                            max_sol_attempts;
 
  int16                                            max_resol_attempts;
 
  int16                                            pre_ra_exp_resol_time;
} nv_ip6_sm_config_type;
 
/* Type for NV_IPV6_PRIMARY_DNS_I, NV_IPV6_SECONDARY_DNS_I  */
typedef PACKED struct { 
  
  uint64                                           prefix;
  
  uint64                                           iid;
} nv_ipv6_address_type;

/* Type of HDR searching parameters */
typedef PACKED struct { 
  
  uint16                                           pilot_inc;
  
  uint8                                            pilot_add;
  
  uint8                                            pilot_drop;
  
  int8                                             pilot_compare;
  
  uint8                                            pilot_drop_timer;
  /* HAI x6 Only */
  boolean                                          dynamic_threshold;
  /* HAI x6 Only */
  uint8                                            soft_slope;
  /* HAI x6 Only */
  int8                                             add_intercept;
  /* HAI x6 Only */
  int8                                             drop_intercept;
  
  uint8                                            aset_win_size;
  
  uint8                                            nset_win_size;
  
  uint8                                            rset_win_size;
  
  uint8                                            nset_max_age;
} nv_hdr_srch_params_type;

/* Type of HDR channel management parameters */
typedef PACKED struct { 
  
  uint8                                            pilot_add;
  
  uint8                                            pilot_drop;
  
  uint8                                            pilot_compare;
  
  uint8                                            pilot_drop_timer;
  
  boolean                                          dynamic_thresholds;
  
  uint8                                            soft_slope;
  /* HAI x6 Only */
  int8                                             add_intercept;
  /* HAI x6 Only */
  int8                                             drop_intercept;
  
  uint8                                            nset_max_age;
} nv_hdr_chan_mgmt_params_type;


typedef PACKED struct { 
  
  uint32                                           session_seed;
  
  uint32                                           transmit_ati;
  
  uint32                                           receive_mati;
  
  uint32                                           receive_rati;
  
  uint32                                           receive_current_uati;
  
  uint32                                           receive_new_uati;
  
  boolean                                          new_uati_valid;
  
  uint8                                            uati[NV_UATI_LENGTH];
  
  uint8                                            uati_color_code;
  
  uint8                                            uati_subnet_mask;
} nv_hdramp_address_data_type;


typedef  word  nv_hdrscp_session_status_enum_type;
  
  #define  NV_SCP_SESSION_INACTIVE                       ((nv_hdrscp_session_status_enum_type)0)
  
  #define  NV_SCP_SESSION_DEFAULT                        ((nv_hdrscp_session_status_enum_type)1)
  
  #define  NV_SCP_SESSION_ACTIVE                         ((nv_hdrscp_session_status_enum_type)2)
  
  #define  NV_SCP_SESSION_MAX                            ((nv_hdrscp_session_status_enum_type)32767)

/* Access MAC Initial Configuration Attribute */
typedef PACKED struct { 
  
  uint8                                            capsule_length_max;
  
  uint8                                            power_step;
  
  uint8                                            probe_sequence_max;
  
  uint8                                            probe_backoff;
  
  uint8                                            probe_sequence_backoff;
} nv_hdramac_initial_config_type;

/* Access MAC Power Parameters Attribute */
typedef PACKED struct { 
  
  uint8                                            data_offset_nom;
  
  uint8                                            data_offset_9k6;
} nv_hdramac_power_params_type;

/* Forward Traffic MAC Handoff Delays Attribute */
typedef PACKED struct { 
  
  uint8                                            softer_handoff_delay;
  
  uint8                                            soft_handoff_delay;
} nv_hdrfmac_handoff_delays_type;

/* Reverse Traffic MAC Power Parameters Attribute */
typedef PACKED struct { 
  
  uint8                                            data_offset_nom;
  
  uint8                                            data_offset_9k6;
  
  uint8                                            data_offset_19k2;
  
  uint8                                            data_offset_38k4;
  
  uint8                                            data_offset_76k8;
  
  uint8                                            data_offset_153k6;
  
  uint8                                            rpc_step;
} nv_hdrrmac_power_params_type;

/* Reverse Traffic MAC Rate Parameters Attribute */
typedef PACKED struct { 
  
  uint8                                            transition_009k6_019k2;
  
  uint8                                            transition_019k2_038k4;
  
  uint8                                            transition_038k4_076k8;
  
  uint8                                            transition_076k8_153k6;
  
  uint8                                            transition_019k2_009k6;
  
  uint8                                            transition_038k4_019k2;
  
  uint8                                            transition_076k8_038k4;
  
  uint8                                            transition_153k6_076k8;
} nv_hdrrmac_rate_params_type;

/* Type of NV_HDRFMAC_DRC_LOCK_I */
typedef PACKED struct { 
  
  uint8                                            drc_lock_length;
  
  uint8                                            drc_lock_period;
} nv_hdrfmac_drc_lock_type;

/* Type of NV_HDRKEP_CONFIG_I */
typedef PACKED struct { 
  
  uint16                                           key_len;
  
  boolean                                          keys_are_valid;
  /* w */
  uint8                                            rpc_auth_key[NV_RPC_AUTH_KEY_MAX_LEN];
} nv_hdrkep_config_type;

/* Type of NV_HDRAUTH_CONFIG_I */
typedef PACKED struct { 
  
  uint16                                           ac_auth_key_len;
} nv_hdrauth_config_type;

/* Type for NAI for 1xEV(HDR) Access Network CHAP authentication */
typedef PACKED struct { 
  /* length of NAI */
  byte                                             nai_len;
  /* the NAI */
  byte                                             nai[NV_MAX_AN_AUTH_NAI_LENGTH];
} nv_hdr_an_auth_nai_type;

/* Type for password for 1xEV(HDR) Access Network CHAP authentication */
typedef PACKED struct { 
  /* length of password */
  byte                                             password_len;
  /* the password */
  byte                                             password[NV_MAX_AN_AUTH_PASSWORD_LENGTH];
} nv_hdr_an_auth_password_type;

/* Type of HDR searching parameters */
typedef PACKED struct { 
  
  uint16                                           pilot_inc;
  
  uint8                                            aset_win_size;
  
  uint8                                            nset_win_size;
  
  uint8                                            rset_win_size;
} nv_hdrrup_srch_params_type;

/* NAI for AN authentication */
typedef PACKED struct { 
  /* length of NAI */
  byte                                             user_id_len;
  /* the NAI */
  byte                                             user_id[NV_MAX_AN_PPP_USER_ID_LENGTH];
} nv_hdr_an_ppp_nai_type;

/* Password for AN authentication */
typedef PACKED struct { 
  /* length of password */
  byte                                             password_len;
  /* the password */
  byte                                             password[NV_MAX_AN_PPP_PASSWORD_LENGTH];
} nv_hdr_an_ppp_password_type;

/* Type of NV_HDR_AN_AUTH_PASSWD_LONG_I */
typedef PACKED struct { 
  /* length of password */
  byte                                             passwd_len;
  /* the password */
  byte                                             passwd[NV_MAX_AN_AUTH_PASSWD_LONG_LENGTH];
} nv_hdr_an_auth_passwd_long_type;

/* Type of NV_HDR_AN_AUTH_USER_ID_LONG_I */
typedef PACKED struct { 
  /* length of user id */
  byte                                             user_id_len;
  /* the user id */
  byte                                             user_id[NV_MAX_AN_AUTH_USER_ID_LONG_LENGTH];
} nv_hdr_an_auth_user_id_long_type;

/* Type for Analog (FM) TX power levels */
typedef PACKED struct { 
  /* power level 0 (max) */
  byte                                             level_0;
  /* power level 1 */
  byte                                             level_1;
  /* power level 2 */
  byte                                             level_2;
  /* power level 3 */
  byte                                             level_3;
  /* power level 4 */
  byte                                             level_4;
  /* power level 5 */
  byte                                             level_5;
  /* power level 6 */
  byte                                             level_6;
  /* power level 7 */
  byte                                             level_7;
} nv_fm_tx_pwr_type;

/* Type for Frequency/Temperature Offset Table */
typedef PACKED struct { 
  /* item */
  byte                                             item[NV_FR_TEMP_OFFSET_TABLE_SIZ];
} nv_fr_temp_offset_type;

/* Type for ADC range for HDET sampling */
typedef PACKED struct { 
  /* HDET ADC value */
  byte                                             value[NV_HDET_ADC_TABLE_SIZ];
} nv_fm_hdet_adc_range_type;

/* Type for frequency adjustment table */
typedef PACKED struct { 
  /* Frequency adjustment table */
  byte                                             item[NV_FREQ_ADJ_TABLE_SIZ];
} nv_freq_adj_type;

/* Type for Switch to AMPS 2-word arrays */
typedef PACKED struct { 
  /* Index */
  byte                                             index;
  /* value */
  word                                             value[NV_MAX_STA_VALUES];
} nv_sta_values_type;

/* PA offset type */
typedef PACKED struct { 
  /* Offset */
  int2                                             offset;
  /* Temperature adjustement array */
  int1                                             temp_adj[NV_TEMP_TABLE_SIZ];
  /* Frequency adjustement array */
  int1                                             freq_adj[NV_FREQ_TABLE_SIZ];
} nv_pa_offset_type;

/* Tx linearizer structure */
typedef PACKED struct { 
  /* Offset */
  int2                                             offset;
  /* Slope */
  byte                                             slope[NV_CDMA_TX_LIN_MASTER_SIZ];
} nv_tx_linearizer_type;

/* Same structure as nv_tx_linearizer_type */
/* 
 * However, this type is only for use in the nv_item_type union
 * so it will be under 128 bytes in size
 */
typedef PACKED struct { 
  /* Offset */
  int2                                             offset;
  /* Slope */
  byte                                             slope;
} nv_tx_linearizer_union_type;

/* Type of IS2000 CAI radio configuration RC preference */
typedef  word  nv_rc_pref_type;
  
  #define  NV_CAI_RC_1                                   ((nv_rc_pref_type)1)
  
  #define  NV_CAI_RC_2                                   ((nv_rc_pref_type)2)
  
  #define  NV_CAI_RC_3                                   ((nv_rc_pref_type)3)
  
  #define  NV_CAI_RC_4                                   ((nv_rc_pref_type)4)
  
  #define  NV_CAI_RC_5                                   ((nv_rc_pref_type)5)

/* pcs transmit frequency compensation table 0 */
typedef PACKED struct { 
  
  int1                                             nv_cdma_tx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
  
  int1                                             nv_cdma_tx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
  
  int1                                             nv_cdma_tx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
} nv_tx_comp_type;

/* dB backoff for low and medium voltage */
typedef PACKED struct { 
  /* dB backoff for low voltage */
  uint8                                            low;
  /* dB backoff for medium voltage */
  uint8                                            medium;
} nv_pwr_bckoff_vs_volt_type;

/* Type for obsolete sms item */
typedef PACKED struct { 
  /* reservation confirmation code */
  dword                                            confirmation_code;
  /* sms message to delete prior to write */
  dword                                            deletion_list;
  /* sms entry [ 0..100] */
  byte                                             address;
  /* status mask */
  byte                                             status;
  /* User data */
  byte                                             user_data_length;
  /* Call back length */
  byte                                             call_back_length;
  /* Mask */
  qword                                            param_mask;
  /* bytes in 'data', [8..325] */
  word                                             length;
  /* generic sms data, variable size */
  byte                                             data[NV_SMS_DATA_SIZ];
} nv_sms_type;

/* Type for real sms item */
typedef PACKED struct { 
  /* reservation confirmation code */
  dword                                            confirmation_code;
  /* sms message to delete prior to write */
  dword                                            deletion_list;
  /* sms entry [ 0..100] */
  byte                                             address;
  /* status mask */
  byte                                             status;
  /* User data */
  byte                                             user_data_length;
  /* Call back length */
  byte                                             call_back_length;
  /* Mask */
  qword                                            param_mask;
  /* bytes in 'data', [8..325] */
  word                                             length;
  /* generic sms data, variable size */
  byte                                             data[NV_SMS_DM_DATA_SIZ];
} nv_sms_dm_type;

/* Type for SMS broadcast service table entry */
typedef PACKED struct { 
  /* entry index */
  byte                                             index;
  /* for delete operation */
  boolean                                          active_service;
  /* type of service */
  word                                             service;
  /* type of language */
  byte                                             language;
  /* for */
  boolean                                          selected;
  /* priority of the service */
  byte                                             priority;
  /* a UI text label for each service/language pair */
  byte                                             label[NV_SMS_BC_SRV_LABEL_SIZE];
} nv_sms_bc_service_table_type;

/* Type for GSM/WCDMA SMS voice mail center phone number */
typedef PACKED struct { 
  /* number of digits in the phone number */
  uint8                                            num_digits;
  /* the value of all digits in the phone number */
  uint8                                            digits[NV_MAX_DIAL_DIGITS];
} nv_sms_vm_number_type;

/* Type to store GSM/WCDMA template */
typedef PACKED struct { 
  /* Size of the GSM/WCDMA SMS parameters */
  uint8                                            len;
  /* The GSM/WCDMA SMS parameters */
  uint8                                            data[NV_SMS_GW_PARAMS_SIZE];
} nv_sms_gw_parms_type;

/* Type for GSM/WCDMA sms item */
typedef PACKED struct { 
  /* reservation confirmation code */
  dword                                            confirmation_code;
  /* sms message to delete prior to write */
  dword                                            deletion_list;
// BenQ{   Change address type from uint8 to dword for 1000 SMS NV entries -  Wings
  /* sms entry [ 0..1000] */
  dword											   address;
// }BenQ
  /* length of 'data' */
  uint8                                            length;
  /* generic sms data, variable size */
  uint8                                            data[NV_SMS_GW_DATA_SIZ];
} nv_sms_gw_type;

/* Type to store GSM/WCDMA SMS routing configurations */
typedef PACKED struct { 
  
  uint8                                            pp_routes[NV_SMS_MAX_ROUTES];
  
  uint8                                            pp_mem_stores[NV_SMS_MAX_ROUTES];
  
  uint8                                            bc_routes[NV_SMS_MAX_ROUTES];
  
  uint8                                            bc_mem_stores[NV_SMS_MAX_ROUTES];
  
  boolean                                          transfer_status_report;
} nv_sms_routing_type;

/* Type to store CDMA SMS Parameters/templates */
typedef PACKED struct { 
  
  uint8                                            address;
  
  uint8                                            len;
  
  uint8                                            data[NV_SMS_CD_PARMS_SIZE];
} nv_sms_cd_parms_type;

/* Type for NV_SMS_BC_SERVICE_TABLE_OPTIONS_I */
typedef PACKED struct { 
  
  byte                                             index;
  
  byte                                             label_encoding;
  
  byte                                             bc_alert;
  
  byte                                             max_messages;
} nv_sms_bc_service_table_options_type;

/* Type to store MO Message template */
typedef PACKED struct { 
  
  uint8                                            mem_store;
  
  uint8                                            index;
} nv_sms_default_template_type;

/* Type for NV_SMS_GW_CB_SERVICE_TABLE_I */
typedef PACKED struct { 
  /* Table entry index */
  byte                                             index;
  /* Whether the entry is valid */
  boolean                                          active_service;
  /* Service ID range start */
  word                                             service_from;
  /* Service ID range end */
  word                                             service_to;
  /* Selected/Deselected the service */
  boolean                                          selected;
  /* Service ID textual information */
  byte                                             label[NV_SMS_BC_SRV_LABEL_SIZE];
  /* Label encoding */
  byte                                             label_encoding;
  /* Alert type */
  byte                                             bc_alert;
  /* Maximum number of messages can be stored for this service ID or range */
  byte                                             max_messages;
} nv_sms_gw_cb_service_table_type;

/* not provided */
typedef PACKED struct { 
  
  word                                             msg_id;
  
  word                                             wap_msg_id;
  
  boolean                                          mem_avail;
} nv_ruim_sms_status_type;

/* type to hold speed dial number. */
/* 
 * 'num_digits' and 'num_letters' indicate the actual number of digits
 * and letters, or zero if none.
 * The storage address is in the range 0-99 for speed dial numbers
 */
typedef PACKED struct { 
  /* Address (index) */
  byte                                             address;
  /* flag bits */
  byte                                             status;
  /* Number of digits */
  byte                                             num_digits;
  /* Array of digits */
  byte                                             digits[NV_MAX_DIAL_DIGITS];
  /* Name associated with number */
  byte                                             letters[NV_MAX_LTRS];
} nv_dial_type;

/* Type to hold call stack dial number */
/* 
 * 'num_digits' and 'num_letters' indicates the actual number of
 * digits and letters, or zero if none. The storage address is in the 
 * range of 0-9 for a stack number.
 */
typedef PACKED struct { 
  /* Storage address */
  byte                                             address;
  /* flag bits */
  byte                                             status;
  /* years to seconds */
  dword                                            time_stamp;
  /* Number of digits */
  byte                                             num_digits;
  /* Array of digits */
  byte                                             digits[NV_MAX_DIAL_DIGITS];
  /* Name associated with number */
  byte                                             letters[NV_MAX_LTRS];
  /* Duration of the call */
  dword                                            duration;
} nv_stdial_type;

/* Type to hold call stack index. */
/* 
 * The array of bytes allows sorting the call stack by 
 * order of dialing and resorting as it is being used. The secret field 
 * indicates if a secret number is in that stack location.
 */
typedef PACKED struct { 
  /* Index array */
  byte                                             index[NV_MAX_STACK_DIALS];
  /* TRUE if a secret number */
  boolean                                          secret[NV_MAX_STACK_DIALS];
} nv_stack_idx_type;

/* Type to specify page answer rings and answer mode. */
typedef PACKED struct { 
  /* paging mode */
  byte                                             enable;
  /* Number of rings when to accept page */
  byte                                             rings;
} nv_page_set_type;

/* Type to hold page message. */
/* 
 * The page characters are stored as ASCII string.
 */
typedef PACKED struct { 
  /* Storage address 0-19 */
  byte                                             address;
  /* Time stamp */
  dword                                            time_stamp;
  /* New page status */
  boolean                                          newPage;
  /* Number of characters */
  byte                                             num_chars;
  /* Array of characters */
  byte                                             chars[NV_MAX_PAGE_CHARS];
} nv_page_msg_type;

/* Type to hold display banner. */
/* 
 * The banner is fixed length and is stored as ASCII string.
 */
typedef PACKED struct { 
  /* Banner */
  byte                                             letters[NV_MAX_LTRS];
} nv_banner_type;

/* Type to specify auto answer rings and enable/disable. */
typedef PACKED struct { 
  /* TRUE if auto answer enabled */
  boolean                                          enable;
  /* Number of rings when to answer call */
  byte                                             rings;
} nv_auto_answer_type;

/* Type to specify auto redial rings and enable/disable */
typedef PACKED struct { 
  /* TRUE if auto redial enabled */
  boolean                                          enable;
  /* Number of 10 seconds system busy before redial */
  byte                                             rings;
} nv_auto_redial_type;

/* Type to hold user lock code. */
/* 
 * The lock code is fixed length and is stored as ASCII string.
 */
typedef PACKED struct { 
  /* Lock code array */
  byte                                             digits[NV_LOCK_CODE_SIZE];
} nv_lock_code_type;

/* Air time counter */
typedef PACKED struct { 
  /* NAM id 0-N */
  byte                                             nam;
  /* count */
  dword                                            cnt;
} nv_call_cnt_type;

/* Type to hold the standing alarms for India DOT */
typedef PACKED struct { 
  /* which standing alarm */
  byte                                             alarm_id;
  /* DOT alarms */
  dword                                            alarms;
} nv_alarms_type;

/* Type to hold the standing alarms for India DOT */
typedef PACKED struct { 
  /* isd std password */
  byte                                             isd_std_passwd[NV_ISD_STD_PASSWD_SIZ];
} nv_isd_std_passwd_type;

/* Type to specify which type of keypress sound should be emitted. */
typedef  word  nv_key_sound_enum_type;
  /* Emit clicks for key presses */
  #define  NV_KEY_SOUND_CLICK                            ((nv_key_sound_enum_type)0)
  /* Emit tones for key presses */
  #define  NV_KEY_SOUND_TONES                            ((nv_key_sound_enum_type)1)

/* Type to specify use of which phone book sorting method */
typedef  word  nv_dials_sort_enum_type;
  /* Sort entries alphabetically */
  #define  NV_SORT_ALPHABETICAL                          ((nv_dials_sort_enum_type)0)
  /* Sort entries by location */
  #define  NV_SORT_BY_LOCATION                           ((nv_dials_sort_enum_type)1)

/* Type to specify which language to use for the user interface */
// BenQ Cheney Wu, 2004/4/9 SCR no:Merge BENQ UI:SCR-2. {
#if 0
// }BenQ     
 

typedef  word  nv_language_enum_type;
  /* Use English language */
  #define  NV_LANGUAGE_ENGLISH                           ((nv_language_enum_type)0)
  /* Use Spanish language */
  #define  NV_LANGUAGE_SPANISH                           ((nv_language_enum_type)1)
  /* Use French language */
  #define  NV_LANGUAGE_FRENCH                            ((nv_language_enum_type)2)
  /* Use Portuguese language */
  #define  NV_LANGUAGE_PORTUGUESE                        ((nv_language_enum_type)3)

// BenQ Cheney Wu, 2004/4/9 SCR no:Merge BENQ UI:SCR-2. {
#else
typedef enum {
	/* add for support of mutil langusge - CMT */
	UI_ENGLISH_LANG,
	UI_SPANISH_LANG,
	UI_FRENCH_LANG,
	UI_PORTUGUESE_LANG,
	UI_GERMAN_LANG,
	UI_ITALIAN_LANG,
	UI_DUTCH_LANG,
	UI_SWEDISH_LANG,
	UI_DANISH_LANG,
	UI_FINNISH_LANG,
	UI_NORWEGIAN_LANG,
	UI_POLISH_LANG,
	UI_HUNGARIAN_LANG,
	UI_CHINESES_LANG,
	UI_CHINESEC_LANG,
	UI_CZECH_LANG,
	UI_RUSSIAN_LANG,
	UI_SUPPORT_LANG_NUM
} nv_language_enum_type;
#endif
// }BenQ     
 
/* Type to specify the user interface menu format */
typedef  word  nv_menu_format_enum_type;
  /* Display full menus */
  #define  NV_MENU_FULL                                  ((nv_menu_format_enum_type)0)
  /* Display short menus */
  #define  NV_MENU_SHORT                                 ((nv_menu_format_enum_type)1)

/* Type for ISS2 dialing plan restriction levels */
typedef PACKED struct { 
  /* Type for ISS2 dialing plan restriction levels. */
  byte                                             restriction_level[NV_DIAL_RESTRICT_LVLS_SIZE];
} nv_dial_restrict_lvls_type;

/* Type to hold the downloadable roaming messages */
typedef PACKED struct { 
  /* Which table entry to reference */
  byte                                             index;
  /* The roaming message text */
  byte                                             text[NV_ROAM_MSG_MAX_SIZE];
} nv_roam_msg_type;

/* Type for the number of entries in the table */
typedef PACKED struct { 
  /* Number of elem_type entries currently stored */
  word                                             length;
} nv_dial_state_table_len_type;

/* Type of the elements within the table. */
typedef PACKED struct { 
  /* Storage index */
  byte                                             address;
  /* next state */
  byte                                             next_state[NV_DIAL_STATE_TABLE_NEXT_STATES];
  /* timeout */
  byte                                             timeout;
  /* restriction_level */
  byte                                             restriction_level;
  /* remaining_digits */
  byte                                             remaining_digits;
} nv_dial_state_table_elem_type;

/* Type definitions for DTACO */
typedef  word  nv_dtaco_enum_type;
  /* DTACO disabled */
  #define  NV_DTACO_DISABLED                             ((nv_dtaco_enum_type)0)
  /* DTACO enabled */
  #define  NV_DTACO_ENABLED                              ((nv_dtaco_enum_type)1)
  /* DTACO enabled on flip */
  #define  NV_DTACO_ENABLED_ON_FLIP                      ((nv_dtaco_enum_type)2)

/* Type definitions for DTACO */
typedef PACKED struct { 
  
  nv_dtaco_enum_type                               dtaco_control;
} nv_dtaco_control_type;

/* Type definitions for Carrier Info items. */
typedef PACKED struct { 
  /* Element ID: 0, 1, or 2 */
  byte                                             element;
  /* data */
  byte                                             data[NV_CARRIER_INFO_ELEMENT_SIZE];
} nv_carrier_info_type;

/* Type definitions for UI date/time format display. */
typedef  word  nv_time_fmt_enum_type;
  /*  Use 12MMDD  */
  #define  NV_TIME_FMT_12MMDD                            ((nv_time_fmt_enum_type)0)
  /*  Use 12DDMM  */
  #define  NV_TIME_FMT_12DDMM                            ((nv_time_fmt_enum_type)1)
  /*  Use 24MMDD  */
  #define  NV_TIME_FMT_24MMDD                            ((nv_time_fmt_enum_type)2)
  /*  Use 24DDMM  */
  #define  NV_TIME_FMT_24DDMM                            ((nv_time_fmt_enum_type)3)

/* Type definitions for R-UIM CHV. */
typedef PACKED struct { 
  
  byte                                             digits[NV_RUIM_CHV_SIZE];
} nv_ruim_chv_type;

/* Type definitions for gpsOne transport mechanism */
typedef  word  nv_gps1_transport_type;
  /*  Use IP  */
  #define  NV_IP_TRANSPORT                               ((nv_gps1_transport_type)0)
  /*  Use DBM  */
  #define  NV_DBM_TRANSPORT                              ((nv_gps1_transport_type)1)

/* Type definitions for gpsOne Position Calculations */
typedef  word  nv_gps1_position_calc_type;
  /*  Use Mobile based Position Calculations  */
  #define  NV_POSITION_CALC_MOBILE                       ((nv_gps1_position_calc_type)0)
  /*  Use PDE based Position Calculations  */
  #define  NV_POSITION_CALC_PDE                          ((nv_gps1_position_calc_type)1)

/* Type definitions for Bluetooth address */
typedef PACKED struct { 
  
  byte                                             bd_addr[NV_BD_ADDR_SIZE];
} nv_bd_addr_type;

/* Type definitions for Public Land Mobile Network ID */
typedef PACKED struct { 
  
  byte                                             identity[NV_PLMN_ID_SIZE];
} nv_plmn_id_type;

/* Type definitions for Public Land Mobile Network */
typedef PACKED struct { 
  /* Network ID */
  nv_plmn_id_type                                  plmn_id;
  /* PLMN's radio access technology */
  byte                                             rat;
  /* Circuit, Packet or Circuit&Packet switched */
  byte                                             service_type;
} nv_plmn_id_info_type;


typedef  word  nv_acq_order_pref_enum_type;
  /* Determine acquisition order automatically */
  #define  NV_ACQ_ORDER_PREF_AUTOMATIC                   ((nv_acq_order_pref_enum_type)0)
  /* Acquisition order is GSM first, followed by WCDMA */
  #define  NV_ACQ_ORDER_PREF_GSM_WCDMA                   ((nv_acq_order_pref_enum_type)1)
  /* Acquisition order is WCDMA first, followed by GSM */
  #define  NV_ACQ_ORDER_PREF_WCDMA_GSM                   ((nv_acq_order_pref_enum_type)2)

/* acq order pref type */
typedef PACKED struct { 
  /* NAM */
  byte                                             nam;
  /* acquisition order preference */
  nv_acq_order_pref_enum_type                      acq_order;
} nv_acq_order_pref_type;


typedef  word  nv_net_sel_mode_pref_enum_type;
  /* Select network automatically */
  #define  NV_NET_SEL_MODE_PREF_AUTOMATIC                ((nv_net_sel_mode_pref_enum_type)0)
  /* Select network manually */
  #define  NV_NET_SEL_MODE_PREF_MANUAL                   ((nv_net_sel_mode_pref_enum_type)1)
  /* Select network for limited service */
  #define  NV_NET_SEL_MODE_PREF_LIMITED_SRV              ((nv_net_sel_mode_pref_enum_type)2)

/* network selection mode pref type */
typedef PACKED struct { 
  /* NAM */
  byte                                             nam;
  /* network selection mode preference */
  nv_net_sel_mode_pref_enum_type                   net_sel_mode;
} nv_net_sel_mode_pref_type;


typedef  word  nv_srv_domain_pref_enum_type;
  /* Prefer Circuit Switched only */
  #define  NV_SRV_DOMAIN_PREF_CS_ONLY                    ((nv_srv_domain_pref_enum_type)0)
  /* Prefer Packet Switched only */
  #define  NV_SRV_DOMAIN_PREF_PS_ONLY                    ((nv_srv_domain_pref_enum_type)1)
  /* Prefer Circuit and Packet Switched only */
  #define  NV_SRV_DOMAIN_PREF_CS_PS                      ((nv_srv_domain_pref_enum_type)2)
  /* Prefer Any service domain */
  #define  NV_SRV_DOMAIN_PREF_ANY                        ((nv_srv_domain_pref_enum_type)3)

/* service domain pref type */
typedef PACKED struct { 
  /* NAM */
  byte                                             nam;
  /* service domain preference */
  nv_srv_domain_pref_enum_type                     srv_domain;
} nv_srv_domain_pref_type;


typedef PACKED struct { 
  /* PLMN ID of the registered PLMN that sent the equi. PLMN list */
  nv_plmn_id_type                                  rplmn;
  /* Number of PLMNs in the list */
  uint8                                            length;
  /* Array of equivalent PLMNs */
  nv_plmn_id_type                                  plmn[NV_EQUIVALENT_PLMN_LIST_MAX_SIZE];
} nv_equivalent_plmn_list_type;


typedef  word  nv_rtre_configuration_type;
  /* RTRE configuration: use R-UIM only */
  #define  NV_RTRE_CONFIG_RUIM_ONLY                      ((nv_rtre_configuration_type)0)
  /* RTRE configuration: use NV only */
  #define  NV_RTRE_CONFIG_NV_ONLY                        ((nv_rtre_configuration_type)1)
  /* RTRE configuration: use R-UIM if available or NV */
  #define  NV_RTRE_CONFIG_RUIM_OR_DROP_BACK              ((nv_rtre_configuration_type)2)
  /* RTRE configuration: GSM on 1x */
  #define  NV_RTRE_CONFIG_SIM_ACCESS                     ((nv_rtre_configuration_type)3)

/* RTRE control type */
typedef  word  nv_rtre_control_type;
  /* Use the R-UIM */
  #define  NV_RTRE_CONTROL_USE_RUIM                      ((nv_rtre_control_type)0)
  /* Do not use the R-UIM */
  #define  NV_RTRE_CONTROL_NO_RUIM                       ((nv_rtre_control_type)1)
  /* Use a GSM card for provisioning, no R-UIM functions */
  #define  NV_RTRE_CONTROL_SIM_ACCESS                    ((nv_rtre_control_type)2)

/* RTRE polling control type */
typedef  word  nv_rtre_polling_control_type;
  /* Do not poll the UIM card */
  #define  NV_RTRE_POLLING_CONTROL_NO_POLL               ((nv_rtre_polling_control_type)0)
  /* Poll the UIM card */
  #define  NV_RTRE_POLLING_CONTROL_POLL                  ((nv_rtre_polling_control_type)1)


typedef  word  nv_uim_first_inst_class_type;
  /* First UIM instruction class: GSM SIM */
  #define  NV_UIM_FIRST_INST_CLASS_GSM_SIM               ((nv_uim_first_inst_class_type)0)
  /* First UIM instruction class: UMTS SIM */
  #define  NV_UIM_FIRST_INST_CLASS_UMTS_SIM              ((nv_uim_first_inst_class_type)1)


typedef PACKED struct { 
  
  word                                             option;
} nv_err_fatal_options_type;


typedef  word  nv_uim_pref_protocol_type;
  /* Preferred Protocol T=0 */
  #define  NV_UIM_PREF_PROTOCOL_T_0                      ((nv_uim_pref_protocol_type)0)
  /* Preferred Protocol T=1 */
  #define  NV_UIM_PREF_PROTOCOL_T_1                      ((nv_uim_pref_protocol_type)1)
  /* Preferred Protocol None */
  #define  NV_UIM_PREF_PROTOCOL_NONE                     ((nv_uim_pref_protocol_type)2)

/* Type for NV_UIM_CDMA_PREF_SLOT_I and NV_UIM_GSM_PREF_SLOT_I */
typedef  word  nv_uim_slot_type;
  /* Preferred slot None */
  #define  NV_UIM_SLOT_NONE                              ((nv_uim_slot_type)0)
  /* Preferred slot 1 */
  #define  NV_UIM_SLOT_1                                 ((nv_uim_slot_type)1)
  /* Preferred slot 2 */
  #define  NV_UIM_SLOT_2                                 ((nv_uim_slot_type)2)

/* Type for NV_RPLMNACT_I */
typedef PACKED struct { 
  
  byte                                             act[2];
} nv_rplmnact_type;

/* Type to hold UE IMEI */
typedef PACKED struct { 
  /* International Mobile Equipment Identity */
  byte                                             ue_imei[NV_UE_IMEI_SIZE];
} nv_ue_imei_type;

/* This structure defines the PLMN */
typedef PACKED struct { 
  /* Mobile Country Code - one digit per byte range 0..9) */
  byte                                             mcc[MAX_MCC_DIGITS];
  /* Number of MNC digits */
  byte                                             num_mnc_digits;
  /* Mobile Network Code - one digit per byte (range 0..9) */
  byte                                             mnc[MAX_MNC_DIGITS];
} nv_rrc_plmn_identity_type;

/* Enumerates all possible band classes */
typedef PACKED enum { 
  
  NV_RRC_CSP_BAND_PCS                            = 0,
  
  NV_RRC_CSP_BAND_CELL                           = 1,
  
  NV_RRC_CSP_BAND_IMT2K                          = 2
} nv_rrc_csp_band_class_e_type;

/* Acquisition entry type */
typedef PACKED struct { 
  /* PLMN ID */
  nv_rrc_plmn_identity_type                        plmn_id;
  /* Frequency where PLMN is present */
  uint32                                           freq;
  /* Band Class */
  nv_rrc_csp_band_class_e_type                     band_class;
  /* Type of this stored acquisition entry */
  uint32                                           status_mask;
  /* Current Cell ID selected */
  uint32                                           cell_id;
  /* Scrambling Code of the Cell */
  uint32                                           scr_code;
  /* Location Area Code of the cell */
  uint32                                           lac;
} nv_acq_entry_type;

/* Acquisition database */
typedef PACKED struct { 
  /* Next Acquisition pointer to be read */
  uint32                                           curr_rd_index;
  /* Next Acquisition pointer to write */
  uint32                                           curr_wr_index;
  /* Indicates if the last entry in database pointer list is Invalid */
  boolean                                          last_entry_invalid;
  /* List of ordered indices to acquisition entries */
  uint8                                            acq_list_indices[MAX_ACQ_DB_ENTRIES];
} nv_acq_db_type;

/* List of Acquisition entries */
typedef PACKED struct { 
  /* Acquisition entry */
  nv_acq_entry_type                                acq_entry[3];
} nv_acq_list1_type;

/* List of Acquisition entries */
typedef PACKED struct { 
  /* Acquisition entry */
  nv_acq_entry_type                                acq_entry[2];
} nv_acq_list2_type;


typedef PACKED struct { 
  
  word                                             value[NV_TX_BURST_RAMP_SIZ];
} nv_tx_burst_ramp_index_type;


typedef PACKED struct { 
  
  int8                                             max_gainrange_1;
  
  int8                                             min_gainrange_2;
  
  int8                                             max_gainrange_2;
  
  int8                                             min_gainrange_3;
  
  int8                                             max_gainrange_3;
  
  int8                                             min_gainrange_4;
} nv_gainrange_switchpoint_type;


typedef  word  nv_sys_band_T;
 
  #define  NV_SYS_BAND_EGSM_900                          ((nv_sys_band_T)0)
 
  #define  NV_SYS_BAND_PGSM_900                          ((nv_sys_band_T)1)
 
  #define  NV_SYS_BAND_PCS_1900                          ((nv_sys_band_T)2)
 
  #define  NV_SYS_BAND_DCS_1800                          ((nv_sys_band_T)3)
 
  #define  NV_SYS_BAND_CELL_850                          ((nv_sys_band_T)4)
 
/* ARFCN type, includes band if quadband is supported */
typedef PACKED struct {
 
  uint16                                           num;
 
  nv_sys_band_T                                    band;
} NV_ARFCN_T;
 
 
typedef PACKED struct {
 
  byte                                             no_of_entries;
 
  NV_ARFCN_T                                       last_best_cells[NV_MAX_NUMBER_OF_BEST_CELLS];
} nv_rr_stored_last_best_arfcns_band_type;
 
/* prl */
typedef PACKED struct { 
  /* nam */
  byte                                             nam;
  /* prl */
  uint32                                           prl;
} nv_prl_pref_type;

 
typedef PACKED struct {
  /* nam */
  uint8                                            nam;
  /* WLAN Technology Preference */
  uint32                                           tech_pref;
} nv_wlan_tech_pref_type;
 
 
typedef PACKED struct {
  /* nam */
  uint8                                            nam;
  /* WLAN Scan Preference */
  uint32                                           scan_mode;
} nv_wlan_scan_pref_type;
 
/* Enumeration of supported EPZID types */
typedef  word  nv_epzid_enum_type;
 
  #define  NV_EPZID_PZID                                 ((nv_epzid_enum_type)0)
 
  #define  NV_EPZID_PZID_SID                             ((nv_epzid_enum_type)1)
 
  #define  NV_EPZID_PZID_SID_NID                         ((nv_epzid_enum_type)2)
 
 
typedef PACKED struct {
  /* Appendix 5 on/off */
  boolean                                          appx5_enabled;
  /* Appendix 5 IP address */
  uint32                                           appx5_mpc_addr;
  /* Appendix 5 Port */
  uint16                                           appx5_mpc_port;
} nv_appx5_pref_type;
 
 
typedef PACKED struct {
  /* NAM */
  int8                                             nam;
  /* WLAN Network Selection Mode preference */
  uint16                                           net_sel_mode;
} nv_wlan_net_sel_mode_pref_type;
 
/* current active device */
typedef  word  nv_usbdc_supported_device_type;
 
  #define  NV_USBDC_MODEM_DEVICE                         ((nv_usbdc_supported_device_type)0)
 
  #define  NV_USBDC_NETWORK_DEVICE                       ((nv_usbdc_supported_device_type)1)
 
  #define  NV_USBDC_MASS_STORAGE_DEVICE                  ((nv_usbdc_supported_device_type)2)
 
 
typedef  word  nv_set_date_format_enum_type;
 
  #define  NV_SET_DATE_FORMAT_INVALID                    ((nv_set_date_format_enum_type)0)
 
  #define  NV_SET_DATE_FORMAT_DD_MM_YYYY                 ((nv_set_date_format_enum_type)1)
 
  #define  NV_SET_DATE_FORMAT_MM_DD_YYYY                 ((nv_set_date_format_enum_type)2)
 
  #define  NV_SET_DATE_FORMAT_YYYY_MM_DD_1               ((nv_set_date_format_enum_type)3)
 
  #define  NV_SET_DATE_FORMAT_YYYY_MM_DD_2               ((nv_set_date_format_enum_type)4)
 
  #define  NV_SET_DATE_FORMAT_DD_MM_YYYY_2               ((nv_set_date_format_enum_type)5)

 
typedef  word  nv_set_time_format_enum_type;
 
  #define  NV_SET_TIME_FORMAT_INVALID                    ((nv_set_time_format_enum_type)0)
 
  #define  NV_SET_TIME_FORMAT_24_HOUR                    ((nv_set_time_format_enum_type)1)
 
  #define  NV_SET_TIME_FORMAT_12_HOUR                    ((nv_set_time_format_enum_type)2)
 
 
typedef  word  nv_chg_usb_nvswitch_type;
 
  #define  NV_CHG_USB_NVSWITCH_ENA                       ((nv_chg_usb_nvswitch_type)0)
 
  #define  NV_CHG_USB_NVSWITCH_DIS                       ((nv_chg_usb_nvswitch_type)1)
 
 
typedef  word  nv_wclock_auto_nitz_enum_type;
 
  #define  NV_WC_AUTO                                    ((nv_wclock_auto_nitz_enum_type)0)
 
  #define  NV_WC_PROMPT                                  ((nv_wclock_auto_nitz_enum_type)1)
 
  #define  NV_WC_OFF                                     ((nv_wclock_auto_nitz_enum_type)2)
 
 
typedef  word  nv_timezone_enum_type;
 
  #define  NV_TZ_INVALID                                 ((nv_timezone_enum_type)0)
 
  #define  NV_TZ_GMT_MINUS_1100                          ((nv_timezone_enum_type)1)
 
  #define  NV_TZ_GMT_MINUS_1000_1                        ((nv_timezone_enum_type)2)
 
  #define  NV_TZ_GMT_MINUS_1000                          ((nv_timezone_enum_type)3)
 
  #define  NV_TZ_GMT_MINUS_0930                          ((nv_timezone_enum_type)4)
 
  #define  NV_TZ_GMT_MINUS_0900_1                        ((nv_timezone_enum_type)5)
 
  #define  NV_TZ_GMT_MINUS_0900                          ((nv_timezone_enum_type)6)
 
  #define  NV_TZ_GMT_MINUS_0800_1                        ((nv_timezone_enum_type)7)
 
  #define  NV_TZ_GMT_MINUS_0800                          ((nv_timezone_enum_type)8)
 
  #define  NV_TZ_GMT_MINUS_0700_1                        ((nv_timezone_enum_type)9)
 
  #define  NV_TZ_GMT_MINUS_0700                          ((nv_timezone_enum_type)10)
 
  #define  NV_TZ_GMT_MINUS_0600_1                        ((nv_timezone_enum_type)11)
 
  #define  NV_TZ_GMT_MINUS_0600_2                        ((nv_timezone_enum_type)12)
 
  #define  NV_TZ_GMT_MINUS_0600_3                        ((nv_timezone_enum_type)13)
 
  #define  NV_TZ_GMT_MINUS_0600                          ((nv_timezone_enum_type)14)
 
  #define  NV_TZ_GMT_MINUS_0500_1                        ((nv_timezone_enum_type)15)
 
  #define  NV_TZ_GMT_MINUS_0500_2                        ((nv_timezone_enum_type)16)
 
  #define  NV_TZ_GMT_MINUS_0500_3                        ((nv_timezone_enum_type)17)
 
  #define  NV_TZ_GMT_MINUS_0500                          ((nv_timezone_enum_type)18)
 
  #define  NV_TZ_GMT_MINUS_0400_1                        ((nv_timezone_enum_type)19)
 
  #define  NV_TZ_GMT_MINUS_0400_2                        ((nv_timezone_enum_type)20)
 
  #define  NV_TZ_GMT_MINUS_0400_3                        ((nv_timezone_enum_type)21)
 
  #define  NV_TZ_GMT_MINUS_0400_4                        ((nv_timezone_enum_type)22)
 
  #define  NV_TZ_GMT_MINUS_0400_5                        ((nv_timezone_enum_type)23)
 
  #define  NV_TZ_GMT_MINUS_0400                          ((nv_timezone_enum_type)24)
 
  #define  NV_TZ_GMT_MINUS_0330_1                        ((nv_timezone_enum_type)25)
 
  #define  NV_TZ_GMT_MINUS_0300_1                        ((nv_timezone_enum_type)26)
 
  #define  NV_TZ_GMT_MINUS_0300_2                        ((nv_timezone_enum_type)27)
 
  #define  NV_TZ_GMT_MINUS_0300                          ((nv_timezone_enum_type)28)
 
  #define  NV_TZ_GMT_MINUS_0200                          ((nv_timezone_enum_type)29)
 
  #define  NV_TZ_GMT_MINUS_0100_1                        ((nv_timezone_enum_type)30)
 
  #define  NV_TZ_GMT_MINUS_0100                          ((nv_timezone_enum_type)31)
 
  #define  NV_TZ_GMT_MINUS_0000_1                        ((nv_timezone_enum_type)32)
 
  #define  NV_TZ_GMT_MINUS_0000                          ((nv_timezone_enum_type)33)
 
  #define  NV_TZ_GMT_PLUS_0100_1                         ((nv_timezone_enum_type)34)
 
  #define  NV_TZ_GMT_PLUS_0100_2                         ((nv_timezone_enum_type)35)
 
  #define  NV_TZ_GMT_PLUS_0100                           ((nv_timezone_enum_type)36)
 
  #define  NV_TZ_GMT_PLUS_0200_1                         ((nv_timezone_enum_type)37)
 
  #define  NV_TZ_GMT_PLUS_0200_2                         ((nv_timezone_enum_type)38)
 
  #define  NV_TZ_GMT_PLUS_0200_3                         ((nv_timezone_enum_type)39)
 
  #define  NV_TZ_GMT_PLUS_0200_5                         ((nv_timezone_enum_type)40)
 
  #define  NV_TZ_GMT_PLUS_0200_6                         ((nv_timezone_enum_type)41)
 
  #define  NV_TZ_GMT_PLUS_0200_7                         ((nv_timezone_enum_type)42)
 
  #define  NV_TZ_GMT_PLUS_0200                           ((nv_timezone_enum_type)43)
 
  #define  NV_TZ_GMT_PLUS_0300_1                         ((nv_timezone_enum_type)44)
 
  #define  NV_TZ_GMT_PLUS_0300_2                         ((nv_timezone_enum_type)45)
 
  #define  NV_TZ_GMT_PLUS_0300_3                         ((nv_timezone_enum_type)46)
 
  #define  NV_TZ_GMT_PLUS_0300                           ((nv_timezone_enum_type)47)
 
  #define  NV_TZ_GMT_PLUS_0330_1                         ((nv_timezone_enum_type)48)
 
  #define  NV_TZ_GMT_PLUS_0400_1                         ((nv_timezone_enum_type)49)
 
  #define  NV_TZ_GMT_PLUS_0400                           ((nv_timezone_enum_type)50)
 
  #define  NV_TZ_GMT_PLUS_0430                           ((nv_timezone_enum_type)51)
 
  #define  NV_TZ_GMT_PLUS_0500_1                         ((nv_timezone_enum_type)52)
 
  #define  NV_TZ_GMT_PLUS_0500_2                         ((nv_timezone_enum_type)53)
 
  #define  NV_TZ_GMT_PLUS_0530                           ((nv_timezone_enum_type)54)
 
  #define  NV_TZ_GMT_PLUS_0545                           ((nv_timezone_enum_type)55)
 
  #define  NV_TZ_GMT_PLUS_0600_1                         ((nv_timezone_enum_type)56)
 
  #define  NV_TZ_GMT_PLUS_0600                           ((nv_timezone_enum_type)57)
 
  #define  NV_TZ_GMT_PLUS_0630                           ((nv_timezone_enum_type)58)
 
  #define  NV_TZ_GMT_PLUS_0700_1                         ((nv_timezone_enum_type)59)
 
  #define  NV_TZ_GMT_PLUS_0700_2                         ((nv_timezone_enum_type)60)
 
  #define  NV_TZ_GMT_PLUS_0700                           ((nv_timezone_enum_type)61)
 
  #define  NV_TZ_GMT_PLUS_0800_1                         ((nv_timezone_enum_type)62)
 
  #define  NV_TZ_GMT_PLUS_0800                           ((nv_timezone_enum_type)63)
 
  #define  NV_TZ_GMT_PLUS_0900                           ((nv_timezone_enum_type)64)
 
  #define  NV_TZ_GMT_PLUS_0930_1                         ((nv_timezone_enum_type)65)
 
  #define  NV_TZ_GMT_PLUS_0930                           ((nv_timezone_enum_type)66)
 
  #define  NV_TZ_GMT_PLUS_1000_1                         ((nv_timezone_enum_type)67)
 
  #define  NV_TZ_GMT_PLUS_1000_2                         ((nv_timezone_enum_type)68)
 
  #define  NV_TZ_GMT_PLUS_1000_3                         ((nv_timezone_enum_type)69)
 
  #define  NV_TZ_GMT_PLUS_1000                           ((nv_timezone_enum_type)70)
 
  #define  NV_TZ_GMT_PLUS_1030                           ((nv_timezone_enum_type)71)
 
  #define  NV_TZ_GMT_PLUS_1100_1                         ((nv_timezone_enum_type)72)
 
  #define  NV_TZ_GMT_PLUS_1100                           ((nv_timezone_enum_type)73)
 
  #define  NV_TZ_GMT_PLUS_1130                           ((nv_timezone_enum_type)74)
 
  #define  NV_TZ_GMT_PLUS_1200_1                         ((nv_timezone_enum_type)75)
 
  #define  NV_TZ_GMT_PLUS_1200_2                         ((nv_timezone_enum_type)76)
 
  #define  NV_TZ_GMT_PLUS_1200                           ((nv_timezone_enum_type)77)
 
  #define  NV_TZ_GMT_PLUS_1245_1                         ((nv_timezone_enum_type)78)
 
  #define  NV_TZ_GMT_PLUS_1300_1                         ((nv_timezone_enum_type)79)
 
  #define  NV_TZ_GMT_PLUS_1400                           ((nv_timezone_enum_type)80)
 
 
typedef PACKED struct {
  /* Max. Power in dBm of AMAM Master  table */
  int32                                            maxdBm;
  /* Min power in dBm of AMAM master table */
  int32                                            mindBm;
} nv_amam_dynamic_range;
 
 
typedef PACKED struct {
  /* A value for both gain ranges */
  int16                                            Aval[2];
  /* B value for both gain ranges */
  int16                                            Bval[2];
} nv_calpath_rsb_type;
 
 
typedef PACKED struct {
  /* GSM_850 systematic gain correction applied to AMAM table */
  int16                                            gain_percent;
  /* GSM_850 systematic dc correction applied to AMAM table */
  int16                                            dc_percent;
} nv_amam_sys_gain_dc_corr;
 
 
typedef PACKED struct {
  /* entry index poiting to the profile to which the nai is applicable */
  uint8                                            index;
  /* length of the NAI in number of bytes */
  uint8                                            nai_length;
  /* nai bytes */
  uint8                                            nai[NV_MAX_NAI_LENGTH];
} nv_ds_mip_rm_nai_type;
 
 
typedef PACKED struct {
 
  boolean                                          reading_advised;
 
  boolean                                          reading_optional;
} nv_sms_bmc_reading_pref_type;
 
 
typedef  word  nv_mms_hide_number_enum_type;
 
  #define  NV_MMS_SENDER_VISIBILITY_HIDE                 ((nv_mms_hide_number_enum_type)0)
 
  #define  NV_MMS_SENDER_VISIBILITY_SHOW                 ((nv_mms_hide_number_enum_type)1)
 
 
typedef  word  nv_mms_default_priority_enum_type;
 
  #define  NV_MMS_PRIORITY_NOT_SET                       ((nv_mms_default_priority_enum_type)0)
 
  #define  NV_MMS_PRIORITY_HIGHEST                       ((nv_mms_default_priority_enum_type)1)
 
  #define  NV_MMS_PRIORITY_HIGH                          ((nv_mms_default_priority_enum_type)2)
 
  #define  NV_MMS_PRIORITY_NORMAL                        ((nv_mms_default_priority_enum_type)3)
 
  #define  NV_MMS_PRIORITY_LOW                           ((nv_mms_default_priority_enum_type)4)
 
  #define  NV_MMS_PRIORITY_LOWEST                        ((nv_mms_default_priority_enum_type)5)
 
 
typedef  word  nv_mms_relative_validity_period_enum_type;
 
  #define  NV_MMS_VALIDITY_PERIOD_MAX                    ((nv_mms_relative_validity_period_enum_type)0)
 
  #define  NV_MMS_VALIDITY_PERIOD_1_WEEK                 ((nv_mms_relative_validity_period_enum_type)1)
 
  #define  NV_MMS_VALIDITY_PERIOD_2_DAYS                 ((nv_mms_relative_validity_period_enum_type)2)
 
  #define  NV_MMS_VALIDITY_PERIOD_1_DAY                  ((nv_mms_relative_validity_period_enum_type)3)
 
 
typedef  word  nv_mms_slide_default_duration_enum_type;
 
  #define  NV_MMS_SLIDE_DURATION_2_SECONDS               ((nv_mms_slide_default_duration_enum_type)0)
 
  #define  NV_MMS_SLIDE_DURATION_5_SECONDS               ((nv_mms_slide_default_duration_enum_type)1)
 
  #define  NV_MMS_SLIDE_DURATION_10_SECONDS              ((nv_mms_slide_default_duration_enum_type)2)
 
  #define  NV_MMS_SLIDE_DURATION_20_SECONDS              ((nv_mms_slide_default_duration_enum_type)3)
 
  #define  NV_MMS_SLIDE_DURATION_30_SECONDS              ((nv_mms_slide_default_duration_enum_type)4)
 
 
typedef  word  nv_mms_retrieval_enum_type;
 
  #define  NV_MMS_RETRIEVAL_AUTOMATIC                    ((nv_mms_retrieval_enum_type)0)
 
  #define  NV_MMS_RETRIEVAL_ALWAYS_ASK                   ((nv_mms_retrieval_enum_type)1)
 
  #define  NV_MMS_RETRIEVAL_RESTRICTED                   ((nv_mms_retrieval_enum_type)2)
 
 
typedef  word  nv_mms_delivery_time_enum_type;
 
  #define  NV_MMS_DELIVERY_TIME_IMMEDIATE                ((nv_mms_delivery_time_enum_type)0)
 
  #define  NV_MMS_DELIVERY_TIME_1_HOUR                   ((nv_mms_delivery_time_enum_type)1)
 
  #define  NV_MMS_DELIVERY_TIME_3_HOURS                  ((nv_mms_delivery_time_enum_type)2)
 
  #define  NV_MMS_DELIVERY_TIME_6_HOURS                  ((nv_mms_delivery_time_enum_type)3)
 
  #define  NV_MMS_DELIVERY_TIME_12_HOURS                 ((nv_mms_delivery_time_enum_type)4)
 
  #define  NV_MMS_DELIVERY_TIME_1_DAY                    ((nv_mms_delivery_time_enum_type)5)
 
  #define  NV_MMS_DELIVERY_TIME_3_DAYS                   ((nv_mms_delivery_time_enum_type)6)
 
  #define  NV_MMS_DELIVERY_TIME_7_DAYS                   ((nv_mms_delivery_time_enum_type)7)
 
 
typedef  word  nv_mms_creation_mode_enum_type;
 
  #define  NV_MMS_CREATION_MODE_FREE                     ((nv_mms_creation_mode_enum_type)0)
 
  #define  NV_MMS_CREATION_MODE_WARN                     ((nv_mms_creation_mode_enum_type)1)
 
  #define  NV_MMS_CREATION_MODE_RESTRICTED               ((nv_mms_creation_mode_enum_type)2)
 
 
typedef  word  nv_screensaver_style_enum_type;
  
  #define  NV_SCREENSAVER_STYLE_NONE                     ((nv_screensaver_style_enum_type)0)
  
  #define  NV_SCREENSAVER_STYLE_PICTURE                  ((nv_screensaver_style_enum_type)1)
  
  #define  NV_SCREENSAVER_STYLE_ENERGY_SAVING            ((nv_screensaver_style_enum_type)2)
  
  #define  NV_SCREENSAVER_STYLE_DIGITAL_CLOCK            ((nv_screensaver_style_enum_type)3)
  
  #define  NV_SCREENSAVER_STYLE_ANALOG_CLOCK             ((nv_screensaver_style_enum_type)4)


typedef  word  nv_messaging_font_enum_type;
  
  #define  NV_MMS_FONT_SIZE_LARGE                        ((nv_messaging_font_enum_type)0)
  
  #define  NV_MMS_FONT_SIZE_STANDARD                     ((nv_messaging_font_enum_type)1)
  
  #define  NV_MMS_FONT_SIZE_SMALL                        ((nv_messaging_font_enum_type)2)


typedef  word  nv_syncml_syncdirection_enum_type;
  
  #define  NV_SYNCDIRECTION_TWO_WAY                      ((nv_syncml_syncdirection_enum_type)0)
  
  #define  NV_SYNCDIRECTION_MOBILE_OVERWRITES            ((nv_syncml_syncdirection_enum_type)1)
  
  #define  NV_SYNCDIRECTION_SERVER_OVERWRITES            ((nv_syncml_syncdirection_enum_type)2)


typedef  word  nv_syncml_datatosync_enum_type;
  
  #define  NV_DATATOSYNC_MODIFIED_ONLY                   ((nv_syncml_datatosync_enum_type)0)
  
  #define  NV_DATATOSYNC_ALL_DATA                        ((nv_syncml_datatosync_enum_type)1)


typedef  word  nv_syncml_appstosync_enum_type;
  
  #define  NV_APPSTOSYNC_NONE                            ((nv_syncml_appstosync_enum_type)0)
  
  #define  NV_APPSTOSYNC_CONTACTS                        ((nv_syncml_appstosync_enum_type)1)
  
  #define  NV_APPSTOSYNC_CALENDAR                        ((nv_syncml_appstosync_enum_type)2)
  
  #define  NV_APPSTOSYNC_CONTACTS_CALENDAR               ((nv_syncml_appstosync_enum_type)3)


typedef  word  nv_ms_sms_text_size_enum_type;
  
  #define  NV_SMS_TEXT_SIZE_SMALL                        ((nv_ms_sms_text_size_enum_type)0)
  
  #define  NV_SMS_TEXT_SIZE_MEDIUM                       ((nv_ms_sms_text_size_enum_type)1)
  
  #define  NV_SMS_TEXT_SIZE_LARGE                        ((nv_ms_sms_text_size_enum_type)2)


typedef  word  nv_im_encoding_method_enum_type;
  
  #define  NV_IM_ENCODING_METHOD_UNKNOWN                 ((nv_im_encoding_method_enum_type)0)
  
  #define  NV_IM_ENCODING_METHOD_XML                     ((nv_im_encoding_method_enum_type)1)
  
  #define  NV_IM_ENCODING_METHOD_SMS                     ((nv_im_encoding_method_enum_type)2)
  
  #define  NV_IM_ENCODING_METHOD_WBXML                   ((nv_im_encoding_method_enum_type)3)


typedef  word  nv_im_wv_version_enum_type;
  
  #define  NV_IM_WV_VERSION_WV1_1                        ((nv_im_wv_version_enum_type)0)
  
  #define  NV_IM_WV_VERSION_WV1_2                        ((nv_im_wv_version_enum_type)1)


typedef PACKED struct {
  /* Length of NAI in no. of bytes */
  uint8                                            nai_length;
  /* bytes ( characters) of NAI */
  uint8                                            nai[NV_MAX_NAI_LENGTH];
} nv_ds_sip_rm_nai_type;
 
 
typedef PACKED struct {
  /* Bits 32 to 63 of Band Pref */
  uint8                                            nam;
  /* band */
  uint32                                           band;
} nv_band_pref_32_63_type;
 
 
typedef  word  nv_irda_file_location_enum_type;
  
  #define  NV_IRDA_FILE_LOCATION_INVALID                 ((nv_irda_file_location_enum_type)0)
  
  #define  NV_IRDA_FILE_LOCATION_PHONE                   ((nv_irda_file_location_enum_type)1)
  
  #define  NV_IRDA_FILE_LOCATION_MMC_CARD                ((nv_irda_file_location_enum_type)2)


typedef PACKED struct { 
  
  uint8                                            mcc[3];
  
  uint8                                            num_mnc_digits;
  
  uint8                                            mnc[3];
} nv_ext_op_list_entry_plmn_type;


typedef PACKED struct { 
  
  uint16                                           num_broken_charges;
  
  uint16                                           num_charges;
  
  uint16                                           num_usb_charges;
  
  uint16                                           num_mins_charging;
  
  uint16                                           mins_since_charging;
  
  boolean                                          one_min_condition_met;
} nv_bm_bat_stats_type;


typedef PACKED struct { 
  
  uint32                                           language;
  
  boolean                                          T9Supported;
} nv_input_language_options_type;


typedef  word  nv_wb_mailto_phonenum_enum_type;

  #define  NV_WB_MAILTO_PHONENUM_SMS                     ((nv_wb_mailto_phonenum_enum_type)0)

  #define  NV_WB_MAILTO_PHONENUM_MMS                     ((nv_wb_mailto_phonenum_enum_type)1)

  #define  NV_WB_MAILTO_PHONENUM_PROMPT                  ((nv_wb_mailto_phonenum_enum_type)2)


typedef  word  nv_wb_mailto_email_enum_type;

  #define  NV_WB_MAILTO_EMAIL_EMAIL                      ((nv_wb_mailto_email_enum_type)0)

  #define  NV_WB_MAILTO_EMAIL_MMS                        ((nv_wb_mailto_email_enum_type)1)

  #define  NV_WB_MAILTO_EMAIL_PROMPT                     ((nv_wb_mailto_email_enum_type)2)


typedef  word  nv_currently_active_profile_enum_type;

  #define  NV_ENV_ACTIVE_PROFILE_GENERAL                 ((nv_currently_active_profile_enum_type)1)

  #define  NV_ENV_ACTIVE_PROFILE_SILENT                  ((nv_currently_active_profile_enum_type)2)

  #define  NV_ENV_ACTIVE_PROFILE_MEETING                 ((nv_currently_active_profile_enum_type)3)

  #define  NV_ENV_ACTIVE_PROFILE_OUTDOOR                 ((nv_currently_active_profile_enum_type)4)

  #define  NV_ENV_ACTIVE_PROFILE_USER_PROFILE_1          ((nv_currently_active_profile_enum_type)5)

  #define  NV_ENV_ACTIVE_PROFILE_USER_PROFILE_2          ((nv_currently_active_profile_enum_type)6)

  #define  NV_ENV_ACTIVE_PROFILE_CAR_KIT                 ((nv_currently_active_profile_enum_type)7)

  #define  NV_ENV_ACTIVE_PROFILE_HEADSET                 ((nv_currently_active_profile_enum_type)8)

/* Autologin can be enabled for home network, never or always. */
typedef  word  nv_auto_login_enum_type;

  #define  NV_POC_AUTO_LOGIN_ALWAYS                      ((nv_auto_login_enum_type)0)

  #define  NV_POC_AUTO_LOGIN_NEVER                       ((nv_auto_login_enum_type)1)

  #define  NV_POC_AUTO_LOGIN_HOME_NETWORK                ((nv_auto_login_enum_type)2)

/* The time period for which incoming akert dialog is displayed */
typedef  word  nv_poc_wildcards_enum_type;

  #define  NV_POC_WILDCARD_OFF                           ((nv_poc_wildcards_enum_type)0)

  #define  NV_POC_WILDCARD_ACCEPT_ALL                    ((nv_poc_wildcards_enum_type)1)

  #define  NV_POC_WILDCARD_BLOCK_ALL                     ((nv_poc_wildcards_enum_type)2)

/* The user can set the client to automatically login on startup */
typedef  word  nv_im_notification_enum_type;

  #define  NV_IM_NOTIFICATION_RECEIVE                    ((nv_im_notification_enum_type)0)

  #define  NV_IM_NOTIFICATION_NONE                       ((nv_im_notification_enum_type)1)

  #define  NV_IM_NOTIFICATION_AUTH_REQUIRED              ((nv_im_notification_enum_type)2)

/* Toggles the output between earpiece and main speaker. */
typedef  word  nv_im_supported_bearer_enum_type;

  #define  NV_IM_SUPPORTED_BEARER_NOT_SET                ((nv_im_supported_bearer_enum_type)0)

  #define  NV_IM_SUPPORTED_BEARER_HTTP                   ((nv_im_supported_bearer_enum_type)1)

  #define  NV_IM_SUPPORTED_BEARER_SMS                    ((nv_im_supported_bearer_enum_type)2)

  #define  NV_IM_SUPPORTED_BEARER_WSP                    ((nv_im_supported_bearer_enum_type)3)

/* The different CIR Methods supported by IM  */
typedef  word  nv_supported_cir_method_enum_type;

  #define  NV_SUPPORTED_CIR_METHOD_NOT_SET               ((nv_supported_cir_method_enum_type)0)

  #define  NV_SUPPORTED_CIR_METHOD_STCP                  ((nv_supported_cir_method_enum_type)1)

  #define  NV_SUPPORTED_CIR_METHOD_SUDP                  ((nv_supported_cir_method_enum_type)2)

  #define  NV_SUPPORTED_CIR_METHOD_SSMS                  ((nv_supported_cir_method_enum_type)3)

  #define  NV_SUPPORTED_CIR_METHOD_SHTTP                 ((nv_supported_cir_method_enum_type)4)

  #define  NV_SUPPORTED_CIR_METHOD_WAPSMS                ((nv_supported_cir_method_enum_type)5)

  #define  NV_SUPPORTED_CIR_METHOD_WAPUDP                ((nv_supported_cir_method_enum_type)6)


typedef  word  nv_im_login_enum_type;

  #define  NV_IM_LOGIN_NORMAL                            ((nv_im_login_enum_type)0)

  #define  NV_IM_LOGIN_AUTO4WAY                          ((nv_im_login_enum_type)1)

  #define  NV_IM_LOGIN_AUTOAOL                           ((nv_im_login_enum_type)2)

  #define  NV_IM_LOGIN_LAST                              ((nv_im_login_enum_type)3)


typedef  word  nv_im_delivery_method_enum_type;

  #define  NV_IM_DELIVERY_METHOD_NOT_SET                 ((nv_im_delivery_method_enum_type)0)

  #define  NV_IM_DELIVERY_METHOD_PUSH                    ((nv_im_delivery_method_enum_type)1)

  #define  NV_IM_DELIVERY_METHOD_NOTIFY_GET              ((nv_im_delivery_method_enum_type)2)


typedef PACKED struct {

  int16                                            pwrdBm;

  uint16                                           dacval;
} nv_autocal_pwr_dac_type;


typedef PACKED struct { 
  
  int16                                            Aval[4];
  
  int16                                            Bval[4];
} nv_rtr6250_rsb_type;


typedef  word  nv_ringtone_tone_setting_enum_type;

  #define  NV_RINGTONE_TONE_SETTING_INVALID              ((nv_ringtone_tone_setting_enum_type)0)

  #define  NV_RINGTONE_TONE_SETTING_ON                   ((nv_ringtone_tone_setting_enum_type)1)

  #define  NV_RINGTONE_TONE_SETTING_OFF                  ((nv_ringtone_tone_setting_enum_type)2)

  #define  NV_RINGTONE_TONE_SETTING_BEEP                 ((nv_ringtone_tone_setting_enum_type)3)

  #define  NV_RINGTONE_TONE_SETTING_ASCENDING            ((nv_ringtone_tone_setting_enum_type)4)


typedef  word  nv_wb_send_url_bkmark_enum_type;

  #define  NV_WB_SEND_URL_BKMARK_SMS                     ((nv_wb_send_url_bkmark_enum_type)0)

  #define  NV_WB_SEND_URL_BKMARK_MMS                     ((nv_wb_send_url_bkmark_enum_type)1)

  #define  NV_WB_SEND_URL_BKMARK_EMAIL                   ((nv_wb_send_url_bkmark_enum_type)2)

  #define  NV_WB_SEND_URL_BKMARK_PROMPT                  ((nv_wb_send_url_bkmark_enum_type)3)


typedef  word  nv_wb_browser_timeout_enum_type;

  #define  NV_WB_WAPTIMEOUT_30                           ((nv_wb_browser_timeout_enum_type)0)

  #define  NV_WB_WAPTIMEOUT_60                           ((nv_wb_browser_timeout_enum_type)1)

  #define  NV_WB_WAPTIMEOUT_NO_LIMIT                     ((nv_wb_browser_timeout_enum_type)2)


typedef  word  nv_wb_fontsize_enum_type;

  #define  NV_WB_FONTSIZE_VERY_SMALL                     ((nv_wb_fontsize_enum_type)0)

  #define  NV_WB_FONTSIZE_SMALL                          ((nv_wb_fontsize_enum_type)1)

  #define  NV_WB_FONTSIZE_MEDIUM                         ((nv_wb_fontsize_enum_type)2)

  #define  NV_WB_FONTSIZE_LARGE                          ((nv_wb_fontsize_enum_type)3)


typedef  word  nv_wb_textwrap_enum_type;

  #define  NV_WB_TEXTWRAP_CHAR                           ((nv_wb_textwrap_enum_type)0)

  #define  NV_WB_TEXTWRAP_WORD                           ((nv_wb_textwrap_enum_type)1)


typedef  word  nv_wb_scrollstep_enum_type;

  #define  NV_WB_SCROLLSTEP_SINGLE                       ((nv_wb_scrollstep_enum_type)0)

  #define  NV_WB_SCROLLSTEP_HALF                         ((nv_wb_scrollstep_enum_type)1)

  #define  NV_WB_SCROLLSTEP_WHOLE                        ((nv_wb_scrollstep_enum_type)2)


typedef  word  nv_ringer_volume_enum_type;

  #define  NV_RINGER_VOLUME_INVALID                      ((nv_ringer_volume_enum_type)0)

  #define  NV_RINGER_VOLUME_LEVEL_1                      ((nv_ringer_volume_enum_type)1)

  #define  NV_RINGER_VOLUME_LEVEL_2                      ((nv_ringer_volume_enum_type)2)

  #define  NV_RINGER_VOLUME_LEVEL_3                      ((nv_ringer_volume_enum_type)3)

  #define  NV_RINGER_VOLUME_LEVEL_4                      ((nv_ringer_volume_enum_type)4)

  #define  NV_RINGER_VOLUME_LEVEL_5                      ((nv_ringer_volume_enum_type)5)

  #define  NV_RINGER_VOLUME_OFF                          ((nv_ringer_volume_enum_type)6)


typedef PACKED struct {

  uint8                                            i;

  uint8                                            q;

  uint8                                            transconductor;
} nv_rf_rx_im2_cal;


typedef PACKED struct {

  int8                                             rf_rx_agc_lpm_rise[NV_RF_SWITCHPOINT_COUNT];

  int8                                             rf_rx_agc_lpm_fall[NV_RF_SWITCHPOINT_COUNT];
} nv_rf_rx_agc_lpm_switchpoints;


typedef PACKED struct {
  /* Polar ramp up */
  uint16                                           ramp_up[NV_TX_BURST_RAMP_SIZ];
  /* Polar ramp down */
  uint16                                           ramp_down[NV_TX_BURST_RAMP_SIZ];
} nv_gsm_polar_ramp_profile_type;


typedef PACKED struct {
  /* AFC Loop Parameters */
  uint16                                           loop_gain_numer;
  /* Denominator of loop gain */
  uint16                                           loop_gain_denom;
  /* Maximum frequency adjustment in fast acquisition */
  uint16                                           fast_adjust_limit;
  /* Maximum frequency adjustment in slow acquisition */
  uint16                                           slow_adjust_limit;
} nv_mf_afc_loop_params_type;


typedef PACKED struct {
  /* Secure Time Local Time Offset */
  int64                                            local_offset;
  /* Secure Time User Time Offset */
  int64                                            user_offset;
} nv_sectime_offsets_type;



/*=========================================================================*/
/* NVM Items Union Type.                                                   */
/*=========================================================================*/

typedef PACKED union {
  /* NV Peek Operation */
  nv_peek_type                                     peek;
  /* NV Poke Operation */
  nv_poke_type                                     poke;
  /* OTASP Commit operation - writes several NV items */
  nv_otasp_commit_type                             *otasp_commit;
  /* Electronic Serial Number */
  nv_esn_type                                      esn;
  /* Checksum for Electronic Serial Number */
  nv_esn_chksum_type                               esn_chksum;
  /* NV major version number, changing it forces an NV rebuild */
  byte                                             verno_maj;
  /* NV minor version number, changing it forces an NV rebuild */
  byte                                             verno_min;
  /* Station Class Mark is 8 bits, as per CAI section 6.3.3 */
  byte                                             scm;
  /* The mobile Slot Cycle index is 8 bits, per CAI section 1.1.2.2 */
  int8                                             slot_cycle_index;
  /* Mobile CAI revision number (8 bits) */
  byte                                             mob_cai_rev;
  /* Mobile firmware revision number (16 bits) */
  word                                             mob_firm_rev;
  /* Mobile model (8 bits) */
  byte                                             mob_model;
  /* Physical configuration checksum */
  nv_config_chksum_type                            config_chksum;
  /* System preferred mode */
  nv_pref_mode_type                                pref_mode;
  /* CDMA pref serv (A only, A pref, B only, B pref, Home only, SID only) */
  nv_pref_serv_type                                cdma_pref_serv;
  /* Analog pref service  */
  nv_pref_serv_type                                analog_pref_serv;
  /* CDMA SID lockout list for the given NAM */
  nv_sid_lock_type                                 cdma_sid_lock;
  /* CDMA SID Acquisition list for the given NAM */
  nv_sid_acq_type                                  cdma_sid_acq;
  /* Analog SID lockout list */
  nv_sid_lock_type                                 analog_sid_lock;
  /* Analog SID acquisition */
  nv_sid_acq_type                                  analog_sid_acq;
  /* First analog channel for the given NAM */
  nv_firstchp_type                                 analog_firstchp;
  /* Analog home system ID for the given NAM */
  nv_sid_type                                      analog_home_sid;
  /* Analog reg setting (disabled, whereabouts known, whereabouts unknown) */
  nv_analog_reg_type                               analog_reg;
  /* Primary CDMA channel for the given NAM */
  nv_cdmach_type                                   pcdmach;
  /* Secondary CDMA channel for the given NAM */
  nv_cdmach_type                                   scdmach;
  /* Primary PCN channel for the given NAM */
  nv_cdmach_type                                   ppcnch;
  /* Secondary PCN channel for the given NAM */
  nv_cdmach_type                                   spcnch;
  /* NAM checksum */
  nv_nam_chksum_type                               nam_chksum;
  /* Authentication A key (2 words) */
  nv_a_key_type                                    a_key;
  /* Authenitcation A Key chksum */
  nv_a_key_chksum_type                             a_key_chksum;
  /* Shared Secret Data A - used for authentication (2 dwords) */
  nv_ssd_type                                      ssd_a;
  /* Shared Secret Data A checksum */
  nv_ssd_chksum_type                               ssd_a_chksum;
  /* Shared Secret Data B for the given NAM - used for CDMA voice privacy */
  nv_ssd_type                                      ssd_b;
  /* Shared Secret Data B checksum */
  nv_ssd_chksum_type                               ssd_b_chksum;
  /* Roam count - 1 byte for the given nam */
  nv_count_type                                    count;
  /* MIN 1 (phone number) for the given NAM, in quotes, or encoded MIN1 */
  nv_min1_type                                     min1;
  /* MIN 2 (area code) for the given NAM, in quotes, or encoded MIN2 */
  nv_min2_type                                     min2;
  /* CDMA Mobile terminated home SID for the given NAM (true, false) */
  nv_mob_term_type                                 mob_term_home;
  /* CDMA Mobile terminated foreign SID for the given NAM (true, false) */
  nv_mob_term_type                                 mob_term_for_sid;
  /* CDMA Mobile terminated foreign NID for the given NAM (true, false) */
  nv_mob_term_type                                 mob_term_for_nid;
  /* Access overload class for the given nam */
  nv_accolc_type                                   accolc;
  /* Up to 4 CDMA SID/NID pairs for the given NAM */
  nv_sid_nid_type                                  sid_nid;
  /* MIN Checksum for the given NAM */
  nv_min_chksum_type                               min_chksum;
  /* Current NAM */
  byte                                             curr_nam;
  /* Call origination MIN (index 0-3) within the given NAM */
  nv_orig_min_type                                 orig_min;
  /* Auto-select NAM on roaming (not implemented) (true, false) */
  boolean                                          auto_nam;
  /* This item holds the name of each NAM. */
  nv_name_nam_type                                 name_nam;
  /* Next analog registration */
  dword                                            nxtreg;
  /* Last SID registered */
  word                                             lstsid;
  /* Analog location area ID */
  word                                             locaid;
  /* Analog power up registration identifier (true, false) */
  boolean                                          pureg;
  /* CDMA registration zone list */
  nv_zone_list_type                                zone_list;
  /* CDMA SID/NID list */
  nv_sid_nid_list_type                             sid_nid_list;
  /* Distance based registration variables */
  nv_dist_reg_type                                 dist_reg;
  /* Last CDMA channel acquired for the given NAM */
  nv_cdmach_type                                   last_cdmach;
  /* Call timer item */
  nv_call_time_type                                call_timer;
  /* Air timer for the given NAM */
  nv_call_time_type                                air_timer;
  /* Resettable cumulative roam time */
  nv_call_time_type                                roam_timer;
  /* Life time (non-resettable) cumulative call timer */
  nv_call_time_type                                life_timer;
  /* Time hardware has been running (minutes) */
  nv_run_time_type                                 run_timer;
  /* Speed dial number */
  nv_dial_type                                     dial;
  /* Call stack number */
  nv_stdial_type                                   stack;
  /* Call stack last number index */
  nv_stack_idx_type                                stack_idx;
  /* OBSOLETE Page settings */
  nv_page_set_type                                 page_set;
  /* Page message and time (new = true, false) */
  nv_page_msg_type                                 page_msg;
  /* Hanset earpiece volume level (1 min - 255 max, 0 = off) */
  byte                                             ear_level;
  /* Hanset earpiece volume level (1 min - 255 max, 0 = off) */
  byte                                             speaker_level;
  /* External speaker ringer volume (1 min - 255 max, 0 = off) */
  byte                                             ringer_level;
  /* Key beep volume level(1 min - 255 max, 0 = off) */
  byte                                             beep_level;
  /* One minute call beeper select (on, off) */
  boolean                                          call_beep;
  /* Continuous keypad DTMF tones select (on, off) */
  boolean                                          cont_key_dtmf;
  /* Continuous string (memory) DTMF tones select (on, off) */
  boolean                                          cont_str_dtmf;
  /* Service area enter/exit alert select (on, off) */
  boolean                                          svc_area_alert;
  /* Call fade alert select (on, off) */
  boolean                                          call_fade_alert;
  /* Idle banner to display */
  nv_banner_type                                   banner;
  /* Specifies handset brightness with 0 to 255 (0 equals blank). */
  byte                                             lcd;
  /* Auto power off: time to stay on when ignition off */
  byte                                             auto_power;
  /* Auto answer setting */
  nv_auto_answer_type                              auto_answer;
  /* Auto redial setting, time in 10 second units */
  nv_auto_redial_type                              auto_redial;
  /* Auto hyphen setting (on, off) */
  boolean                                          auto_hyphen;
  /* Backlight (0: never on, 1-10: secs before going off, 255: never off) */
  byte                                             back_light;
  /* Auto radio mute setting (on, off) */
  boolean                                          auto_mute;
  /* Base station maintenance reason */
  nv_maintrsn_type                                 maintrsn;
  /* Base station lock reason until power cycled */
  nv_lckrsn_type                                   lckrsn_p;
  /* Indicator of whether user locked the phone */
  byte                                             lock;
  /* Lock code string (4 characters 0-9, representing the lock code) */
  nv_lock_code_type                                lock_code;
  /* Auto lock setting (on, off) */
  boolean                                          auto_lock;
  /* Call restrictions (word, 0 = no restrictions) */
  word                                             call_rstrc;
  /* 6 digit security code, represented by a string of digits (0-9) */
  nv_sec_code_type                                 sec_code;
  /* Horn alert setting (on, off) */
  boolean                                          horn_alert;
  /* Retrievs and adds an entry to the error log */
  nv_err_log_type                                  err_log;
  /* Unit hardware ID */
  dword                                            unit_id;
  /* Frequency adjust values in a 32 byte table in a file */
  nv_freq_adj_type                                 freq_adj;
  /* V battery regulator array values given, or in a file */
  nv_minmax_type                                   vbatt;
  /* Analog tx power level array */
  nv_fm_tx_pwr_type                                fm_tx_pwr;
  /* Frequency Temp offset values in a 64 byte table in a file */
  nv_fr_temp_offset_type                           fr_temp_offset;
  /* SIO mode for DM (HDLC, ASYNC 9.6K, ASYNC 19.2K, ASYNC 38.4K, MONO */
  byte                                             dm_io_mode;
  /* Portable only - to limit TX_GAIN_ADJ when output is exceeded */
  byte                                             cdma_tx_limit;
  /* Portable - Analog RSSI adjustment values given, or in a file */
  nv_minmax_type                                   fm_rssi;
  /* Portable CDMA UHF ripple compensation table values from a file */
  byte                                             cdma_ripple[NV_RIPPLE_COMP_TABLE_SIZ];
  /* CDMA RX Offset compensation */
  byte                                             cdma_rx_offs[NV_RX_OFFSET_TABLE_SIZ];
  /* CDMA RX Power */
  byte                                             cdma_rx_pwr[NV_RX_POWER_TABLE_SIZ];
  /* CDMA RX Error */
  byte                                             cdma_rx_err[NV_RX_ERROR_TABLE_SIZ];
  /* CDMA Tx gain comp slope compensation table values from file */
  byte                                             cdma_tx_slp1[NV_TX_SLOPE_1_TABLE_SIZ];
  /* Portable - CDMA Tx gain adjust slope comp. table values from file */
  byte                                             cdma_tx_slp2[NV_TX_SLOPE_2_TABLE_SIZ];
  /* Portable CDMA Tx non-linear error comp. table values from a file */
  byte                                             cdma_tx_err[NV_TX_NON_LIN_ERR_TABLE_SIZ];
  /* Portable current control table values in a file */
  byte                                             pa_cur_ctl[NV_HDET_TABLE_SIZ];
  /* Special attentuator parameter for Sony chipset (byte) */
  byte                                             sony_atten_1;
  /* Special attentuator parameter for Sony chipset (byte) */
  byte                                             sony_atten_2;
  /* Vocoder gain */
  word                                             voc_gain;
  /* Spare NV item for develper's use (word) */
  word                                             spare_1;
  /* Spare NV item for develper's use (word) */
  word                                             spare_2;
  /* Data services enabled/disabled (on/off) */
  boolean                                          data_srvc_enabled;
  /* External data port mode (9600, 19.2K, 38.4K) */
  byte                                             data_io_mode;
  /* Data services idle time in seconds */
  word                                             idle_data_timeout;
  /* Maximum Tx adjust */
  byte                                             max_tx_adj;
  /* Initial mute setting (norm, mute, spkr) */
  byte                                             init_mute;
  /* Free form factory info - 100 bytes in a file */
  byte                                             fact_info[NV_FACTORY_INFO_SIZ];
  /* Special attentuator parameter for Sony chipset (byte) */
  byte                                             sony_atten_3;
  /* Special attentuator parameter for Sony chipset (byte) */
  byte                                             sony_atten_4;
  /* Special attentuator parameter for Sony chipset (byte) */
  byte                                             sony_atten_5;
  /* Multidrop address of the mobile */
  byte                                             dm_addr;
  /* Short code PN offset mask choice - 0: off-by-one, 1:IS-95 compliant */
  byte                                             cdma_pn_mask;
  /* Time (secs) from last digit dialed until phone number is sent (ISS-1) */
  byte                                             send_timeout;
  /* NGP FM TX_AGC_ADJ setting vs power - 16 bytes in a file */
  byte                                             fm_agc_set_vs_pwr[NV_PWR_TABLE_SIZ];
  /* NGP FM TX_AGC_ADJ setting vs frequency - 16 int1s in a file */
  int1                                             fm_agc_set_vs_freq[NV_FREQ_TABLE_SIZ];
  /* NGP FM TX_AGC_ADJ setting vs temperature - 8 int1s in a file */
  int1                                             fm_agc_set_vs_temp[NV_TEMP_TABLE_SIZ];
  /* NGP FM expected HDET reading vs power - 16 bytes in a file */
  byte                                             fm_exp_hdet_vs_pwr[NV_PWR_TABLE_SIZ];
  /* NGP FM HDET error slope vs power - 16 bytes in a file */
  byte                                             fm_err_slp_vs_pwr[NV_PWR_TABLE_SIZ];
  /* NGP Deviation adj. trim - one byte, or one byte in a file */
  byte                                             fm_freq_sense_gain;
  /* NGP CDMA Rx linearizer offset - one byte, or one byte in a file */
  byte                                             cdma_rx_lin_off_0;
  /* NGP CDMA Rx linearizer slope - 16 bytes in a file */
  byte                                             cdma_rx_lin_slp[NV_CDMA_RX_LIN_SIZ];
  /* CDMA RX compensation table vs frequency */
  int1                                             cdma_rx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
  /* CDMA RX compensation table vs frequency */
  int1                                             cdma_tx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
  /* CDMA TX compnesation table vs battery voltage */
  int1                                             cdma_tx_comp_vs_volt[NV_VOLT_TABLE_SIZ];
  /* NGP CDMA Tx linearizer master offset: 1 word or 1 word in file */
  word                                             cdma_tx_lin_master_off_0;
  /* NGP CDMA Tx linearizer master slope - 36 bytes in a file */
  byte                                             cdma_tx_lin_master_slp[NV_CDMA_TX_LIN_MASTER_SIZ];
  /* NGP CDMA Tx linearizer trim vs temp - 8 bytes in a file */
  byte                                             cdma_tx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
  /* NGP CDMA Tx linearizer trim vs voltage - 8 bytes in a file */
  byte                                             cdma_tx_lin_vs_volt[NV_VOLT_TABLE_SIZ];
  /* NGP CDMA Tx power limit vs temperature - 8 bytes in a file */
  byte                                             cdma_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
  /* NGP CDMA Tx power limit vs voltage - 8 int1s in a file */
  int1                                             cdma_tx_lim_vs_volt[NV_VOLT_TABLE_SIZ];
  /* NGP CDMA Tx power limit vs frequency - 16 int1s in a file */
  int1                                             cdma_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
  /* NGP CDMA expected HDET reading vs AGC PDM - 16 bytes in a file */
  byte                                             cdma_exp_hdet_vs_agc[NV_CDMA_EXP_HDET_VS_AGC_SIZ];
  /* NGP CDMA HDET error slope vs HDET reading - 8 bytes in a file */
  byte                                             cdma_err_slp_vs_hdet[NV_CDMA_ERR_SLP_VS_HDET_SIZ];
  /* NGP RF & LCD compensation - 2 bytes, or 2 bytes in a file */
  nv_minmax_type                                   therm;
  /* RF comp based on voltage - 2 bytes given or in a file */
  nv_minmax_type                                   vbatt_pa;
  /* NGP ADC HDET reading offset - one byte, or one byte in a file */
  byte                                             hdet_off;
  /* NGP ADC HDET reading span - one byte, or one byte in a file */
  byte                                             hdet_spn;
  /* NGP ena/dis UI one touch dialing (on, off) */
  boolean                                          onetouch_dial;
  /* FM AGC adjust v. Frequency Table - 16 int1s in a file */
  byte                                             fm_agc_adj_vs_freq[NV_ADJ_VS_FREQ_SIZ];
  /* FM AGC adjust vs. Temperature Table - 8 int1s in a file */
  byte                                             fm_agc_adj_vs_temp[NV_ADJ_VS_TEMP_SIZ];
  /* RF configuration - 1 byte, or one byte in a file */
  byte                                             rf_config;
  /* R1 rise - 1 byte, or one byte in a file */
  byte                                             r1_rise;
  /* R1 fall - 1 byte, or one byte in a file */
  byte                                             r1_fall;
  /* R2 rise - 1 byte, or one byte in a file */
  byte                                             r2_rise;
  /* R2 fall - 1 byte, or one byte in a file */
  byte                                             r2_fall;
  /* R3 rise - 1 byte, or one byte in a file */
  byte                                             r3_rise;
  /* R3 fall - 1 byte, or one byte in a file */
  byte                                             r3_fall;
  /* PA range step calibration - 1 byte, or one byte in a file */
  byte                                             pa_range_step_cal;
  /* LNA range polarization - 1 byte, or one byte in a file */
  byte                                             lna_range_pol;
  /* LNA range rise - 1 byte, or one byte in a file */
  int1                                             lna_range_rise;
  /* LNA range fall - 1 byte - or one byte in a file */
  int1                                             lna_range_fall;
  /* LNA range offset - 1 word, or one word in a file */
  word                                             lna_range_offset;
  /* Count of power cycles - 1 byte */
  dword                                            power_cycles;
  /* Alerts level - 1 byte */
  byte                                             alerts_lvl;
  /* Alerts level shadow - 1 byte */
  byte                                             alerts_lvl_shadow;
  /* Ringer level shadow - 1 byte */
  byte                                             ringer_lvl_shadow;
  /* Beep level shadow - 1 byte */
  byte                                             beep_lvl_shadow;
  /* Ear level shadow - 1 byte */
  byte                                             ear_lvl_shadow;
  /* Boolean whether to show time or not (true, false) */
  boolean                                          time_show;
  /* Air time counter item */
  nv_call_cnt_type                                 air_cnt;
  /* Roam count - 1 byte for the given nam */
  nv_call_cnt_type                                 roam_cnt;
  /* Life count - 1 byte */
  dword                                            life_cnt;
  /* Boolean whether to send PIN or not (true, false) */
  boolean                                          send_pin;
  /* SMS item - Obsolete */
  nv_sms_dm_type                                   sms;
  /* SMS item */
  nv_sms_dm_type                                   sms_obsolete;
  /* Mobile Country Code: string of 3 digits in quotes, or encoded MCC */
  nv_imsi_mcc_type                                 imsi_mcc;
  /* True IMSI Mobile Network Code for given NAM */
  nv_imsi_11_12_type                               imsi_11_12;
  /* Directory Number: string of 10 digits */
  nv_dir_number_type                               dir_number;
  /* Voice privacy - 1 byte */
  byte                                             voice_priv;
  /* Spare byte - obsolete item */
  byte                                             spare_b1;
  /* Spare byte - obsolete item */
  byte                                             spare_b2;
  /* Spare word - obsolete item */
  word                                             spare_w1;
  /* Spare word - obsolete item */
  word                                             spare_w2;
  /* Field Service Code: string of 6 digits */
  nv_fsc_type                                      fsc;
  /* One time alarms for DOT: 1 byte ID, 1 dword DOT alarms */
  nv_alarms_type                                   alarms;
  /* Standing alarm - 1 word */
  word                                             standing_alarm;
  /* ISD STD Password: string of 4 digits */
  nv_isd_std_passwd_type                           isd_std_passwd;
  /* ISD STD Restrictions: 1 byte */
  byte                                             isd_std_restrict;
  /* ISS2 Dialing Plan: 1 word */
  word                                             dialing_plan;
  /* NGP FM LNA control - 2 bytes (min/max) or 2 bytes in the given file */
  nv_minmax_type                                   fm_lna_ctl;
  /* Life time (non-resettable) cumulative call timer */
  nv_run_time_type                                 life_timer_g;
  /* Last call time for given NAM */
  nv_run_time_type                                 call_timer_g;
  /* Power Down count - 1 dword */
  dword                                            pwr_dwn_cnt;
  /* FM Automatic Gain Control */
  nv_minmax_type                                   fm_agc;
  /* FSC2, future use - 1 dword */
  nv_fsc2_type                                     fsc2;
  /* FSC2 checksum, future use - 1 dword */
  nv_fsc2_chksum_type                              fsc2_chksum;
  /* Warranty Date Code - string of 5 chars - 3 date code, 2 swap count */
  nv_wdc_type                                      wdc;
  /* Hardware Configuration - 1 dword */
  dword                                            hw_config;
  /* CDMA Rx Linearizer vs. Temperature table - 8 int1s in a file */
  int1                                             cdma_rx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
  /* CDMA Adjust factor- 1 byte, or 1 byte in a file */
  byte                                             cdma_adj_factor;
  /* CDMA Tx Limit Booster offset - 1 byte, or 1 byte in a file */
  byte                                             cdma_tx_lim_booster_off;
  /* CDMA Rx Slope vs. Temperature table - 8 int1s in a file */
  int1                                             cdma_rx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
  /* CDMA Tx Slope vs. Temperature table - 8 int1s in a file */
  int1                                             cdma_tx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
  /* PA Range vs. Temperature table - 8 int1s in a file */
  int1                                             pa_range_vs_temp[NV_TEMP_TABLE_SIZ];
  /* LNA Switch vs. Temperature table - 8 int1s in a file */
  int1                                             lna_switch_vs_temp[NV_TEMP_TABLE_SIZ];
  /* FM Exp HDET vs. Temperature table - 8 int1s in a file */
  byte                                             fm_exp_hdet_vs_temp[NV_TEMP_TABLE_SIZ];
  /* N1M from IS-95A.  1 byte */
  byte                                             n1m;
  /* Mobile IMSI */
  nv_imsi_type                                     imsi;
  /* IMSI Int'l Mobile Station ID length for given NAM */
  nv_imsi_addr_num_type                            imsi_addr_num;
  /* TMSI zone length for the given NAM */
  nv_tmsi_zone_length_type                         assigning_tmsi_zone_length;
  /* TMSI zone for the given NAM */
  nv_tmsi_zone_type                                assigning_tmsi_zone;
  /* TMSI code for given NAM */
  nv_tmsi_code_type                                tmsi_code;
  /* TMSI expiration time for given NAM */
  nv_tmsi_exp_time_type                            tmsi_exp_timer;
  /* Home PCS frequency block */
  nv_home_block_type                               home_block;
  /* Mobile Directory Number. There is a max of 15 digits for the number */
  nv_mob_dir_data_type                             mob_dir_number;
  
  nv_roaming_list_union_type                       roaming_list;
  /* Most recently used table for a NAM. */
  nv_mru_table_type                                mru_table;
  /* Auto redial setting, time in 10 second units */
  nv_dial_type                                     redial;
  /* One time keypad subsidy lock. */
  nv_sec_code_type                                 otksl;
  /* Used with PREF_MODE. */
  boolean                                          timed_pref_mode;
  /* Ringer type setting. type is a byte */
  byte                                             ringer_type;
  /* enable/disable answer with any key option */
  boolean                                          any_key_answer;
  /* Hands free kit bklight setting. */
  byte                                             back_light_hfk;
  /* Type of keypress sound emitted. type: 0-Emit tones, 1-Emit clicks */
  nv_key_sound_enum_type                           key_sound;
  /* Phone book sorting method. method: 0-Alphabetical, 1-By Location */
  nv_dials_sort_enum_type                          sorting_method;
  /* Language for user interfaca. language: 0-English, 1-Spanish, 2-French */
  nv_language_enum_type                            language_selection;
  /* Type of user interface. format: 0-Disp full menus, 1-Disp short menus */
  nv_menu_format_enum_type                         menu_format;
  /* External speaker ringer volume */
  byte                                             ringer_spkr_lvl;
  /* External speaker key beep volume */
  byte                                             beep_spkr_lvl;
  /* Most recently used table for a NAM. */
  nv_mru2_table_type                               mru2_table;
  /* Vibrator usage setting */
  byte                                             vibrator;
  /* Opening clam shell answers call */
  boolean                                          flip_answers;
  /* ISS2 dialing restriction levels */
  nv_dial_restrict_lvls_type                       dial_restrict_lvls;
  /* Number elements in state table */
  nv_dial_state_table_len_type                     dial_state_table_len;
  /* ISS2 dialing plan state table */
  nv_dial_state_table_elem_type                    dial_state_table;
  /* Voice privacy alert setting: On/Off */
  byte                                             voice_priv_alert;
  /* IP address obsolete item */
  byte                                             ip_address_obsolete;
  /* Curr gateway obsolete item */
  byte                                             curr_gateway_obsolete;
  /* Data service QNC enable/disable */
  boolean                                          data_qnc_enabled;
  /* Data services Service Option (byte) */
  byte                                             data_so_set;
  /* Unwired Planet link info (IP addresses and key data) */
  nv_up_link_info_type                             up_link_info;
  /* Unwired Planet parameters: Current gateway, alert state, etc. */
  nv_up_parms_type                                 up_parms;
  /* Timer 1 word */
  word                                             elapsed_time;
  /* PDM2 RF Calibration - 1 byte */
  byte                                             pdm2;
  /* Receiver AGC minimum & maximum - two bytes given or in a file */
  nv_minmax_type                                   rx_agc_minmax;
  /* Auxiliary V battery regulator array - (two bytes) given or in a file */
  nv_minmax_type                                   vbatt_aux;
  /* Enable status of DTACO feature {enable, disable, enable_on_flip} */
  nv_dtaco_control_type                            dtaco_control;
  /* DTACO feature timeout after last dialed digit - 1 byte */
  byte                                             dtaco_interdigit_timeout;
  /* PDM1 RF Calibration - 1 byte */
  byte                                             pdm1;
  /* QCT-6x00/7x00 Bell modem feature enable/disable */
  boolean                                          bell_modem;
  /* PDM1 vs. Temperature table - 8 int1s in a a file */
  int1                                             pdm1_vs_temp[NV_TEMP_TABLE_SIZ];
  /* PDM2 vs. Temperature table - 8 int1s in a a file */
  int1                                             pdm2_vs_temp[NV_TEMP_TABLE_SIZ];
  /* CDMA SID/NID pair to lockout for the given NAM and given index(0-9) */
  nv_sid_nid_lock_type                             sid_nid_lock;
  /* Roaming list enabled/disabled */
  nv_enabled_type                                  prl_enabled;
  /* IS-683-A format roaming list */
  nv_roaming_list_union_type                       roaming_list_683;
  /* System preference (A only, B only, Home only, Standard) */
  nv_sys_pref_type                                 system_pref;
  /* Home SID+NID pair item */
  nv_home_sid_nid_type                             home_sid_nid;
  /* Over-The-Air Programming and Activation */
  nv_enabled_type                                  otapa_enabled;
  /* SPASM protection for active NAM */
  nv_enabled_type                                  nam_lock;
  /* True IMSI MIN1, in quotes, or encoded value, for given NAM */
  nv_min1_type                                     imsi_t_s1;
  /* True IMSI MIN2, in quotes, or encoded value, for given NAM */
  nv_min2_type                                     imsi_t_s2;
  /* True IMSI MCC, 3 digits in quotes, or encoded MCC, for given NAM */
  nv_imsi_mcc_type                                 imsi_t_mcc;
  /* True IMSI Mobile Network Code for given NAM */
  nv_imsi_11_12_type                               imsi_t_11_12;
  /* True IMSI Int'l Mobile Station ID length for given NAM */
  nv_imsi_addr_num_type                            imsi_t_addr_num;
  /* Unwired Planet alerts */
  nv_up_alert_record_type                          up_alert_record;
  /* Unwired Planet idle timer */
  word                                             up_idle_timer;
  /* Assumes SMS time stamps are sent as UTC instead of local time */
  boolean                                          sms_utc;
  /* Distinctive ringer sound for incoming roaming calls */
  byte                                             roam_ringer;
  /* Rental timer */
  nv_rental_timer_type                             rental_timer;
  /* Tick size of rental call timer */
  byte                                             rental_timer_inc;
  /* rental timer counter */
  dword                                            rental_cnt;
  /* Use rental call timer */
  boolean                                          rental_timer_enabled;
  /* Enable full system preference display operation */
  boolean                                          full_system_pref;
  /* Ringer frequency on BORSCHT-equipped mobiles (QCT-7x00 & similar) */
  byte                                             borscht_ringer_freq;
  /* Enable pay (coin/card-operated) phone support */
  boolean                                          payphone_enable;
  /* DSP answer detection */
  boolean                                          dsp_answer_det_enable;
  /* EVRC/13K priority: EVRC first, 13K first */
  nv_evrc_pri_enum_type                            evrc_pri;
  /* Class 2.0 analog fax (Obsolete) */
  boolean                                          afax_class_20;
  /* V5.2 control */
  nv_v52_control_enum_type                         v52_control;
  /* Bitmap and ASCII name info for carrier */
  nv_carrier_info_type                             carrier_info;
  /* Analog fax mode */
  nv_afax_type                                     afax;
  /* Serial I/O Powerdown (Distinguish between old & new UARTS */
  boolean                                          sio_pwrdwn;
  /* EVRC voice service options - NAM, EVRC enable, three service options */
  nv_pref_voice_so_type                            pref_voice_so;
  /* Voice Recoginition Hands Free Kit enabled/disabled */
  boolean                                          vrhfk_enabled;
  /* Voice Recoginition Hands Free Kit Voice Answer enabled/disabled */
  boolean                                          vrhfk_voice_answer;
  /* PDM1 vs frequency - 16 int1s in a file */
  int1                                             pdm1_vs_freq[NV_FREQ_TABLE_SIZ];
  /* PDM2 vs frequency - 16 int1s in a file */
  int1                                             pdm2_vs_freq[NV_FREQ_TABLE_SIZ];
  /* SMS auto-deletion enabled status */
  boolean                                          sms_auto_delete;
  /* Enable or disable silent redial */
  boolean                                          srda_enabled;
  /* Indicate keypresses via debug messages */
  boolean                                          output_ui_keys;
  /* Polarity reversal timeout */
  byte                                             pol_rev_timeout;
  /* System Integration test data. filename contains 100 bytes of data */
  byte                                             si_test_data_1[NV_SI_TEST_DATA_SIZE];
  /* System Integration test data. filename contains 100 bytes of data */
  byte                                             si_test_data_2[NV_SI_TEST_DATA_SIZE];
  /* Enable or disable service programming code change via OTASP */
  boolean                                          spc_change_enabled;
  /* Medium Data Rate mode */
  byte                                             data_mdr_mode;
  /* Packet data call origination string. Maximum 16 digits. */
  nv_data_pkt_orig_str_type                        data_pkt_orig_str;
  /* Unwired Planet encryption key */
  nv_up_key_type                                   up_key;
  /* Packet data configuration item */
  byte                                             data_auto_packet_detection;
  /* Automatic volume control */
  boolean                                          auto_volume_enabled;
  /* Enable use of wildcard System ID */
  boolean                                          wildcard_sid;
  /* Roaming notification messages */
  nv_roam_msg_type                                 roam_msg;
  /* One-time keypad subsidy lock flags */
  byte                                             otksl_flag;
  /* Browser Identifier */
  byte                                             browser_type;
  /* Tone for sms reminder */
  byte                                             sms_reminder_tone;
  /* Micro browser data */
  nv_ubrowser_type                                 ubrowser;
  /* BTF Adjustment value */
  int2                                             btf_adjust;
  /* Controls pref display options */
  boolean                                          full_pref_mode;
  /* Browser confirmation screen display option */
  byte                                             up_browser_warn;
  /* FM HDET ADC range */
  nv_fm_hdet_adc_range_type                        fm_hdet_adc_range;
  /* CDMA HDET ADC range */
  byte                                             cdma_hdet_adc_range;
  /* PN code selection */
  nv_pn_id_union_type                              pn_id;
  /* Enable/Disable User Zone table */
  boolean                                          user_zone_enabled;
  /* User Zone Table */
  nv_user_zone_type                                user_zone;
  
  byte                                             pap_data_obsolete;
  /* Default user AT command profile */
  byte                                             data_default_profile;
  /* User ID for Password Authentication Protocol */
  nv_pap_user_id_type                              pap_user_id;
  /* Actual Password for Password Authentication Protocol */
  nv_pap_password_type                             pap_password;
  /* Number of wakeup samples below threshold */
  nv_sta_values_type                               sta_tbye;
  /* Threshold for Rx+Ec/Io (RSSI) trigger */
  nv_sta_values_type                               sta_min_thr;
  /* Threshold for Rx trigger */
  nv_sta_values_type                               sta_min_rx;
  /* Threshold for Rx-Only idle trigger */
  nv_sta_values_type                               sta_min_ecio;
  /* Switch to AMPS priority setting */
  byte                                             sta_pri;
  /* PCS Rx linearizer offset */
  byte                                             pcs_rx_lin_off_0;
  /* PCS Rx linearizer slop */
  byte                                             pcs_rx_lin_slp[NV_PCS_RX_LIN_SIZ];
  /* PCS Rx gain comp vs frequency */
  int1                                             pcs_rx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
  /* PCS Tx gain comp vs frequency */
  int1                                             pcs_tx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
  /* PCS Tx linearizer master offset */
  word                                             pcs_tx_lin_master_off_0;
  /* PCS Tx linearizer master slope */
  byte                                             pcs_tx_lin_master_slp[NV_PCS_TX_LIN_MASTER_SIZ];
  /* PCS Tx power limit vs temperature */
  byte                                             pcs_tx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
  /* PCS Tx power limit vs temperature */
  byte                                             pcs_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
  /* PCS Tx power limit vs frequency */
  int1                                             pcs_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
  /* PCS expected HDET reaing vs AGC PDM */
  byte                                             pcs_exp_hdet_vs_agc[NV_PCS_EXP_HDET_VS_AGC_SIZ];
  /* ADC HDET reading offset */
  byte                                             pcs_hdet_off;
  /* ADC HDET reading span */
  byte                                             pcs_hdet_spn;
  /* TX output power level at which PA is stepped up */
  byte                                             pcs_r1_rise;
  /* TX output power level at which PA is stepped down */
  byte                                             pcs_r1_fall;
  /* TX output power level at which PA is stepped up */
  byte                                             pcs_r2_rise;
  /* TX output power level at which PA is stepped down */
  byte                                             pcs_r2_fall;
  /* TX output power level at which PA is stepped up */
  byte                                             pcs_r3_rise;
  /* TX output power level at which PA is stepped down */
  byte                                             pcs_r3_fall;
  /* Calibrate PA range gain step */
  byte                                             pcs_pa_range_step_cal;
  /* PDM1 vs frequency compensation table */
  int1                                             pcs_pdm1_vs_freq[NV_FREQ_TABLE_SIZ];
  /* PDM2 vs frequency compensation table */
  int1                                             pcs_pdm2_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Polarity of LNA range control signal */
  byte                                             pcs_lna_range_pol;
  /* Receive power level at which LNA should be bypassed */
  int1                                             pcs_lna_range_rise;
  /* Receive power level at which LNA should be turned on */
  int1                                             pcs_lna_range_fall;
  /* Value that is added to receive power reading when LNA is bypassed */
  word                                             pcs_lna_range_offset;
  /* PCS Rx linearizer vs temperature */
  int1                                             pcs_rx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
  /* PCS adjustment factor */
  byte                                             pcs_adj_factor;
  /* Changes in PA_RANGE_STEP over temp */
  int1                                             pcs_pa_range_vs_temp[NV_TEMP_TABLE_SIZ];
  /* TX temperature compensation using PDM1 */
  int1                                             pcs_pdm1_vs_temp[NV_TEMP_TABLE_SIZ];
  /* TX temperature compensation using PDM2 */
  int1                                             pcs_pdm2_vs_temp[NV_TEMP_TABLE_SIZ];
  /* Slope variations of Master RX linearizer curve over temperature */
  int1                                             pcs_rx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
  /* Slope variations of Master TX linearizer curve over temperature */
  int1                                             pcs_tx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
  /* Receiver AGC min-max */
  nv_minmax_type                                   pcs_rx_agc_minmax;
  /* PA offsets */
  nv_pa_offset_type                                pa_offsets[NV_NUM_PA_RANGES];
  /* CAGC forward mode CDMA TX linearizer master table 0. */
  nv_tx_linearizer_type                            cdma_tx_lin_master0;
  /* CAGC forward mode CDMA TX linearizer master table 1. */
  nv_tx_linearizer_type                            cdma_tx_lin_master1;
  /* CAGC forward mode CDMA TX linearizer master table 2. */
  nv_tx_linearizer_type                            cdma_tx_lin_master2;
  /* CAGC forward mode CDMA TX linearizer master table 3. */
  nv_tx_linearizer_type                            cdma_tx_lin_master3;
  /* Specifies date/time display format. */
  nv_time_fmt_enum_type                            time_fmt_selection;
  /* Broadcast SMS service table siz */
  word                                             sms_bc_service_table_size;
  /* Broadcast SMS service table to contain service/language details */
  nv_sms_bc_service_table_type                     sms_bc_service_table;
  /* Broadcast SMS config identifies services, carrier disabled or enabled */
  byte                                             sms_bc_config;
  /* Broadcast SMS user preferences, deactivated or activated */
  byte                                             sms_bc_user_pref;
  /* Receive power level to bypass the second LNA */
  int1                                             lna_range_2_rise;
  /* Receive power level to turn ON the second LNA */
  int1                                             lna_range_2_fall;
  /* Offset added to receive power when the 1st and 2nd LNAs are bypassed */
  int2                                             lna_range_12_offset;
  /* Duration of non-bypass state multiples of 52us (3-bits) */
  byte                                             nonbypass_timer;
  /* Duration of bypass state multiples of 6.6ms (5-bits) */
  byte                                             bypass_timer;
  /* LNA1 InterMod anti-jamming threshold power level */
  byte                                             im_level1;
  /* LNA2 InterMod anti-jamming threshold power level */
  byte                                             im_level2;
  /* NV_LNA_RANGE_OFFSET frequency compensation table, units of AGC value */
  int1                                             cdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* NV_LNA_12_RANGE_OFFSET freq compensation table, units of AGC value */
  int1                                             cdma_lna_12_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Phase rotation setting for LNA_DECISION 01 and 11 */
  byte                                             agc_phase_offset;
  /* RX_AGC_MIN_11 is used to limit Rx AGC value when 2nd LNA is bypassed */
  nv_minmax_type                                   rx_agc_min_11;
  /* Receive power level to bypass the second LNA */
  int1                                             pcs_lna_range_2_rise;
  /* Receive power level to turn ON the second LNA */
  int1                                             pcs_lna_range_2_fall;
  /* Offset added to Receive power when the 1st and 2nd LNAs are bypassed */
  int2                                             pcs_lna_range_12_offset;
  /* Duration of non-bypass state multiples of 52us (3-bits) */
  byte                                             pcs_nonbypass_timer;
  /* Duration of bypass state multiples of 6.6ms (5-bits) */
  byte                                             pcs_bypass_timer;
  /* LNA1 InterMod anti-jamming threshold power level */
  byte                                             pcs_im_level1;
  /* LNA2 InterMod anti-jamming threshold power level */
  byte                                             pcs_im_level2;
  /* NV_LNA_RANGE_OFFSET frequency compensation table, units of AGC value */
  int1                                             pcs_cdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* NV_LNA_12_RANGE_OFFSET freq compensation table, units of AGC value */
  int1                                             pcs_cdma_lna_12_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Phase rotation setting for LNA_DECISION 01 and 11 */
  byte                                             pcs_agc_phase_offset;
  /* RX_AGC_MIN_11 is used to limit Rx AGC value when 2nd LNA is bypassed */
  nv_minmax_type                                   pcs_rx_agc_min_11;
  /* Card Holder Verification 1 for R-UIM */
  nv_ruim_chv_type                                 ruim_chv_1;
  /* Card Holder Verification 2 for R-UIM */
  nv_ruim_chv_type                                 ruim_chv_2;
  /* gpsOne Capabilities */
  byte                                             gps1_capabilities;
  /* PDE TCP Address */
  dword                                            gps1_pde_address;
  /* Position Determination Services Lock-out */
  boolean                                          gps1_allowed;
  /* Perferred transport mechanism */
  nv_gps1_transport_type                           gps1_pde_transport;
  /* Mobile vs PDE based Position Calculations */
  nv_gps1_position_calc_type                       gps1_mobile_calc;
  /* IS2000 CAI radio configuration RC preference */
  nv_rc_pref_type                                  pref_for_rc;
  /* DATA SERVICES default SIO baud rate */
  nv_sio_baud_type                                 ds_default_baud;
  /* DIAG default SIO baud rate */
  nv_sio_baud_type                                 diag_default_baud;
  /* Serial Device Mapper configuration menu item information */
  int1                                             sio_dev_map_menu_item;
  /* Specifies whether TTY is enabled or disabled */
  byte                                             tty;
  /* Digitally compensate for PA gain steps in each of the 4 PA states */
  int2                                             pa_range_offsets[NV_NUM_PA_RANGES];
  /* For temp. and freq. compensation of the Tx linearizer */
  nv_tx_comp_type                                  tx_comp0;
  /* Stereo DAC Multimedia volume level */
  byte                                             mm_sdac_lvl;
  /* Stereo DAC key beep volume level */
  byte                                             beep_sdac_lvl;
  /* Stereo DAC volume level */
  byte                                             sdac_lvl;
  /* Handset Multimedia volume level */
  byte                                             mm_lvl;
  /* Headset Multimedia volume level */
  byte                                             mm_lvl_shadow;
  /* HFK Multimedia volume level */
  byte                                             mm_speaker_lvl;
  /* Multimedia play mode */
  byte                                             mm_play_mode;
  /* Multimedia play mode */
  byte                                             mm_repeat_mode;
  /* For temp. and freq. compensation of the Tx linearizer */
  nv_tx_comp_type                                  tx_comp1;
  /* For temp. and freq. compensation of the Tx linearizer */
  nv_tx_comp_type                                  tx_comp2;
  /* For temp. and freq. compensation of the Tx linearizer */
  nv_tx_comp_type                                  tx_comp3;
  /* The Primary IP Address of the DNS Server */
  dword                                            primary_dns;
  /* The Secondary IP Address of the DNS Server */
  dword                                            secondary_dns;
  /* Info for DIAG boot port selection */
  byte                                             diag_port_select;
  /* Listening port associated with PDE address */
  dword                                            gps1_pde_port;
  /* Multimedia ringer filename */
  byte                                             mm_ringer_file[40];
  /* Multimedia file location */
  byte                                             mm_storage_device;
  /* Enables/disables the mobile's ability to SCRM. */
  boolean                                          data_scrm_enabled;
  
  nv_ruim_sms_status_type                          ruim_sms_status;
  /* PCS Tx linearizer Table for internal PA=00 */
  nv_tx_linearizer_type                            pcs_tx_lin_master0;
  /* PCS Tx linearizer Table for internal PA=01 */
  nv_tx_linearizer_type                            pcs_tx_lin_master1;
  /* PCS Tx linearizer Table for internal PA=10 */
  nv_tx_linearizer_type                            pcs_tx_lin_master2;
  /* PCS Tx linearizer Table for internal PA=11 */
  nv_tx_linearizer_type                            pcs_tx_lin_master3;
  /* PCS PA range offsets */
  int2                                             pcs_pa_range_offsets[NV_NUM_PA_RANGES];
  /* pcs transmit frequency compensation table 0 */
  nv_tx_comp_type                                  pcs_tx_comp0;
  /* pcs transmit frequency compensation table 1 */
  nv_tx_comp_type                                  pcs_tx_comp1;
  /* pcs transmit frequency compensation table 2 */
  nv_tx_comp_type                                  pcs_tx_comp2;
  /* pcs transmit frequency compensation table 3 */
  nv_tx_comp_type                                  pcs_tx_comp3;
  /* One-time startup configuration for DIAG services. */
  nv_diag_restart_config_type                      diag_restart_config;
  /* Stores the band-class preference on a per NAM basis */
  nv_band_pref_type                                band_pref;
  /* Stores the roaming preference on a per NAM basis */
  nv_roam_pref_type                                roam_pref;
  /* GPS RF Signal Delay */
  int16                                            gps1_gps_rf_delay;
  /* CDMA RF Signal Delay */
  int16                                            gps1_cdma_rf_delay;
  /* CHIPX8 delay for SYNC80M via 1900mhz PCS path in RF card, biased +25. */
  dword                                            pcs_enc_btf;
  /* CHIPX8 delay for SYNC80M via 800mhz CDMA path in RF card, biased +25. */
  dword                                            cdma_enc_btf;
  /* Bluetooth device address of the mobile */
  nv_bd_addr_type                                  bd_addr;
  /* Provides the less-than-one-PCG warm-up for the PA. */
  word                                             subpcg_pa_warmup_delay;
  /* RF Loss in GPS RF Chain */
  byte                                             gps1_gps_rf_loss;
  /* In IS2000, if mobile should self-throttle R-SCH. */
  boolean                                          data_trtl_enabled;
  /* AMPS backstop system enabled status */
  nv_enabled_type                                  amps_backstop_enabled;
  /* GPS One lock status */
  dword                                            gps1_lock;
  /* Determines boot up mode of a factory testmode phone */
  byte                                             ftm_mode;
  /* Default Data Services port baud rate */
  nv_sio_baudrate_type                             ds_default_baudrate;
  /* Default diag port baud rate */
  nv_sio_baudrate_type                             diag_default_baudrate;
  /* Stores JCDMA F92 option selected. */
  word                                             jcdma_ds_f92;
  /* The mode for Mobile IP behavior */
  byte                                             ds_qcmip;
  /* The number of Mobile IP Registration Retries attempted */
  byte                                             ds_mip_retries;
  /* The initial interval between mobile IP registration attempts */
  byte                                             ds_mip_retry_int;
  /* The time before Mobile IP reg. expiration to attempt re-registration. */
  byte                                             ds_mip_pre_re_rrq_time;
  /* Number of populated MIP profiles */
  byte                                             ds_mip_num_prof;
  /* The currently active Mobile IP user profile */
  byte                                             ds_mip_active_prof;
  /* Active Mobile IP profile settings */
  nv_ds_mip_gen_user_prof_type                     ds_mip_gen_user_prof;
  /* Active Mobile IP profile settings */
  nv_ds_mip_ss_user_prof_type                      ds_mip_ss_user_prof;
  /* CON - advertised suspend time before sleep upon connection close */
  uint32                                           hdr_con_suspend;
  /* Preferred Control Channel Cycle Enabled */
  uint8                                            hdr_pre_cc_cyc_enabled;
  /* Preferred Control Channel Cycle */
  uint16                                           hdr_pre_cc_cyc;
  /* HDR Search Parameters */
  nv_hdr_srch_params_type                          hdr_srch_params;
  /* SMP - Time at which keep alive timer was started */
  uint32                                           hdrsmp_keep_alive_start;
  /* SMP - Time at which keep alive message was last sent */
  uint32                                           hdrsmp_keep_alive_sent;
  /* keep alive interval */
  uint16                                           hdrsmp_keep_alive_req_int;
  /* AMP - all data related to addresses */
  nv_hdramp_address_data_type                      hdramp_address_data;
  /* SCP - status of the session */
  nv_hdrscp_session_status_enum_type               hdrscp_session_status;
  /* SCP - session token (generated by AN) */
  uint16                                           hdrscp_token;
  /* SCP - list of all protocol subtypes */
  uint16                                           hdrscp_protocol_subtype[NV_HDRSCP_PRTL_SUBTYPE_SIZ];
  /* AMP - time at which the dual addresses expire */
  uint32                                           hdramp_dual_expire_time;
  /* Configuration of current stream */
  uint16                                           hdrstream_curr_stream_cfg[NV_HDR_CURR_STREAM_CFG_SIZ];
  /* HDR Set Management Same Channel Parameters */
  nv_hdr_chan_mgmt_params_type                     hdr_set_mngmt_same_chan;
  /* HDR Set Management Different Channel Parameters */
  nv_hdr_chan_mgmt_params_type                     hdr_set_mngmt_diff_chan;
  /* If we are configured to send unsolicited location updates */
  boolean                                          hdrlup_unsolicited_enabled;
  /* HDR Access MAC InitialConfiguration Attribute */
  nv_hdramac_initial_config_type                   hdramac_initial_config;
  /* HDR Access MAC PowerParameters Attribute */
  nv_hdramac_power_params_type                     hdramac_power_params;
  /* Forward Traffic MAC DRC Gating Attribute */
  uint8                                            hdrfmac_drc_gating;
  /* Forward Traffic MAC HandoffDelays Attribute */
  nv_hdrfmac_handoff_delays_type                   hdrfmac_handoff_delays;
  /* Reverse Traffic MAC PowerParameters Attribute */
  nv_hdrrmac_power_params_type                     hdrrmac_power_params;
  /* Reverse Traffic MAC RateParameters Attribute */
  nv_hdrrmac_rate_params_type                      hdrrmac_rate_params;
  /* Next expected SLP ResetMsg Sequence Number (set to 0 at SessionBoot) */
  uint8                                            hdrslp_reset_seqno;
  /* The backoff values for the medium backoff calibration values */
  uint8                                            pwr_backoff_vs_volt_med[NV_TX_BACKOFF_TABLE_SIZE];
  /* The backoff values for the low backoff calibration values */
  uint8                                            pwr_backoff_vs_volt_low[NV_TX_BACKOFF_TABLE_SIZE];
  /* Three voltages where PA Backoff was characterized */
  uint8                                            pa_backoff_volts[NV_NUM_PA_BCKOFF_CAL_VOLT];
  /* High and low voltages for Vbatt ADC calib. counts */
  nv_minmax_type                                   vbatt_min_max;
  /* Timebase diff. between home agent and mobile for active MIP profile */
  nv_ds_mip_mn_ha_time_delta_type                  ds_mip_mn_ha_time_delta;
  /* Qualcomm PREV 6 MIP handoff optimization enable */
  boolean                                          ds_mip_qc_drs_opt;
  /* CDMA Rx linearizer offset for the second antenna */
  byte                                             ant2_cdma_rx_lin_off_0;
  /* CDMA Rx linearizer slope for the second antenna */
  byte                                             ant2_cdma_rx_lin_slp[NV_CDMA_RX_LIN_SIZ];
  /* CDMA Rx gain comp vs freq. for the second antenna */
  int1                                             ant2_cdma_rx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
  /* CDMA Rx linearizer vs temperature for the second antenna */
  int1                                             ant2_cdma_rx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
  /* PCS/CDMA RF Calibration items */
  int1                                             ant2_cdma_rx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
  /* Value that is added to rec. pwr. reading when LNA is bypassed */
  word                                             ant2_lna_range_offset;
  /* Offset added to Rec. pwr when the 1st and 2nd LNAs are bypassed */
  int2                                             ant2_lna_range_12_offset;
  /* NV_LNA_RANGE_OFFSET freq. compensation table, units of AGC value */
  int1                                             ant2_cdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* NV_LNA_12_RANGE_OFFSET freq. compensation table, units of AGC value */
  int1                                             ant2_cdma_lna_12_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* PCS/CDMA mode Rx AGC linearization table */
  byte                                             ant2_pcs_rx_lin_off_0;
  /* PCS Rx linearizer slope for the second antenna */
  byte                                             ant2_pcs_rx_lin_slp[NV_PCS_RX_LIN_SIZ];
  /* PCS Rx gain comp vs frequency for the second antenna */
  int1                                             ant2_pcs_rx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
  /* PCS Rx linearizer vs temperature for the second antenna */
  int1                                             ant2_pcs_rx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
  /* Slope variations of Master RX lin. curve for the 2nd antenna */
  int1                                             ant2_pcs_rx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
  /* Value that is added to rec. pwr reading when LNA is bypassed */
  word                                             ant2_pcs_lna_range_offset;
  /* Offset added to Rec. pwr when the 1st and 2nd LNAs are bypassed */
  int2                                             ant2_pcs_lna_range_12_offset;
  /* NV_LNA_RANGE_OFFSET freq. compensation table, units of AGC value */
  int1                                             ant2_pcs_cdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* NV_LNA_12_RANGE_OFFSET freq. compensation table, units of AGC value */
  int1                                             ant2_pcs_cdma_lna_12_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* WCDMA Rx AGC linearizer offset value */
  uint16                                           wcdma_rx_lin[NV_WCDMA_RX_LIN_SIZ];
  /* WCDMA RX AGC PDM delta vs. Frequency */
  int8                                             wcdma_rx_comp_vs_freq[NV_FREQ_TABLE_SIZ];
  /* WCDMA Rx AGC PDM delta vs. Temperature */
  int8                                             wcdma_rx_lin_vs_temp[NV_TEMP_TABLE_SIZ];
  /* WCDMA Rx AGC PDM delta vs. Temperature */
  int8                                             wcdma_rx_slp_vs_temp[NV_TEMP_TABLE_SIZ];
  /* WCDMA LNA range polarity */
  uint8                                            wcdma_lna_range_pol;
  /* WCDMA Rx power level at which LNA should be bypassed */
  int16                                            wcdma_lna_range_rise;
  /* WCDMA Rx power level at which LNA should be turned on */
  int16                                            wcdma_lna_range_fall;
  /* LNA InterMod (high to low gain ) anti-jamming threshold power level */
  int16                                            wcdma_im_level;
  /* Duration of non-bypass state in multiple of 66us (8-bits) */
  uint8                                            wcdma_nonbypass_timer;
  /* Duration of bypass state in multiple of 6.6ms (11-bits) */
  uint16                                           wcdma_bypass_timer;
  /* Value that is added to Rx power reading when LNA is bypassed */
  int16                                            wcdma_lna_range_offset;
  /* WCDMA LNA range offset delta vs. frequency in unit of AGC value */
  int8                                             wcdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* WCDMA Receiver AGC min */
  int16                                            wcdma_rx_agc_min;
  /* WCDMA Receiver AGC max */
  int16                                            wcdma_rx_agc_max;
  /* WCDMA LNA Phase adjustment when LNA is bypassed */
  uint8                                            wcdma_agc_phase_offset;
  /* WCDMA Tx AGC linearizer master offset value for lowest PA gain state */
  uint16                                           wcdma_tx_lin_master_0[NV_WCDMA_TX_LIN_MASTER_SIZ];
  /* WCDMA Tx AGC linearizer master offset value for highest PA gain state */
  uint16                                           wcdma_tx_lin_master_1[NV_WCDMA_TX_LIN_MASTER_SIZ];
  /* WCDMA Tx AGC delta vs. frequency for lowest PA gain state */
  int8                                             wcdma_tx_comp_vs_freq_0[NV_FREQ_TABLE_SIZ];
  /* WCDMA Tx AGC delta vs. frequency for highest PA gain state */
  int8                                             wcdma_tx_comp_vs_freq_1[NV_FREQ_TABLE_SIZ];
  /* WCDMA Tx AGC PDM delta vs. temp for lowest PA gain state */
  int8                                             wcdma_tx_lin_vs_temp_0[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx AGC PDM delta vs. temp for highest PA gain state */
  int8                                             wcdma_tx_lin_vs_temp_1[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx AGC PDM slope delta vs. temp for lowest PA gain state */
  int8                                             wcdma_tx_slp_vs_temp_0[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx AGC PDM slope delta vs. temp for highest PA gain state */
  int8                                             wcdma_tx_slp_vs_temp_1[NV_TEMP_TABLE_SIZ];
  /* TX power level to switch PA from lowest to highest gain state */
  uint16                                           wcdma_r1_rise;
  /* TX power level to switch PA from highest to lowest gain state */
  uint16                                           wcdma_r1_fall;
  /* WCDMA Tx power limit vs. temperature (absolute not delta) */
  uint8                                            wcdma_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx power limit vs. frequency (absolute not delta) */
  int16                                            wcdma_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
  /* WCDMA TX power limit gain step adjustment factor */
  uint8                                            wcdma_adj_factor;
  /* WCDMA expected HDET reading vs Tx AGC */
  uint8                                            wcdma_exp_hdet_vs_agc[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
  /* WCDMA ADC HDET reading offset */
  uint8                                            wcdma_hdet_off;
  /* WCDMA ADC HDET reading span */
  uint8                                            wcdma_hdet_spn;
  /* CHIPX8 delay for SYNC80M via 800mhz CDMA path in RF card, biased +25. */
  uint32                                           wcdma_enc_btf;
  /* RFC2002bis MN-HA authenticator calculation */
  boolean                                          ds_mip_2002bis_mn_ha_auth;
  /* UE rat capability */
  byte                                             ue_rat_capability;
  /* GSM UE operating class */
  byte                                             gsm_ue_op_class;
  /* UMTS UE operating class */
  byte                                             umts_ue_op_class;
  /* International Mobile Equipment Identity */
  nv_ue_imei_type                                  ue_imei;
  /* MSRAC-SMS value */
  byte                                             msrac_sms_value;
  /* MSRAC-SM value */
  byte                                             msrac_sm_value;
  /* GSM A5 Algorithm Support Bitmap */
  byte                                             gsm_a5_algorithms_supported;
  /* Configurable parameters for DRC Lock in HDR */
  nv_hdrfmac_drc_lock_type                         hdrfmac_drc_lock;
  /* LO Calibration offset */
  int16                                            gps1_lo_cal;
  /* GPS Antenna offset in DB */
  int16                                            gps1_ant_off_db;
  /* The len. of time taken for a PCS signal to pass through the RF chain */
  int16                                            gps1_pcs_rf_delay;
  /* Phone number of voice mail center */
  nv_sms_vm_number_type                            sms_vm_number;
  /* Storage for GSM/WCDMA template */
  nv_sms_gw_parms_type                             sms_gw_parms;
  /* Storage for GSM/WCDMA SMS messagesj */
  nv_sms_gw_type                                   sms_gw;
  /* Preferred mode in hybrid operation */
  byte                                             hybrid_pref;
  /* Service Provider ECC is enabled */
  boolean                                          sp_ecc_enabled;
  /* ECC phone numbers */
  byte                                             ecc_list[NV_MAX_NUM_OF_ECC_NUMBER][NV_ECC_NUMBER_SIZE];
  /* Latitude value for the Bluetooth LPOS application */
  uint32                                           bt_lpos_lat;
  /* Longtitude value for the Bluetooth LPOS application */
  uint32                                           bt_lpos_long;
  /* Embedded Phone-t Version */
  byte                                             test_code_ver[NV_SIZE_OF_VERSION];
  /* DMSS S/W Version */
  byte                                             sys_sw_ver[NV_SIZE_OF_VERSION];
  /* RF CAL Program Version */
  byte                                             rf_cal_ver[NV_SIZE_OF_VERSION];
  /* RFCAL configuration file version */
  byte                                             rf_config_ver[NV_SIZE_OF_VERSION];
  /* Date RF calibration was done */
  dword                                            rf_cal_date;
  /* Date RF calibration data loaded */
  dword                                            rf_nv_loaded_date;
  /* Name of RFCAL .dat */
  byte                                             rf_cal_dat_file[NV_QC_SERIAL_NUM_LEN];
  /* Data Services domain name */
  byte                                             domain_name[NV_DOMAIN_NAME_SIZE];
  /* The Public Land Mobile Network preferred by the user */
  nv_plmn_id_info_type                             pref_plmn;
  /* Stores the NAI for 1xEV(HDR) Access Network CHAP Authentication */
  nv_hdr_an_auth_nai_type                          hdr_an_auth_nai;
  /* Stores the password for 1xEV(HDR) Access Network CHAP Authentication */
  nv_hdr_an_auth_password_type                     hdr_an_auth_password;
  /* If the PUZL is enabled or not */
  nv_enabled_type                                  puzl_enabled;
  /* Session configuration for HDR KEP */
  nv_hdrkep_config_type                            hdrkep_config;
  /* Session configuration for HDR AUTH */
  nv_hdrauth_config_type                           hdrauth_config;
  /* 8-bit IM anti-jamming threshold data for the 4th stage */
  int1                                             im_level3;
  /* 8-bit IM anti-jamming threshold data for the 5th stage */
  int1                                             im_level4;
  /* Minimum power output from the AGC accumulator */
  int1                                             agc_value_3_min;
  /* Minimum power output from the AGC accumulator */
  int1                                             agc_value_4_min;
  /* Gain attenuation limit */
  int2                                             tx_gain_atten_limit;
  /* Falling threshold data for the 3rd stage */
  int1                                             cdma_lna_3_fall;
  /* Offset Value subtr from IF VGA linearizer table */
  int2                                             cdma_lna_3_offset;
  /* 8-bit rising threshold data */
  int1                                             cdma_lna_3_rise;
  /* Gain variations of the LNA */
  int1                                             cdma_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* 8-bit falling threshold data */
  int1                                             pcs_lna_3_fall;
  /* Offset to be subtr from IF VGA linearizer table */
  int2                                             pcs_lna_3_offset;
  /* 8-bit rising threshold data */
  int1                                             pcs_lna_3_rise;
  /* Gain variations of the LNA */
  int1                                             pcs_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* 8-bit falling threshold data */
  int1                                             cdma_lna_4_fall;
  /* Offset to be subtr from IF VGA linearizer table */
  int2                                             cdma_lna_4_offset;
  /* 8-bit falling threshold data */
  int1                                             cdma_lna_4_rise;
  /* Gain variations of the LNA */
  int1                                             cdma_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* 8-bit falling threshold data */
  int1                                             pcs_lna_4_fall;
  /* Offset to be subtr from IF VGA linearizer table */
  int2                                             pcs_lna_4_offset;
  /* 8-bit falling threshold data */
  int1                                             pcs_lna_4_rise;
  /* Gain variations of the LNA */
  int1                                             pcs_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* 2nd stage LNA falling threshold */
  int1                                             dfm_lna_fall;
  /* 2nd stage LNA rising threshold offset */
  int2                                             dfm_lna_offset;
  /* 2nd stage LNA rising threshold */
  int1                                             dfm_lna_rise;
  /* offset value when the two-stage LNA is in its 2nd stage */
  int1                                             dfm_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* 2nd stage LNA minimum AGC accumulator output */
  byte                                             dfm_agc_acc_min_1;
  /* AGC filter gain */
  byte                                             dfm_agc_im_gain;
  /* AGC filter gain */
  byte                                             dfm_agc_dc_gain;
  /* 2 stage threshold data */
  int1                                             dfm_im_level1;
  /* No of shifts to the input value of the fine-grained loop */
  byte                                             gps_fg_trk_offset_scaler;
  /* No of shifts to the input value of the fine-grained loop */
  byte                                             digital_fg_trk_offset_scaler;
  /* No of shifts to the input value of the fine-grained loop */
  byte                                             fm_fg_trk_offset_scaler;
  /* Static phase offset for LNA gain step 0 */
  word                                             dfm_lna_s0_phase_offset;
  /* Static phase offset for LNA gain step 1 */
  word                                             dfm_lna_s1_phase_offset;
  /* I accumulator in the coarse-grain DC offset cancellation loop */
  dword                                            cdma_rxf_cg_ioffset;
  /* I accumulator in the coarse-grain DC offset cancellation loop */
  dword                                            pcs_rxf_cg_ioffset;
  /* I accumulator in the coarse-grain DC offset cancellation loop */
  dword                                            fm_rxf_cg_ioffset;
  /* I accumulator in the coarse-grain DC offset cancellation loop */
  dword                                            gps_rxf_cg_ioffset;
  /* Q accumulator in the coarse-grain DC offset cancellation loop */
  dword                                            cdma_rxf_cg_qoffset;
  /* Q accumulator in the coarse-grain DC offset cancellation loop */
  dword                                            pcs_rxf_cg_qoffset;
  /* Q accumulator in the coarse-grain DC offset cancellation loop */
  dword                                            fm_rxf_cg_qoffset;
  /* Q accumulator in the coarse-grain DC offset cancellation loop */
  dword                                            gps_rxf_cg_qoffset;
  /* I accumulator in the fine-grain DC offset cancellation loop */
  dword                                            cdma_rxf_fg_ioffset;
  /* I accumulator in the fine-grain DC offset cancellation loop */
  dword                                            pcs_rxf_fg_ioffset;
  /* I accumulator in the fine-grain DC offset cancellation loop */
  dword                                            fm_rxf_fg_ioffset;
  /* I accumulator in the fine-grain DC offset cancellation loop */
  dword                                            gps_rxf_fg_ioffset;
  /* Q accumulator in the fine-grain DC offset cancellation loop */
  dword                                            cdma_rxf_fg_qoffset;
  /* Q accumulator in the fine-grain DC offset cancellation loop */
  dword                                            pcs_rxf_fg_qoffset;
  /* Q accumulator in the fine-grain DC offset cancellation loop */
  dword                                            fm_rxf_fg_qoffset;
  /* Q accumulator in the fine-grain DC offset cancellation loop */
  dword                                            gps_rxf_fg_qoffset;
  /* I accumulator in the estimator */
  dword                                            cdma_dacc_est_ioffset;
  /* I accumulator in the estimator */
  dword                                            pcs_dacc_est_ioffset;
  /* I accumulator in the estimator */
  dword                                            fm_dacc_est_ioffset;
  /* I accumulator in the estimator */
  dword                                            gps_dacc_est_ioffset;
  /* Q accumulator in the estimator */
  dword                                            cdma_dacc_est_qoffset;
  /* Q accumulator in the estimator */
  dword                                            pcs_dacc_est_qoffset;
  /* Q accumulator in the estimator */
  dword                                            fm_dacc_est_qoffset;
  /* Q accumulator in the estimator */
  dword                                            gps_dacc_est_qoffset;
  /* I accumulator associated with gain step 0 in the DAC controller */
  byte                                             cdma_dacc_iaccum0;
  /* I accumulator associated with gain step 0 in the DAC controller */
  byte                                             pcs_dacc_iaccum0;
  /* I accumulator associated with gain step 0 in the DAC controller */
  byte                                             fm_dacc_iaccum0;
  /* I accumulator associated with gain step 0 in the DAC controller */
  byte                                             gps_dacc_iaccum0;
  /* I accumulator associated with gain step 1 in the DAC controller */
  byte                                             cdma_dacc_iaccum1;
  /* I accumulator associated with gain step 1 in the DAC controller */
  byte                                             pcs_dacc_iaccum1;
  /* I accumulator associated with gain step 1 in the DAC controller */
  byte                                             fm_dacc_iaccum1;
  /* I accumulator associated with gain step 1 in the DAC controller */
  byte                                             gps_dacc_iaccum1;
  /* I accumulator associated with gain step 2 in the DAC controller */
  byte                                             cdma_dacc_iaccum2;
  /* I accumulator associated with gain step 2 in the DAC controller */
  byte                                             pcs_dacc_iaccum2;
  /* I accumulator associated with gain step 2 in the DAC controller */
  byte                                             fm_dacc_iaccum2;
  /* I accumulator associated with gain step 2 in the DAC controller */
  byte                                             gps_dacc_iaccum2;
  /* I accumulator associated with gain step 3 in the DAC controller */
  byte                                             cdma_dacc_iaccum3;
  /* I accumulator associated with gain step 3 in the DAC controller */
  byte                                             pcs_dacc_iaccum3;
  /* I accumulator associated with gain step 3 in the DAC controller */
  byte                                             fm_dacc_iaccum3;
  /* I accumulator associated with gain step 3 in the DAC controller */
  byte                                             gps_dacc_iaccum3;
  /* I accumulator associated with gain step 4 in the DAC controller */
  byte                                             cdma_dacc_iaccum4;
  /* I accumulator associated with gain step 4 in the DAC controller */
  byte                                             pcs_dacc_iaccum4;
  /* I accumulator associated with gain step 4 in the DAC controller */
  byte                                             fm_dacc_iaccum4;
  /* I accumulator associated with gain step 4 in the DAC controller */
  byte                                             gps_dacc_iaccum4;
  /* Q accumulator associated with gain step 0 in the DAC controller */
  byte                                             cdma_dacc_qaccum0;
  /* Q accumulator associated with gain step 0 in the DAC controller */
  byte                                             pcs_dacc_qaccum0;
  /* Q accumulator associated with gain step 0 in the DAC controller */
  byte                                             fm_dacc_qaccum0;
  /* Q accumulator associated with gain step 0 in the DAC controller */
  byte                                             gps_dacc_qaccum0;
  /* Q accumulator associated with gain step 1 in the DAC controller */
  byte                                             cdma_dacc_qaccum1;
  /* Q accumulator associated with gain step 1 in the DAC controller */
  byte                                             pcs_dacc_qaccum1;
  /* Q accumulator associated with gain step 1 in the DAC controller */
  byte                                             fm_dacc_qaccum1;
  /* Q accumulator associated with gain step 1 in the DAC controller */
  byte                                             gps_dacc_qaccum1;
  /* Q accumulator associated with gain step 2 in the DAC controller */
  byte                                             cdma_dacc_qaccum2;
  /* Q accumulator associated with gain step 2 in the DAC controller */
  byte                                             pcs_dacc_qaccum2;
  /* Q accumulator associated with gain step 2 in the DAC controller */
  byte                                             fm_dacc_qaccum2;
  /* Q accumulator associated with gain step 2 in the DAC controller */
  byte                                             gps_dacc_qaccum2;
  /* Q accumulator associated with gain step 3 in the DAC controller */
  byte                                             cdma_dacc_qaccum3;
  /* Q accumulator associated with gain step 3 in the DAC controller */
  byte                                             pcs_dacc_qaccum3;
  /* Q accumulator associated with gain step 3 in the DAC controller */
  byte                                             fm_dacc_qaccum3;
  /* Q accumulator associated with gain step 3 in the DAC controller */
  byte                                             gps_dacc_qaccum3;
  /* Q accumulator associated with gain step 4 in the DAC controller */
  byte                                             cdma_dacc_qaccum4;
  /* Q accumulator associated with gain step 4 in the DAC controller */
  byte                                             pcs_dacc_qaccum4;
  /* Q accumulator associated with gain step 4 in the DAC controller */
  byte                                             fm_dacc_qaccum4;
  /* Q accumulator associated with gain step 4 in the DAC controller */
  byte                                             gps_dacc_qaccum4;
  /* Gain value used to scale the estimator accumulator by before updating */
  byte                                             cdma_dacc_gain_mult;
  /* Gain value used to scale the estimator accumulator by before updating */
  byte                                             pcs_dacc_gain_mult;
  /* Gain value used to scale the estimator accumulator by before updating */
  byte                                             fm_dacc_gain_mult;
  /* Gain value used to scale the estimator accumulator by before updating */
  byte                                             gps_dacc_gain_mult;
  /* IM2 cal. items generated during RF Cal to be loaded into RFR6000 */
  byte                                             cdma_im2_i_value;
  /* IM2 cal. items generated during RF Cal to be loaded intoRFR6000 */
  byte                                             pcs_im2_i_value;
  /* IM2 cal. items generated during RF Cal to be loaded intoRFR6000 */
  byte                                             cdma_im2_q_value;
  /* IM2 cal. items generated during RF Cal to be loaded intoRFR6000 */
  byte                                             pcs_im2_q_value;
  /* Deviations adj. in the 32,768Hz crystal oscillator freq. */
  byte                                             rtc_time_adjust;
  /* 13-bit two's complement integer for FM VGA gain offset */
  int2                                             fm_vga_gain_offset;
  /* 13-bit two's complement integer for CDMA VGA gain offset */
  int2                                             cdma_vga_gain_offset;
  /* 13-bit two's complement integer for PCS VGA gain offset */
  int2                                             pcs_vga_gain_offset;
  /* FM VGA gain offset variations over the frequencies */
  int1                                             fm_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* CDMA VGA gain offset variations over the frequencies */
  int1                                             cdma_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* PCS VGA gain offset variations over the frequencies */
  int1                                             pcs_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* FM VGA gain offset variations over the temperatures */
  int2                                             fm_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
  /* CDMA VGA gain offset variations over the temperatures */
  int2                                             cdma_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
  /* PCS VGA gain offset variations over the temperatures */
  int2                                             pcs_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
  /* In-phase coefficient for mismatch compensation */
  int32                                            fm_mis_comp_a_offset;
  /* In-phase coefficient for mismatch compensation */
  int32                                            digital_mis_comp_a_offset;
  /* In-phase coefficient for mismatch compensation */
  int32                                            gps_mis_comp_a_offset;
  /* In-phase coefficient for mismatch compensation */
  int32                                            fm_mis_comp_b_offset;
  /* In-phase coefficient for mismatch compensation */
  int32                                            digital_mis_comp_b_offset;
  /* In-phase coefficient for mismatch compensation */
  int32                                            gps_mis_comp_b_offset;
  /* Send RRQ only if there was traffic since previous RRQ */
  boolean                                          ds_mip_rrq_if_tfrk;
  /* Collocated HDR disallowed time */
  uint16                                           colloc_disallowed_time;
  /* Hold HDR time */
  uint16                                           hold_hdr_time;
  /* Number of times NV value updated via IIR filter */
  byte                                             lo_bias_update_cnt;
  /* Stores HDR Access Network Authentication Status */
  boolean                                          hdrscp_an_auth_status;
  /* Used to allow a user to Save an IMSI as an Index in NV */
  byte                                             imsi_index;
  /* Enable or disable a user profile. */
  byte                                             ds_mip_enable_prof[NV_DS_MIP_MAX_NUM_PROF];
  /* Contains 8-bit IM anti-jamming threshold data */
  int1                                             pcs_im_level3;
  /* Contains 8-bit IM anti-jamming threshold data */
  int1                                             pcs_im_level4;
  /* provides the minimum power output from the AGC accumulator */
  int1                                             pcs_agc_value_3_min;
  /* provides the minimum power output from the AGC accumulator */
  int1                                             pcs_agc_value_4_min;
  /* SMP - Time at which keep alive timer was started */
  qword                                            hdrsmpka_start_time;
  /* SMP - Time at which keep alive message was last sent. */
  qword                                            hdrsmpka_sent_time;
  /* Supplement item to the item NV_SMS_BC_SERVICE_TABLE_I */
  nv_sms_bc_service_table_options_type             sms_bc_service_table_options;
  /* Acquisition database */
  nv_acq_db_type                                   acq_db;
  /* First Acquisition List */
  nv_acq_list1_type                                acq_list_1;
  /* E-GSM ARFCNs used for GSM radio Rx/Tx frequency compensation */
  uint16                                           gsm_cal_arfcn[NV_GSM_CAL_ARFCN_SIZ];
  /* E-GSM ARFCNs used for DCS radio Rx/Tx frequency compensation */
  uint16                                           dcs_cal_arfcn[NV_DCS_CAL_ARFCN_SIZ];
  /* E-GSM frequency compensated Rx gain values for gain range 1 */
  uint16                                           gsm_rx_gain_range_1_freq_comp[NV_GSM_CAL_ARFCN_SIZ];
  /* E-GSM frequency compensated Rx gain values for gain range 2 */
  uint16                                           gsm_rx_gain_range_2_freq_comp[NV_GSM_CAL_ARFCN_SIZ];
  /* E-GSM frequency compensated Rx gain values for gain range 3 */
  uint16                                           gsm_rx_gain_range_3_freq_comp[NV_GSM_CAL_ARFCN_SIZ];
  /* E-GSM frequency compensated Rx gain values for gain range 4 */
  uint16                                           gsm_rx_gain_range_4_freq_comp[NV_GSM_CAL_ARFCN_SIZ];
  /* DCS frequency compensated Rx gain values for gain range 1 */
  uint16                                           dcs_rx_gain_range_1_freq_comp[NV_DCS_CAL_ARFCN_SIZ];
  /* DCS frequency compensated Rx gain values for gain range 2 */
  uint16                                           dcs_rx_gain_range_2_freq_comp[NV_DCS_CAL_ARFCN_SIZ];
  /* DCS frequency compensated Rx gain values for gain range 3 */
  uint16                                           dcs_rx_gain_range_3_freq_comp[NV_DCS_CAL_ARFCN_SIZ];
  /* DCS frequency compensated Rx gain values for gain range 4 */
  uint16                                           dcs_rx_gain_range_4_freq_comp[NV_DCS_CAL_ARFCN_SIZ];
  /* Trial PDM value that results in 13MHz TCXO */
  uint16                                           gsm_trk_lo_adj_pdm_init_val;
  /* Gain Slope for TCXO device in ppm/pdm units */
  uint16                                           gsm_trk_lo_adj_pdm_gain_slope;
  /* Calibrated standard deviation of this phone's doppler estimator in Hz */
  byte                                             gps_dopp_sdev;
  /* Second Acquisition List */
  nv_acq_list1_type                                acq_list_2;
  /* Third Acquisition List */
  nv_acq_list2_type                                acq_list_3;
  /* Fourth Acquisition List */
  nv_acq_list2_type                                acq_list_4;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_00;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_01;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_02;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_03;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_04;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_05;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_06;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_07;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_08;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_09;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_10;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_11;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_12;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_13;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_up_index_14;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_00;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_01;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_02;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_03;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_04;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_05;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_06;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_07;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_08;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_09;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_10;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_11;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_12;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_13;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_tx_burst_ramp_down_index_14;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_00;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_01;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_02;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_03;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_04;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_05;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_06;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_07;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_08;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_09;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_10;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_11;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_12;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_13;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_14;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_up_index_15;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_00;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_01;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_02;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_03;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_04;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_05;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_06;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_07;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_08;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_09;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_10;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_11;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_12;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_13;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_14;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      dcs_tx_burst_ramp_down_index_15;
  /* PA DAC counts per dB */
  byte                                             gsm_pa_gain_slope[NV_NUM_GSM_PA_PROFILES];
  /* PA DAC counts per dB */
  byte                                             dcs_pa_gain_slope[NV_NUM_DCS_PA_PROFILES];
  /* 1/16 dB */
  int8                                             gsm_tx_freq_comp[8];
  /* 1/16 dB */
  int8                                             dcs_tx_freq_comp[16];
  /* 1/16 dB per volt */
  byte                                             gsm_vbatt_hi_pa_comp;
  /* 1/16 dB per volt */
  byte                                             gsm_vbatt_lo_pa_comp;
  /* 1/16 dB per volt */
  byte                                             dcs_vbatt_hi_pa_comp;
  /* 1/16 dB per volt */
  byte                                             dcs_vbatt_lo_pa_comp;
  /* PA DAC value */
  word                                             vbatt_3200_mv_adc;
  /* PA DAC value */
  word                                             vbatt_3700_mv_adc;
  /* PA DAC value */
  word                                             vbatt_4200_mv_adc;
  /* PA DAC value */
  word                                             gsm_precharge;
  /* PA DAC value */
  word                                             dcs_precharge;
  /* Quarter-symbol */
  word                                             gsm_precharge_dur;
  /* Quarter-symbol */
  word                                             dcs_precharge_dur;
  /* Timer value to wait until checking the state of LOCK_DET */
  byte                                             digital_pll_lock_timer;
  /* HDR rx diversity control parameter */
  uint8                                            hdr_rx_diversity_ctrl;
  /* Quarter-symbol */
  int8                                             gsm_pa_start_time_offset;
  /* Quarter-symbol */
  int8                                             gsm_pa_stop_time_offset;
  /* Quarter-symbol */
  int8                                             dcs_pa_start_time_offset;
  /* Quarter-symbol */
  int8                                             dcs_pa_stop_time_offset;
  /* Position Location Privacy */
  byte                                             gps1_privacy;
  /* Position Location Network Access Control */
  byte                                             gps1_net_access;
  /* Enables/Disables Cell Based Position Determination */
  boolean                                          gps1_cellbased_sms;
  /* Enables/Disables Cell Based Position Determination */
  word                                             gps1_teleservice_id;
  /* HDR Search Parameters */
  nv_hdrrup_srch_params_type                       hdrrup_srch_params;
  /* Bypass timer value when LNA is in BYPASS_HOLD_STATE */
  word                                             dfm_lna_bypass_timer;
  /* Bypass timer value when LNA is in NONBYPASS_HOLD_STATE */
  word                                             dfm_lna_nonbypass_timer;
  /* Storage for SMS routing configuration */
  nv_sms_routing_type                              sms_cfg_routing;
  /* Data Burst Packet Size supported by this netword */
  byte                                             gps1_net_dbm_size;
  /* Stop monitoring 1x page while in HDR data call */
  boolean                                          hdr_do_not_disturb;
  /* Transmitter Gain Attenuation Limit. */
  int2                                             cdma_tx_gain_atten_limit;
  /* Transmitter Gain Attenuation Limit. */
  int2                                             pcs_tx_gain_atten_limit;
  /* Transmitter Gain Attenuation Limit. */
  int2                                             amps_tx_gain_atten_limit;
  /* Transmitter Gain Attenuation Limit. */
  int2                                             gps_tx_gain_atten_limit;
  /* ZIFRIC register value that controls IM2 transconductance */
  byte                                             cdma_im2_transconductor_value;
  /* ZIFRIC register value that controls IM2 transconductance */
  byte                                             pcs_im2_transconductor_value;
  /* Bypass timer value */
  word                                             lna_non_bypass_timer_0;
  /* Bypass timer value */
  word                                             lna_non_bypass_timer_1;
  /* Bypass timer value */
  word                                             lna_non_bypass_timer_2;
  /* Bypass timer value */
  word                                             lna_non_bypass_timer_3;
  /* Bypass timer value */
  word                                             lna_bypass_timer_0;
  /* Bypass timer value */
  word                                             lna_bypass_timer_1;
  /* Bypass timer value */
  word                                             lna_bypass_timer_2;
  /* Bypass timer value */
  word                                             lna_bypass_timer_3;
  /* CDMA SMS Parameters/templates */
  nv_sms_cd_parms_type                             sms_cd_parms;
  /* Specifies the order of acquiring a GSM/WCDMA system */
  nv_acq_order_pref_type                           acq_order_pref;
  /* Indicates how a network should be selected, auto or manually */
  nv_net_sel_mode_pref_type                        net_sel_mode_pref;
  /* Indicates the type of service domain that should be acquired */
  nv_srv_domain_pref_type                          service_domain_pref;
  /* Authentication type */
  nv_ppp_auth_enum_type                            ppp_authentication;
  /* APN name to be used in the PDP-context activation procedure */
  byte                                             apn_name[NV_MAX_APN_STRING_LEN];
  /* List of equivalent PLMNs received from the RPLMN */
  nv_equivalent_plmn_list_type                     equivalent_plmn_list;
  /* Public Key Organization Identifier */
  nv_ds_mip_dmu_pkoid_type                         ds_mip_dmu_pkoid;
  /* RTRE configuration */
  nv_rtre_configuration_type                       rtre_config;
  /* RX AGC offset for each VGA gain */
  int16                                            wcdma_vga_gain_offset;
  /* RX AGC offset for each VGA gain based on frequency */
  int8                                             wcdma_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* RX AGC offset for each VGA gain based on temperature */
  int8                                             wcdma_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
  /* LNA threshold from mid to low state */
  int16                                            wcdma_lna_range_rise_2;
  /* Mixer threshold from high to low state */
  int16                                            wcdma_lna_range_rise_3;
  /* LNA threshold from low to mid state */
  int16                                            wcdma_lna_range_fall_2;
  /* Mixer threshold from low to high state */
  int16                                            wcdma_lna_range_fall_3;
  /* IM threshold for LNA mid to low state */
  int16                                            wcdma_im_level_2;
  /* Mixer threshold for high to low state */
  int16                                            wcdma_im_level_3;
  /* LNA gain step from mid to low state */
  int16                                            wcdma_lna_range_offset_2;
  /* Mixer gain step from high to low state */
  int16                                            wcdma_lna_range_offset_3;
  /* LNA gain step from mid to low state based on frequency */
  int8                                             wcdma_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
  /* Mixer gain step from high to low state based on frequency */
  int8                                             wcdma_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
  /* I cancellation value for lower in-band jammer */
  uint8                                            wcdma_im2_i_value;
  /* Q cancellation value for lower in-band jammer */
  uint8                                            wcdma_im2_q_value;
  /* Transconductor value for lower in-band jammer */
  uint8                                            wcdma_im2_transconductor_value;
  /* Linearizer underflow for LNA low gain state and Mixer High gainstate */
  int16                                            wcdma_rx_agc_min_2;
  /* Linearizer underflow for LNA Low gain state and Mixer Low gain state */
  int16                                            wcdma_rx_agc_min_3;
  /* VBATT min and max voltage value */
  uint8                                            wcdma_vbatt[2];
  /* THERM min and max voltage value */
  uint8                                            wcdma_therm[2];
  /* WCDMA UE Maximum TX power in dbm */
  int8                                             wcdma_max_tx_power;
  /* The FM MAC level that the PA will switch from low to high gain */
  byte                                             fm_pa_mac_high;
  /* Selects dynamic range in Rx Front. */
  int2                                             cdma_dynamic_range;
  /* Min Rx RSSI in 1/10 dB increments. */
  int2                                             cdma_min_rx_rssi;
  /* Enables Integrity Protection feature in the UE */
  boolean                                          rrc_integrity_enabled;
  /* Enables Ciphering feature in the UE */
  boolean                                          rrc_ciphering_enabled;
  /* Fake Security turned on/off in the UE */
  boolean                                          rrc_fake_security_enabled;
  /* This NV item records the # of CDMA powerup registration performed */
  qword                                            cdma_powerup_reg_performed;
  /* Defines the Tx Warmup duration. */
  word                                             tx_warmup;
  /* Remember the amount of data call bytes transmitted */
  uint32                                           last_tx_data_count;
  /* Remember the amount of data call bytes received */
  uint32                                           last_rx_data_count;
  /* Remember the accumulated data call bytes transmitted */
  uint32                                           total_tx_data_count;
  /* Remember the accumulated data call bytes received */
  uint32                                           total_rx_data_count;
  /* Mobile Node Authenticator */
  nv_ds_mip_dmu_mn_auth_type                       ds_mip_dmu_mn_auth;
  /* Configurable USB product id offset */
  byte                                             usb_product_id_offset;
  /* Call duration */
  uint16                                           avcd_call_duration;
  /* Time between calls */
  uint16                                           avcd_time_between_calls;
  /* Number of calls */
  uint16                                           avcd_number_of_calls;
  /* Service option */
  uint16                                           avcd_so;
  /* Minimum value before searcher declares OUT_OF_SERVICE_AREA */
  int16                                            wcdma_out_of_service_thresh;
  /* Indicates which class to use for the first UIM instruction. */
  nv_uim_first_inst_class_type                     uim_first_inst_class;
  /* HDR Set Management Parameters Override Allowed */
  uint8                                            hdrrup_override_allowed;
  /* M511 mode setting */
  uint8                                            jcdma_m511_mode;
  /* M512 mode setting */
  uint8                                            jcdma_m512_mode;
  /* M513 mode setting */
  uint8                                            jcdma_m513_mode;
  /* Adjustments to PA rise and fall values during P1 data calls. */
  byte                                             cdma_p1_rise_fall_off[8];
  /* Adjustments to PA rise and fall values during P1 data calls. */
  byte                                             pcs_p1_rise_fall_off[8];
  /* GSM GPRS location information */
  byte                                             gsm_locigprs[14];
  /* GSM GPRS Ciphering Key and CKSN */
  byte                                             gsm_kcgprs[9];
  /* Used to change powerdown options in fatal error handling */
  nv_err_fatal_options_type                        err_fatal_options;
  /* Simple IP PPP password */
  nv_ppp_password_type                             ppp_password;
  /* PDM value based on temperature */
  uint16                                           trk_lo_adj_vs_temp[64];
  /* Finger or searcher rotator value based on temperature */
  int16                                            rot_freq_vs_temp[64];
  /* GSM/UMTS SMS bearer preference */
  byte                                             sms_gw_bearer_pref;
  /* User ID for PPP authentication */
  nv_ppp_user_id_type                              ppp_user_id;
  /* The Multi Slot Class for GPRS mobiles */
  byte                                             multislot_class;
  /* NON DRX timer value for GPRS mobiles */
  byte                                             non_drx_timer;
  /* SPLIT_PAGING_CYCLE value for GPRS mobiles */
  byte                                             split_paging_cycle;
  /* Indicates what the preferred UIM protocol is */
  nv_uim_pref_protocol_type                        uim_pref_protocol;
  /* WCDMA Circuit Switched Data Synchronous Test App */
  boolean                                          wcdmacs_sync_test_app_enabled;
  /* GSM gain range switch points in units of dB_FS */
  nv_gainrange_switchpoint_type                    gsm_gainrange_switchpoints;
  /* DCS gain range switch points in units of dB_FS */
  nv_gainrange_switchpoint_type                    dcs_gainrange_switchpoints;
  /* NAI for AN authentication */
  nv_hdr_an_ppp_nai_type                           hdr_an_ppp_user_id;
  /* Password for AN authentication */
  nv_hdr_an_ppp_password_type                      hdr_an_ppp_password;
  /* Primary JTACS CDMA channel */
  nv_cdmach_type                                   jtacs_pcdmach;
  /* Secondary JTAGS CDMA channel */
  nv_cdmach_type                                   jtacs_scdmach;
  /* GSM/UMTS IMSI (International Mobile Subscriber Identity) */
  byte                                             gsmumts_imsi[8];
  /* IP address and port of RTSP protocol proxy server */
  nv_rtsp_proxy_server_addr_type                   rtsp_proxy_server_addr;
  /* User's pref regarding which template to use for MO GSM/WCDMA msg */
  nv_sms_default_template_type                     sms_gw_default_template;
  /* User's pref regarding which template to use for MO CDMA msg */
  nv_sms_default_template_type                     sms_cd_default_template;
  /* Comment to track factory non-compliant behavior */
  uint8                                            non_compliance_comment[64];
  /* Defines the PZID hysterisis activation timer in seconds */
  uint16                                           hysterisis_activation_timer;
  /* Defines the PZID hysterisis timer in seconds */
  uint16                                           hysterisis_timer;
  /* Packet Call Dial String Lookup Table */
  nv_pkt_dial_string_type                          pkt_dial_strings[NV_PKT_DIAL_STRING_LIST_SIZE];
  /* Table of VCO Coarse Tune Values */
  byte                                             vco_coarse_tune_table[NV_VCO_COARSE_TUNE_TABLE_SIZ];
  /* For processing incoming CS Data calls as internal CSD calls */
  boolean                                          data_incoming_csd_call_is_internal;
  /* Dynamic Feature */
  byte                                             df[20];
  /* Temperature comp of GSM PA in AMSS6200 */
  int16                                            gsm_pa_temp_comp_index_14[16];
  /* Temperature comp of DCS PA in AMSS6200 */
  int16                                            dcs_pa_temp_comp_index_15[16];
  /* RF NV test item 1 */
  uint32                                           rf_test_item_1;
  /* RF NV test item 2 */
  uint32                                           rf_test_item_2;
  /* Negative SCI preference by the user */
  int8                                             neg_slot_cycle_index;
  /* OLPC floor value used for BTFD call */
  int8                                             btfd_olpc_floor_db;
  /* OLPC floor value used for non-BTFD call */
  int8                                             non_btfd_olpc_floor_db;
  /* PRL protocol revision number */
  byte                                             sspr_p_rev;
  /* IP address and port of RTSP protocol proxy server */
  nv_rtsp_proxy_server_addr_type                   rtsp_proxy_server_addr_alternate;
  /* Indicates the preferred slot for CDMA application. */
  nv_uim_slot_type                                 uim_cdma_pref_slot;
  /* Indicates the preferred slot for GSM application. */
  nv_uim_slot_type                                 uim_gsm_pref_slot;
  /* Define a MRU3 data type */
  nv_mru3_table_type                               mru3_table;
  /* Expand band pref from 16 bits to 32 bits */
  nv_band_pref_type                                band_pref_16_31;
  /* Enable Anite GCF 51.010 Test Case Workarounds */
  boolean                                          gprs_anite_gcf;
  /* Offset to be subtracted from input to IF VGA linearizer table. */
  int2                                             c1_cdma_lna_offset;
  /* Stores gain variations of the LNA. */
  int1                                             c1_cdma_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Offset to be subtracted from input to IF VGA linearizer table. */
  int2                                             c1_pcs_lna_offset;
  /* Gain variations of the LNA when in the 4th gain state. */
  int1                                             c1_pcs_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Offset to be subtracted from input to IF VGA linearizer table. */
  int2                                             c1_cdma_lna_2_offset;
  /* Gain variations of the LNA when in the 4th gain state. */
  int1                                             c1_cdma_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Offset to be subtracted from input to IF VGA linearizer table. */
  int2                                             c1_pcs_lna_2_offset;
  /* Gain variations of the LNA when in the 4th gain state. */
  int1                                             c1_pcs_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Offset to be subtracted from input to IF VGA linearizer table. */
  int2                                             c1_cdma_lna_3_offset;
  /* Gain variations of the LNA when in the 4th gain state. */
  int1                                             c1_cdma_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Offset to be subtracted from input to IF VGA linearizer table. */
  int2                                             c1_pcs_lna_3_offset;
  /* Gain variations of the LNA when in the 4th gain state. */
  int1                                             c1_pcs_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Offset to be subtracted from input to IF VGA linearizer table. */
  int2                                             c1_cdma_lna_4_offset;
  /* Gain variations of the LNA when in the 4th gain state. */
  int1                                             c1_cdma_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Offset to be subtracted from input to IF VGA linearizer table. */
  int2                                             c1_pcs_lna_4_offset;
  /* Gain variations of the LNA when in the 4th gain state. */
  int1                                             c1_pcs_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* CDMA PA Rise/Fall offsets during data calls. */
  byte                                             c1_cdma_p1_rise_fall_offset[8];
  /* PCS PA Rise/Fall offsets during data calls */
  byte                                             c1_pcs_p1_rise_fall_offset[8];
  /* AGC min and max values to prevent linearizer under and over flow. */
  nv_minmax_type                                   c1_rx_agc_value_1_minmax;
  /* AGC min and max values to prevent linearizer under and over flow. */
  nv_minmax_type                                   c1_rx_agc_value_2_minmax;
  /* AGC min and max values to prevent linearizer under and over flow. */
  nv_minmax_type                                   c1_rx_agc_value_3_minmax;
  /* AGC min and max values to prevent linearizer under and over flow. */
  nv_minmax_type                                   c1_rx_agc_value_4_minmax;
  /* Holds the base VREF value. */
  byte                                             c0_rx_agc_vref_val;
  /* Holds the base VREF value. */
  byte                                             c1_rx_agc_vref_val;
  /* Defines Group Delay Adjust. */
  byte                                             c0_grp_delay_adj;
  /* Defines Group Delay Adjust. */
  byte                                             c1_grp_delay_adj;
  /* 13-bit two's complement integer for Digital VGA gain offset. */
  int2                                             c1_cdma_vga_gain_offset;
  /* Digital VGA gain offset variations over the frequencies. */
  int1                                             c1_cdma_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Digital VGA gain offset variations over the temperatures. */
  int2                                             c1_cdma_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
  /* Digital VGA gain offset. */
  int2                                             c1_pcs_vga_gain_offset;
  /* Digital VGA gain offset variations over the frequencies. */
  int1                                             c1_pcs_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Digital VGA gain offset variations over the temperatures. */
  int2                                             c1_pcs_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
  /* In-phase coefficient for mismatch compensation. */
  int4                                             c1_digital_mis_comp_a_offset;
  /* In-phase coefficient for mismatch compensation. */
  int4                                             c1_gps_mis_comp_a_offset;
  /* In-phase coefficient for mismatch compensation. */
  int4                                             c1_digital_mis_comp_b_offset;
  /* In-phase coefficient for mismatch compensation. */
  int4                                             c1_gps_mis_comp_b_offset;
  /* Internal use only */
  byte                                             c1_cdma_dacc_iaccum0;
  /* Internal use only */
  byte                                             c1_pcs_dacc_iaccum0;
  /* Internal use only */
  byte                                             c1_gps_dacc_iaccum0;
  /* Internal use only */
  byte                                             c1_cdma_dacc_iaccum1;
  /* Internal use only */
  byte                                             c1_pcs_dacc_iaccum1;
  /* Internal use only */
  byte                                             c1_gps_dacc_iaccum1;
  /* Internal use only */
  byte                                             c1_cdma_dacc_iaccum2;
  /* Internal use only */
  byte                                             c1_pcs_dacc_iaccum2;
  /* Internal use only */
  byte                                             c1_gps_dacc_iaccum2;
  /* Internal use only */
  byte                                             c1_cdma_dacc_iaccum3;
  /* Internal use only */
  byte                                             c1_pcs_dacc_iaccum3;
  /* Internal use only */
  byte                                             c1_gps_dacc_iaccum3;
  /* Internal use only */
  byte                                             c1_cdma_dacc_iaccum4;
  /* Internal use only */
  byte                                             c1_pcs_dacc_iaccum4;
  /* Internal use only */
  byte                                             c1_gps_dacc_iaccum4;
  /* Internal use only */
  byte                                             c1_cdma_dacc_qaccum0;
  /* Internal use only */
  byte                                             c1_pcs_dacc_qaccum0;
  /* Internal use only */
  byte                                             c1_gps_dacc_qaccum0;
  /* Internal use only */
  byte                                             c1_cdma_dacc_qaccum1;
  /* Internal use only */
  byte                                             c1_pcs_dacc_qaccum1;
  /* Internal use only */
  byte                                             c1_gps_dacc_qaccum1;
  /* Internal use only */
  byte                                             c1_cdma_dacc_qaccum2;
  /* Internal use only */
  byte                                             c1_pcs_dacc_qaccum2;
  /* Internal use only */
  byte                                             c1_gps_dacc_qaccum2;
  /* Internal use only */
  byte                                             c1_cdma_dacc_qaccum3;
  /* Internal use only */
  byte                                             c1_pcs_dacc_qaccum3;
  /* Internal use only */
  byte                                             c1_gps_dacc_qaccum3;
  /* Internal use only */
  byte                                             c1_cdma_dacc_qaccum4;
  /* Internal use only */
  byte                                             c1_pcs_dacc_qaccum4;
  /* Internal use only */
  byte                                             c1_gps_dacc_qaccum4;
  /* GSM/UMTS Cell Broadcast SMS Service Table */
  nv_sms_gw_cb_service_table_type                  sms_gw_cb_service_table;
  /* GSM/UMTS Cell Broadcast SMS Service Table Size */
  word                                             sms_gw_cb_service_table_size;
  /* GSM/UMTS Cell Broadcast SMS Carrier's Configuration */
  byte                                             sms_gw_cb_config;
  /* GSM/UMTS Cell Broadcase SMS User's Preference */
  byte                                             sms_gw_cb_user_pref;
  /* Controls CDMA Receive Diversity Settings */
  word                                             cdma_rx_diversity_ctrl;
  /* Enable/disable tolerance to long PDP context setup time for TE calls */
  boolean                                          long_pdpact_tolerance_for_te;
  /* IM2 calibration item */
  byte                                             c1_cdma_im2_q_value;
  /* IM2 calibration item */
  byte                                             c1_pcs_im2_q_value;
  /* IM2 calibration item */
  byte                                             c1_cdma_im2_i_value;
  /* IM2 calibration item */
  byte                                             c1_pcs_im2_i_value;
  /* value that controls IM2 transconductance for CDMA mode */
  byte                                             c1_cdma_im2_transconductor_value;
  /* value that controls IM2 transconductance for PCS mode */
  byte                                             c1_pcs_im2_transconductor_value;
  /* Stores the coarse tuning values of the chain 1 RFR internal VCO */
  byte                                             c1_vco_coarse_tune_table[NV_VCO_COARSE_TUNE_TABLE_SIZ];
  /* Flag to enable dumping mdsp memory to flash. */
  boolean                                          mdsp_mem_dump_enabled;
  /* RF GSM 850 PA temp comp table */
  int8                                             gsm_850_pa_temp_comp_index_14;
  /* RF GSM 1900 PA temp comp table */
  int8                                             gsm_1900_pa_temp_comp_index_15;
  /* Set this item for Forcing UE to behave as GSM R99 version */
  byte                                             force_ue_sgsnr_r99;
  /* Set this item for Forcing UE to behave as GSM R99 version */
  byte                                             force_ue_mscr_r99;
  /* GPS receive chain configuration */
  byte                                             gps_rf_config;
  /* 8-bit rising threshold data for 2nd Chain LNA 1 */
  byte                                             c1_cdma_lna_1_rise;
  /* 8-bit rising threshold data for 2nd Chain LNA 2 */
  byte                                             c1_cdma_lna_2_rise;
  /* 8-bit rising threshold data for 2nd Chain LNA 3 */
  byte                                             c1_cdma_lna_3_rise;
  /* 8-bit rising threshold data for 2nd Chain LNA 4 */
  byte                                             c1_cdma_lna_4_rise;
  /* 8-bit rising threshold data for 2nd Chain LNA 1 */
  byte                                             c1_pcs_lna_1_rise;
  /* 8-bit rising threshold data for 2nd Chain LNA 2 */
  byte                                             c1_pcs_lna_2_rise;
  /* 8-bit rising threshold data for 2nd Chain LNA 3 */
  byte                                             c1_pcs_lna_3_rise;
  /* 8-bit rising threshold data for 2nd Chain LNA 4 */
  byte                                             c1_pcs_lna_4_rise;
  /* 8-bit falling threshold data for 2nd Chain LNA 1 */
  byte                                             c1_cdma_lna_1_fall;
  /* 8-bit falling threshold data for 2nd Chain LNA 2 */
  byte                                             c1_cdma_lna_2_fall;
  /* 8-bit falling threshold data for 2nd Chain LNA 3 */
  byte                                             c1_cdma_lna_3_fall;
  /* 8-bit falling threshold data for 2nd Chain LNA 4 */
  byte                                             c1_cdma_lna_4_fall;
  /* 8-bit falling threshold data for 2nd Chain LNA 1 */
  byte                                             c1_pcs_lna_1_fall;
  /* 8-bit falling threshold data for 2nd Chain LNA 2 */
  byte                                             c1_pcs_lna_2_fall;
  /* 8-bit falling threshold data for 2nd Chain LNA 3 */
  byte                                             c1_pcs_lna_3_fall;
  /* 8-bit falling threshold data for 2nd Chain LNA 4 */
  byte                                             c1_pcs_lna_4_fall;
  /* 8-bit IM anti-jamming threshold data, Level-1. */
  byte                                             c1_cdma_im_level1;
  /* 8-bit IM anti-jamming threshold data, Level-2. */
  byte                                             c1_cdma_im_level2;
  /* 8-bit IM anti-jamming threshold data, Level-3. */
  byte                                             c1_cdma_im_level3;
  /* 8-bit IM anti-jamming threshold data, Level-4. */
  byte                                             c1_cdma_im_level4;
  /* 8-bit IM anti-jamming threshold data, Level-1. */
  byte                                             c1_pcs_im_level1;
  /* 8-bit IM anti-jamming threshold data, Level-2. */
  byte                                             c1_pcs_im_level2;
  /* 8-bit IM anti-jamming threshold data, Level-3. */
  byte                                             c1_pcs_im_level3;
  /* 8-bit IM anti-jamming threshold data, Level-4. */
  byte                                             c1_pcs_im_level4;
  /* E-GSM ARFCNs used for DCS radio Rx/Tx frequency compensation */
  uint16                                           gsm_1900_cal_arfcn[NV_GSM_1900_CAL_ARFCN_SIZ];
  /* DCS frequency compensated Rx gain values for gain range 1 */
  uint16                                           gsm_1900_rx_gain_range_1_freq_comp[NV_GSM_1900_CAL_ARFCN_SIZ];
  /* DCS frequency compensated Rx gain values for gain range 2 */
  int16                                            gsm_1900_rx_gain_range_2_freq_comp[NV_GSM_1900_CAL_ARFCN_SIZ];
  /* DCS frequency compensated Rx gain values for gain range 3 */
  int16                                            gsm_1900_rx_gain_range_3_freq_comp[NV_GSM_1900_CAL_ARFCN_SIZ];
  /* DCS frequency compensated Rx gain values for gain range 4 */
  int16                                            gsm_1900_rx_gain_range_4_freq_comp[NV_GSM_1900_CAL_ARFCN_SIZ];
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_00;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_01;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_02;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_03;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_04;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_05;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_06;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_07;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_08;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_09;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_10;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_11;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_12;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_13;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_14;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_up_index_15;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_00;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_01;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_02;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_03;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_04;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_05;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_06;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_07;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_08;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_09;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_10;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_11;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_12;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_13;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_14;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_1900_tx_burst_ramp_down_index_15;
  /* PA DAC counts per dB */
  byte                                             gsm_1900_pa_gain_slope[NV_NUM_DCS_PA_PROFILES];
  /* 1/16 dB */
  int8                                             gsm_1900_tx_freq_comp[16];
  /* 1/16 dB per volt */
  byte                                             gsm_1900_vbatt_hi_pa_comp;
  /* 1/16 dB per volt */
  byte                                             gsm_1900_vbatt_lo_pa_comp;
  /* Quarter-symbol */
  int8                                             gsm_1900_pa_start_time_offset;
  /* Quarter-symbol */
  int8                                             gsm_1900_pa_stop_time_offset;
  /* DCS gain range switch points in units of dB_FS */
  nv_gainrange_switchpoint_type                    gsm_1900_gainrange_switchpoints;
  /* E-GSM ARFCNs used for GSM radio Rx/Tx frequency compensation */
  uint16                                           gsm_850_cal_arfcn[NV_GSM_850_CAL_ARFCN_SIZ];
  /* E-GSM frequency compensated Rx gain values for gain range 1 */
  uint16                                           gsm_850_rx_gain_range_1_freq_comp[NV_GSM_850_CAL_ARFCN_SIZ];
  /* E-GSM frequency compensated Rx gain values for gain range 2 */
  int16                                            gsm_850_rx_gain_range_2_freq_comp[NV_GSM_850_CAL_ARFCN_SIZ];
  /* E-GSM frequency compensated Rx gain values for gain range 3 */
  int16                                            gsm_850_rx_gain_range_3_freq_comp[NV_GSM_850_CAL_ARFCN_SIZ];
  /* E-GSM frequency compensated Rx gain values for gain range 4 */
  int16                                            gsm_850_rx_gain_range_4_freq_comp[NV_GSM_850_CAL_ARFCN_SIZ];
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_00;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_01;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_02;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_03;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_04;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_05;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_06;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_07;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_08;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_09;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_10;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_11;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_12;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_13;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_up_index_14;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_00;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_01;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_02;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_03;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_04;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_05;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_06;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_07;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_08;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_09;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_10;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_11;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_12;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_13;
  /* PA DAC value */
  nv_tx_burst_ramp_index_type                      gsm_850_tx_burst_ramp_down_index_14;
  /* PA DAC counts per dB */
  byte                                             gsm_850_pa_gain_slope[NV_NUM_GSM_PA_PROFILES];
  /* 1/16 dB */
  int8                                             gsm_850_tx_freq_comp[8];
  /* 1/16 dB per volt */
  byte                                             gsm_850_vbatt_hi_pa_comp;
  /* 1/16 dB per volt */
  byte                                             gsm_850_vbatt_lo_pa_comp;
  /* Quarter-symbol */
  int8                                             gsm_850_pa_start_time_offset;
  /* Quarter-symbol */
  int8                                             gsm_850_pa_stop_time_offset;
  /* GSM gain range switch points in units of dB_FS */
  nv_gainrange_switchpoint_type                    gsm_850_gainrange_switchpoints;
  /* RX AGC offset for each VGA gain */
  int16                                            wcdma_1900_vga_gain_offset;
  /* RX AGC offset for each VGA gain based on frequency */
  int8                                             wcdma_1900_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* RX AGC offset for each VGA gain based on temperature */
  int8                                             wcdma_1900_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
  /* LNA threshold from mid to low state */
  int16                                            wcdma_1900_lna_range_rise_2;
  /* Mixer threshold from high to low state */
  int16                                            wcdma_1900_lna_range_rise_3;
  /* LNA threshold from low to mid state */
  int16                                            wcdma_1900_lna_range_fall_2;
  /* Mixer threshold from low to high state */
  int16                                            wcdma_1900_lna_range_fall_3;
  /* IM threshold for LNA mid to low state */
  int16                                            wcdma_1900_im_level_2;
  /* Mixer threshold for high to low state */
  int16                                            wcdma_1900_im_level_3;
  /* LNA gain step from mid to low state */
  int16                                            wcdma_1900_lna_range_offset_2;
  /* Mixer gain step from high to low state */
  int16                                            wcdma_1900_lna_range_offset_3;
  /* LNA gain step from mid to low state based on frequency */
  int8                                             wcdma_1900_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
  /* Mixer gain step from high to low state based on frequency */
  int8                                             wcdma_1900_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
  /* I cancellation value for lower in-band jammer */
  uint8                                            wcdma_1900_im2_i_value;
  /* Q cancellation value for lower in-band jammer */
  uint8                                            wcdma_1900_im2_q_value;
  /* Transconductor value for lower in-band jammer */
  uint8                                            wcdma_1900_im2_transconductor_value;
  /* Linearizer underflow for LNA low gain state and Mixer High gainstate */
  int16                                            wcdma_1900_rx_agc_min_2;
  /* Linearizer underflow for LNA Low gain state and Mixer Low gain state */
  int16                                            wcdma_1900_rx_agc_min_3;
  /* WCDMA UE Maximum TX power in dbm */
  int8                                             wcdma_1900_max_tx_power;
  /* Minimum value before searcher declares OUT_OF_SERVICE_AREA */
  int16                                            wcdma_1900_out_of_service_thresh;
  /* WCDMA Rx power level at which LNA should be bypassed */
  int16                                            wcdma_1900_lna_range_rise;
  /* WCDMA Rx power level at which LNA should be turned on */
  int16                                            wcdma_1900_lna_range_fall;
  /* LNA InterMod (high to low gain ) anti-jamming threshold power level */
  int16                                            wcdma_1900_im_level;
  /* Duration of non-bypass state in multiple of 66us (8-bits) */
  uint8                                            wcdma_1900_nonbypass_timer;
  /* Duration of bypass state in multiple of 6.6ms (11-bits) */
  uint16                                           wcdma_1900_bypass_timer;
  /* Value that is added to Rx power reading when LNA is bypassed */
  int16                                            wcdma_1900_lna_range_offset;
  /* WCDMA LNA range offset delta vs. frequency in unit of AGC value */
  int8                                             wcdma_1900_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* WCDMA Receiver AGC min */
  int16                                            wcdma_1900_rx_agc_min;
  /* WCDMA Receiver AGC max */
  int16                                            wcdma_1900_rx_agc_max;
  /* WCDMA LNA Phase adjustment when LNA is bypassed */
  uint8                                            wcdma_1900_agc_phase_offset;
  /* WCDMA Tx AGC linearizer master offset value for lowest PA gain state */
  uint16                                           wcdma_1900_tx_lin_master_0[NV_WCDMA_TX_LIN_MASTER_SIZ];
  /* WCDMA Tx AGC linearizer master offset value for highest PA gain state */
  uint16                                           wcdma_1900_tx_lin_master_1[NV_WCDMA_TX_LIN_MASTER_SIZ];
  /* WCDMA Tx AGC delta vs. frequency for lowest PA gain state */
  int8                                             wcdma_1900_tx_comp_vs_freq_0[NV_FREQ_TABLE_SIZ];
  /* WCDMA Tx AGC delta vs. frequency for highest PA gain state */
  int8                                             wcdma_1900_tx_comp_vs_freq_1[NV_FREQ_TABLE_SIZ];
  /* WCDMA Tx AGC PDM delta vs. temp for lowest PA gain state */
  int8                                             wcdma_1900_tx_lin_vs_temp_0[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx AGC PDM delta vs. temp for highest PA gain state */
  int8                                             wcdma_1900_tx_lin_vs_temp_1[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx AGC PDM slope delta vs. temp for lowest PA gain state */
  int8                                             wcdma_1900_tx_slp_vs_temp_0[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx AGC PDM slope delta vs. temp for highest PA gain state */
  int8                                             wcdma_1900_tx_slp_vs_temp_1[NV_TEMP_TABLE_SIZ];
  /* TX power level to switch PA from lowest to highest gain state */
  uint16                                           wcdma_1900_r1_rise;
  /* TX power level to switch PA from highest to lowest gain state */
  uint16                                           wcdma_1900_r1_fall;
  /* WCDMA Tx power limit vs. temperature (absolute not delta) */
  uint8                                            wcdma_1900_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx power limit vs. frequency (absolute not delta) */
  int16                                            wcdma_1900_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
  /* WCDMA TX power limit gain step adjustment factor */
  uint8                                            wcdma_1900_adj_factor;
  /* WCDMA expected HDET reading vs Tx AGC */
  uint8                                            wcdma_1900_exp_hdet_vs_agc[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
  /* WCDMA ADC HDET reading offset */
  uint8                                            wcdma_1900_hdet_off;
  /* WCDMA ADC HDET reading span */
  uint8                                            wcdma_1900_hdet_spn;
  /* CHIPX8 delay for SYNC80M via 800mhz CDMA path in RF card, biased +25. */
  uint32                                           wcdma_1900_enc_btf;
  /* RPLMN Last Used Access Technology */
  nv_rplmnact_type                                 rplmnact;
  /* Indicates which preferences for ps data calls. */
  nv_ps_data_orig_pref_enum_type                   ps_data_orig_pref;
  /* Password used in HDR for Access Network stream CHAP authentication */
  nv_hdr_an_auth_passwd_long_type                  hdr_an_auth_passwd_long;
  /* Flag to do PPP resync on HDR to 1X handdown */
  boolean                                          ds_mip_qc_handdown_to_1x_opt;
  /* User ID used in HDR for Access Network stream CHAP authentication */
  nv_hdr_an_auth_user_id_long_type                 hdr_an_auth_user_id_long;
  /* Bypass timer value when the LNA_CNTL state machine is at 0001 */
  word                                             pcs_lna_bypass_timer_0;
  /* Delay time before PA_ON rises */
  uint16                                           wcdma_agc_pa_on_rise_delay;
  /* Delay time before PA_ON falls */
  uint16                                           wcdma_agc_pa_on_fall_delay;
  /* Delay time before TX_ON rises */
  uint16                                           wcdma_agc_tx_on_rise_delay;
  /* Delay time before TX_ON falls */
  uint16                                           wcdma_agc_tx_on_fall_delay;
  /* Tx agc update time */
  uint16                                           wcdma_agc_update_tx_agc_time;
  /* Delay time before PA_ON rises */
  uint16                                           wcdma_1900_agc_pa_on_rise_delay;
  /* Delay time before PA_ON rises */
  uint16                                           wcdma_1900_agc_pa_on_fall_delay;
  /* Delay time before TX_ON rises */
  uint16                                           wcdma_1900_agc_tx_on_rise_delay;
  /* Delay time before TX_ON falls */
  uint16                                           wcdma_1900_agc_tx_on_fall_delay;
  /* Tx agc update time */
  uint16                                           wcdma_1900_agc_update_tx_agc_time;
  /* PPP configuration options */
  nv_ppp_configure_data_type                       ppp_config_data;
  /* Offset to be applied in LNA Switch Point optimization calculation */
  int1                                             cell_1x_olta_backoff[4];
  /* Offset to be applied in LNA Switch Point optimization calculation */
  int1                                             cell_hdr_olta_backoff[4];
  /* Offset to be applied in LNA Switch Point optimization calculation */
  int1                                             pcs_olta_backoff[4];
  /* Tx power limit vs temperature */
  byte                                             bc6_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
  /* Coefficients for Freq comp for Rx */
  word                                             c0_bc6_rx_cal_chan[16];
  /* Tx linearizer with internal PA=00 */
  nv_tx_linearizer_type                            bc6_tx_lin_master0;
  /* Tx linearizer with internal PA=01 */
  nv_tx_linearizer_type                            bc6_tx_lin_master1;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc6_tx_comp0;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc6_tx_comp1;
  /* Tx power limit vs frequency */
  int1                                             bc6_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Expected HDET reading */
  byte                                             bc6_exp_hdet_vs_agc[NV_EXP_HDET_VS_AGC_SIZ];
  /* ADC HDET reading offset */
  byte                                             bc6_hdet_off;
  /* ADC HDET reading span */
  byte                                             bc6_hdet_spn;
  /* PA stepup threshold to state 1 */
  byte                                             bc6_pa_r1_rise;
  /* PA stepdown threshold to state 0 */
  byte                                             bc6_pa_r1_fall;
  /* Control Sig for LNA Polarity */
  byte                                             bc6_lna_range_pol;
  /* LNA bypass Rx power level */
  int1                                             bc6_lna_1_rise;
  /* LNA turn on Rx power level */
  int1                                             bc6_lna_1_fall;
  /* Rx pwr offset when LNA is bypassed */
  word                                             c0_bc6_lna_range_offset;
  /* Rx pwr offset when LNA is bypassed */
  word                                             c1_bc6_lna_range_offset;
  /* Bypass level for 2nd LNA */
  int1                                             bc6_lna_2_rise;
  /* Nonbypass level for 2nd LNA */
  int1                                             bc6_lna_2_fall;
  /* Rx Range Offset when 2nd LNA is bypassed */
  int2                                             bc6_lna_range_12_offset;
  /* IM threshold for 2nd stage */
  byte                                             c0_bc6_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c0_bc6_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c0_bc6_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c0_bc6_im_level4;
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c0_bc6_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c1_bc6_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Phase rotation setting */
  byte                                             bc6_agc_phase_offset;
  /* Adjustment factor */
  byte                                             bc6_adj_factor;
  /* Receiver AGC min-max */
  nv_minmax_type                                   bc6_rx_agc_minmax;
  /* Rx AGC min-max */
  nv_minmax_type                                   bc6_rx_agc_min_11;
  /* Chipx8 delay */
  dword                                            bc6_enc_btf;
  /* CDMA Gain attenuation limit */
  int2                                             bc6_tx_gain_atten_limit;
  /* Falling threshold data */
  int1                                             bc6_lna_3_fall;
  /* Rising threshold data */
  int1                                             bc6_lna_3_rise;
  /* VGA linearizer Offset */
  int2                                             bc6_lna_3_offset;
  /* Gain variations of the LNA */
  int1                                             c0_bc6_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Gain variations of the LNA */
  int1                                             c1_bc6_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* Falling threshold data */
  int1                                             bc6_lna_4_fall;
  /* Rising threshold data */
  int1                                             bc6_lna_4_rise;
  /* VGA linearizer Offset */
  int2                                             c0_bc6_lna_4_offset;
  /* VGA linearizer Offset */
  int2                                             c1_bc6_lna_4_offset;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc6_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc6_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc6_im2_q_value;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc6_im2_q_value;
  /* VGA gain offset */
  int2                                             c0_bc6_vga_gain_offset;
  /* VGA gain offset */
  int2                                             c1_bc6_vga_gain_offset;
  /* VGA gain offset vs frequencies */
  int1                                             c0_bc6_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA gain offset vs frequencies */
  int1                                             c1_bc6_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA gain offset vs temperatures */
  int2                                             c0_bc6_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
  /* VGA gain offset vs temperatures */
  int2                                             c1_bc6_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
  /* P1 mode PA Rise/Fall offsets */
  byte                                             bc6_p1_rise_fall_off[8];
  /* LNA offsets in 4th state. */
  int1                                             c0_bc6_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA offsets in 4th state. */
  int1                                             c1_bc6_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* PA Rise/Fall offsets. */
  byte                                             c0_bc6_p1_rise_fall_offset[8];
  /* PA Rise/Fall offsets. */
  byte                                             c1_bc6_p1_rise_fall_offset[8];
  /* Coeff for mismatch compensation. */
  int4                                             c0_bc6_digital_mis_comp_a_offset;
  /* Coeff for mismatch compensation. */
  int4                                             c1_bc6_digital_mis_comp_a_offset;
  /* Coeff for mismatch compensation. */
  int4                                             c0_bc6_digital_mis_comp_b_offset;
  /* Coeff for mismatch compensation. */
  int4                                             c1_bc6_digital_mis_comp_b_offset;
  /* IM2 transconductance. */
  byte                                             c0_bc6_im2_transconductor_value;
  /* IM2 transconductance. */
  byte                                             c1_bc6_im2_transconductor_value;
  /*  VCO Coarse Tune Table. */
  byte                                             bc6_vco_coarse_tune_table[NV_VCO_COARSE_TUNE_TABLE_SIZ];
  /* GSM PA temperature comp for power index 0 */
  int8                                             gsm_pa_temp_comp_index_00[16];
  /* GSM PA temperature comp for power index 1 */
  int8                                             gsm_pa_temp_comp_index_01[16];
  /* GSM PA temperature comp for power index 2 */
  int8                                             gsm_pa_temp_comp_index_02[16];
  /* GSM PA temperature comp for power index 3 */
  int8                                             gsm_pa_temp_comp_index_03[16];
  /* GSM PA temperature comp for power index 4 */
  int8                                             gsm_pa_temp_comp_index_04[16];
  /* GSM PA temperature comp for power index 5 */
  int8                                             gsm_pa_temp_comp_index_05[16];
  /* GSM PA temperature comp for power index 6 */
  int8                                             gsm_pa_temp_comp_index_06[16];
  /* GSM PA temperature comp for power index 7 */
  int8                                             gsm_pa_temp_comp_index_07[16];
  /* GSM PA temperature comp for power index 8 */
  int8                                             gsm_pa_temp_comp_index_08[16];
  /* GSM PA temperature comp for power index 9 */
  int8                                             gsm_pa_temp_comp_index_09[16];
  /* GSM PA temperature comp for power index 10 */
  int8                                             gsm_pa_temp_comp_index_10[16];
  /* GSM PA temperature comp for power index 11 */
  int8                                             gsm_pa_temp_comp_index_11[16];
  /* GSM PA temperature comp for power index 12 */
  int8                                             gsm_pa_temp_comp_index_12[16];
  /* GSM PA temperature comp for power index 13 */
  int8                                             gsm_pa_temp_comp_index_13[16];
  /* DCS PA temperature comp for power index 0 */
  int8                                             dcs_pa_temp_comp_index_00[16];
  /* DCS PA temperature comp for power index 1 */
  int8                                             dcs_pa_temp_comp_index_01[16];
  /* DCS PA temperature comp for power index 2 */
  int8                                             dcs_pa_temp_comp_index_02[16];
  /* DCS PA temperature comp for power index 3 */
  int8                                             dcs_pa_temp_comp_index_03[16];
  /* DCS PA temperature comp for power index 4 */
  int8                                             dcs_pa_temp_comp_index_04[16];
  /* DCS PA temperature comp for power index 5 */
  int8                                             dcs_pa_temp_comp_index_05[16];
  /* DCS PA temperature comp for power index 6 */
  int8                                             dcs_pa_temp_comp_index_06[16];
  /* DCS PA temperature comp for power index 7 */
  int8                                             dcs_pa_temp_comp_index_07[16];
  /* DCS PA temperature comp for power index 8 */
  int8                                             dcs_pa_temp_comp_index_08[16];
  /* DCS PA temperature comp for power index 9 */
  int8                                             dcs_pa_temp_comp_index_09[16];
  /* DCS PA temperature comp for power index 10 */
  int8                                             dcs_pa_temp_comp_index_10[16];
  /* DCS PA temperature comp for power index 11 */
  int8                                             dcs_pa_temp_comp_index_11[16];
  /* DCS PA temperature comp for power index 12 */
  int8                                             dcs_pa_temp_comp_index_12[16];
  /* DCS PA temperature comp for power index 13 */
  int8                                             dcs_pa_temp_comp_index_13[16];
  /* DCS PA temperature comp for power index 14 */
  int8                                             dcs_pa_temp_comp_index_14[16];
  /* To enable/disable AMR capability for GSM */
  boolean                                          gsm_amr_call_config;
  /* Temperature comp of GSM PA in AMSS6200 */
  int8                                             gsm_pa_temp_comp_int8_index_14[16];
  /* Temperature comp of DCS PA in AMSS6200 */
  int8                                             dcs_pa_temp_comp_int8_index_15[16];
  /* This value indicates that the P-TMSI Signature is to be deleted */
  boolean                                          gmm_ptmsi_sig_tobe_deleted;
  /* Coefficients for Freq comp for Tx */
  word                                             c0_bc6_tx_cal_chan[16];
  /* Coefficients for Freq comp for CDMA Tx */
  word                                             cdma_tx_cal_chan[16];
  /* Coefficients for Freq comp for CDMA Rx */
  word                                             cdma_rx_cal_chan[16];
  /* Coefficients for Freq comp for PCS Rx. */
  word                                             pcs_rx_cal_chan[16];
  /* Coefficients for Freq comp for PCS Tx. */
  word                                             pcs_tx_cal_chan[16];
  /* Security Services Device Key */
  nv_sec_device_key_type                           sec_device_key;
  /* GSM-850 PA temperature comp for power index 0 */
  int8                                             gsm_850_pa_temp_comp_index_00[16];
  /* GSM-850 PA temperature comp for power index 1 */
  int8                                             gsm_850_pa_temp_comp_index_01[16];
  /* GSM-850 PA temperature comp for power index 2 */
  int8                                             gsm_850_pa_temp_comp_index_02[16];
  /* GSM-850 PA temperature comp for power index 3 */
  int8                                             gsm_850_pa_temp_comp_index_03[16];
  /* GSM-850 PA temperature comp for power index 4 */
  int8                                             gsm_850_pa_temp_comp_index_04[16];
  /* GSM-850 PA temperature comp for power index 5 */
  int8                                             gsm_850_pa_temp_comp_index_05[16];
  /* GSM-850 PA temperature comp for power index 6 */
  int8                                             gsm_850_pa_temp_comp_index_06[16];
  /* GSM-850 PA temperature comp for power index 7 */
  int8                                             gsm_850_pa_temp_comp_index_07[16];
  /* GSM-850 PA temperature comp for power index 8 */
  int8                                             gsm_850_pa_temp_comp_index_08[16];
  /* GSM-850 PA temperature comp for power index 9 */
  int8                                             gsm_850_pa_temp_comp_index_09[16];
  /* GSM-850 PA temperature comp for power index 10 */
  int8                                             gsm_850_pa_temp_comp_index_10[16];
  /* GSM-850 PA temperature comp for power index 11 */
  int8                                             gsm_850_pa_temp_comp_index_11[16];
  /* GSM-850 PA temperature comp for power index 12 */
  int8                                             gsm_850_pa_temp_comp_index_12[16];
  /* GSM-850 PA temperature comp for power index 13 */
  int8                                             gsm_850_pa_temp_comp_index_13[16];
  /* GSM-1900 PA temperature comp for power index 0 */
  int8                                             gsm_1900_pa_temp_comp_index_00[16];
  /* GSM-1900 PA temperature comp for power index 1 */
  int8                                             gsm_1900_pa_temp_comp_index_01[16];
  /* GSM-1900 PA temperature comp for power index 2 */
  int8                                             gsm_1900_pa_temp_comp_index_02[16];
  /* GSM-1900 PA temperature comp for power index 3 */
  int8                                             gsm_1900_pa_temp_comp_index_03[16];
  /* GSM-1900 PA temperature comp for power index 4 */
  int8                                             gsm_1900_pa_temp_comp_index_04[16];
  /* GSM-1900 PA temperature comp for power index 5 */
  int8                                             gsm_1900_pa_temp_comp_index_05[16];
  /* GSM-1900 PA temperature comp for power index 6 */
  int8                                             gsm_1900_pa_temp_comp_index_06[16];
  /* GSM-1900 PA temperature comp for power index 7 */
  int8                                             gsm_1900_pa_temp_comp_index_07[16];
  /* GSM-1900 PA temperature comp for power index 8 */
  int8                                             gsm_1900_pa_temp_comp_index_08[16];
  /* GSM-1900 PA temperature comp for power index 9 */
  int8                                             gsm_1900_pa_temp_comp_index_09[16];
  /* GSM-1900 PA temperature comp for power index 10 */
  int8                                             gsm_1900_pa_temp_comp_index_10[16];
  /* GSM-1900 PA temperature comp for power index 11 */
  int8                                             gsm_1900_pa_temp_comp_index_11[16];
  /* GSM-1900 PA temperature comp for power index 12 */
  int8                                             gsm_1900_pa_temp_comp_index_12[16];
  /* GSM-1900 PA temperature comp for power index 13 */
  int8                                             gsm_1900_pa_temp_comp_index_13[16];
  /* GSM-1900 PA temperature comp for power index 14 */
  int8                                             gsm_1900_pa_temp_comp_index_14[16];
  /* Flag for graceful close of dormant connections */
  boolean                                          tcp_graceful_dormant_close;
  /* Enables/Disables Inter Freq Feature */
  boolean                                          interfreq_enabled;
  /* Requested by customer to enable/disable EPLMN feature */
  boolean                                          eplmn_enabled;
  /* Dtmf values can be set to 3 values */
  uint8                                            dtmf;
  /* TRK LO ADJ default value */
  uint16                                           trk_lo_adj_default;
  /* TRK LO ADJ slope default value */
  uint16                                           trk_lo_adj_slope_default;
  /* Time delay to adjust PA range transition to high gain */
  uint16                                           wcdma_pa_gain_up_time;
  /* Time delay to adjust PA range transition to low gain */
  uint16                                           wcdma_pa_gain_down_time;
  /* The GPS Chain Delay cal. parameter. */
  word                                             bc6_gps1_rf_delay;
  /* Reserved for RF Tune */
  byte                                             bc6_rf_tune_reserved;
  /* Tx linearizer with internal PA=10 */
  nv_tx_linearizer_type                            bc6_tx_lin_master2;
  /* Tx linearizer with internal PA=11 */
  nv_tx_linearizer_type                            bc6_tx_lin_master3;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc6_tx_comp2;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc6_tx_comp3;
  /* PA stepup threshold to state 2 */
  byte                                             bc6_pa_r2_rise;
  /* PA stepdown threshold to state 1 */
  byte                                             bc6_pa_r2_fall;
  /* PA stepup threshold to state 3 */
  byte                                             bc6_pa_r3_rise;
  /* PA stepdown threshold to state 2 */
  byte                                             bc6_pa_r3_fall;
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c0_bc6_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c0_bc6_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c0_bc6_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c0_bc6_lna_3_offset;
  /* LNA rise 1 threshold */
  int1                                             c0_bc6_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c0_bc6_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c0_bc6_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c0_bc6_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c0_bc6_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c0_bc6_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c0_bc6_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c0_bc6_lna_4_fall;
  /* Coefficients for Freq comp for Tx */
  word                                             c1_bc6_tx_cal_chan[16];
  /* Coefficients for Freq comp for Rx */
  word                                             c1_bc6_rx_cal_chan[16];
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c1_bc6_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c1_bc6_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c1_bc6_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c1_bc6_lna_3_offset;
  /* LNA rise 1 threshold */
  int1                                             c1_bc6_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c1_bc6_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c1_bc6_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c1_bc6_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c1_bc6_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c1_bc6_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c1_bc6_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c1_bc6_lna_4_fall;
  /* IM threshold for 2nd stage */
  byte                                             c1_bc6_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c1_bc6_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c1_bc6_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c1_bc6_im_level4;
  /* The GPS Chain Delay cal. parameter. */
  word                                             bc5_gps1_rf_delay;
  /* Reserved for RF Tune */
  byte                                             bc5_rf_tune_reserved;
  /* Tx power limit vs temperature */
  byte                                             bc5_tx_lim_vs_temp[8];
  /* Tx linearizer with internal PA=00 */
  nv_tx_linearizer_type                            bc5_tx_lin_master0;
  /* Tx linearizer with internal PA=01 */
  nv_tx_linearizer_type                            bc5_tx_lin_master1;
  /* Tx linearizer with internal PA=10 */
  nv_tx_linearizer_type                            bc5_tx_lin_master2;
  /* Tx linearizer with internal PA=11 */
  nv_tx_linearizer_type                            bc5_tx_lin_master3;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc5_tx_comp0;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc5_tx_comp1;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc5_tx_comp2;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc5_tx_comp3;
  /* Tx power limit vs frequency */
  int1                                             bc5_tx_lim_vs_freq[16];
  /* PA stepup threshold to state 1 */
  byte                                             bc5_pa_r1_rise;
  /* PA stepdown threshold to state 0 */
  byte                                             bc5_pa_r1_fall;
  /* PA stepup threshold to state 2 */
  byte                                             bc5_pa_r2_rise;
  /* PA stepdown threshold to state 1 */
  byte                                             bc5_pa_r2_fall;
  /* PA stepup threshold to state 3 */
  byte                                             bc5_pa_r3_rise;
  /* PA stepdown threshold to state 2 */
  byte                                             bc5_pa_r3_fall;
  /* ADC HDET reading offset */
  byte                                             bc5_hdet_off;
  /* ADC HDET reading span */
  byte                                             bc5_hdet_spn;
  /* Expected HDET reading */
  byte                                             bc5_exp_hdet_vs_agc[16];
  /* Chipx8 delay */
  dword                                            bc5_enc_btf;
  /* VCO Coarse Tune Table. */
  byte                                             bc5_vco_coarse_tune_table[16];
  /* P1 mode PA Rise/Fall offsets */
  byte                                             bc5_p1_rise_fall_off[8];
  /* Coefficients for Freq comp for Tx */
  word                                             c0_bc5_tx_cal_chan[16];
  /* Coefficients for Freq comp for Rx */
  word                                             c0_bc5_rx_cal_chan[16];
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c0_bc5_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c0_bc5_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 3 */
  int1                                             c0_bc5_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 4 */
  int1                                             c0_bc5_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c0_bc5_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c0_bc5_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c0_bc5_lna_3_offset;
  /* VGA linearizer Offset for state 4 */
  int2                                             c0_bc5_lna_4_offset;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc5_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc5_im2_q_value;
  /* VGA gain offset */
  int2                                             c0_bc5_vga_gain_offset;
  /* VGA gain offset vs frequencies */
  int1                                             c0_bc5_vga_gain_offset_vs_freq[16];
  /* IM2 transconductance. */
  byte                                             c0_bc5_im2_transconductor_value;
  /* LNA rise 1 threshold */
  int1                                             c0_bc5_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c0_bc5_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c0_bc5_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c0_bc5_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c0_bc5_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c0_bc5_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c0_bc5_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c0_bc5_lna_4_fall;
  /* IM threshold for 2nd stage */
  byte                                             c0_bc5_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c0_bc5_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c0_bc5_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c0_bc5_im_level4;
  /* Coefficients for Freq comp for Tx */
  word                                             c1_bc5_tx_cal_chan[16];
  /* Coefficients for Freq comp for Rx */
  word                                             c1_bc5_rx_cal_chan[16];
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c1_bc5_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c1_bc5_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 3 */
  int1                                             c1_bc5_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 4 */
  int1                                             c1_bc5_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c1_bc5_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c1_bc5_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c1_bc5_lna_3_offset;
  /* VGA linearizer Offset for state 4 */
  int2                                             c1_bc5_lna_4_offset;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc5_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc5_im2_q_value;
  /* VGA gain offset */
  int2                                             c1_bc5_vga_gain_offset;
  /* VGA gain offset vs frequencies */
  int1                                             c1_bc5_vga_gain_offset_vs_freq[16];
  /* IM2 transconductance. */
  byte                                             c1_bc5_im2_transconductor_value;
  /* LNA rise 1 threshold */
  int1                                             c1_bc5_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c1_bc5_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c1_bc5_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c1_bc5_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c1_bc5_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c1_bc5_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c1_bc5_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c1_bc5_lna_4_fall;
  /* IM threshold for 2nd stage */
  byte                                             c1_bc5_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c1_bc5_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c1_bc5_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c1_bc5_im_level4;
  /* The GPS Chain Delay cal. parameter. */
  word                                             bc4_gps1_rf_delay;
  /* Reserved for RF Tune */
  byte                                             bc4_rf_tune_reserved;
  /* Tx power limit vs temperature */
  byte                                             bc4_tx_lim_vs_temp[8];
  /* Tx linearizer with internal PA=00 */
  nv_tx_linearizer_type                            bc4_tx_lin_master0;
  /* Tx linearizer with internal PA=01 */
  nv_tx_linearizer_type                            bc4_tx_lin_master1;
  /* Tx linearizer with internal PA=10 */
  nv_tx_linearizer_type                            bc4_tx_lin_master2;
  /* Tx linearizer with internal PA=11 */
  nv_tx_linearizer_type                            bc4_tx_lin_master3;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc4_tx_comp0;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc4_tx_comp1;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc4_tx_comp2;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc4_tx_comp3;
  /* Tx power limit vs frequency */
  int1                                             bc4_tx_lim_vs_freq[16];
  /* PA stepup threshold to state 1 */
  byte                                             bc4_pa_r1_rise;
  /* PA stepdown threshold to state 0 */
  byte                                             bc4_pa_r1_fall;
  /* PA stepup threshold to state 2 */
  byte                                             bc4_pa_r2_rise;
  /* PA stepdown threshold to state 1 */
  byte                                             bc4_pa_r2_fall;
  /* PA stepup threshold to state 3 */
  byte                                             bc4_pa_r3_rise;
  /* PA stepdown threshold to state 2 */
  byte                                             bc4_pa_r3_fall;
  /* ADC HDET reading offset */
  byte                                             bc4_hdet_off;
  /* ADC HDET reading span */
  byte                                             bc4_hdet_spn;
  /* Expected HDET reading */
  byte                                             bc4_exp_hdet_vs_agc[16];
  /* Chipx8 delay */
  dword                                            bc4_enc_btf;
  /* VCO Coarse Tune Table. */
  byte                                             bc4_vco_coarse_tune_table[16];
  /* P1 mode PA Rise/Fall offsets */
  byte                                             bc4_p1_rise_fall_off[8];
  /* Coefficients for Freq comp for Tx */
  word                                             c0_bc4_tx_cal_chan[16];
  /* Coefficients for Freq comp for Rx */
  word                                             c0_bc4_rx_cal_chan[16];
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c0_bc4_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c0_bc4_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 3 */
  int1                                             c0_bc4_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 4 */
  int1                                             c0_bc4_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c0_bc4_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c0_bc4_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c0_bc4_lna_3_offset;
  /* VGA linearizer Offset for state 4 */
  int2                                             c0_bc4_lna_4_offset;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc4_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc4_im2_q_value;
  /* VGA gain offset */
  int2                                             c0_bc4_vga_gain_offset;
  /* VGA gain offset vs frequencies */
  int1                                             c0_bc4_vga_gain_offset_vs_freq[16];
  /* IM2 transconductance. */
  byte                                             c0_bc4_im2_transconductor_value;
  /* LNA rise 1 threshold */
  int1                                             c0_bc4_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c0_bc4_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c0_bc4_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c0_bc4_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c0_bc4_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c0_bc4_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c0_bc4_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c0_bc4_lna_4_fall;
  /* IM threshold for 2nd stage */
  byte                                             c0_bc4_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c0_bc4_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c0_bc4_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c0_bc4_im_level4;
  /* Coefficients for Freq comp for Tx */
  word                                             c1_bc4_tx_cal_chan[16];
  /* Coefficients for Freq comp for Rx */
  word                                             c1_bc4_rx_cal_chan[16];
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c1_bc4_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c1_bc4_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 3 */
  int1                                             c1_bc4_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 4 */
  int1                                             c1_bc4_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c1_bc4_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c1_bc4_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c1_bc4_lna_3_offset;
  /* VGA linearizer Offset for state 4 */
  int2                                             c1_bc4_lna_4_offset;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc4_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc4_im2_q_value;
  /* VGA gain offset */
  int2                                             c1_bc4_vga_gain_offset;
  /* VGA gain offset vs frequencies */
  int1                                             c1_bc4_vga_gain_offset_vs_freq[16];
  /* IM2 transconductance. */
  byte                                             c1_bc4_im2_transconductor_value;
  /* LNA rise 1 threshold */
  int1                                             c1_bc4_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c1_bc4_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c1_bc4_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c1_bc4_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c1_bc4_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c1_bc4_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c1_bc4_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c1_bc4_lna_4_fall;
  /* IM threshold for 2nd stage */
  byte                                             c1_bc4_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c1_bc4_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c1_bc4_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c1_bc4_im_level4;
  /* The GPS Chain Delay cal. parameter. */
  word                                             bc3_gps1_rf_delay;
  /* Reserved for RF Tune */
  byte                                             bc3_rf_tune_reserved;
  /* Tx power limit vs temperature */
  byte                                             bc3_tx_lim_vs_temp[8];
  /* Tx linearizer with internal PA=00 */
  nv_tx_linearizer_type                            bc3_tx_lin_master0;
  /* Tx linearizer with internal PA=01 */
  nv_tx_linearizer_type                            bc3_tx_lin_master1;
  /* Tx linearizer with internal PA=10 */
  nv_tx_linearizer_type                            bc3_tx_lin_master2;
  /* Tx linearizer with internal PA=11 */
  nv_tx_linearizer_type                            bc3_tx_lin_master3;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc3_tx_comp0;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc3_tx_comp1;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc3_tx_comp2;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc3_tx_comp3;
  /* Tx power limit vs frequency */
  int1                                             bc3_tx_lim_vs_freq[16];
  /* PA stepup threshold to state 1 */
  byte                                             bc3_pa_r1_rise;
  /* PA stepdown threshold to state 0 */
  byte                                             bc3_pa_r1_fall;
  /* PA stepup threshold to state 2 */
  byte                                             bc3_pa_r2_rise;
  /* PA stepdown threshold to state 1 */
  byte                                             bc3_pa_r2_fall;
  /* PA stepup threshold to state 3 */
  byte                                             bc3_pa_r3_rise;
  /* PA stepdown threshold to state 2 */
  byte                                             bc3_pa_r3_fall;
  /* ADC HDET reading offset */
  byte                                             bc3_hdet_off;
  /* ADC HDET reading span */
  byte                                             bc3_hdet_spn;
  /* Expected HDET reading */
  byte                                             bc3_exp_hdet_vs_agc[16];
  /* Chipx8 delay */
  dword                                            bc3_enc_btf;
  /* VCO Coarse Tune Table. */
  byte                                             bc3_vco_coarse_tune_table[16];
  /* P1 mode PA Rise/Fall offsets */
  byte                                             bc3_p1_rise_fall_off[8];
  /* Coefficients for Freq comp for Tx */
  word                                             c0_bc3_tx_cal_chan[16];
  /* Coefficients for Freq comp for Rx */
  word                                             c0_bc3_rx_cal_chan[16];
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c0_bc3_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c0_bc3_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 3 */
  int1                                             c0_bc3_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 4 */
  int1                                             c0_bc3_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c0_bc3_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c0_bc3_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c0_bc3_lna_3_offset;
  /* VGA linearizer Offset for state 4 */
  int2                                             c0_bc3_lna_4_offset;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc3_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc3_im2_q_value;
  /* VGA gain offset */
  int2                                             c0_bc3_vga_gain_offset;
  /* VGA gain offset vs frequencies */
  int1                                             c0_bc3_vga_gain_offset_vs_freq[16];
  /* IM2 transconductance. */
  byte                                             c0_bc3_im2_transconductor_value;
  /* LNA rise 1 threshold */
  int1                                             c0_bc3_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c0_bc3_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c0_bc3_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c0_bc3_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c0_bc3_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c0_bc3_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c0_bc3_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c0_bc3_lna_4_fall;
  /* IM threshold for 2nd stage */
  byte                                             c0_bc3_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c0_bc3_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c0_bc3_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c0_bc3_im_level4;
  /* Coefficients for Freq comp for Tx */
  word                                             c1_bc3_tx_cal_chan[16];
  /* Coefficients for Freq comp for Rx */
  word                                             c1_bc3_rx_cal_chan[16];
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c1_bc3_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c1_bc3_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 3 */
  int1                                             c1_bc3_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 4 */
  int1                                             c1_bc3_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c1_bc3_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c1_bc3_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c1_bc3_lna_3_offset;
  /* VGA linearizer Offset for state 4 */
  int2                                             c1_bc3_lna_4_offset;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc3_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc3_im2_q_value;
  /* VGA gain offset */
  int2                                             c1_bc3_vga_gain_offset;
  /* VGA gain offset vs frequencies */
  int1                                             c1_bc3_vga_gain_offset_vs_freq[16];
  /* IM2 transconductance. */
  byte                                             c1_bc3_im2_transconductor_value;
  /* LNA rise 1 threshold */
  int1                                             c1_bc3_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c1_bc3_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c1_bc3_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c1_bc3_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c1_bc3_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c1_bc3_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c1_bc3_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c1_bc3_lna_4_fall;
  /* IM threshold for 2nd stage */
  byte                                             c1_bc3_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c1_bc3_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c1_bc3_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c1_bc3_im_level4;
  /* The GPS Chain Delay cal. parameter. */
  word                                             bc1_gps1_rf_delay;
  /* Reserved for RF Tune */
  byte                                             bc1_rf_tune_reserved;
  /* Tx power limit vs temperature */
  byte                                             bc1_tx_lim_vs_temp[8];
  /* Tx linearizer with internal PA=00 */
  nv_tx_linearizer_type                            bc1_tx_lin_master0;
  /* Tx linearizer with internal PA=01 */
  nv_tx_linearizer_type                            bc1_tx_lin_master1;
  /* Tx linearizer with internal PA=10 */
  nv_tx_linearizer_type                            bc1_tx_lin_master2;
  /* Tx linearizer with internal PA=11 */
  nv_tx_linearizer_type                            bc1_tx_lin_master3;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc1_tx_comp0;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc1_tx_comp1;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc1_tx_comp2;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc1_tx_comp3;
  /* Tx power limit vs frequency */
  int1                                             bc1_tx_lim_vs_freq[16];
  /* PA stepup threshold to state 1 */
  byte                                             bc1_pa_r1_rise;
  /* PA stepdown threshold to state 0 */
  byte                                             bc1_pa_r1_fall;
  /* PA stepup threshold to state 2 */
  byte                                             bc1_pa_r2_rise;
  /* PA stepdown threshold to state 1 */
  byte                                             bc1_pa_r2_fall;
  /* PA stepup threshold to state 3 */
  byte                                             bc1_pa_r3_rise;
  /* PA stepdown threshold to state 2 */
  byte                                             bc1_pa_r3_fall;
  /* ADC HDET reading offset */
  byte                                             bc1_hdet_off;
  /* ADC HDET reading span */
  byte                                             bc1_hdet_spn;
  /* Expected HDET reading */
  byte                                             bc1_exp_hdet_vs_agc[16];
  /* Chipx8 delay */
  dword                                            bc1_enc_btf;
  /* VCO Coarse Tune Table. */
  byte                                             bc1_vco_coarse_tune_table[16];
  /* P1 mode PA Rise/Fall offsets */
  byte                                             bc1_p1_rise_fall_off[8];
  /* Coefficients for Freq comp for Tx */
  word                                             c0_bc1_tx_cal_chan[16];
  /* Coefficients for Freq comp for Rx */
  word                                             c0_bc1_rx_cal_chan[16];
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c0_bc1_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c0_bc1_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 3 */
  int1                                             c0_bc1_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 4 */
  int1                                             c0_bc1_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c0_bc1_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c0_bc1_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c0_bc1_lna_3_offset;
  /* VGA linearizer Offset for state 4 */
  int2                                             c0_bc1_lna_4_offset;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc1_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc1_im2_q_value;
  /* VGA gain offset */
  int2                                             c0_bc1_vga_gain_offset;
  /* VGA gain offset vs frequencies */
  int1                                             c0_bc1_vga_gain_offset_vs_freq[16];
  /* IM2 transconductance. */
  byte                                             c0_bc1_im2_transconductor_value;
  /* LNA rise 1 threshold */
  int1                                             c0_bc1_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c0_bc1_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c0_bc1_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c0_bc1_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c0_bc1_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c0_bc1_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c0_bc1_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c0_bc1_lna_4_fall;
  /* IM threshold for 2nd stage */
  byte                                             c0_bc1_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c0_bc1_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c0_bc1_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c0_bc1_im_level4;
  /* Coefficients for Freq comp for Tx */
  word                                             c1_bc1_tx_cal_chan[16];
  /* Coefficients for Freq comp for Rx */
  word                                             c1_bc1_rx_cal_chan[16];
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c1_bc1_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c1_bc1_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 3 */
  int1                                             c1_bc1_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 4 */
  int1                                             c1_bc1_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c1_bc1_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c1_bc1_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c1_bc1_lna_3_offset;
  /* VGA linearizer Offset for state 4 */
  int2                                             c1_bc1_lna_4_offset;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc1_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc1_im2_q_value;
  /* VGA gain offset */
  int2                                             c1_bc1_vga_gain_offset;
  /* VGA gain offset vs frequencies */
  int1                                             c1_bc1_vga_gain_offset_vs_freq[16];
  /* IM2 transconductance. */
  byte                                             c1_bc1_im2_transconductor_value;
  /* LNA rise 1 threshold */
  int1                                             c1_bc1_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c1_bc1_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c1_bc1_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c1_bc1_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c1_bc1_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c1_bc1_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c1_bc1_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c1_bc1_lna_4_fall;
  /* IM threshold for 2nd stage */
  byte                                             c1_bc1_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c1_bc1_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c1_bc1_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c1_bc1_im_level4;
  /* The GPS Chain Delay cal. parameter. */
  word                                             bc0_gps1_rf_delay;
  /* Reserved for RF Tune */
  byte                                             bc0_rf_tune_reserved;
  /* Tx power limit vs temperature */
  byte                                             bc0_tx_lim_vs_temp[8];
  /* Tx linearizer with internal PA=00 */
  nv_tx_linearizer_type                            bc0_tx_lin_master0;
  /* Tx linearizer with internal PA=01 */
  nv_tx_linearizer_type                            bc0_tx_lin_master1;
  /* Tx linearizer with internal PA=10 */
  nv_tx_linearizer_type                            bc0_tx_lin_master2;
  /* Tx linearizer with internal PA=11 */
  nv_tx_linearizer_type                            bc0_tx_lin_master3;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc0_tx_comp0;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc0_tx_comp1;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc0_tx_comp2;
  /* Compensation for Tx linz */
  nv_tx_comp_type                                  bc0_tx_comp3;
  /* Tx power limit vs frequency */
  int1                                             bc0_tx_lim_vs_freq[16];
  /* PA stepup threshold to state 1 */
  byte                                             bc0_pa_r1_rise;
  /* PA stepdown threshold to state 0 */
  byte                                             bc0_pa_r1_fall;
  /* PA stepup threshold to state 2 */
  byte                                             bc0_pa_r2_rise;
  /* PA stepdown threshold to state 1 */
  byte                                             bc0_pa_r2_fall;
  /* PA stepup threshold to state 3 */
  byte                                             bc0_pa_r3_rise;
  /* PA stepdown threshold to state 2 */
  byte                                             bc0_pa_r3_fall;
  /* ADC HDET reading offset */
  byte                                             bc0_hdet_off;
  /* ADC HDET reading span */
  byte                                             bc0_hdet_spn;
  /* Expected HDET reading */
  byte                                             bc0_exp_hdet_vs_agc[16];
  /* Chipx8 delay */
  dword                                            bc0_enc_btf;
  /* VCO Coarse Tune Table. */
  byte                                             bc0_vco_coarse_tune_table[16];
  /* P1 mode PA Rise/Fall offsets */
  byte                                             bc0_p1_rise_fall_off[8];
  /* Coefficients for Freq comp for Tx */
  word                                             c0_bc0_tx_cal_chan[16];
  /* Coefficients for Freq comp for Rx */
  word                                             c0_bc0_rx_cal_chan[16];
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c0_bc0_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c0_bc0_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 3 */
  int1                                             c0_bc0_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 4 */
  int1                                             c0_bc0_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c0_bc0_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c0_bc0_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c0_bc0_lna_3_offset;
  /* VGA linearizer Offset for state 4 */
  int2                                             c0_bc0_lna_4_offset;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc0_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c0_bc0_im2_q_value;
  /* VGA gain offset */
  int2                                             c0_bc0_vga_gain_offset;
  /* VGA gain offset vs frequencies */
  int1                                             c0_bc0_vga_gain_offset_vs_freq[16];
  /* IM2 transconductance. */
  byte                                             c0_bc0_im2_transconductor_value;
  /* LNA rise 1 threshold */
  int1                                             c0_bc0_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c0_bc0_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c0_bc0_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c0_bc0_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c0_bc0_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c0_bc0_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c0_bc0_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c0_bc0_lna_4_fall;
  /* IM threshold for 2nd stage */
  byte                                             c0_bc0_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c0_bc0_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c0_bc0_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c0_bc0_im_level4;
  /* Coefficients for Freq comp for Tx */
  word                                             c1_bc0_tx_cal_chan[16];
  /* Coefficients for Freq comp for Rx */
  word                                             c1_bc0_rx_cal_chan[16];
  /* LNA bypass offset vs. freq. Comp for state 1 */
  int1                                             c1_bc0_lna_1_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 2 */
  int1                                             c1_bc0_lna_2_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 3 */
  int1                                             c1_bc0_lna_3_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* LNA bypass offset vs. freq. Comp for state 4 */
  int1                                             c1_bc0_lna_4_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* VGA linearizer Offset for state 1 */
  int2                                             c1_bc0_lna_1_offset;
  /* VGA linearizer Offset for state 2 */
  int2                                             c1_bc0_lna_2_offset;
  /* VGA linearizer Offset for state 3 */
  int2                                             c1_bc0_lna_3_offset;
  /* VGA linearizer Offset for state 4 */
  int2                                             c1_bc0_lna_4_offset;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc0_im2_i_value;
  /* IM2 cal for RFR6000 */
  byte                                             c1_bc0_im2_q_value;
  /* VGA gain offset */
  int2                                             c1_bc0_vga_gain_offset;
  /* VGA gain offset vs frequencies */
  int1                                             c1_bc0_vga_gain_offset_vs_freq[16];
  /* IM2 transconductance. */
  byte                                             c1_bc0_im2_transconductor_value;
  /* LNA rise 1 threshold */
  int1                                             c1_bc0_lna_1_rise;
  /* LNA fall 1 threshold */
  int1                                             c1_bc0_lna_1_fall;
  /* LNA rise 2 threshold */
  int1                                             c1_bc0_lna_2_rise;
  /* LNA fall 2 threshold */
  int1                                             c1_bc0_lna_2_fall;
  /* LNA rise 3 threshold */
  int1                                             c1_bc0_lna_3_rise;
  /* LNA fall 3 threshold */
  int1                                             c1_bc0_lna_3_fall;
  /* LNA rise 4 threshold */
  int1                                             c1_bc0_lna_4_rise;
  /* LNA fall 4 threshold */
  int1                                             c1_bc0_lna_4_fall;
  /* IM threshold for 2nd stage */
  byte                                             c1_bc0_im_level1;
  /* IM threshold for 3rd stage */
  byte                                             c1_bc0_im_level2;
  /* IM threshold for 4th stage */
  byte                                             c1_bc0_im_level3;
  /* IM threshold for 5th stage */
  byte                                             c1_bc0_im_level4;
  /* Tunes the RX baseband filter bandwidth */
  uint8                                            rfr_bb_filter;
  /* Tunes the value of the baseband resistor */
  uint8                                            rfr_iq_line_resistor;
  /* Maps coarse tune codes to actual VCO frequency ranges */
  uint8                                            wcdma_rfr_vco_coarse_tuning[12];
  /* Maps coarse tune codes to actual VCO frequency ranges */
  uint8                                            rfr_vco_coarse_tuning_1900[12];
  /* TX rotator angle for PA range state 00 */
  uint16                                           wcdma_tx_rot_angle_pa_state_00;
  /* TX rotator angle for PA range state 01 */
  uint16                                           wcdma_tx_rot_angle_pa_state_01;
  /* TX rotator angle for PA range state 10 */
  uint16                                           wcdma_tx_rot_angle_pa_state_10;
  /* TX rotator angle for PA range state 11 */
  uint16                                           wcdma_tx_rot_angle_pa_state_11;
  /* To Support Adative Multi Rate (Full rate and Half Rate) Speech */
  boolean                                          amr;
  /* True - Enable spike mitigation or False - Disable spike mitigation */
  boolean                                          wcdma_spike_mitigation_enabled;
  /* Tx AGC compensation at PA gain going up */
  int16                                            pa_compensate_up;
  /* Tx AGC compensation at PA gain going down */
  int16                                            pa_compensate_down;
  /* Save PPP Session Status ( Whether PPP is up or not) */
  boolean                                          sn_ppp_status;
  /* Use ETSI RLP v2 as default */
  boolean                                          ds_ucsd_rlpv2_default;
  /* For China UNICOM Dual Slot */
  boolean                                          select_tech_for_card;
  /* PPP NCP initiation option */
  nv_ppp_ncp_remote_initiate_type                  ppp_ncp_remote_initiate;
  /* Default GSM RLP version */
  byte                                             ds_ucsd_rlp_version_gsm;
  /* Default WCDMA RLP version */
  byte                                             ds_ucsd_rlp_version_wcdma;
  /* Default ATCOP CRLP version */
  byte                                             ds_atcop_rlp_version_default;
  /* UMTS CS Data using SREJ recovery */
  boolean                                          ds_ucsd_recovery_mode_srej;
  /* Idle time before sending keepalive probes */
  uint32                                           tcp_keepalive_idle_time;
  /* Reserved for RF Tune */
  byte                                             rf_tune_reserved;
  /* Dial String to force a CDMA only packet call */
  nv_data_pkt_orig_str_type                        data_force_cdma_pkt_str;
  /* RX AGC offset for each VGA gain */
  int16                                            wcdma_800_vga_gain_offset;
  /* RX AGC offset for each VGA gain based on frequency */
  int8                                             wcdma_800_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* RX AGC offset for each VGA gain based on temperature */
  int8                                             wcdma_800_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
  /* LNA threshold from mid to low state */
  int16                                            wcdma_800_lna_range_rise_2;
  /* Mixer threshold from high to low state */
  int16                                            wcdma_800_lna_range_rise_3;
  /* LNA threshold from low to mid state */
  int16                                            wcdma_800_lna_range_fall_2;
  /* Mixer threshold from low to high state */
  int16                                            wcdma_800_lna_range_fall_3;
  /* IM threshold for LNA mid to low state */
  int16                                            wcdma_800_im_level_2;
  /* Mixer threshold for high to low state */
  int16                                            wcdma_800_im_level_3;
  /* LNA gain step from mid to low state */
  int16                                            wcdma_800_lna_range_offset_2;
  /* Mixer gain step from high to low state */
  int16                                            wcdma_800_lna_range_offset_3;
  /* LNA gain step from mid to low state based on frequency */
  int8                                             wcdma_800_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
  /* Mixer gain step from high to low state based on frequency */
  int8                                             wcdma_800_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
  /* I cancellation value for lower in-band jammer */
  uint8                                            wcdma_800_im2_i_value;
  /* Q cancellation value for lower in-band jammer */
  uint8                                            wcdma_800_im2_q_value;
  /* Transconductor value for lower in-band jammer */
  uint8                                            wcdma_800_im2_transconductor_value;
  /* Linearizer underflow for LNA low gain state and Mixer High gainstate */
  int16                                            wcdma_800_rx_agc_min_2;
  /* Linearizer underflow for LNA Low gain state and Mixer Low gain state */
  int16                                            wcdma_800_rx_agc_min_3;
  /* WCDMA UE Maximum TX power in dbm */
  int8                                             wcdma_800_max_tx_power;
  /* Minimum value before searcher declares OUT_OF_SERVICE_AREA */
  int16                                            wcdma_800_out_of_service_thresh;
  /* WCDMA Rx power level at which LNA should be bypassed */
  int16                                            wcdma_800_lna_range_rise;
  /* WCDMA Rx power level at which LNA should be turned on */
  int16                                            wcdma_800_lna_range_fall;
  /* LNA InterMod (high to low gain ) anti-jamming threshold power level */
  int16                                            wcdma_800_im_level;
  /* Duration of non-bypass state in multiple of 66us (8-bits) */
  uint8                                            wcdma_800_nonbypass_timer;
  /* Duration of bypass state in multiple of 6.6ms (11-bits) */
  uint16                                           wcdma_800_bypass_timer;
  /* Value that is added to Rx power reading when LNA is bypassed */
  int16                                            wcdma_800_lna_range_offset;
  /* WCDMA LNA range offset delta vs. frequency in unit of AGC value */
  int8                                             wcdma_800_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
  /* WCDMA Receiver AGC min */
  int16                                            wcdma_800_rx_agc_min;
  /* WCDMA Receiver AGC max */
  int16                                            wcdma_800_rx_agc_max;
  /* WCDMA LNA Phase adjustment when LNA is bypassed */
  uint8                                            wcdma_800_agc_phase_offset;
  /* WCDMA Tx AGC linearizer master offset value for lowest PA gain state */
  uint16                                           wcdma_800_tx_lin_master_0[NV_WCDMA_TX_LIN_MASTER_SIZ];
  /* WCDMA Tx AGC linearizer master offset value for highest PA gain state */
  uint16                                           wcdma_800_tx_lin_master_1[NV_WCDMA_TX_LIN_MASTER_SIZ];
  /* WCDMA Tx AGC delta vs. frequency for lowest PA gain state */
  int8                                             wcdma_800_tx_comp_vs_freq_0[NV_FREQ_TABLE_SIZ];
  /* WCDMA Tx AGC delta vs. frequency for highest PA gain state */
  int8                                             wcdma_800_tx_comp_vs_freq_1[NV_FREQ_TABLE_SIZ];
  /* WCDMA Tx AGC PDM delta vs. temp for lowest PA gain state */
  int8                                             wcdma_800_tx_lin_vs_temp_0[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx AGC PDM delta vs. temp for highest PA gain state */
  int8                                             wcdma_800_tx_lin_vs_temp_1[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx AGC PDM slope delta vs. temp for lowest PA gain state */
  int8                                             wcdma_800_tx_slp_vs_temp_0[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx AGC PDM slope delta vs. temp for highest PA gain state */
  int8                                             wcdma_800_tx_slp_vs_temp_1[NV_TEMP_TABLE_SIZ];
  /* TX power level to switch PA from lowest to highest gain state */
  uint16                                           wcdma_800_r1_rise;
  /* TX power level to switch PA from highest to lowest gain state */
  uint16                                           wcdma_800_r1_fall;
  /* WCDMA Tx power limit vs. temperature (absolute not delta) */
  uint8                                            wcdma_800_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
  /* WCDMA Tx power limit vs. frequency (absolute not delta) */
  int16                                            wcdma_800_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
  /* WCDMA TX power limit gain step adjustment factor */
  uint8                                            wcdma_800_adj_factor;
  /* WCDMA expected HDET reading vs Tx AGC */
  uint8                                            wcdma_800_exp_hdet_vs_agc[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
  /* WCDMA ADC HDET reading offset */
  uint8                                            wcdma_800_hdet_off;
  /* WCDMA ADC HDET reading span */
  uint8                                            wcdma_800_hdet_spn;
  /* CHIPX8 delay for SYNC80M via 800mhz CDMA path in RF card, biased +25. */
  uint32                                           wcdma_800_enc_btf;
  /* Delay time before PA_ON rises */
  uint16                                           wcdma_800_agc_pa_on_rise_delay;
  /* Delay time before PA_ON rises */
  uint16                                           wcdma_800_agc_pa_on_fall_delay;
  /* Delay time before TX_ON rises */
  uint16                                           wcdma_800_agc_tx_on_rise_delay;
  /* Delay time before TX_ON falls */
  uint16                                           wcdma_800_agc_tx_on_fall_delay;
  /* Tx agc update time */
  uint16                                           wcdma_800_agc_update_tx_agc_time;
  /* PA state mapping value */
  byte                                             pa_r_map;
  /* Interface Identifier for IPv6 interface */
  nv_ps_ipv6_iid_type                              ps_ipv6_iid;
  /* Holds RF Band Configuration */
  dword                                            rf_bc_config;
  /* Holds RF Hardware Configuration */
  byte                                             rf_hw_config;
  /* BC0 fall setting for HDR IM */
  int1                                             bc0_hdr_im_fall;
  /* BC0 rise settings for HDR IM */
  int1                                             bc0_hdr_im_rise;
  /* 16 MSBs s of VCTCXO frequency accumulator */
  int16                                            vco_temp[64];
  /* Default setting for VCTCXO */
  int16                                            vco_default;
  /* Sensitivity/slope of the VCTCXO */
  uint16                                           vco_slope;
  /* True slope of the VCTCXO */
  uint8                                            vco_slope_range;
  /* Time when a recent good system wrote its values. */
  uint32                                           rgs_time;
  /* Which system was the last one to write the RGS values */
  uint8                                            rgs_type;
  /* Temperature at time NV_RGS_TIME */
  uint8                                            rgs_temp;
  /* Frequency error of rotator loop at time NV_RGS_TIME */
  int16                                            rgs_rot;
  /* 16MSBs of VCTCXO frequency accumulator */
  int16                                            rgs_vco;
  /* HDR Intermode level */
  int1                                             bc0_hdr_im_level;
  /* Timing adjustment in quarter-symbols for GSM TX */
  int16                                            gsm_tx_burst_offset_adj;
  /* Debug mask for F3/event/log trace */
  uint8                                            diag_debug_control;
  /* Gives the default video capability settings for QVideoPhone */
  word                                             qvp_app_default_capability_type;
  /* NV_RR_STORED_LAST_BEST_ARFCNS_BAND_I */
  nv_rr_stored_last_best_arfcns_band_type          rr_stored_last_best_arfcns_band;
  /* Determines what will be saved with each trace record */
  uint8                                            diag_debug_detail;
  /* IPV6 Enable/Disable */
  boolean                                          ipv6_enabled;
  /* IPV6 SM Configuration Struct */
  nv_ip6_sm_config_type                            ipv6_sm_config;
  /* Stores the coarse tuning values of the chain 1 RFR internal VCO */
  byte                                             c1_bc0_vco_coarse_tune_table[16];
  /* Stores the coarse tuning values of the chain 1 RFR internal VCO */
  byte                                             c1_bc1_vco_coarse_tune_table[16];
  /* Stores the coarse tuning values of the chain 1 RFR internal VCO */
  byte                                             c1_bc3_vco_coarse_tune_table[16];
  /* Stores the coarse tuning values of the chain 1 RFR internal VCO */
  byte                                             c1_bc4_vco_coarse_tune_table[16];
  /* Stores the coarse tuning values of the chain 1 RFR internal VCO */
  byte                                             c1_bc5_vco_coarse_tune_table[16];
  /* Stores the coarse tuning values of the chain 1 RFR internal VCO */
  byte                                             c1_bc6_vco_coarse_tune_table[16];
  /* BB Calibration Value for Chain-1 */
  byte                                             c1_rfr_bb_filter;
  /* IPv6 DNS server addresses */
  nv_ipv6_address_type                             ipv6_primary_dns;
  /* IPv6 DNS server addresses */
  nv_ipv6_address_type                             ipv6_secondary_dns;
  /* Require Encrypted password */
  boolean                                          auth_require_password_encryption;
  /* PA R1 Rise threshold for PRACH */
  int16                                            wcdma_prach_r1_rise_offset;
  /* PA R1 Rise threshold for PRACH */
  int16                                            wcdma_1900_prach_r1_rise_offset;
  /* PA R1 Fall threshold for PRACH */
  int16                                            wcdma_prach_r1_fall_offset;
  /* PA R1 Fall threshold for PRACH */
  int16                                            wcdma_1900_prach_r1_fall_offset;
  /* PA R1 Fall threshold for PRACH */
  int16                                            wcdma_800_prach_r1_fall_offset;
  /* Maximum frequency uncertainty of system oscillator */
  uint32                                           aagps_max_osc_unc;
  /* Max Oscillator Unc Rate */
  uint32                                           aagps_max_osc_unc_rate;
  /* Processing Losses */
  uint32                                           aagps_processing_losses;
  /* Max Platform Velocity */
  uint32                                           aagps_max_platform_velocity;
  /* Max Platform Acceleration */
  uint32                                           aagps_max_platform_accl;
  /* Default QoS Time */
  uint32                                           aagps_default_qos_time;
  /* Rapid Fix Report Maximum Latency */
  uint32                                           aagps_rapid_fix_report_max_latency;
  /* Positioning Modes Supported */
  uint32                                           aagps_positioning_modes_supported;
  /* Default Reference Time Uncertainy */
  uint32                                           aagps_default_ref_time_unc;
  /* Default Reference Position Uncertainty */
  uint32                                           aagps_default_ref_position_unc;
  /* Application Based Tracking GPS-Idle Threshold */
  uint32                                           aagps_app_tracking_gpsidle_thsld;
  /* GPS Lock control */
  byte                                             aagps_gps_lock_control;
  /* Default URL */
  byte                                             aagps_default_url[128];
  /* Default IP Address */
  byte                                             aagps_default_ip_address[16];
  /* Transport type */
  byte                                             aagps_transport_type;
  /* Keep Warm Mode */
  byte                                             aagps_keep_warm_mode;
  /* 2G MO-LR Support */
  byte                                             aagps_2g_mo_lrsupport;
  /* Emergency Services Support */
  byte                                             aagps_emergency_services_spprt;
  /* PA R1 Rise threshold for PRACH */
  int16                                            wcdma_800_prach_r1_rise_offset;
  /* If this field is enabled, use link_ local_address as V6DNSServer addr */
  boolean                                          pdsn_as_proxy_ipv6_dns_server;
  /* AMP - Hardware ID associated with the AT's session */
  uint32                                           hdramp_hardware_id;
  /* Protocol selection */
  byte                                             aagps_protocol_select;
  /* Protocol selection */
  uint32                                           aagps_app_trkg_periodic_req_dly_margin;
  /* Default QoS UNC */
  uint32                                           aagps_default_qos_unc;
  /* Application Based Tracking GPS-On Thresho */
  uint32                                           aagps_app_tracking_gpson_thsld;
  /* MT LR Support */
  byte                                             aagps_mt_lrsupport;
  /* nvi_byte_type taking one of 6 enum values  */
  byte                                             ipv6_failover_config;
  /* Indicates CAVE should be used for AN Authentication */
  boolean                                          uim_use_cave_for_an_auth;
  /* Mobile Equipment IDentifier */
  qword                                            meid;
  /* FEATURE_GPSONE_CALL_RELATED functionality */
  byte                                             gps1_call_related;
  /* Antenna select truth table entry GSM default values */
  uint8                                            rf_antsel_gsm_default[4];
  /* antenna select truth table entry GSM 850 TX values */
  uint8                                            rf_antsel_gsm_850_tx[4];
  /* antenna select truth table entry GSM 850 RX values */
  uint8                                            rf_antsel_gsm_850_rx[4];
  /* antenna select truth table entry GSM 900 TX values */
  uint8                                            rf_antsel_gsm_900_tx[4];
  /* antenna select truth table entry GSM 900 RX values */
  uint8                                            rf_antsel_gsm_900_rx[4];
  /* antenna select truth table entry GSM 1800 TX values */
  uint8                                            rf_antsel_gsm_1800_tx[4];
  /* antenna select truth table entry GSM 1800 RX values */
  uint8                                            rf_antsel_gsm_1800_rx[4];
  /* antenna select truth table entry GSM 1900 TX values */
  uint8                                            rf_antsel_gsm_1900_tx[4];
  /* antenna select truth table entry GSM 1900 RX values */
  uint8                                            rf_antsel_gsm_1900_rx[4];
  /* antenna select truth table entry UMTS 800 values */
  uint8                                            rf_antsel_umts_800[4];
  /* antenna select truth table entry UMTS 1900 values */
  uint8                                            rf_antsel_umts_1900[4];
  /* antenna select truth table entry UMTS 2100 values */
  uint8                                            rf_antsel_umts_2100[4];
  /* Flag to enable/disable TCP SACK & TIMESTAMP socket options */
  boolean                                          tcp_sack_timestamp_enabled;
  /* Stores the prl preferences on a per-NAM basis. */
  nv_prl_pref_type                                 prl_pref;
  /* Default IP Port */
  uint16                                           aagps_default_ip_port;
  /* 3F MO LR Support */
  byte                                             aagps_3g_mo_lrsupport;
  /* AAGPS Test Options */
  uint32                                           aagps_development_test_control;
  /* Maximum number of trace files saved to EFS */
  uint8                                            diag_debug_max_files;
  /* Gain Compensation at 0 ---> 1 state transition */
  int16                                            wcdma_800_pa_compensate_up;
  /* Gain Compensation at 1 ---> 0 state transition */
  int16                                            wcdma_800_pa_compensate_down;
  /* Gain Compensation at 0 ---> 1 state transition */
  int16                                            wcdma_1900_pa_compensate_up;
  /* Gain Compensation at 1 ---> 0 state transition */
  int16                                            wcdma_1900_pa_compensate_down;
  /* PA Range update for 1 ---> 0 state */
  int16                                            wcdma_800_pa_gain_up_time;
  /* PA Range update for 0 ---> 1 state */
  int16                                            wcdma_800_pa_gain_down_time;
  /* PA Range update for 1 ---> 0 state */
  int16                                            wcdma_1900_pa_gain_up_time;
  /* PA Range update for 0 ---> 1 state */
  int16                                            wcdma_1900_pa_gain_down_time;
  /* Channel number list for TX frequency compensation */
  int16                                            wcdma_tx_cal_chan[NV_FREQ_TABLE_SIZ];
  /* Channel number list for RX frequency compensation */
  int16                                            wcdma_rx_cal_chan[NV_FREQ_TABLE_SIZ];
  /* Channel number list for TX frequency compensation */
  int16                                            wcdma_1900_tx_cal_chan[NV_FREQ_TABLE_SIZ];
  /* Channel number list for RX frequency compensation */
  int16                                            wcdma_1900_rx_cal_chan[NV_FREQ_TABLE_SIZ];
  /* Channel number list for TX frequency compensation */
  int16                                            wcdma_800_tx_cal_chan[NV_FREQ_TABLE_SIZ];
  /* Channel number list for RX frequency compensation */
  int16                                            wcdma_800_rx_cal_chan[NV_FREQ_TABLE_SIZ];
  //++Bonnie new 0719
//  /* Brew carrier id */
//  dword                                            brew_carrier_id;
//  /* Brew platform id */
//  dword                                            brew_platform_id;
//  /* Brew bkey */
//  byte                                             brew_bkey[NV_BREW_BKEY_SIZ];
//  /* Brew server */
//  byte                                             brew_server[NV_BREW_SERVER_SIZ];
//  /* Brew download flags */
//  word                                             brew_download_flags;
//  /* Brew auth policy */
//  dword                                            brew_auth_policy;
//  /* Brew privacy policy */
//  dword                                            brew_privacy_policy;
//  /* Brew subscriber Id */
//  byte                                             brew_subscriber_id[NV_BREW_SID_SIZ];
//  /* WCDMA RX path delay for 2100 */
//  int16                                            wcdma_rx_delay;
//  /* WCDMA RX path delay for 800 */
//  int16                                            wcdma_800_rx_delay;
//  /* WCDMA RX path delay for 1900 */
//  int16                                            wcdma_1900_rx_delay;
//  /* AAGPS Development Test Control */
//  uint32                                           aagps_development_test_control2;
//  /* AAGPS Development Test Control */
//  uint32                                           aagps_development_test_control3;
//  /* AAGPS Development Test Control */
//  uint32                                           aagps_development_test_control4;
//  /* AAGPS Development Test Control */
//  uint32                                           aagps_development_test_control5;
//  /* MEID Check Digit */
//  uint8                                            meid_cd;
//  /* Item to disable or enable Vx LCS Agent functionality. */
//  uint8                                            gps1_vx_lcs_agent;
//  /* Bitmap indicating whether applications are Trusted or Non-Trusted. */
//  uint8                                            gps1_vx_app_trusted_settings;
//  /* GPSOne Vx dedicated SMS Teleservice Identifier */
//  uint16                                           gps1_vx_ni_teleservice_id;
//  /* Flag to decide whether to force Vx over PRev 6 and above. */
//  boolean                                          gps1_vx_lcs_agent_prev6_only;
//  /* Max SPPReq duration for MO Non-Trusted. Default val 0xffff. */
//  uint32                                           gps1_vx_mo_max_duration;
//  /* Operation preference for GPS/CDMA Acq in OOS */
//  uint8                                            gps1_oos_operation_pref;
//  /* Item to disable position location when voice call is active */
//  uint8                                            gps1_vx_gps_during_voice_call;
//  /* WLAN Technology Preference */
//  nv_wlan_tech_pref_type                           wlan_tech_pref;
//  /* CS Data RLP ADM idle timer */
//  uint32                                           ds_ucsd_rlp_adm_idle;
//  /* CCP reject behavior */
//  uint8                                            ppp_ccp_reject;
//  /* WLAN Scan Preference */
//  nv_wlan_scan_pref_type                           wlan_scan_pref;
//  /* BCMCS - Broadcast Overhead Period */
//  uint8                                            hdrbcmcs_ovhd_period;
//  /* BCMCS - Paging Registration Period */
//  uint8                                            hdrbcmcs_page_reg_period;
//  /* BCMCS - Dynamic Broadcast Registration Period */
//  uint8                                            hdrbcmcs_dyn_reg_period;
//  /* BCMCS - Monitor Period */
//  uint8                                            hdrbcmcs_monitor_period;
//  /* BCMCS - Num Periods */
//  uint8                                            hdrbcmcs_num_periods;
//  /* Tx Linearizer in PA Range state 2 */
//  uint16                                           wcdma_tx_lin_master_2[NV_WCDMA_TX_LIN_MASTER_SIZ];
//  /* Tx Linearizer in PA Range state 3 */
//  uint16                                           wcdma_tx_lin_master_3[NV_WCDMA_TX_LIN_MASTER_SIZ];
//  /* Tx Frequency Compensation in State 2 */
//  int8                                             wcdma_tx_comp_vs_freq_2[NV_FREQ_TABLE_SIZ];
//  /* Tx Frequency Compensation in state 3 */
//  int8                                             wcdma_tx_comp_vs_freq_3[NV_FREQ_TABLE_SIZ];
//  /* TxLin Comp over temp in state 2 */
//  int8                                             wcdma_tx_lin_vs_temp_2[NV_TEMP_TABLE_SIZ];
//  /* TxLin Comp over temp in state 3 */
//  int8                                             wcdma_tx_lin_vs_temp_3[NV_TEMP_TABLE_SIZ];
//  /* TxLin Slope Comp over temp in state 2 */
//  int8                                             wcdma_tx_slp_vs_temp_2[NV_TEMP_TABLE_SIZ];
//  /* TxLin Slope Comp over temp in state 3 */
//  int8                                             wcdma_tx_slp_vs_temp_3[NV_TEMP_TABLE_SIZ];
//  /* Power switch from 2 --> 1 state */
//  uint16                                           wcdma_r2_rise;
//  /* Power switch from 1 --> 2 state */
//  uint16                                           wcdma_r2_fall;
//  /* Power switch from 3 --> 2 state */
//  uint16                                           wcdma_r3_rise;
//  /* Power switch from 2 --> 3 state */
//  uint16                                           wcdma_r3_fall;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            pa_compensate_up_r2;
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            pa_compensate_down_r2;
//  /* Gain Compensation at 3 ---> 2 state transition */
//  int16                                            pa_compensate_up_r3;
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            pa_compensate_down_r3;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            wcdma_prach_r2_rise_offset;
//  /* Gain Compensation at 3 ---> 2 state transition */
//  int16                                            wcdma_prach_r2_fall_offset;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_prach_r3_rise_offset;
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_prach_r3_fall_offset;
//  /* Power switch from 2 --> 3 state */
//  int8                                             wcdma_pa_range_map[4];
//  /* Tx Linearizer in PA Range state 2 */
//  uint16                                           wcdma_1900_tx_lin_master_2[NV_WCDMA_TX_LIN_MASTER_SIZ];
//  /* Tx Linearizer in PA Range state 3 */
//  uint16                                           wcdma_1900_tx_lin_master_3[NV_WCDMA_TX_LIN_MASTER_SIZ];
//  /* Power switch from 3 --> 2 state */
//  int8                                             wcdma_1900_tx_comp_vs_freq_2[NV_FREQ_TABLE_SIZ];
//  /* Tx Frequency Compensation in state 3 */
//  int8                                             wcdma_1900_tx_comp_vs_freq_3[NV_FREQ_TABLE_SIZ];
//  /* TxLin Comp over temp in state 2 */
//  int8                                             wcdma_1900_tx_lin_vs_temp_2[NV_TEMP_TABLE_SIZ];
//  /* TxLin Comp over temp in state 3 */
//  int8                                             wcdma_1900_tx_lin_vs_temp_3[NV_TEMP_TABLE_SIZ];
//  /* TxLin Slope Comp over temp in state 2 */
//  int8                                             wcdma_1900_tx_slp_vs_temp_2[NV_TEMP_TABLE_SIZ];
//  /* TxLin Slope Comp over temp in state 3 */
//  int8                                             wcdma_1900_tx_slp_vs_temp_3[NV_TEMP_TABLE_SIZ];
//  /* Power switch from 2 --> 1 state */
//  uint16                                           wcdma_1900_r2_rise;
//  /* Power switch from 1 --> 2 state */
//  uint16                                           wcdma_1900_r2_fall;
//  /* Power switch from 3 --> 2 state */
//  uint16                                           wcdma_1900_r3_rise;
//  /* Power switch from 2 --> 3 state */
//  uint16                                           wcdma_1900_r3_fall;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            wcdma_1900_pa_compensate_up_r2;
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            wcdma_1900_pa_compensate_down_r2;
//  /* Gain Compensation at 3 ---> 2 state transition */
//  int16                                            wcdma_1900_pa_compensate_up_r3;
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            wcdma_1900_pa_compensate_down_r3;
//  /* Tx Frequency Compensation in State 2 */
//  uint16                                           wcdma_1900_tx_rot_angle_pa_state_00;
//  /* Tx Frequency Compensation in state 3 */
//  uint16                                           wcdma_1900_tx_rot_angle_pa_state_01;
//  /* Tx Linearizer in PA Range state 2 */
//  uint16                                           wcdma_1900_tx_rot_angle_pa_state_10;
//  /* Tx Linearizer in PA Range state 3 */
//  uint16                                           wcdma_1900_tx_rot_angle_pa_state_11;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            wcdma_1900_prach_r2_rise_offset;
//  /* Gain Compensation at 3 ---> 2 state transition */
//  int16                                            wcdma_1900_prach_r2_fall_offset;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_1900_prach_r3_rise_offset;
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_1900_prach_r3_fall_offset;
//  /* Power switch from 2 --> 3 state */
//  int8                                             wcdma_1900_pa_range_map[4];
//  /* Tx Linearizer in PA Range state 2 */
//  uint16                                           wcdma_800_tx_lin_master_2[NV_WCDMA_TX_LIN_MASTER_SIZ];
//  /* Tx Linearizer in PA Range state 3 */
//  uint16                                           wcdma_800_tx_lin_master_3[NV_WCDMA_TX_LIN_MASTER_SIZ];
//  /* Power switch from 3 --> 2 state */
//  int8                                             wcdma_800_tx_comp_vs_freq_2[NV_FREQ_TABLE_SIZ];
//  /* Tx Frequency Compensation in state 3 */
//  int8                                             wcdma_800_tx_comp_vs_freq_3[NV_FREQ_TABLE_SIZ];
//  /* TxLin Comp over temp in state 2 */
//  int8                                             wcdma_800_tx_lin_vs_temp_2[NV_TEMP_TABLE_SIZ];
//  /* TxLin Comp over temp in state 3 */
//  int8                                             wcdma_800_tx_lin_vs_temp_3[NV_TEMP_TABLE_SIZ];
//  /* TxLin Slope Comp over temp in state 2 */
//  int8                                             wcdma_800_tx_slp_vs_temp_2[NV_TEMP_TABLE_SIZ];
//  /* TxLin Slope Comp over temp in state 3 */
//  int8                                             wcdma_800_tx_slp_vs_temp_3[NV_TEMP_TABLE_SIZ];
//  /* Power switch from 2 --> 1 state */
//  uint16                                           wcdma_800_r2_rise;
//  /* Power switch from 1 --> 2 state */
//  uint16                                           wcdma_800_r2_fall;
//  /* Power switch from 3 --> 2 state */
//  uint16                                           wcdma_800_r3_rise;
//  /* Power switch from 2 --> 3 state */
//  uint16                                           wcdma_800_r3_fall;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            wcdma_800_pa_compensate_up_r2;
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            wcdma_800_pa_compensate_down_r2;
//  /* Gain Compensation at 3 ---> 2 state transition */
//  int16                                            wcdma_800_pa_compensate_up_r3;
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            wcdma_800_pa_compensate_down_r3;
//  /* Tx Frequency Compensation in State 2 */
//  uint16                                           wcdma_800_tx_rot_angle_pa_state_00;
//  /* Tx Frequency Compensation in state 3 */
//  uint16                                           wcdma_800_tx_rot_angle_pa_state_01;
//  /* Tx Linearizer in PA Range state 2 */
//  uint16                                           wcdma_800_tx_rot_angle_pa_state_10;
//  /* Tx Linearizer in PA Range state 3 */
//  uint16                                           wcdma_800_tx_rot_angle_pa_state_11;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            wcdma_800_prach_r2_rise_offset;
//  /* Gain Compensation at 3 ---> 2 state transition */
//  int16                                            wcdma_800_prach_r2_fall_offset;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_800_prach_r3_rise_offset;
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_800_prach_r3_fall_offset;
//  /* Power switch from 2 --> 3 state */
//  int8                                             wcdma_800_pa_range_map[4];
//  /* Band Class 0 VCO coarse tuning item */
//  uint8                                            bc0_vco_coarse_tune_2;
//  /* Band Class 1 VCO coarse tuning item */
//  uint8                                            bc1_vco_coarse_tune_2;
//  /* Band Class 3 VCO coarse tuning item */
//  uint8                                            bc3_vco_coarse_tune_2;
//  /* Band Class 4 VCO coarse tuning item */
//  uint8                                            bc4_vco_coarse_tune_2;
//  /* Band Class 5 VCO coarse tuning item */
//  uint8                                            bc5_vco_coarse_tune_2;
//  /* Band Class 6 VCO coarse tuning item */
//  uint8                                            bc6_vco_coarse_tune_2;
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_00[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_01[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_02[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_03[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_04[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_05[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_06[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_07[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_08[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_09[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_10[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_00[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_01[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_02[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_03[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_04[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_05[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_06[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_07[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_08[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_09[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_10[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prdi_11[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_00[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_01[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_02[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_03[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_04[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_05[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_06[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_07[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_08[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_09[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_10[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_11[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prui_12[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_00[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_01[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_02[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_03[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_04[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_05[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_06[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_07[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_08[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_09[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_10[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_11[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            dcs_prdi_12[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_00[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_01[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_02[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_03[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_04[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_05[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_06[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_07[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_08[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_09[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_10[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_11[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prui_12[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_02[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_03[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_04[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_05[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_06[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_07[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_09[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_10[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tl_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tl_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tl_brui_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tl_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tl_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tl_brdi_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tl_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tl_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tl_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tl_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tl_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tl_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tl_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tl_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tl_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tl_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tl_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tl_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tl_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tl_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tl_brui_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tl_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tl_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tl_brdi_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tl_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tl_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tl_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tl_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tl_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tl_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tl_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tl_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tl_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tl_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tl_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tl_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tl_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tl_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tl_brui_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tl_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tl_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tl_brdi_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tl_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tl_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tl_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tl_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tl_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tl_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tl_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tl_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tl_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tl_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tl_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tl_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tm_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tm_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tm_brui_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tm_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tm_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_tm_brdi_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tm_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tm_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tm_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tm_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tm_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_tm_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tm_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tm_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tm_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tm_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tm_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_tm_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tm_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tm_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tm_brui_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tm_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tm_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_tm_brdi_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tm_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tm_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tm_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tm_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tm_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_tm_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tm_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tm_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tm_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tm_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tm_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_tm_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tm_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tm_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tm_brui_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tm_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tm_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_tm_brdi_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tm_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tm_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tm_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tm_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tm_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_tm_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tm_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tm_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tm_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tm_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tm_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_tm_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_th_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_th_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_th_brui_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_th_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_th_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vl_th_brdi_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_th_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_th_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_th_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_th_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_th_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vl_th_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_th_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_th_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_th_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_th_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_th_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vl_th_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_th_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_th_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_th_brui_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_th_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_th_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vm_th_brdi_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_th_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_th_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_th_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_th_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_th_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vm_th_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_th_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_th_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_th_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_th_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_th_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vm_th_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_th_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_th_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_th_brui_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_th_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_th_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_vh_th_brdi_12[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_th_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_th_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_th_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_th_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_th_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           dcs_vh_th_brdi_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_th_brui_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_th_brui_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_th_brui_13[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_th_brdi_15[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_th_brdi_14[30];
//  /* Burst Ramp Index, DAC vs Time */
//  uint16                                           gsm_1900_vh_th_brdi_13[30];
//  /* GSM External Antenna Tx Freq. Comp. Replaces NV_GSM_TX_FREQ_COMP_I */
//  int8                                             gsm_c0_tx_freq_comp[8];
//  /* DCS External Antenna Tx Freq Comp. Replaces NV_DCS_TX_FREQ_COMP_I */
//  int8                                             dcs_c0_tx_freq_comp[8];
//  /* GSM1900 Extern. Antenna Tx Freq. Comp. Replaces NV_GSM1900_TX_FREQ_C_I */
//  int8                                             gsm_1900_c0_tx_freq_comp[8];
//  /* GSM Internal Antenna Tx Freq Comp. */
//  int8                                             gsm_c1_tx_freq_comp[8];
//  /* DCS Internal Antenna Tx Freq Comp. */
//  int8                                             dcs_c1_tx_freq_comp[8];
//  /* GSM1900 Internal Antenna Tx Freq. Comp. */
//  int8                                             gsm1900_c1_tx_freq_comp[8];
//  /* Index of each Element (0-14) corresponds to a PCL (Ex. index 0 = PCL0) */
//  uint8                                            gsm_enable_tx_freq_comp_vs_pcl[15];
//  /* Index of each element (0-15) corresponds to a PCL (Ex. Index 0 = PCL0) */
//  uint8                                            dcs_enable_tx_freq_comp_vs_pcl[16];
//  /* Index of each element (0-15) corresponds to a PCL (Ex. index0=PCL0) */
//  uint8                                            gsm_1900_enable_tx_freq_comp_vs_pcl[16];
//  /* holds 2 nos. which determine which of 3 temp. ranges ph. is operating */
//  uint8                                            therm_comp_thresholds[2];
//  /* holds 2  nos. which determine the temperature ranges ph. is operating  */
//  uint8                                            vbatt_comp_thresholds[2];
//  /* WCDMA External Antenna TX Gain 0 frequency compensation */
//  int8                                             wcdma_c0_tx_comp_vs_freq_0[16];
//  /* WCDMA External Antenna TX Gain 1 frequency compensation */
//  int8                                             wcdma_c0_tx_comp_vs_freq_1[16];
//  /* WCDMA Internal Antenna TX Gain 0 frequency compensation */
//  int8                                             wcdma_c1_tx_comp_vs_freq_0[16];
//  /* WCDMA Internal Antenna TX Gain 1 frequency compensation */
//  int8                                             wcdma_c1_tx_comp_vs_freq_1[16];
//  /* WCDMA LIMIT VS TEMP for Low Voltage.  Offset factors in 1/12dB units ( */
//  int8                                             wcdma_tx_lim_vs_volt_offset[3];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tl_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tl_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tl_prui_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tl_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tl_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tl_prdi_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tl_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tl_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tl_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tl_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tl_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tl_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tl_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tl_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tl_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tl_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tl_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tl_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tl_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tl_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tl_prui_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tl_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tl_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tl_prdi_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tl_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tl_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tl_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tl_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tl_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tl_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tl_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tl_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tl_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tl_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tl_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tl_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tl_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tl_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tl_prui_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tl_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tl_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tl_prdi_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tl_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tl_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tl_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tl_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tl_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tl_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tl_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tl_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tl_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tl_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tl_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tl_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tm_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tm_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tm_prui_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tm_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tm_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_tm_prdi_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tm_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tm_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tm_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tm_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tm_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_tm_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tm_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tm_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tm_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tm_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tm_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_tm_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tm_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tm_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tm_prui_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tm_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tm_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_tm_prdi_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tm_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tm_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tm_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tm_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tm_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_tm_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tm_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tm_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tm_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tm_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tm_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_tm_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tm_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tm_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tm_prui_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tm_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tm_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_tm_prdi_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tm_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tm_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tm_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tm_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tm_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_tm_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tm_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tm_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tm_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tm_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tm_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_tm_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_th_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_th_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_th_prui_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_th_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_th_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vl_th_prdi_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_th_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_th_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_th_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_th_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_th_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vl_th_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_th_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_th_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_th_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_th_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_th_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vl_th_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_th_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_th_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_th_prui_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_th_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_th_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vm_th_prdi_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_th_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_th_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_th_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_th_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_th_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vm_th_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_th_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_th_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_th_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_th_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_th_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vm_th_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_th_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_th_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_th_prui_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_th_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_th_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_vh_th_prdi_12[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_th_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_th_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_th_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_th_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_th_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            dcs_vh_th_prdi_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_th_prui_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_th_prui_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_th_prui_13[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_th_prdi_15[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_th_prdi_14[30];
//  /* Power Ramp Index, dBm vs. Time */
//  uint8                                            gsm_1900_vh_th_prdi_13[30];
//  /* section 1 of the 512 byte factory data storage area */
//  uint8                                            factory_data_1[128];
//  /* section 2 of the 512 byte factory data storage area */
//  uint8                                            factory_data_2[128];
//  /* section 3 of the 512 byte factory data storage area */
//  uint8                                            factory_data_3[128];
//  /* section 4 of the 512 byte factory data storage area */
//  uint8                                            factory_data_4[128];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_prui_11[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_00[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_01[30];
//  /* Power Ramp Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_11[30];
//  /* Power Ram Index. dBm vs Time */
//  uint8                                            gsm_1900_prdi_08[30];
//  /* Appendix 5 Prefs */
//  nv_appx5_pref_type                               appx5_pref;
//  /* WLAN Network Selection Mode preference */
//  nv_wlan_net_sel_mode_pref_type                   wlan_net_sel_mode_pref;
//  /* Indicates the support for EDGE by the phone */
//  boolean                                          edge_feature_support;
//  /* Indicates the multislot class supported by the EDGE MS */
//  boolean                                          edge_multislot_class;
//  /* Indicates if 8PSK modulation in uplink is supported by the MS */
//  uint8                                            edge_8psk_power_class;
//  /* Power class of the MS if 8PSK modulation in uplink is also supported */
//  uint8                                            edge_8psk_power_capability;
//  /* Indicates if the EDGE MS supports N/W assisted cell change */
//  uint8                                            geran_feature_pack_1;
//  /* Max. Power for GSM_900 AMAM Table */
//  int16                                            gsm_amam_max_pwr;
//  /* Min. Power for GSM_900 AMAM Table */
//  int16                                            gsm_amam_min_pwr;
//  /* Max. Power for DCS_1800 AMAM Table */
//  int16                                            dcs_amam_max_pwr;
//  /* Min. Power for DCS_1800 AMAM Table */
//  int16                                            dcs_amam_min_pwr;
//  /* Max. Power for GSM_850 AMAM Table */
//  int16                                            gsm_850_amam_max_pwr;
//  /* Min. Power for GSM_850 AMAM Table */
//  int16                                            gsm_850_amam_min_pwr;
//  /* Max. Power for GSM_1900 AMAM Table */
//  int16                                            gsm_1900_amam_max_pwr;
//  /* Min. Power for GSM_1900 AMAM table */
//  int16                                            gsm_1900_amam_min_pwr;
//  /* GSM_900 AMAM Master Table Segment1 at Freq. F1 */
//  uint16                                           gsm_amam_master_tbl_seg1_f1[64];
//  /* GSM_900 AMAM Master Table Segment2 at Freq. F1 */
//  uint16                                           gsm_amam_master_tbl_seg2_f1[64];
//  /* GSM_900 AMAM Master Table Segment3 at Freq. F1 */
//  uint16                                           gsm_amam_master_tbl_seg3_f1[64];
//  /* GSM_900 AMAM Master Table Segment4 at Freq. F1 */
//  uint16                                           gsm_amam_master_tbl_seg4_f1[64];
//  /* GSM_900 AMAM Master Table Segment5 at Freq. F1 */
//  uint16                                           gsm_amam_master_tbl_seg5_f1[64];
//  /* GSM_900 AMAM Master Table Segment6 at Freq. F1 */
//  uint16                                           gsm_amam_master_tbl_seg6_f1[64];
//  /* GSM_900 AMAM Master Table Segment7 at Freq. F1 */
//  uint16                                           gsm_amam_master_tbl_seg7_f1[64];
//  /* GSM_900 AMAM Master Table Segment8 at Freq. F1 */
//  uint16                                           gsm_amam_master_tbl_seg8_f1[64];
//  /* DCS_1800 AMAM Master Table Segment1 at Freq. F1 */
//  uint16                                           dcs_amam_master_tbl_seg1_f1[64];
//  /* DCS_1800 AMAM Master Table Segment2 at Freq. F1 */
//  uint16                                           dcs_amam_master_tbl_seg2_f1[64];
//  /* DCS_1800 AMAM Master Table Segment3 at Freq. F1 */
//  uint16                                           dcs_amam_master_tbl_seg3_f1[64];
//  /* DCS_1800 AMAM Master Table Segment4 at Freq. F1 */
//  uint16                                           dcs_amam_master_tbl_seg4_f1[64];
//  /* DCS_1800 AMAM Master Table Segment5 at Freq. F1 */
//  uint16                                           dcs_amam_master_tbl_seg5_f1[64];
//  /* DCS_1800 AMAM Master Table Segment6 at Freq. F1 */
//  uint16                                           dcs_amam_master_tbl_seg6_f1[64];
//  /* DCS_1800 AMAM Master Table Segment7 at Freq. F1 */
//  uint16                                           dcs_amam_master_tbl_seg7_f1[64];
//  /* DCS_1800 AMAM Master Table Segment8 at Freq. F1 */
//  uint16                                           dcs_amam_master_tbl_seg8_f1[64];
//  /* GSM_850 AMAM Master Table Segment1 at Freq. F1 */
//  uint16                                           gsm_850_amam_master_tbl_seg1_f1[64];
//  /* GSM_850 AMAM Master Table Segment2 at Freq. F1 */
//  uint16                                           gsm_850_amam_master_tbl_seg2_f1[64];
//  /* GSM_850 AMAM Master Table Segment3 at Freq. F1 */
//  uint16                                           gsm_850_amam_master_tbl_seg3_f1[64];
//  /* GSM_850 AMAM Master Table Segment4 at Freq. F1 */
//  uint16                                           gsm_850_amam_master_tbl_seg4_f1[64];
//  /* GSM_850 AMAM Master Table Segment5 at Freq. F1 */
//  uint16                                           gsm_850_amam_master_tbl_seg5_f1[64];
//  /* GSM_850 AMAM Master Table Segment6 at Freq.F1 */
//  uint16                                           gsm_850_amam_master_tbl_seg6_f1[64];
//  /* GSM_850 AMAM Master Table Segment7 at Freq. F1 */
//  uint16                                           gsm_850_amam_master_tbl_seg7_f1[64];
//  /* GSM_850 AMAM Master Table Segment8 at Freq. F1 */
//  uint16                                           gsm_850_amam_master_tbl_seg8_f1[64];
//  /* GSM_1900 AMAM Master Table Segment1 at Freq. F1 */
//  uint16                                           gsm_1900_amam_master_tbl_seg1_f1[64];
//  /* GSM_1900 AMAM Master Table Segment2 at Freq. F1 */
//  uint16                                           gsm_1900_amam_master_tbl_seg2_f1[64];
//  /* GSM_1900 AMAM Master Table Segment3 at Freq. F1 */
//  uint16                                           gsm_1900_amam_master_tbl_seg3_f1[64];
//  /* GSM_1900 AMAM Master Table Segment4 at Freq. F1 */
//  uint16                                           gsm_1900_amam_master_tbl_seg4_f1[64];
//  /* GSM_1900 AMAM Master Table Segment5 at Freq. F1 */
//  uint16                                           gsm_1900_amam_master_tbl_seg5_f1[64];
//  /* GSM_1900 AMAM Master Table Segment6 at Freq. F1 */
//  uint16                                           gsm_1900_amam_master_tbl_seg6_f1[64];
//  /* GSM_1900 AMAM Master Table Segment7 at Freq. F1 */
//  uint16                                           gsm_1900_amam_master_tbl_seg7_f1[64];
//  /* GSM_1900 AMAM Master Table Segment8 at Freq. F1 */
//  uint16                                           gsm_1900_amam_master_tbl_seg8_f1[64];
//  /* GSM_900 AMAM Master Table Segment1 at Freq. F2 */
//  uint16                                           gsm_amam_master_tbl_seg1_f2[64];
//  /* GSM_900 AMAM Master Table Segment2 at Freq. F2 */
//  uint16                                           gsm_amam_master_tbl_seg2_f2[64];
//  /* GSM_900 AMAM Master Table Segment3 at Freq. F2 */
//  uint16                                           gsm_amam_master_tbl_seg3_f2[64];
//  /* GSM_900 AMAM Master Table Segment4 at Freq. F2 */
//  uint16                                           gsm_amam_master_tbl_seg4_f2[64];
//  /* GSM_900 AMAM Master table Segment5 at Freq. F2 */
//  uint16                                           gsm_amam_master_tbl_seg5_f2[64];
//  /* GSM_900 AMAM Master Table Segment6 at Freq. F2 */
//  uint16                                           gsm_amam_master_tbl_seg6_f2[64];
//  /* GSM_900 AMAM Master Table Segment7 at Freq. F2 */
//  uint16                                           gsm_amam_master_tbl_seg7_f2[64];
//  /* GSM_900 AMAM Master Table Segment8 at Freq. F2 */
//  uint16                                           gsm_amam_master_tbl_seg8_f2[64];
//  /* DCS_1800 AMAM Master Table Segment1 at Freq. F2 */
//  uint16                                           dcs_amam_master_tbl_seg1_f2[64];
//  /* DCS_1800 AMAM Master Table Segment2 at Freq. F2 */
//  uint16                                           dcs_amam_master_tbl_seg2_f2[64];
//  /* DCS_1800 AMAM Master Table Segment3 at Freq. F2 */
//  uint16                                           dcs_amam_master_tbl_seg3_f2[64];
//  /* DCS_1800 AMAM Master Table Segment4 at Freq. F2 */
//  uint16                                           dcs_amam_master_tbl_seg4_f2[64];
//  /* DCS_1800 AMAM Master Table Segment5 at Freq. F2 */
//  uint16                                           dcs_amam_master_tbl_seg5_f2[64];
//  /* DCS_1800 AMAM Master Table Segment6 at Freq. F2 */
//  uint16                                           dcs_amam_master_tbl_seg6_f2[64];
//  /* DCS_1800 AMAM Master Table Segment7 at Freq. F2 */
//  uint16                                           dcs_amam_master_tbl_seg7_f2[64];
//  /* DCS_1800 AMAM Master Table Segment8 at Freq. F2 */
//  uint16                                           dcs_amam_master_tbl_seg8_f2[64];
//  /* GSM_850 AMAM Master Table Segment1 at Freq. F2 */
//  uint16                                           gsm_850_amam_master_tbl_seg1_f2[64];
//  /* GSM_850 AMAM Master Table Segment2 at Freq. F2 */
//  uint16                                           gsm_850_amam_master_tbl_seg2_f2[64];
//  /* GSM_850 AMAM Master Table Segment3 at Freq. F2 */
//  uint16                                           gsm_850_amam_master_tbl_seg3_f2[64];
//  /* GSM_850 AMAM Master Table Segment4 at Freq. F2 */
//  uint16                                           gsm_850_amam_master_tbl_seg4_f2[64];
//  /* GSM_850 AMAM Master Table Segment5 at Freq. F2 */
//  uint16                                           gsm_850_amam_master_tbl_seg5_f2[64];
//  /* GSM_850 AMAM Master Table Segment6 at Freq. F2 */
//  uint16                                           gsm_850_amam_master_tbl_seg6_f2[64];
//  /* GSM_850 AMAM Master Table Segment7 at Freq. F2 */
//  uint16                                           gsm_850_amam_master_tbl_seg7_f2[64];
//  /* GSM_850 AMAM Master Table Segment8 at Freq. F2 */
//  uint16                                           gsm_850_amam_master_tbl_seg8_f2[64];
//  /* GSM_1900 AMAM Master Table Segment1 at Freq. F2 */
//  uint16                                           gsm_1900_amam_master_tbl_seg1_f2[64];
//  /* GSM_1900 AMAM Master Table Segment2 at Freq. F2 */
//  uint16                                           gsm_1900_amam_master_tbl_seg2_f2[64];
//  /* GSM_1900 AMAM Master Table Segment3 at Freq. F2 */
//  uint16                                           gsm_1900_amam_master_tbl_seg3_f2[64];
//  /* GSM_1900 AMAM Master Table Segment4 at Freq. F2 */
//  uint16                                           gsm_1900_amam_master_tbl_seg4_f2[64];
//  /* GSM_1900 AMAM Master Table Segment5 at Freq. F2 */
//  uint16                                           gsm_1900_amam_master_tbl_seg5_f2[64];
//  /* GSM_1900 AMAM Master Table Segment6 at Freq. F2 */
//  uint16                                           gsm_1900_amam_master_tbl_seg6_f2[64];
//  /* GSM_1900 AMAM Master Table Segment7 at Freq. F2 */
//  uint16                                           gsm_1900_amam_master_tbl_seg7_f2[64];
//  /* GSM_1900 AMAM Master Table Segment8 at Freq. F2 */
//  uint16                                           gsm_1900_amam_master_tbl_seg8_f2[64];
//  /* GSM_900 AMPM Master Table Segment1 at Freq. F1 */
//  uint32                                           gsm_ampm_master_tbl_seg1_f1[32];
//  /* GSM_900 AMPM Master Table Segment2 at Freq. F1 */
//  uint32                                           gsm_ampm_master_tbl_seg2_f1[32];
//  /* GSM_900 AMPM Master Table Segment3 at Freq. F1 */
//  uint32                                           gsm_ampm_master_tbl_seg3_f1[32];
//  /* GSM_900 AMPM Master Table Segment4 at Freq. F1 */
//  uint32                                           gsm_ampm_master_tbl_seg4_f1[32];
//  /* GSM_900 AMPM Master Table Segment5 at Freq. F1 */
//  uint32                                           gsm_ampm_master_tbl_seg5_f1[32];
//  /* GSM_900 AMPM Master Table Segment6 at Freq. F1 */
//  uint32                                           gsm_ampm_master_tbl_seg6_f1[32];
//  /* GSM_900 AMPM Master Table Segment7 at Freq. F1 */
//  uint32                                           gsm_ampm_master_tbl_seg7_f1[32];
//  /* GSM_900 AMPM Master Table Segment8 at Freq. F1 */
//  uint32                                           gsm_ampm_master_tbl_seg8_f1[32];
//  /* DCS_1800 AMPM Master Table Segment1 at Freq. F1 */
//  uint32                                           dcs_ampm_master_tbl_seg1_f1[32];
//  /* DCS_1800 AMPM Master Table Segment2 at Freq. F2 */
//  uint32                                           dcs_ampm_master_tbl_seg2_f1[32];
//  /* DCS_1800 AMPM Master Table Segment3 at Freq. F1 */
//  uint32                                           dcs_ampm_master_tbl_seg3_f1[32];
//  /* DCS_1800 AMPM Master Table Segment4 at Freq. F1 */
//  uint32                                           dcs_ampm_master_tbl_seg4_f1[32];
//  /* DCS_1800 AMPM Master Table Segment5 at Freq. F1 */
//  uint32                                           dcs_ampm_master_tbl_seg5_f1[32];
//  /* DCS_1800 AMPM Master Table Segment6 at Freq. F1 */
//  uint32                                           dcs_ampm_master_tbl_seg6_f1[32];
//  /* DCS_1800 AMPM Master Table Segment7 at Freq. F1 */
//  uint32                                           dcs_ampm_master_tbl_seg7_f1[32];
//  /* DCS_1800 AMPM Master Table Segment8 at Freq. F1 */
//  uint32                                           dcs_ampm_master_tbl_seg8_f1[32];
//  /* GSM_850 AMPM Master Table Segment1 at Freq. F1 */
//  uint32                                           gsm_850_ampm_master_tbl_seg1_f1[32];
//  /* GSM_850 AMPM Master Table Segment2 at Freq. F1 */
//  uint32                                           gsm_850_ampm_master_tbl_seg2_f1[32];
//  /* GSM_850 AMPM Master Table Segment3 at Freq. F1 */
//  uint32                                           gsm_850_ampm_master_tbl_seg3_f1[32];
//  /* GSM_850 AMPM Master Table Segment4 at Freq. F1 */
//  uint32                                           gsm_850_ampm_master_tbl_seg4_f1[32];
//  /* GSM_850 AMPM Master Table Segment5 at Freq. F1 */
//  uint32                                           gsm_850_ampm_master_tbl_seg5_f1[32];
//  /* GSM_850 AMPM Master Table Segment6 at Freq. F1 */
//  uint32                                           gsm_850_ampm_master_tbl_seg6_f1[32];
//  /* GSM_850 AMPM Master Table Segment7 at Freq. F1 */
//  uint32                                           gsm_850_ampm_master_tbl_seg7_f1[32];
//  /* GSM_850 AMPM Master Table Segment8 at Freq. F1 */
//  uint32                                           gsm_850_ampm_master_tbl_seg8_f1[32];
//  /* GSM_1900 AMPM Master Table Segment1 at Freq. F1 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg1_f1[32];
//  /* GSM_1900 AMPM Master Table Segment2 at Freq. F1 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg2_f1[32];
//  /* GSM_1900 AMPM Master Table Segment3 at Freq. F1 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg3_f1[32];
//  /* GSM_1900 AMPM Master Table Segment4 at Freq. F1 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg4_f1[32];
//  /* GSM_1900 AMPM Master Table Segment5 at Freq. F1 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg5_f1[32];
//  /* GSM_1900 AMPM Master Table Segment6 at Freq. F1 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg6_f1[32];
//  /* GSM_1900 AMPM Master Table Segment7 at Freq. F1 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg7_f1[32];
//  /* GSM_1900 AMPM Master Table Segment8 at Freq. F1 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg8_f1[32];
//  /* GSM_900 AMPM Master Table Segment1 at Freq. F2 */
//  uint32                                           gsm_ampm_master_tbl_seg1_f2[32];
//  /* GSM_900 AMPM Master Table Segment2 at Freq. F2 */
//  uint32                                           gsm_ampm_master_tbl_seg2_f2[32];
//  /* GSM_900 AMPM Master Table Segment3 at Freq. F2 */
//  uint32                                           gsm_ampm_master_tbl_seg3_f2[32];
//  /* GSM_900 AMPM Master Table Segment4 at Freq. F2 */
//  uint32                                           gsm_ampm_master_tbl_seg4_f2[32];
//  /* GSM_900 AMPM Master Table Segment5 at Freq. F2 */
//  uint32                                           gsm_ampm_master_tbl_seg5_f2[32];
//  /* GSM_900 AMPM Master Table Segment6 at Freq. F2 */
//  uint32                                           gsm_ampm_master_tbl_seg6_f2[32];
//  /* GSM_900 AMPM Master Table Segment7 at Freq. F2 */
//  uint32                                           gsm_ampm_master_tbl_seg7_f2[32];
//  /* GSM_900 AMPM Master Table Segment8 at Freq. F2 */
//  uint32                                           gsm_ampm_master_tbl_seg8_f2[32];
//  /* DCS_1800 AMPM Master Table Segment1 at Freq. F2 */
//  uint32                                           dcs_ampm_master_tbl_seg1_f2[32];
//  /* DCS_1800 AMPM Master Table Segment2 at Freq. F2 */
//  uint32                                           dcs_ampm_master_tbl_seg2_f2[32];
//  /* DCS_1800 AMPM Master Table Segment3 at Freq. F2 */
//  uint32                                           dcs_ampm_master_tbl_seg3_f2[32];
//  /* DCS_1800 AMPM Master Table Segment4 at Freq. F2 */
//  uint32                                           dcs_ampm_master_tbl_seg4_f2[32];
//  /* DCS_1800 AMPM Master Table Segment5 at Freq. F2 */
//  uint32                                           dcs_ampm_master_tbl_seg5_f2[32];
//  /* DCS_1800 AMPM Master Table Segment6 at Freq. F2 */
//  uint32                                           dcs_ampm_master_tbl_seg6_f2[32];
//  /* DCS_1800 AMPM Master Table Segment7 at Freq. F2 */
//  uint32                                           dcs_ampm_master_tbl_seg7_f2[32];
//  /* DCS_1800 AMPM Master Table Segment8 at Freq. F2 */
//  uint32                                           dcs_ampm_master_tbl_seg8_f2[32];
//  /* GSM_850 AMPM Master Table Segment1 at Freq. F2 */
//  uint32                                           gsm_850_ampm_master_tbl_seg1_f2[32];
//  /* GSM_850 AMPM Master Table Segment2 at Freq. F2 */
//  uint32                                           gsm_850_ampm_master_tbl_seg2_f2[32];
//  /* GSM_850 AMPM Master Table Segment3 at Freq. F2 */
//  uint32                                           gsm_850_ampm_master_tbl_seg3_f2[32];
//  /* GSM_850 AMPM Master Table Segment4 at Freq. F2 */
//  uint32                                           gsm_850_ampm_master_tbl_seg4_f2[32];
//  /* GSM_850 AMPM Master Table Segment5 at Freq. F2 */
//  uint32                                           gsm_850_ampm_master_tbl_seg5_f2[32];
//  /* GSM_850 AMPM Master Table Segment6 at Freq. F2 */
//  uint32                                           gsm_850_ampm_master_tbl_seg6_f2[32];
//  /* GSM_850 AMPM Master Table Segment7 at Freq. F2 */
//  uint32                                           gsm_850_ampm_master_tbl_seg7_f2[32];
//  /* GSM_850 AMPM Master Table Segment8 at Freq. F2 */
//  uint32                                           gsm_850_ampm_master_tbl_seg8_f2[32];
//  /* GSM_1900 AMPM Master Table Segment1 at Freq. F2 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg1_f2[32];
//  /* GSM_1900 AMPM Master Table Segment2 at Freq. F2 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg2_f2[32];
//  /* GSM_1900 AMPM Master Table Segment3 at Freq. F2 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg3_f2[32];
//  /* GSM_1900 AMPM Master Table Segment4 at Freq. F2 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg4_f2[32];
//  /* GSM_1900 AMPM Master Table Segment5 at Freq. F2 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg5_f2[32];
//  /* GSM_1900 AMPM Master Table Segment6 at Freq. F2 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg6_f2[32];
//  /* GSM_1900 AMPM Master Table Segment7 at Freq. F2 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg7_f2[32];
//  /* GSM_1900 AMPM Master Table Segment8 at Freq. F2 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg8_f2[32];
//  /* GSM_900 Calpath RSB_A value for Gain state 1 */
//  int16                                            gsm_calpath_rsb_a_g1;
//  /* GSM_900 Calpath RSB_B value for Gain state 1 */
//  int16                                            gsm_calpath_rsb_b_g1;
//  /* GSM_850 Calpath RSB_A value for Gain state 1 */
//  int16                                            gsm_850_calpath_rsb_a_g1;
//  /* GSM_850 Calpath RSB_B value for Gain state 1 */
//  int16                                            gsm_850_calpath_rsb_b_g1;
//  /* DCS_1800 Calpath RSB_A value for Gain state 1 */
//  int16                                            dcs_calpath_rsb_a_g1;
//  /* DCS_1800 Calpath RSB_B value for Gain state 1 */
//  int16                                            dcs_calpath_rsb_b_g1;
//  /* GSM_1900 Calpath RSB_A value for Gain state 1 */
//  int16                                            gsm_1900_calpath_rsb_a_g1;
//  /* GSM_1900 Calpath RSB_B value for Gain state 1 */
//  int16                                            gsm_1900_calpath_rsb_b_g1;
//  /* GSM_900 Calpath RSB_A value for Gain state 2 */
//  int16                                            gsm_calpath_rsb_a_g2;
//  /* GSM_900 Calpath RSB_B value for Gain state 2 */
//  int16                                            gsm_calpath_rsb_b_g2;
//  /* GSM_850 Calpath RSB_A value for Gain state 2 */
//  int16                                            gsm_850_calpath_rsb_a_g2;
//  /* GSM_850 Calpath RSB_B value for Gain state 2 */
//  int16                                            gsm_850_calpath_rsb_b_g2;
//  /* DCS_1800 Calpath RSB_A value for Gain state 2 */
//  int16                                            dcs_calpath_rsb_a_g2;
//  /* DCS_1800 Calpath RSB_B value for Gain state 2 */
//  int16                                            dcs_calpath_rsb_b_g2;
//  /* GSM_1900 Calpath RSB_A value for Gain state 2 */
//  int16                                            gsm_1900_calpath_rsb_a_g2;
//  /* GSM_1900 Calpath RSB_B value for Gain state 2 */
//  int16                                            gsm_1900_calpath_rsb_b_g2;
//  /* GSM_900 Gain in percent applied to AMAM table at low temp. */
//  int16                                            gsm_amam_gain_low_temp;
//  /* GSM_900 DC in percent applied to AMAM table at low temp. */
//  int16                                            gsm_amam_dc_low_temp;
//  /* GSM_900 Gain in percent applied to AMAM table at high temp. */
//  int16                                            gsm_amam_gain_high_temp;
//  /* GSM_900 DC in percent applied to AMAM table at high temp. */
//  int16                                            gsm_amam_dc_high_temp;
//  /* GSM_900 Gain in percent applied to AMAM table at nominal temp. */
//  int16                                            gsm_amam_gain_nom_temp;
//  /* GSM_900 DC in percent applied to AMAM table at nominal temp. */
//  int16                                            gsm_amam_dc_nom_temp;
//  /* GSM_850 Gain in percent applied to AMAM table at low temp. */
//  int16                                            gsm_850_amam_gain_low_temp;
//  /* GSM_850 DC in percent applied to AMAM table at low temp. */
//  int16                                            gsm_850_amam_dc_low_temp;
//  /* GSM_850 Gain in percent applied to AMAM table at high temp. */
//  int16                                            gsm_850_amam_gain_high_temp;
//  /* GSM_850 DC in percent applied to AMAM table at high temp. */
//  int16                                            gsm_850_amam_dc_high_temp;
//  /* GSM_850 Gain in percent applied to AMAM table at nominal temp. */
//  int16                                            gsm_850_amam_gain_nom_temp;
//  /* GSM_850 DC in percent applied to AMAM table at nominal temp. */
//  int16                                            gsm_850_amam_dc_nom_temp;
//  /* DCS_1800 Gain in percent applied to AMAM table at low temp. */
//  int16                                            dcs_amam_gain_low_temp;
//  /* DCS_1800 DC in percent applied to AMAM table at low temp. */
//  int16                                            dcs_amam_dc_low_temp;
//  /* DCS_1800 Gain in percent applied to AMAM table at high temp. */
//  int16                                            dcs_amam_gain_high_temp;
//  /* DCS_1800 DC in percent applied to AMAM table at high temp. */
//  int16                                            dcs_amam_dc_high_temp;
//  /* DCS_1800 Gain in percent applied to AMAM table at nominal temp. */
//  int16                                            dcs_amam_gain_nom_temp;
//  /* DCS_1800 DC in percent applied to AMAM table at nominal temp. */
//  int16                                            dcs_amam_dc_nom_temp;
//  /* GSM_1900 Gain in percent applied to AMAM table at low temp. */
//  int16                                            gsm_1900_amam_gain_low_temp;
//  /* GSM_1900 DC in percent applied to AMAM table at low temp. */
//  int16                                            gsm_1900_amam_dc_low_temp;
//  /* GSM_1900 Gain in percent applied to AMAM table at high temp. */
//  int16                                            gsm_1900_amam_gain_high_temp;
//  /* GSM_1900 DC in percent applied to AMAM table at high temp. */
//  int16                                            gsm_1900_amam_dc_high_temp;
//  /* GSM_1900 Gain in percent applied to AMAM table at nominal temp. */
//  int16                                            gsm_1900_amam_gain_nom_temp;
//  /* GSM_1900 DC in percent applied to AMAM table at nominal temp. */
//  int16                                            gsm_1900_amam_dc_nom_temp;
//  /* GSM_900 Reference ARFCNs for AMAM and AMPM Calibration */
//  uint16                                           gsm_amam_arfcn[2];
//  /* DCS_1800 Reference ARFCNs for AMAM and AMPM Calibration */
//  uint16                                           dcs_amam_arfcn[2];
//  /* GSM_850 Reference ARFCNs for AMAM and AMPM Calibration */
//  uint16                                           gsm_850_amam_arfcn[2];
//  /* GSM_1900 Reference ARFCNs for AMAM and AMPM Calibration */
//  uint16                                           gsm_1900_amam_arfcn[2];
//  /* Count of abnormal exits from software  */
//  uint32                                           abnormal_exit_count;
//  /* Sirius specific debug screen information  1 */
//  uint8                                            sys_struct_fct_file_name[33];
//  /* Sirius specific debug screen information 2 */
//  uint32                                           sys_struct_fct_file_xsum;
//  /* Sirius specific debug screen information 3 */
//  uint8                                            sys_custom_ini_file_name[33];
//  /* Sirius specific debug screen information 4 */
//  uint32                                           sys_custom_ini_file_xsum;
//  /* Sirius specific debug screen information 5 */
//  int16                                            sys_std_map_file_ver;
//  /* Sirius specific debug screen information 6 */
//  uint32                                           sys_std_map_file_xsum;
//  /* Sirius specific debug screen information 7 */
//  uint16                                           sys_spc_delta_file_ver;
//  /* Sirius specific debug screen information 8 */
//  uint32                                           sys_spc_delta_file_xsum;
//  /* LCD type (tosh_qvga_t6k71=1, tosh_qvga_t6k75=2, epson_qvga=3) */
//  uint8                                            lcd_id;
//  /* PA Range where DVS used */
//  uint16                                           wcdma_pa_range_for_dvs;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            wcdma_pa_compensate_up_with_dvs[10];
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            wcdma_pa_compensate_dn_with_dvs[10];
//  /* PA Range where DVS used */
//  uint16                                           wcdma_1900_pa_range_for_dvs;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            wcdma_1900_pa_compensate_up_with_dvs[10];
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            wcdma_1900_pa_compensate_dn_with_dvs[10];
//  /* PA Range where DVS used */
//  uint16                                           wcdma_800_pa_range_for_dvs;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            wcdma_800_pa_compensate_up_with_dvs[10];
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            wcdma_800_pa_compensate_dn_with_dvs[10];
//  /* Max Power Backoff Voltages (fractional) */
//  uint8                                            wcdma_max_pwr_backoff_voltages[3];
//  /* Max Power Backoff in dB12 units @ Volt1 */
//  int16                                            wcdma_max_pwr_backoff_volt1[4];
//  /* Max Power Backoff in dB12 units @ Volt2 */
//  int16                                            wcdma_max_pwr_backoff_volt2[4];
//  /* Max Power Backoff in dB12 units @ Volt3 */
//  int16                                            wcdma_max_pwr_backoff_volt3[4];
//  /* Max Power Backoff Voltages (fractional) */
//  uint8                                            wcdma_1900_max_pwr_backoff_voltages[3];
//  /* Max Power Backoff in dB12 units @ Volt1 */
//  int16                                            wcdma_1900_max_pwr_backoff_volt1[4];
//  /* Max Power Backoff in dB12 units @ Volt2 */
//  int16                                            wcdma_1900_max_pwr_backoff_volt2[4];
//  /* Max Power Backoff in dB12 units @ Volt3 */
//  int16                                            wcdma_1900_max_pwr_backoff_volt3[4];
//  /* Max Power Backoff Voltages (fractional) */
//  uint8                                            wcdma_800_max_pwr_backoff_voltages[3];
//  /* Max Power Backoff in dB12 units @ Volt1 */
//  int16                                            wcdma_800_max_pwr_backoff_volt1[4];
//  /* Max Power Backoff in dB12 units @ Volt2 */
//  int16                                            wcdma_800_max_pwr_backoff_volt2[4];
//  /* Max Power Backoff in dB12 units @ Volt3 */
//  int16                                            wcdma_800_max_pwr_backoff_volt3[4];
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_hs_r1_rise;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_hs_r1_fall;
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_hs_r2_rise;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_hs_r2_fall;
//  /* Power switch from 3 --> 2 state */
//  int16                                            wcdma_hs_r3_rise;
//  /* Power switch from 2 --> 3 state */
//  int16                                            wcdma_hs_r3_fall;
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_1900_hs_r1_rise;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_1900_hs_r1_fall;
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_1900_hs_r2_rise;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_1900_hs_r2_fall;
//  /* Power switch from 3 --> 2 state */
//  int16                                            wcdma_1900_hs_r3_rise;
//  /* Power switch from 2 --> 3 state */
//  int16                                            wcdma_1900_hs_r3_fall;
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_800_hs_r1_rise;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_800_hs_r1_fall;
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_800_hs_r2_rise;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_800_hs_r2_fall;
//  /* Power switch from 3 --> 2 state */
//  int16                                            wcdma_800_hs_r3_rise;
//  /* Power switch from 2 --> 3 state */
//  int16                                            wcdma_800_hs_r3_fall;
//  /* GSM_900 - Extenal measurement of DAC vs Pwr required for autocal */
//  nv_autocal_pwr_dac_type                          gsm_autocal_pwr_dac_f1;
//  /* GSM_900 - Dynamic range in dBm of AMAM table.  */
//  nv_amam_dynamic_range                            gsm_amam_dynamic_range;
//  /* DCS - External Measurement of DAC vs Power required for autocal */
//  nv_autocal_pwr_dac_type                          dcs_autocal_pwr_dac_f1;
//  /* DCS - Dynamic Range in dBm of AMAM Table.  */
//  nv_amam_dynamic_range                            dcs_amam_dynamic_range;
//  /* GSM_850 - External measurement of DAC vs Power required for autocal */
//  nv_autocal_pwr_dac_type                          gsm_850_autocal_pwr_dac_f1;
//  /* GSM_850 - Dynamic range in dBm of AMAM Table. */
//  nv_amam_dynamic_range                            gsm_850_amam_dynamic_range;
//  /* GSM_1900 - External Measurement of DAC vs Power required for autocal */
//  nv_autocal_pwr_dac_type                          gsm_1900_autocal_pwr_dac_f1;
//  /* GSM_1900 - Dynamic range in dBm of AMAM Table. */
//  nv_amam_dynamic_range                            gsm_1900_amam_dynamic_range;
//  /* GSM_900  Calpath RSB */
//  nv_calpath_rsb_type                              gsm_calpath_rsb;
//  /* DCS Calpath RSB */
//  nv_calpath_rsb_type                              dcs_calpath_rsb;
//  /* GSM_850 Calpath RSB */
//  nv_calpath_rsb_type                              gsm_850_calpath_rsb;
//  /* GSM_1900 Calpath RSB */
//  nv_calpath_rsb_type                              gsm_1900_calpath_rsb;
//  /* GSM_900 Systematic gain and dc correction applied to AMAM table  */
//  nv_amam_sys_gain_dc_corr                         gsm_amam_sys_gain_dc_corr;
//  /* GSM_850 systematic gain and DC correction applied to AMAM table  */
//  nv_amam_sys_gain_dc_corr                         gsm_850_amam_sys_gain_dc_corr;
//  /* DCS systematic gain and DC correction applied to AMAM table  */
//  nv_amam_sys_gain_dc_corr                         dcs_amam_sys_gain_dc_corr;
//  /* GSM_1900 systematic gain and DC correction applied to AMAM table  */
//  nv_amam_sys_gain_dc_corr                         gsm_1900_amam_sys_gain_dc_corr;
//  /* GSM_900 Reference ARFCN for AMAM and AMPM Calibration at F1  */
//  uint16                                           gsm_amam_arfcn_f1;
//  /* DCS Reference ARFCN for AMAM and AMPM Calibration at F1 */
//  uint16                                           dcs_amam_arfcn_f1;
//  /* GSM_850 Reference ARFCN for AMAM and AMPM Calibration at F1 */
//  uint16                                           gsm_850_amam_arfcn_f1;
//  /* GSM_1900 Reference ARFCN for AMAM and AMPM Calibration at F1 */
//  uint16                                           gsm_1900_amam_arfcn_f1;
//  /* GSM_900 Reference ARFCN for AMAM and AMPM Calibration at F2 */
//  uint16                                           gsm_amam_arfcn_f2;
//  /* DCS_1800 Reference ARFCN for AMAM and AMPM Calibration at F2 */
//  uint16                                           dcs_amam_arfcn_f2;
//  /* GSM_850 Reference ARFCN for AMAM and AMPM Calibration at F2 */
//  uint16                                           gsm_850_amam_arfcn_f2;
//  /* GSM_1900 Reference ARFCN for AMAM and AMPM Calibration at F2 */
//  uint16                                           gsm_1900_amam_arfcn_f2;
//  /* GSM_900 - External Measurement of DAC vs Power required for autocal */
//  nv_autocal_pwr_dac_type                          gsm_autocal_pwr_dac_f2;
//  /* DCS - External measurement of DAC vs Power required for autocal */
//  nv_autocal_pwr_dac_type                          dcs_autocal_pwr_dac_f2;
//  /* GSM_850 - External Measurement of DAC vs Power required for autocal */
//  nv_autocal_pwr_dac_type                          gsm_850_autocal_pwr_dac_f2;
//  /* GSM_1900 - External Measurement of DAC vs Power required for autocal  */
//  nv_autocal_pwr_dac_type                          gsm_1900_autocal_pwr_dac_f2;
//  /* GSM_900 Polar Path Delay */
//  int16                                            gsm_polar_path_delay;
//  /* DCS Polar Path Delay */
//  int16                                            dcs_polar_path_delay;
//  /* GSM_850 Polar Path Delay */
//  int16                                            gsm_850_polar_path_delay;
//  /* GSM_1900 Polar path delay */
//  int16                                            gsm_1900_polar_path_delay;
//  /* GSM_900 OPLL BW Calibration */
//  uint8                                            gsm_opll_bw_val;
//  /* DCS OPLL BW Calibration */
//  uint8                                            dcs_opll_bw_val;
//  /* GSM_850 OPLL BW Calibration */
//  uint8                                            gsm_850_opll_bw_val;
//  /* GSM_1900 OPLL BW Calibration */
//  uint8                                            gsm_1900_opll_bw_val;
//  /* GSM_900 Baseband BW Calibration */
//  uint8                                            gsm_baseband_bw_val;
//  /* DCS Baseband BW Calibration */
//  uint8                                            dcs_baseband_bw_val;
//  /* GSM_850 Baseband BW Calibration */
//  uint8                                            gsm_850_baseband_bw_val;
//  /* GSM_1900 Baseband BW Calibration */
//  uint8                                            gsm_1900_baseband_bw_val;
//  /* identify which USB device should mobil boot up as.. */
//  nv_usbdc_supported_device_type                   usb_current_device;
//  /* Minimum number of Svs needed for a Standalone fix */
//  uint8                                            gps1_min_num_svs;
//  /* Default value if RRC UEP Measurement requests will be honored or not */
//  uint32                                           aagps_default_allow_rrc;
//  /* Default MT LR Guard Timer */
//  uint32                                           aagps_default_mtlr_guard_timer;
//  /* Default SMLC Communication Timeout */
//  uint32                                           aagps_default_smlc_comm_timeout;
//  /* PRESUPL UE Timer 1 */
//  uint32                                           aagps_default_presupl_ue_timer1_value;
//  /* PRESUPL UE Timer 2 */
//  uint32                                           aagps_default_presupl_ue_timer2_value;
//  /* PRESUPL UE Timer 3 */
//  uint32                                           aagps_default_presupl_ue_timer3_value;
//  /* Defines the type of EPZID currently active */
//  nv_epzid_enum_type                               active_epzid_type;
//  /* Automated RX calibration channel management support */
//  uint8                                            c0_bc0_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Automated RX calibration channel management support */
//  uint8                                            c1_bc0_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Automated RX calibration channel management support */
//  uint8                                            c0_bc1_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Automated RX calibration channel management support */
//  uint8                                            c1_bc1_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Automated RX calibration channel management support */
//  uint8                                            c0_bc3_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Automated RX calibration channel management support */
//  uint8                                            c1_bc3_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Automated RX calibration channel management support */
//  uint8                                            c0_bc4_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Automated RX calibration channel management support */
//  uint8                                            c1_bc4_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Automated RX calibration channel management support */
//  uint8                                            c0_bc5_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Automated RX calibration channel management support */
//  uint8                                            c1_bc5_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Automated RX calibration channel management support */
//  uint8                                            c0_bc6_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Automated RX calibration channel management support */
//  uint8                                            c1_bc6_rx_cal_chan_lru[NV_FREQ_TABLE_SIZ];
//  /* Indicates the CC Monitor version corresponding to this build */
//  uint8                                            ccm_version_info;
//  /* Count of the number of abnormal powerdowns of the phone */
//  uint32                                           turnoff_counter;
//  /* Stores the power down status of the phone */
//  boolean                                          powerdown_status;
//  /* Stores the power on status of the phone */
//  uint8                                            phone_power_on_status;
//  /* This stores the time at the very first power on of the phone */
//  uint32                                           first_power_on_time;
//  /* Software Version of the current software */
//  uint8                                            sw_version_info[NV_MAX_SW_VERSION_INFO_SIZ];
//  /* Stores date format in Settings Application */
//  nv_set_date_format_enum_type                     set_date_format;
//  /* Specifies the time format in Settings Application */
//  nv_set_time_format_enum_type                     set_time_format;
//  /* Specifies whether or not time is displayed. */
//  boolean                                          set_show_time;
//  /* Automatic time setting. */
//  boolean                                          set_auto_time;
//  /* Specifies whether Buddist year is enabled. */
//  boolean                                          set_buddhist_year;
//  /* Adjustments to PA rise and fall values during P1 data calls. */
//  uint8                                            bc0_hdr_p1_rise_fall_off[16];
//  /* Adjustments to PA rise and fall values during P1 data calls. */
//  uint8                                            bc1_hdr_p1_rise_fall_off[16];
//  /* Adjustments to PA rise and fall values during P1 data calls. */
//  uint8                                            bc3_hdr_p1_rise_fall_off[16];
//  /* Adjustments to PA rise and fall values during P1 data calls. */
//  uint8                                            bc4_hdr_p1_rise_fall_off[16];
//  /* Adjustments to PA rise and fall values during P1 data calls. */
//  uint8                                            bc5_hdr_p1_rise_fall_off[16];
//  /* Adjustments to PA rise and fall values during P1 data calls. */
//  uint8                                            bc6_hdr_p1_rise_fall_off[16];
//  /* RLP idle timeout value while the IDR algorithm is active. */
//  uint32                                           ds_incoming_data_rlp_timeout;
//  /* Time period after which RLP idle timeout is set to its original value  */
//  uint32                                           ds_default_inactivity_restore_timeout;
//  /* When set, it will disable USB charging */
//  nv_chg_usb_nvswitch_type                         chg_usb_nvdisable_val;
//  /* flag for consortium_config */
//  boolean                                          consortium_config;
//  /* Device Serial Number */
//  uint8                                            device_serial_no[16];
//  /* NAI for laptop ( tethered-device) calls */
//  nv_ds_mip_rm_nai_type                            ds_mip_rm_nai;
//  /* For SMS-BMC support, Reading Advised and Read Optional are required. */
//  nv_sms_bmc_reading_pref_type                     sms_bmc_reading_pref;
//  /* Handset microphone gain adjustment parameter (final factory cal) */
//  int16                                            voc_hs_mic_gain_adjust;
//  /* Auto Power Off time */
//  int32                                            auto_power_off;
//  /* Indicates the user setting for Fast Search */
//  boolean                                          fast_search;
//  /* Enables/disables the album menu in Messaging application */
//  boolean                                          uploadmedia_album_menu_enabled;
//  /* Service address for feature media album */
//  uint16                                           uploadmedia_album_addr[NV_UPLOADMEDIA_ALBUM_ADDR_SIZ];
//  /* Enables/disables the album menu in Messaging application */
//  boolean                                          uploadmedia_postcard_menu_enabled;
//  /* Single ASCII character as separator for postcard format string. */
//  uint8                                            uploadmedia_postcard_separator;
//  /* Postcard server address. */
//  uint16                                           uploadmedia_postcard_addr[NV_UPLOADMEDIA_POSTCARD_ADDR_SIZ];
//  /* Maximum allowed characters in postcard message */
//  uint16                                           uploadmedia_postcard_max_characters;
//  /* Maximum number of recipients for a postcard. */
//  uint8                                            uploadmedia_postcard_max_recipients;
//  /* When true, all messages sent will be saved in Sent Items folder. */
//  boolean                                          uploadmedia_postcard_auto_save;
//  /* Active e-mail profile (1-5), 0 no profile set to active. */
//  uint8                                            email_active_profile;
//  /* Bluetooth enabled or disabled */
//  boolean                                          bt_active;
//  /* Bluetooth page scanning or page and inquiry scanning */
//  boolean                                          bt_visible;
//  /* Bluetooth SIM Access Profile enabled or disabled */
//  boolean                                          bt_sap_enable;
//  /* Automatic NITZ for time-zone and daylight savings */
//  nv_wclock_auto_nitz_enum_type                    wclock_auto_nitz_zone_dst;
//  /* Selected time-zone */
//  nv_timezone_enum_type                            timezone;
//  /* SCP - Enables the Broadcast Multicast Feature */
//  uint32                                           hdrscp_bcmcs_enable;
//  /* RX AGC offset for each VGA gain  */
//  int16                                            wcdma_1800_vga_gain_offset;
//  /* RX AGC offset for each VGA gain based on frequency  */
//  int8                                             wcdma_1800_vga_gain_offset_vs_freq[NV_FREQ_TABLE_SIZ];
//  /* RX AGC offset for each VGA gain based on temperature */
//  int8                                             wcdma_1800_vga_gain_offset_vs_temp[NV_TEMP_TABLE_SIZ];
//  /* LNA threshold from mid to low state */
//  int16                                            wcdma_1800_lna_range_rise_2;
//  /* Mixer threshold from high to low state */
//  int16                                            wcdma_1800_lna_range_rise_3;
//  /* LNA threshold from low to mid state  */
//  int16                                            wcdma_1800_lna_range_fall_2;
//  /* Mixer threshold from low to high state */
//  int16                                            wcdma_1800_lna_range_fall_3;
//  /* IM threshold for LNA mid to low state */
//  int16                                            wcdma_1800_im_level_2;
//  /* Mixer threshold for high to low state  */
//  int16                                            wcdma_1800_im_level_3;
//  /* LNA gain step from mid to low state */
//  int16                                            wcdma_1800_lna_range_offset_2;
//  /* Mixer gain step from high to low state */
//  int16                                            wcdma_1800_lna_range_offset_3;
//  /* LNA gain step from mid to low state based on frequency */
//  int8                                             wcdma_1800_lna_offset_vs_freq_2[NV_FREQ_TABLE_SIZ];
//  /* Mixer gain step from high to low state based on frequency */
//  int8                                             wcdma_1800_lna_offset_vs_freq_3[NV_FREQ_TABLE_SIZ];
//  /* I cancellation value for lower in-band jammer */
//  uint8                                            wcdma_1800_im2_i_value;
//  /* Q cancellation value for lower in-band jammer */
//  uint8                                            wcdma_1800_im2_q_value;
//  /* Transconductor value for lower in-band jammer  */
//  uint8                                            wcdma_1800_im2_transconductor_value;
//  /* Linearizer underflow for LNA low gain state and Mixer High gainstate */
//  int16                                            wcdma_1800_rx_agc_min_2;
//  /* Linearizer underflow for LNA Low gain state and Mixer Low gain state */
//  int16                                            wcdma_1800_rx_agc_min_3;
//  /* WCDMA Rx power level at which LNA should be bypassed  */
//  int16                                            wcdma_1800_lna_range_rise;
//  /* WCDMA Rx power level at which LNA should be turned on */
//  int16                                            wcdma_1800_lna_range_fall;
//  /* LNA InterMod (high to low gain ) anti-jamming threshold power level  */
//  int16                                            wcdma_1800_im_level;
//  /* Duration of non-bypass state in multiple of 66us (8-bits) */
//  uint8                                            wcdma_1800_nonbypass_timer;
//  /* Duration of bypass state in multiple of 6.6ms (11-bits) */
//  uint16                                           wcdma_1800_bypass_timer;
//  /* Value that is added to Rx power reading when LNA is bypassed */
//  int16                                            wcdma_1800_lna_range_offset;
//  /* WCDMA LNA range offset delta vs. frequency in unit of AGC value */
//  int8                                             wcdma_1800_lna_offset_vs_freq[NV_FREQ_TABLE_SIZ];
//  /* WCDMA Receiver AGC min */
//  int16                                            wcdma_1800_rx_agc_min;
//  /* WCDMA Receiver AGC max */
//  int16                                            wcdma_1800_rx_agc_max;
//  /* WCDMA LNA Phase adjustment when LNA is bypassed  */
//  uint8                                            wcdma_1800_agc_phase_offset;
//  /* WCDMA Tx AGC linearizer master offset value for lowest PA gain state */
//  uint16                                           wcdma_1800_tx_lin_master_0[NV_WCDMA_TX_LIN_MASTER_SIZ];
//  /* WCDMA Tx AGC linearizer master offset value for highest PA gain state */
//  uint16                                           wcdma_1800_tx_lin_master_1[NV_WCDMA_TX_LIN_MASTER_SIZ];
//  /* Tx Linearizer in PA Range state 2  */
//  uint16                                           wcdma_1800_tx_lin_master_2[NV_WCDMA_TX_LIN_MASTER_SIZ];
//  /* Tx Linearizer in PA Range state 3  */
//  uint16                                           wcdma_1800_tx_lin_master_3[NV_WCDMA_TX_LIN_MASTER_SIZ];
//  /*  WCDMA Tx AGC delta vs. frequency for lowest PA gain state */
//  int8                                             wcdma_1800_tx_comp_vs_freq_0[NV_FREQ_TABLE_SIZ];
//  /* WCDMA Tx AGC delta vs. frequency for highest PA gain state */
//  int8                                             wcdma_1800_tx_comp_vs_freq_1[NV_FREQ_TABLE_SIZ];
//  /* Power switch from 3 --> 2 state */
//  int8                                             wcdma_1800_tx_comp_vs_freq_2[NV_FREQ_TABLE_SIZ];
//  /* Tx Frequency Compensation in state 3 */
//  int8                                             wcdma_1800_tx_comp_vs_freq_3[NV_FREQ_TABLE_SIZ];
//  /* WCDMA Tx AGC PDM delta vs. temp for lowest PA gain state */
//  int8                                             wcdma_1800_tx_lin_vs_temp_0[NV_TEMP_TABLE_SIZ];
//  /* WCDMA Tx AGC PDM delta vs. temp for highest PA gain state */
//  int8                                             wcdma_1800_tx_lin_vs_temp_1[NV_TEMP_TABLE_SIZ];
//  /* Tx Lin Comp over temp in state 2 */
//  int8                                             wcdma_1800_tx_lin_vs_temp_2[NV_TEMP_TABLE_SIZ];
//  /* Tx Lin Comp over temp in state 3 */
//  int8                                             wcdma_1800_tx_lin_vs_temp_3[NV_TEMP_TABLE_SIZ];
//  /* WCDMA Tx AGC PDM slope delta vs. temp for lowest PA gain state */
//  int8                                             wcdma_1800_tx_slp_vs_temp_0[NV_TEMP_TABLE_SIZ];
//  /* WCDMA Tx AGC PDM slope delta vs. temp for highest PA gain state */
//  int8                                             wcdma_1800_tx_slp_vs_temp_1[NV_TEMP_TABLE_SIZ];
//  /* Tx Lin Slope Comp over temp in state 2 */
//  int8                                             wcdma_1800_tx_slp_vs_temp_2[NV_TEMP_TABLE_SIZ];
//  /* Tx Lin Slope Comp over temp in state 3 */
//  int8                                             wcdma_1800_tx_slp_vs_temp_3[NV_TEMP_TABLE_SIZ];
//  /* TX power level to switch PA from lowest to highest gain state */
//  uint16                                           wcdma_1800_r1_rise;
//  /* TX power level to switch PA from highest to lowest gain state */
//  uint16                                           wcdma_1800_r1_fall;
//  /* WCDMA Tx power limit vs. temperature (absolute not delta) */
//  uint8                                            wcdma_1800_tx_lim_vs_temp[NV_TEMP_TABLE_SIZ];
//  /* WCDMA Tx power limit vs. frequency (absolute not delta) */
//  int16                                            wcdma_1800_tx_lim_vs_freq[NV_FREQ_TABLE_SIZ];
//  /* WCDMA TX power limit gain step adjustment factor */
//  uint8                                            wcdma_1800_adj_factor;
//  /* WCDMA expected HDET reading vs Tx AGC */
//  uint8                                            wcdma_1800_exp_hdet_vs_agc[NV_WCDMA_EXP_HDET_VS_AGC_SIZ];
//  /* WCDMA ADC HDET reading offset  */
//  uint8                                            wcdma_1800_hdet_off;
//  /* WCDMA ADC HDET reading span */
//  uint8                                            wcdma_1800_hdet_spn;
//  /* WCDMA UE Maximum TX power in dbm */
//  int8                                             wcdma_1800_max_tx_power;
//  /* Minimum value before searcher declares OUT_OF_SERVICE_AREA */
//  int16                                            wcdma_1800_out_of_service_thresh;
//  /* CHIPX8 delay for SYNC80M via 800mhz CDMA path in RF card, biased +25 */
//  uint32                                           wcdma_1800_enc_btf;
//  /* WCDMA RX path delay for 1800  */
//  int16                                            wcdma_1800_rx_delay;
//  /* Delay time before PA_ON rises */
//  uint16                                           wcdma_1800_agc_pa_on_rise_delay;
//  /* Delay time before PA_ON falls */
//  uint16                                           wcdma_1800_agc_pa_on_fall_delay;
//  /* Delay time before TX_ON rises */
//  uint16                                           wcdma_1800_agc_tx_on_rise_delay;
//  /* Delay time before TX_ON falls */
//  uint16                                           wcdma_1800_agc_tx_on_fall_delay;
//  /* Tx agc update time  */
//  uint16                                           wcdma_1800_agc_update_tx_agc_time;
//  /* PA Range update for 1 ---> 0 state */
//  int16                                            wcdma_1800_pa_gain_up_time;
//  /* PA Range update for 0 ---> 1 state */
//  int16                                            wcdma_1800_pa_gain_down_time;
//  /* Tx Frequency Compensation in State 2 */
//  uint16                                           wcdma_1800_tx_rot_angle_pa_state_00;
//  /* Tx Frequency Compensation in state 3 */
//  uint16                                           wcdma_1800_tx_rot_angle_pa_state_01;
//  /* Tx Linearizer in PA Range state 2  */
//  uint16                                           wcdma_1800_tx_rot_angle_pa_state_10;
//  /* Tx Linearizer in PA Range state 3 */
//  uint16                                           wcdma_1800_tx_rot_angle_pa_state_11;
//  /* Maps coarse tune codes to actual VCO frequency ranges */
//  uint8                                            rfr_vco_coarse_tuning_1800[12];
//  /* Gain Compensation at 0 ---> 1 state transition */
//  int16                                            wcdma_1800_pa_compensate_up;
//  /* Gain Compensation at 1 ---> 0 state transition */
//  int16                                            wcdma_1800_pa_compensate_down;
//  /* PA R1 Rise threshold for PRACH */
//  int16                                            wcdma_1800_prach_r1_rise_offset;
//  /* PA R1 Fall threshold for PRACH */
//  int16                                            wcdma_1800_prach_r1_fall_offset;
//  /* Channel number list for TX frequency compensation */
//  int16                                            wcdma_1800_tx_cal_chan[NV_FREQ_TABLE_SIZ];
//  /* Channel number list for RX frequency compensation */
//  int16                                            wcdma_1800_rx_cal_chan[NV_FREQ_TABLE_SIZ];
//  /* Power switch from 2 --> 1 state */
//  uint16                                           wcdma_1800_r2_rise;
//  /* Power switch from 1 --> 2 state */
//  uint16                                           wcdma_1800_r2_fall;
//  /* Power switch from 3 --> 2 state */
//  uint16                                           wcdma_1800_r3_rise;
//  /* Power switch from 2 --> 3 state */
//  uint16                                           wcdma_1800_r3_fall;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            wcdma_1800_pa_compensate_up_r2;
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            wcdma_1800_pa_compensate_down_r2;
//  /*  Gain Compensation at 3 ---> 2 state transition */
//  int16                                            wcdma_1800_pa_compensate_up_r3;
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            wcdma_1800_pa_compensate_down_r3;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            wcdma_1800_prach_r2_rise_offset;
//  /* Gain Compensation at 3 ---> 2 state transition */
//  int16                                            wcdma_1800_prach_r2_fall_offset;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_1800_prach_r3_rise_offset;
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_1800_prach_r3_fall_offset;
//  /* Power switch from 2 --> 3 state */
//  int8                                             wcdma_1800_pa_range_map[4];
//  /* PA Range where DVS used */
//  uint16                                           wcdma_1800_pa_range_for_dvs;
//  /* Gain Compensation at 2 ---> 1 state transition */
//  int16                                            wcdma_1800_pa_compensate_up_with_dvs[10];
//  /* Gain Compensation at 1 ---> 2 state transition */
//  int16                                            wcdma_1800_pa_compensate_dn_with_dvs[10];
//  /* Max Power Backoff Voltages (fractional) */
//  uint8                                            wcdma_1800_max_pwr_backoff_voltages[3];
//  /* Max Power Backoff in dB12 units @ Volt1 */
//  int16                                            wcdma_1800_max_pwr_backoff_volt1[4];
//  /* Max Power Backoff in dB12 units @ Volt2 */
//  int16                                            wcdma_1800_max_pwr_backoff_volt2[4];
//  /* Max Power Backoff in dB12 units @ Volt3  */
//  int16                                            wcdma_1800_max_pwr_backoff_volt3[4];
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_1800_hs_r1_rise;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_1800_hs_r1_fall;
//  /* Power switch from 2 --> 1 state */
//  int16                                            wcdma_1800_hs_r2_rise;
//  /* Power switch from 1 --> 2 state */
//  int16                                            wcdma_1800_hs_r2_fall;
//  /* Power switch from 3 --> 2 state */
//  int16                                            wcdma_1800_hs_r3_rise;
//  /* Power switch from 2 --> 3 state */
//  int16                                            wcdma_1800_hs_r3_fall;
//  /* TX agc update time for WCDMA 1800 DCH */
//  int16                                            wcdma_1800_dch_agc_update_tx_agc_time;
//  /* TX agc adjust pdm delay for WCDMA 1800 */
//  int16                                            wcdma_1800_agc_tx_adj_pdm_delay;
//  /* TX agc update time for WCDMA 1900  DCH */
//  int16                                            wcdma_1900_dch_agc_update_tx_agc_time;
//  /* TX agc adjust pdm delay for WCDMA 1900 */
//  int16                                            wcdma_1900_agc_tx_adj_pdm_delay;
//  /* TX agc update time for WCDMA 800 DCH */
//  int16                                            wcdma_800_dch_agc_update_tx_agc_time;
//  /* TX agc adjust pdm delay for WCDMA 800 */
//  int16                                            wcdma_800_agc_tx_adj_pdm_delay;
//  /* TX agc update time for WCDMA DCH */
//  int16                                            wcdma_dch_agc_update_tx_agc_time;
//  /* TX agc adjust pdm delay for WCDMA */
//  int16                                            wcdma_agc_tx_adj_pdm_delay;
//  /* NAI to be used for laptop SIP calls */
//  nv_ds_sip_rm_nai_type                            ds_sip_rm_nai;
//  /* Bits 32 to 63 of Band Pref */
//  nv_band_pref_32_63_type                          band_pref_32_63;
//  /* First size limitation for MMS message. */
//  uint16                                           mms_max_msg_size1;
//  /* Second size limitation for MMS message. */
//  uint16                                           mms_max_msg_size2;
//  /* Third size limitation for MMS message. */
//  uint16                                           mms_max_msg_size3;
//  /* Whether or not the MMS size limits are selectable by the user. */
//  boolean                                          mms_max_size_user_selectable;
//  /* Which of the three configured MMS size limits to use. */
//  uint8                                            mms_active_max_msg_size;
//  /* Which of the 5 MMS profiles is the active profile. */
//  uint8                                            mms_active_profile;
//  /* MMS sender visibility: hide number or not. */
//  nv_mms_hide_number_enum_type                     mms_hide_number;
//  /* Whether or not to request an MMS delivery report. */
//  boolean                                          mms_req_delivery_rpt;
//  /* Whether or not an MMS read reply is requested. */
//  boolean                                          mms_req_read_rpt;
//  /* Default priority of MMS message. */
//  nv_mms_default_priority_enum_type                mms_priority;
//  /* MMS relative validity period. */
//  nv_mms_relative_validity_period_enum_type        mms_validity_period;
//  /* MMS slide default duration. */
//  nv_mms_slide_default_duration_enum_type          mms_slide_duration;
//  /* MMS retrieval mode for home network. */
//  nv_mms_retrieval_enum_type                       mms_retrieval_home;
//  /* MMS retrieval mode when roaming. */
//  nv_mms_retrieval_enum_type                       mms_retrieval_roam;
//  /* Delivery time of MMS message. */
//  nv_mms_delivery_time_enum_type                   mms_delivery_time;
//  /* Whether to allow anonymous MMS messages. */
//  boolean                                          mms_allow_anon_msg;
//  /* Creation mode for MMS messages. */
//  nv_mms_creation_mode_enum_type                   mms_creation_mode;
//  /* Automatic signature for MMS message. */
//  boolean                                          mms_autosig;
//  /* Automatic save of MMS message after sent. */
//  boolean                                          mms_auto_save;
//  /* Whether to allow MMS read reply. */
//  boolean                                          mms_allow_read_rpt;
//  /* Whether to allow MMS delivery report. */
//  boolean                                          mms_allow_delivery_rpt;
//  /* Maximum number of MMS recipients. */
//  uint8                                            mms_max_recipients;
//  /* Maximum number of stored MMS messages. */
//  uint16                                           mms_max_stored_mms;
//  /* For MMS, defines which template to use for signature. */
//  uint8                                            mms_signature_active_template;
//  /* If TRUE then filelocation is on phone, else on MMC card. */
//  boolean                                          bt_filelocation_ondevice;
//  /* Temperature compensation offset value for UTRAN max TX power limit for */
//  int16                                            wcdma_utran_tx_lim_vs_temp_offset[8];
//  /* Temperature compensation offset value for UTRAN max TX power limit */
//  int16                                            wcdma_1800_utran_tx_lim_vs_temp_offset[8];
//  /* Temperature compensation offset value for UTRAN max TX power limit */
//  int16                                            wcdma_800_utran_tx_lim_vs_temp_offset[8];
//  /* Temperature compensation offset value for UTRAN max TX power limit */
//  int16                                            wcdma_1900_utran_tx_lim_vs_temp_offset[8];
//  /* SendVia Menu: Bitmask representing the transport mechanism. */
//  uint32                                           sendvia_cfg;
//  /* Enable/disable the power prompt dialog. */
//  boolean                                          pu_prompt_enabled;
//  /* Text for the user greeting. */
//  uint16                                           user_greeting[NV_USER_GREETING_SIZ];
//  /* Which screensaver to use. */
//  nv_screensaver_style_enum_type                   screensaver_style;
//  /* Idle time (in minutes) before the screensaver is shown. */
//  uint8                                            screensaver_timeout;
//  /* Font size for MMS editor. */
//  nv_messaging_font_enum_type                      messaging_font;
//  /* Specifies the current active profile for SyncML DevMan session. */
//  uint8                                            syncml_dm_activeprofile;
//  /* Specifies the current active profile for SyncML DS session. */
//  uint8                                            syncml_ds_activeprofile;
//  /* SyncML server overwrites, mobile overwrites, or two-way sync. */
//  nv_syncml_syncdirection_enum_type                syncml_syncdirection;
//  /* SyncML changes or sync all data. */
//  nv_syncml_datatosync_enum_type                   syncml_datatosync;
//  /* SyncML none, calendar, contacts or both. */
//  nv_syncml_appstosync_enum_type                   syncml_appstosync;
//  /* Determines which SMS-Profile is active. */
//  uint8                                            ms_sms_active_profile;
//  /* Text size of when editing or displaying a message. */
//  nv_ms_sms_text_size_enum_type                    ms_sms_text_size;
//  /* Automatically include header text in message. */
//  boolean                                          ms_sms_autoheader;
//  /* Automatically include signature text in message. */
//  boolean                                          ms_sms_autosignature;
//  /* Template number to be used as the header if autoheader is enabled. */
//  uint8                                            ms_sms_header_active_template;
//  /* Template num to be used as the signature if autosignature is enabled. */
//  uint8                                            ms_sms_signature_active_template;
//  /* Automatically save sent messages. */
//  boolean                                          ms_sms_autosave;
//  /* Automatically delete oldest message. */
//  boolean                                          ms_sms_autodelete;
//  /* Determine if emoticons are presented as text or graphics. */
//  boolean                                          ms_sms_allow_emoticons;
//  /* Maximum number of SMS segments. */
//  uint8                                            ms_sms_max_segments;
//  /* Maximum number of recipients for the message. */
//  uint8                                            ms_sms_max_recipients;
//  /* Maximum number of SMS allowed on device. */
//  uint16                                           ms_sms_max_number_of_sms;
//  /* Maximum number of templates that can be defined in the device. */
//  uint8                                            ms_sms_max_templates;
//  /* SMS Types that are supported. */
//  boolean                                          ms_sms_opco_types_supported[8];
//  /* First message center address. */
//  uint16                                           ms_sms_smsc_address1[NV_SMS_SMSC_ADDRESS_SIZ];
//  /* Second message center address. */
//  uint16                                           ms_sms_smsc_address2[NV_SMS_SMSC_ADDRESS_SIZ];
//  /* Third message center address. */
//  uint16                                           ms_sms_smsc_address3[NV_SMS_SMSC_ADDRESS_SIZ];
//  /* Fourth message center address. */
//  uint16                                           ms_sms_smsc_address4[NV_SMS_SMSC_ADDRESS_SIZ];
//  /* Fifth message center address. */
//  uint16                                           ms_sms_smsc_address5[NV_SMS_SMSC_ADDRESS_SIZ];
//  /* the max output power the UE should use for Power Class 4 operation  */
//  int16                                            wcdma_max_tx_power_dch_pc4;
//  /* Show or hide the PoC menu hierarchy from the user. */
//  boolean                                          poc_show_pt_menu;
//  /* Primary PoC Server. */
//  uint16                                           poc_server_ip1[NV_POC_SERVER_IP_SIZ];
//  /* Fallback/Secondary Poc Server. */
//  uint16                                           poc_server_ip2[NV_POC_SERVER_IP_SIZ];
//  /* Port for PoC server. */
//  uint16                                           poc_server_port;
//  /* PoC Network Access Identifier. */
//  uint16                                           poc_nai[NV_POC_NAI_SIZ];
//  /* PoC Billing service identifier. */
//  uint16                                           poc_billing_service[NV_POC_BILLING_SERVICE_SIZ];
//  /* Password for GLM access for PoC. */
//  uint16                                           poc_glm_password[NV_POC_GLM_PASSWORD_SIZ];
//  /* Real-time Transport Protocol (RTP) port for PoC. */
//  uint16                                           poc_rtp_port;
//  /* Local SIP Port for PoC. */
//  uint16                                           poc_sip_port;
//  /* Compression flag used for compression SIP Messages. */
//  uint8                                            poc_is_sig_comp;
//  /* Maximum Authentication Retries for PoC. */
//  uint8                                            poc_max_auth_retries;
//  /* Connection profile for PoC. */
//  uint8                                            poc_connection_profile;
//  /* antenna select truth table entry UMTS 1800 values */
//  uint8                                            rf_antsel_umts_1800[4];
//  /* Is the IM Menu option available to the end-user. */
//  boolean                                          im_show_menu;
//  /* Underlying socket data connection profile 1-25 for IM. */
//  uint8                                            im_connection_profile;
//  /* Primary server IP address for IM. */
//  uint16                                           im_primary_ip_addr[NV_IM_IP_ADDR_SIZ];
//  /* Primary port number for IM. */
//  uint16                                           im_primary_port;
//  /* Specifies the IM encoding method to be used. */
//  nv_im_encoding_method_enum_type                  im_encoding_method;
//  /* Name used to identify the IM server. */
//  uint16                                           im_server_name[MV_IM_SERVER_NAME_SIZ];
//  /* Wireless Village version to be supported for IM. */
//  nv_im_wv_version_enum_type                       im_wv_version;
//  /* BC0 PA DVS voltage setting in mV */
//  uint16                                           bc0_pa_dvs_voltage;
//  /* BC1 PA DVS voltage setting in mV */
//  uint16                                           bc1_pa_dvs_voltage;
//  /* BC3 PA DVS voltage setting in mV */
//  uint16                                           bc3_pa_dvs_voltage;
//  /* BC4 PA DVS voltage setting in mV */
//  uint16                                           bc4_pa_dvs_voltage;
//  /* BC5 PA DVS voltage setting in mV */
//  uint16                                           bc5_pa_dvs_voltage;
//  /* BC6 PA DVS voltage setting in mV */
//  uint16                                           bc6_pa_dvs_voltage;
//  /* Is the PLMN/Name pair populated.  */
//  boolean                                          ext_op_list_entry_valid;
//  /* Operator List Entry name. */
//  uint16                                           ext_op_list_entry_name[NV_EXT_OP_NAME_SIZ];
//  /* Operator List Entry PLMN. */
//  nv_ext_op_list_entry_plmn_type                   ext_op_list_entry_plmn;
//  /* Battery Manager Battery Statistics */
//  nv_bm_bat_stats_type                             bm_bat_stats;
//  /* Available language options, array of language/country codes. */
//  uint32                                           display_language_options[NV_LANGUAGE_COUNT];
//  /* The selected display language code. */
//  uint32                                           display_language;
//  /* T9 or multi-tap is default text entry method for text entry screens. */
//  boolean                                          input_language_mode;
//  /* The different options for Input Language (and T9 support). */
//  nv_input_language_options_type                   input_language_options[NV_LANGUAGE_COUNT];
//  /* The selected input language code. */
//  uint32                                           input_language;
//  /* Sirius specific debug screen information. */
//  uint32                                           sys_convert_script_ver;
//  /* Sirius specific debug screen information. */
//  uint32                                           sys_prod_spec_convert_script_ver;
//  /* Sirius specific debug screen information. */
//  uint32                                           sys_manual_convert_script_ver;
//  /* Toggles whether IrDA is active. */
//  boolean                                          irda_active;
//  /* File save location for IrDA. */
//  nv_irda_file_location_enum_type                  irda_file_location;
//  /* Number of steps to ramp up */
//  uint8                                            gsm_ramp_up_steps;
//  /* Power for the raise cosine ramp function */
//  uint8                                            gsm_ramp_up_raise_cosine_power;
//  /* Number of steps to ramp down */
//  uint8                                            gsm_ramp_down_steps;
//  /* Number of steps to ramp down */
//  uint8                                            gsm_ramp_down_raise_cosine_power;
//  /* Number of steps to ramp up */
//  int16                                            gsm_power_levels[15];
//  /* Power for the raise cosine ramp function */
//  int16                                            dcs_power_levels[16];
//  /* Number of steps to ramp up */
//  int16                                            gsm_850_power_levels[15];
//  /* Power for the raise cosine ramp function */
//  int16                                            gsm_1900_power_levels[16];
//  /* Value to advance or retrack the PA_EN_START GRFC */
  int16                                            gsm_pa_en_start;
  /* Antenna timing relative to the PA_EN_START GRFC */
  int16                                            gsm_ant_timing_rel_to_pa_en_start;
  /* Value to advance or retrack the PA_EN_START GRFC */
  int16                                            dcs_pa_en_start;
  /* Antenna timing relative to the PA_EN_START GRFC */
  int16                                            dcs_ant_timing_rel_to_pa_en_start;
  /* Value to advance or retrack the PA_EN_START GRFC */
  int16                                            gsm_850_pa_en_start;
  /* Value to advance or retrack the PA_EN_START GRFC */
  int16                                            gsm_1900_pa_en_start;
  /* Antenna timing relative to the PA_EN_START GRFC */
  int16                                            gsm_1900_ant_timing_rel_to_pa_en_start;
  /* Value to advance or retrack the PA_EN_STOP GRFC */
  int16                                            gsm_pa_en_stop;
  /* Antenna timing relative to the PA_EN_STOP GRFC */
  int16                                            gsm_ant_timing_rel_to_pa_en_stop;
  /* Value to advance or retrack the PA_EN_STOP GRFC */
  int16                                            dcs_pa_en_stop;
  /* Antenna timing relative to the PA_EN_STOP GRFC */
  int16                                            dcs_ant_timing_rel_to_pa_en_stop;
  /* Value to advance or retrack the PA_EN_STOP GRFC */
  int16                                            gsm_850_pa_en_stop;
  /* Antenna timing relative to the PA_EN_STOP GRFC */
  int16                                            gsm_850_ant_timing_rel_to_pa_en_stop;
  /* Value to advance or retrack the PA_EN_STOP GRFC */
  int16                                            gsm_1900_pa_en_stop;
  /* Antenna timing relative to the PA_EN_STOP GRFC */
  int16                                            gsm_1900_ant_timing_rel_to_pa_en_stop;




//  /* GSM AMAM Master Table Segment 1 at freq. F3 */
//  uint16                                           gsm_amam_master_tbl_seg1_f3[64];
//  /* GSM AMAM Master Table Segment 2 at freq. F3 */
//  uint16                                           gsm_amam_master_tbl_seg2_f3[64];
//  /* GSM AMAM Master Table Segment 3 at freq. F3 */
//  uint16                                           gsm_amam_master_tbl_seg3_f3[64];
//  /* GSM AMAM Master Table Segment 4 at freq. F3 */
//  uint16                                           gsm_amam_master_tbl_seg4_f3[64];
//  /* GSM AMAM Master Table Segment 5 at freq. F3 */
//  uint16                                           gsm_amam_master_tbl_seg5_f3[64];
//  /* GSM AMAM Master Table Segment 6 at freq. F3 */
//  uint16                                           gsm_amam_master_tbl_seg6_f3[64];
//  /* GSM AMAM Master Table Segment 7 at freq. F3 */
//  uint16                                           gsm_amam_master_tbl_seg7_f3[64];
//  /* GSM AMAM Master Table Segment 8 at freq. F3 */
//  uint16                                           gsm_amam_master_tbl_seg8_f3[64];
//  /* DCS AMAM Master Table Segment 1 at freq. F3 */
//  uint16                                           dcs_amam_master_tbl_seg1_f3[64];
//  /* DCS AMAM Master Table Segment 2 at freq. F3 */
//  uint16                                           dcs_amam_master_tbl_seg2_f3[64];
//  /* DCS AMAM Master Table Segment 3 at freq. F3 */
//  uint16                                           dcs_amam_master_tbl_seg3_f3[64];
//  /* DCS AMAM Master Table Segment 4 at freq. F3 */
//  uint16                                           dcs_amam_master_tbl_seg4_f3[64];
//  /* DCS AMAM Master Table Segment 5 at freq. F3 */
//  uint16                                           dcs_amam_master_tbl_seg5_f3[64];
//  /* DCS AMAM Master Table Segment 6 at freq. F3 */
//  uint16                                           dcs_amam_master_tbl_seg6_f3[64];
//  /* DCS AMAM Master Table Segment 7 at freq. F3 */
//  uint16                                           dcs_amam_master_tbl_seg7_f3[64];
//  /* DCS AMAM Master Table Segment 8 at freq. F3 */
//  uint16                                           dcs_amam_master_tbl_seg8_f3[64];
//  /* GSM 850 AMAM Master Table Segment 1 at freq. F3 */
//  uint16                                           gsm_850_amam_master_tbl_seg1_f3[64];
//  /* GSM 850 AMAM Master Table Segment 2 at freq. F3 */
//  uint16                                           gsm_850_amam_master_tbl_seg2_f3[64];
//  /* GSM 850 AMAM Master Table Segment 3 at freq. F3 */
//  uint16                                           gsm_850_amam_master_tbl_seg3_f3[64];
//  /* GSM 850 AMAM Master Table Segment 4 at freq. F3 */
//  uint16                                           gsm_850_amam_master_tbl_seg4_f3[64];
//  /* GSM 850 AMAM Master Table Segment 5 at freq. F3 */
//  uint16                                           gsm_850_amam_master_tbl_seg5_f3[64];
//  /* GSM 850 AMAM Master Table Segment 6 at freq. F3 */
//  uint16                                           gsm_850_amam_master_tbl_seg6_f3[64];
//  /* GSM 850 AMAM Master Table Segment 7 at freq. F3 */
//  uint16                                           gsm_850_amam_master_tbl_seg7_f3[64];
//  /* GSM 850 AMAM Master Table Segment 8 at freq. F3 */
//  uint16                                           gsm_850_amam_master_tbl_seg8_f3[64];
//  /* GSM 1900 AMAM Master Table Segment 1 at freq. F3 */
//  uint16                                           gsm_1900_amam_master_tbl_seg1_f3[64];
//  /* GSM 1900 AMAM Master Table Segment 2 at freq. F3 */
//  uint16                                           gsm_1900_amam_master_tbl_seg2_f3[64];
//  /* GSM 1900 AMAM Master Table Segment 3 at freq. F3 */
//  uint16                                           gsm_1900_amam_master_tbl_seg3_f3[64];
//  /* GSM 1900 AMAM Master Table Segment 4 at freq. F3 */
//  uint16                                           gsm_1900_amam_master_tbl_seg4_f3[64];
//  /* GSM 1900 AMAM Master Table Segment 5 at freq. F3 */
//  uint16                                           gsm_1900_amam_master_tbl_seg5_f3[64];
//  /* GSM 1900 AMAM Master Table Segment 6 at freq. F3 */
//  uint16                                           gsm_1900_amam_master_tbl_seg6_f3[64];
//  /* GSM 1900 AMAM Master Table Segment 7 at freq. F3 */
//  uint16                                           gsm_1900_amam_master_tbl_seg7_f3[64];
//  /* GSM 1900 AMAM Master Table Segment 8 at freq. F3 */
//  uint16                                           gsm_1900_amam_master_tbl_seg8_f3[64];
//  /* GSM AMPM Master Table Segment 1 at freq. F3 */
//  uint32                                           gsm_ampm_master_tbl_seg1_f3[32];
//  /* GSM AMPM Master Table Segment 2 at freq. F3 */
//  uint32                                           gsm_ampm_master_tbl_seg2_f3[32];
//  /* GSM AMPM Master Table Segment 3 at freq. F3 */
//  uint32                                           gsm_ampm_master_tbl_seg3_f3[32];
//  /* GSM AMPM Master Table Segment 4 at freq. F3 */
//  uint32                                           gsm_ampm_master_tbl_seg4_f3[32];
//  /* GSM AMPM Master Table Segment 5 at freq. F3 */
//  uint32                                           gsm_ampm_master_tbl_seg5_f3[32];
//  /* GSM AMPM Master Table Segment 6 at freq. F3 */
//  uint32                                           gsm_ampm_master_tbl_seg6_f3[32];
//  /* GSM AMPM Master Table Segment 7 at freq. F3 */
//  uint32                                           gsm_ampm_master_tbl_seg7_f3[32];
//  /* GSM AMPM Master Table Segment 8 at freq. F3 */
//  uint32                                           gsm_ampm_master_tbl_seg8_f3[32];
//  /* DCS AMPM Master Table Segment 1 at freq. F3 */
//  uint32                                           dcs_ampm_master_tbl_seg1_f3[32];
//  /* DCS AMPM Master Table Segment 2 at freq. F3 */
//  uint32                                           dcs_ampm_master_tbl_seg2_f3[32];
//  /* DCS AMPM Master Table Segment 3 at freq. F3 */
//  uint32                                           dcs_ampm_master_tbl_seg3_f3[32];
//  /* DCS AMPM Master Table Segment 4 at freq. F3 */
//  uint32                                           dcs_ampm_master_tbl_seg4_f3[32];
//  /* DCS AMPM Master Table Segment 5 at freq. F3 */
//  uint32                                           dcs_ampm_master_tbl_seg5_f3[32];
//  /* DCS AMPM Master Table Segment 6 at freq. F3 */
//  uint32                                           dcs_ampm_master_tbl_seg6_f3[32];
//  /* DCS AMPM Master Table Segment 7 at freq. F3 */
//  uint32                                           dcs_ampm_master_tbl_seg7_f3[32];
//  /* DCS AMPM Master Table Segment 8 at freq. F3 */
//  uint32                                           dcs_ampm_master_tbl_seg8_f3[32];
//  /* GSM 850 AMPM Master Table Segment 1 at freq. F3 */
//  uint32                                           gsm_850_ampm_master_tbl_seg1_f3[32];
//  /* GSM 850 AMPM Master Table Segment 2 at freq. F3 */
//  uint32                                           gsm_850_ampm_master_tbl_seg2_f3[32];
//  /* GSM 850 AMPM Master Table Segment 3 at freq. F3 */
//  uint32                                           gsm_850_ampm_master_tbl_seg3_f3[32];
//  /* GSM 850 AMPM Master Table Segment 4 at freq. F3 */
//  uint32                                           gsm_850_ampm_master_tbl_seg4_f3[32];
//  /* GSM 850 AMPM Master Table Segment 5 at freq. F3 */
//  uint32                                           gsm_850_ampm_master_tbl_seg5_f3[32];
//  /* GSM 850 AMPM Master Table Segment 6 at freq. F3 */
//  uint32                                           gsm_850_ampm_master_tbl_seg6_f3[32];
//  /* GSM 850 AMPM Master Table Segment 7 at freq. F3 */
//  uint32                                           gsm_850_ampm_master_tbl_seg7_f3[32];
//  /* GSM 850 AMPM Master Table Segment 8 at freq. F3 */
//  uint32                                           gsm_850_ampm_master_tbl_seg8_f3[32];
//  /* GSM 1900 AMPM Master Table Segment 1 at freq. F3 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg1_f3[32];
//  /* GSM 1900 AMPM Master Table Segment 2 at freq. F3 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg2_f3[32];
//  /* GSM 1900 AMPM Master Table Segment 3 at freq. F3 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg3_f3[32];
//  /* GSM 1900 AMPM Master Table Segment 4 at freq. F3 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg4_f3[32];
//  /* GSM 1900 AMPM Master Table Segment 5 at freq. F3 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg5_f3[32];
//  /* GSM 1900 AMPM Master Table Segment 6 at freq. F3 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg6_f3[32];
//  /* GSM 1900 AMPM Master Table Segment 7 at freq. F3 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg7_f3[32];
//  /* GSM 1900 AMPM Master Table Segment 8 at freq. F3 */
//  uint32                                           gsm_1900_ampm_master_tbl_seg8_f3[32];
//  /* GSM Reference ARFCN for AMAM anfd AMPM Calibration at freq. F3 */
//  uint16                                           gsm_amam_arfcn_f3;
//  /* DCS Reference ARFCN for AMAM and AMPM calibration at freq. F3 */
//  uint16                                           dcs_amam_arfcn_f3;
//  /* GSM 850 Reference ARFCN for AMAM and AMPM calibration at freq. F3 */
//  uint16                                           gsm_850_amam_arfcn_f3;
//  /* GSM 1900 Reference ARFCN for AMAM and AMPM calibration at freq. F3 */
//  uint16                                           gsm_1900_amam_arfcn_f3;
//  /* GSM : External Measurement of DAC vs Power required for autocal */
//  nv_autocal_pwr_dac_type                          gsm_autocal_pwr_dac_f3;
//  /* DCS: External Measurement of DAC vs Power required for autocal */
//  nv_autocal_pwr_dac_type                          dcs_autocal_pwr_dac_f3;
//  /* GSM 850- Extenal measurement of DAC vs Pwr required for autocal */
//  nv_autocal_pwr_dac_type                          gsm_850_autocal_pwr_dac_f3;
//  /* GSM 1900 - Extenal measurement of DAC vs Pwr required for autocal */
//  nv_autocal_pwr_dac_type                          gsm_1900_autocal_pwr_dac_f3;
//  /* Antenna timing relative to the PA_EN_START GRFC */
//  int16                                            gsm_850_ant_timing_rel_to_pa_en_start;
//  /* GSM RTR6250 RSB */
//  nv_rtr6250_rsb_type                              gsm_rtr6250_rsb;
//  /* DCS RTR6250 RSB */
//  nv_rtr6250_rsb_type                              dcs_rtr6250_rsb;
//  /* GSM 850 RTR6250 RSB */
//  nv_rtr6250_rsb_type                              gsm_850_rtr6250_rsb;
//  /* GSM 1900 RTR6250 RSB */
//  nv_rtr6250_rsb_type                              gsm_1900_rtr6250_rsb;
//  /* Read language from SIM */
//  boolean                                          display_language_auto;
//  /* Input language follows display language. */
//  boolean                                          input_language_auto;
//  /* Is the introduction animation displayed when the browser starts. */
//  boolean                                          browser_display_splash;
//  /* Does browser need to send the HTTP referer. */
//  boolean                                          browser_http_referer;
//  /* Currently active browser profile number. */
//  uint8                                            browser_active_profile;
//  /* Disable loading and showing of images. */
//  boolean                                          browser_disable_image;
//  /* Disable loading and playing of sounds. */
//  boolean                                          browser_disable_sound;
//  /* Disable download of image, object tag and background sound. */
//  boolean                                          browser_disable_object;
//  /* Mailto URL tag initiates which type of messaging application. */
//  nv_wb_mailto_phonenum_enum_type                  browser_mailto_phonenum;
//  /* Mailto URL initiates a message with email, which app to start. */
//  nv_wb_mailto_email_enum_type                     browser_mailto_email;
//  /* Allow cookies in browser. */
//  boolean                                          browser_cookie_enable;
//  /* Browser pops up dialog box prior to visiting a web-site with security. */
//  boolean                                          browser_secure_prompt;
//  /* Browser stores the User ID and passwords for the user. */
//  boolean                                          browser_idcache;
//  /* Show phone title when browsing. */
//  boolean                                          browser_title_region;
//  /* Show session info screen (KB send/received) after session ended. */
//  boolean                                          browser_showsessioninfo;
//  /* Current active phone profile. */
//  nv_currently_active_profile_enum_type            currently_active_profile;
//  /* Whether to allow MP3 ringers. */
//  boolean                                          allow_mp3_ringers;
//  /* Whether to allow AACPlus ringers. */
//  boolean                                          allow_aacplus_ringers;
//  /* Whether to allow non-DRM ringers. */
//  boolean                                          allow_non_drm_ringers;
//  /* Whether call broadcast menu is enabled. */
//  boolean                                          cbs_enabled;
//  /* Maximum topic index the user can select for CBS. */
//  uint16                                           cbs_max_topic_index;
//  /* Minimum topic index that the user can select for CBS. */
//  uint16                                           cbs_min_topic_index;
//  /* Toggle whether CBS messages are received or not. */
//  boolean                                          cbs_allow_receive;
//  /* Toggle whether local cell information appears on the Idle screen. */
//  boolean                                          cbs_display_cell_info;
//  /* The preconfigured number of topics already installed. */
//  uint16                                           cbs_num_selected_topics;
//  /* IrDA device name. */
//  uint8                                            irda_device_name[NV_IRDA_DEVICE_NAME_SIZ];
//  /* IrDA Plug-N-Play parameters. */
//  uint8                                            irda_pnp_device_id[NV_IRDA_PNP_DEVICE_ID_SIZ];
//  /* IrDA Plug-N-Play parameters. */
//  uint8                                            irda_pnp_manufacturer[NV_IRDA_PNP_MANUFACTURER_SIZ];
//  /* IrDA Plug-N-Play parameters. */
//  uint8                                            irda_pnp_name[NV_IRDA_PNP_NAME_SIZ];
//  /* IrDA Plug-N-Play parameters. */
//  uint8                                            irda_pnp_device_category[NV_IRDA_PNP_DEVICE_CATEGORY_SIZ];
//  /* IrDA Plug-N-Play parameters. */
//  uint32                                           irda_pnp_compatibility_count;
//  /* IrDA Plug-N-Play parameters. */
//  uint32                                           irda_pnp_status;
//  /* IrDA Plug-N-Play parameters. */
//  uint16                                           irda_pnp_version;
//  /* The display language group number on the phone. */
//  uint16                                           display_language_group_num;
//  /* The current answer mode setting preference of the POC User. */
//  boolean                                          poc_auto_answer;
//  /* The time period for which incoming akert dialog is displayed */
//  uint16                                           poc_incoming_call_timeout;
//  /* Auto login logs the user onto the POC Server on phone startup */
//  nv_auto_login_enum_type                          poc_auto_login;
//  /* Allow wildcards in Auto-Accept Lists and Block Lists */
//  nv_poc_wildcards_enum_type                       poc_wildcards;
//  /* Number of items in the call log history */
//  uint8                                            poc_history_length;
//  /* Indicates whether to activate secondary PDP context */
//  boolean                                          poc_secondary_pdp_context;
//  /* Allows user to start speaking before a session is established. */
//  boolean                                          poc_early_session;
//  /* Quality of service - interactive/streaming */
//  boolean                                          poc_qos_mode;
//  /* Limit for the maximum number of concurrent users */
//  uint8                                            poc_max_concurrent_user_limit1;
//  /* Limit on the maximum number of concurrent users */
//  uint8                                            poc_max_concurrent_user_limit2;
//  /* Limit on the maximum number of concurrent users */
//  uint8                                            poc_max_concurrent_user_limit3;
//  /* Number of packets to buffer while the session is being established. */
//  uint16                                           poc_buffered_packets;
//  /* Toggles the output between earpiece and main speaker. */
//  boolean                                          poc_speaker_phone;
//  /* Notification on adding to another user's contact */
//  nv_im_notification_enum_type                     im_notification;
//  /* The user can set the client to automatically login on startup */
//  boolean                                          im_auto_login;
//  /* The different supported bearer by the instant messenger client. */
//  nv_im_supported_bearer_enum_type                 im_supported_bearers[NV_MAX_SUPPORTED_BEARERS];
//  /* Different CIR methods supported by the messenger client */
//  nv_supported_cir_method_enum_type                im_supported_cir_methods[NV_MAX_CIR_METHODS];
//  /* Maximum search results before the user is prompted to change criteria */
//  uint16                                           im_max_search_results;
//  /* Login sequence without prompting the user to enter id and password. */
//  boolean                                          im_short_login_sequence;
//  /* If no contacts exist then the user should be prompted. */
//  boolean                                          im_no_contacts_exist;
//  /* Disable the ability to send files. */
//  boolean                                          im_send_file_disabled;
//  /* Determine whether or not to ask the server for versions supported. */
//  boolean                                          im_version_discovery;
//  /* Login type may be normal login, 4 way login and AOL login */
//  nv_im_login_enum_type                            im_login_type;
//  /* Defines how messages should be delivered to the client. */
//  nv_im_delivery_method_enum_type                  im_initial_delivery_method;
//  /* Accept all content types */
//  boolean                                          im_any_content;
//  /* Accept all content types */
//  uint16                                           im_accepted_char_sets;
//  /* Allow wildcards in Auto-Accept Lists and Block Lists */
//  uint16                                           im_accepted_content_types;
//  /* Allows user to start speaking before a session is established. */
//  uint16                                           im_accepted_transfer_encodings;
//  /* Auto login logs the user onto the POC Server on phone startup */
//  uint32                                           im_accepted_content_length;
//  /* Autologin can be enabled for home network, never or always. */
//  uint32                                           im_parser_size;
//  /* Defines how messages should be delivered to the client. */
//  uint16                                           im_max_saved_conversations;
//  /* Determine whether or not to ask the server for versions supported. */
//  uint16                                           im_max_concurrent_conversations;
//  /* Different CIR methods supported by the messenger client */
//  uint16                                           im_supported_bearer_count;
//  /* Disable the ability to send files. */
//  uint32                                           im_server_port;
//  /* If no contacts exist then the user should be prompted. */
//  boolean                                          im_hide_server;
//  /* Indicates whether to activate secondary PDP context */
//  boolean                                          im_allow_change_server;
//  /* Limit for the maximum number of concurrent users */
//  uint8                                            im_internet_profile;
//  /* Limit on the maximum number of concurrent users */
//  uint32                                           im_knock_service_timeout;
//  /* Login type may be normal login, 4 way login and AOL login */
//  uint16                                           im_password[NV_IM_MAX_PASSWORD_SIZ];
//  /* Maximum search results before the user is prompted to change criteria */
//  uint16                                           im_cir_port[NV_MAX_CIR_PORT_SIZ];
//  /* Notification on adding to another user's contact */
//  uint16                                           im_schema_count;
//  /* Number of packets to buffer while the session is being established. */
//  uint16                                           im_cir_methods_count;
//  /* Quality of service - interactive/streaming */
//  uint32                                           im_multiple_transactions;
//  /* The current answer mode setting preference of the POC User. */
//  uint16                                           im_smsc_address[IM_MAX_SMSC_ADDR_SIZ];
//  /* The different supported bearer by the instant messenger client. */
//  uint16                                           im_optional_header[NV_IM_OPTIONAL_HEADER_SIZ];
//  /* Schemas supported for 4-way login */
//  uint16                                           im_digest_schemas[NV_IM_MAX_SCHEMA_COUNT][NV_IM_MAX_SCHEMA_NAME_LEN];
//  /* Maximum Number of concurrent users in a group. */
//  uint8                                            poc_limit_selection;
//  /* Login sequence without prompting the user to enter id and password. */
//  uint16                                           im_userid[NV_IM_MAX_USERID_SIZE];
//  /* Band Class 0 VCO coarse tuning item */
//  uint8                                            bc0_vco_tune_2[NV_VCO_CAL_LENGTH];
//  /* Band Class 1 VCO coarse tuning item */
//  uint8                                            bc1_vco_tune_2[NV_VCO_CAL_LENGTH];
//  /* Band Class 3 VCO coarse tuning item */
//  uint8                                            bc3_vco_tune_2[NV_VCO_CAL_LENGTH];
//  /* Band Class 4 VCO coarse tuning item */
//  uint8                                            bc4_vco_tune_2[NV_VCO_CAL_LENGTH];
//  /* Band Class 5 VCO coarse tuning item */
//  uint8                                            bc5_vco_tune_2[NV_VCO_CAL_LENGTH];
//  /* Band Class 6 VCO coarse tuning item */
//  uint8                                            bc6_vco_tune_2[NV_VCO_CAL_LENGTH];
//  /* Enable/Disable Real Player */
//  boolean                                          mm_enable_real;
//  /* If 1, saves function calls into RAM buffer */
//  uint8                                            diag_debug_call_trace;
//  /* Enables FastTrack */
//  uint8                                            enable_fasttrack;
//  /* Allow the user to edit the Id or password */
//  boolean                                          im_edit_messenger_id_pswd;
//  /* Show the safety tip menu when adding someone to the contact list. */
//  boolean                                          im_safety_tip;
//  /* String used to identify the client */
//  uint16                                           im_start_string[NV_IM_MAX_START_STR_SIZ];
//  /* Allow the user to edit the Id or password */
//  uint32                                           im_max_received_file_limit;
//  /* Incoming wap push can automatically open network connections */
//  boolean                                          wap_auto_connect;
//  /* Push lock-out timer to prevent denial of service attacks */
//  uint16                                           wap_lockout_time;
//  /* diag_spc_unlock_ttl will be used to set the diag_sp state on bootup */
//  uint8                                            diag_spc_unlock_ttl;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc0_im2_lpm_1;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc1_im2_lpm_1;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc3_im2_lpm_1;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc4_im2_lpm_1;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc5_im2_lpm_1;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc6_im2_lpm_1;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc0_im2_lpm_2;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc1_im2_lpm_2;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc3_im2_lpm_2;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc4_im2_lpm_2;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc5_im2_lpm_2;
//  /* IM2 calibration for low power modes */
//  nv_rf_rx_im2_cal                                 c0_bc6_im2_lpm_2;
//  /* IntelliCeiver Calibration Values */
//  uint8                                            c0_bc0_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
//  /* IntelliCeiver Calibration Values */
//  uint8                                            c0_bc1_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
//  /* IntelliCeiver Calibration Values */
//  uint8                                            c0_bc3_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
//  /* IntelliCeiver Calibration Values */
//  uint8                                            c0_bc4_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
//  /* IntelliCeiver Calibration Values */
//  uint8                                            c0_bc5_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
//  /* IntelliCeiver Calibration Values */
//  uint8                                            c0_bc6_intelliceiver_cal[NV_INTELLICEIVER_CAL_LENGTH];
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc0_lna_switchpoints_lpm_1;
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc1_lna_switchpoints_lpm_1;
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc3_lna_switchpoints_lpm_1;
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc4_lna_switchpoints_lpm_1;
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc5_lna_switchpoints_lpm_1;
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc6_lna_switchpoints_lpm_1;
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc0_lna_switchpoints_lpm_2;
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc1_lna_switchpoints_lpm_2;
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc3_lna_switchpoints_lpm_2;
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc4_lna_switchpoints_lpm_2;
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc5_lna_switchpoints_lpm_2;
//  /* LNA rise and fall switchpoints for low power modes */
//  nv_rf_rx_agc_lpm_switchpoints                    c0_bc6_lna_switchpoints_lpm_2;
//  /* Maps coarse tune codes to actual VCO frequency ranges */
//  uint8                                            rfr_vco_coarse_tuning_800[8];
//  /* Determines whether Network initiated deregistration is to be tried. */
//  boolean                                          poc_netinitdereg;
//  /* Amount of time the client waits for a response from the server. */
//  uint8                                            poc_app_timeout;
//  /* Specifies how long the registration will be valid. */
//  uint16                                           poc_registration_timeout;
//  /* Specifies after how long the client will reset the HTTP connection  */
//  uint16                                           poc_glm_timeout;
//  /* ID of  the connection (PDP) profile to use for Java apps at run time. */
//  uint8                                            java_connection_profile_id;
//  /* ID of internet (http proxy) profile to use for Java apps at run time. */
//  uint8                                            java_internet_profile_id;
//  /* Enable the power supply on the external GPS antenna. */
//  boolean                                          enable_ext_gps_antenna_pwr_supply;
//  /* PreSUPL WAP Gateway IP Address (in hex format) */
//  uint8                                            presupl_wap_gateway_address[NV_PRESUPL_WAP_GW_ADDR_SIZE];
//  /* PreSUPL WAP Gateway IP Address. */
//  uint16                                           presupl_wap_gateway_port;
//  /* GPSOne Position Report */
//  uint8                                            gps1_position_report;
//  /* Ringtone tone setting for voice calls. */
//  nv_ringtone_tone_setting_enum_type               set_voice_call_tone;
//  /* Connection PDP profiles, if TRUE override readonly flag for usrname/pw */
//  boolean                                          conn_profile_unpw_ro_override;
//  /* INET PDP profiles, if TRUE override readonly flag for set usrname/pw. */
//  boolean                                          internet_profile_unpw_ro_override;
//  /* Duration of RTI validity in msec */
//  uint32                                           aagps_rti_validity_dur;
//  /* nvi_byte_type taking one of 6 enum values */
//  uint8                                            ipv6_umts_failover_config;
//  /* Restrict the user from entering a userid or password for login */
//  boolean                                          poc_forbid_change_userid;
//  /* Password used for sip registration */
//  uint16                                           poc_wtuser_password[NV_POC_PASSWORD_SIZ];
//  /* Max number of msgs per topic for cell broadcast. */
//  uint8                                            cbs_max_msg_per_topic;
//  /* Forward bookmark via SMS, MMS, Email or prompt user. */
//  nv_wb_send_url_bkmark_enum_type                  browser_fwdurl_to;
//  /* Profile lock is SIM lock dependent. */
//  boolean                                          browser_wap_sim_combinelock;
//  /* Default WAP start page changeable by user? */
//  boolean                                          browser_startpage_readonly;
//  /* Indicate if RO obj should be displayed even if the DCF is not on phone */
//  boolean                                          cmgr_display_ro_for_missing_dcf;
//  /* User should be prompted to delete RO when manually deleting DCF */
//  boolean                                          cmgr_prompt_for_ro_delete;
//  /* User prompted before being redirect to the lic server if no lic avail. */
//  boolean                                          cmgr_auto_redirect_to_license_server;
//  /* User should be prompted prior to downloading content during render. */
//  boolean                                          set_drm_content_prompt;
//  /* Warn user that rights will expire if x or less hours remain. */
//  uint8                                            cmgr_wd_remaining_hours_1_threshold;
//  /* Warn user that rights will expire if x or less hours remain. */
//  uint8                                            cmgr_wd_remaining_hours_2_threshold;
//  /* Active content watchdog runs every x hours. */
//  uint8                                            cmgr_wd_run_every_hours;
//  /* User is to warned if active system content is about to expire. */
//  boolean                                          set_drm_expire_warning;
//  /* Maximum size of the preview data associated with one piece of content. */
//  uint32                                           cmgr_max_preview_data_size;
//  /* Load images changeable by user */
//  boolean                                          browser_disable_image_ro;
//  /* Load sounds changeable by user */
//  boolean                                          browser_disable_sound_ro;
//  /* Network timeout in seconds for WAP/HTTP requests. */
//  nv_wb_browser_timeout_enum_type                  browser_timeout;
//  /* Browser timeout read-only or not. */
//  boolean                                          browser_timeout_ro;
//  /* Browser secure prompt read-only or not. */
//  boolean                                          browser_secure_prompt_ro;
//  /* Sets the normal font size for the browser HTML/WML display area. */
//  nv_wb_fontsize_enum_type                         browser_fontsize;
//  /* Browser wrap at character or word boundaries. */
//  nv_wb_textwrap_enum_type                         browser_textwrap;
//  /* Increment by which pages are scrolled vertically when navigating. */
//  nv_wb_scrollstep_enum_type                       browser_scrollstep;
//  /* Show a dialog when exiting the browser. */
//  boolean                                          browser_exit_prompt;
//  /* Flag to indicate if the title region should be shown. */
//  boolean                                          browser_show_title_region;
//  /* Name of the operator link on the browser jump menu. */
//  uint16                                           browser_jump_portal_name[NV_BROWSER_JUMP_PORTAL_NAME_SIZ];
//  /* Name of the embbedded link 1 on the browser jump menu. */
//  uint16                                           browser_jump_embdlnk1_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
//  /* Name of the embbedded link 2 on the browser jump menu. */
//  uint16                                           browser_jump_embdlnk2_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
//  /* Name of the embbedded link 3 on the browser jump menu. */
//  uint16                                           browser_jump_embdlnk3_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
//  /* Name of the embbedded link 4 on the browser jump menu. */
//  uint16                                           browser_jump_embdlnk4_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
//  /* Name of the embbedded link 5 on the browser jump menu. */
//  uint16                                           browser_jump_embdlnk5_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
//  /* Name of the embbedded link 6 on the browser jump menu. */
//  uint16                                           browser_jump_embdlnk6_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
//  /* Name of the embbedded link 7 on the browser jump menu. */
//  uint16                                           browser_jump_embdlnk7_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
//  /* Name of the embbedded link 8 on the browser jump menu. */
//  uint16                                           browser_jump_embdlnk8_name[NV_BROWSER_JUMP_EMBDLNK_SIZ];
//  /* Voice Mailbox No. Line 1 */
//  uint16                                           voice_mail_line1[NV_VOICE_MAIL_LINE_SIZ];
//  /* Toggle whether Voice Mailbox is SIM dependent. */
//  boolean                                          voice_mail_use_sim_number;
//  /* Toggle whether to notify user that a Voicemail is available. */
//  boolean                                          voice_mail_notify;
//  /* Voice Mailbox No. Line 2 */
//  uint16                                           voice_mail_line2[NV_VOICE_MAIL_LINE_SIZ];
//  /* Camera application save location. */
//  uint8                                            camera_app_save_location;
//  /* Toggle if video telephony shows user image. */
//  boolean                                          vt_show_my_image;
//  /* Toggle if video telephony performs auto redial. */
//  boolean                                          vt_auto_redial;
//  /* Global ringer volume level. */
//  nv_ringer_volume_enum_type                       set_ringer_volume;
//  /* WCDMA External Antenna TX frequency compensation for the maximum power */
//  int16                                            wcdma_c0_tx_lim_vs_freq[16];
//  /* Identify if the SOS key should be displayed or not */
//  boolean                                          sos_key_enabled;
//  /* Number for emergency dialing/ SOS Key Assignment. */
//  uint8                                            sos_number[SOS_NUMBER_SIZ];
//  /* URL of the trusted domain */
//  uint8                                            wap_trusted_domain[WAP_MAX_URL_SIZ];
//  /* Controls behaviour what to do with Wap Push Service Loads (SL). */
//  uint8                                            wap_push_autoload[WAP_PUSH_AUTOLOAD_SIZ];
//  /* IP Address or domain name of the IM Server. */
//  uint8                                            im_server_address[NV_MAX_URL_SIZ];
//  /* The percentage increase for sip timers in GPRS networks */
//  uint16                                           poc_timeout_scale;
//  /* Defaults stored on first power up */
//  boolean                                          mr_defaults_stored;
//  /* Determines whether to play the startup sound */
//  boolean                                          set_play_startup_sound;
//  /* Indicates whether to play shutdown sound */
//  boolean                                          set_play_shutdown_sound;
//  /* Play the startup animation */
//  boolean                                          set_play_startup_animation;
//  /* Play the shutdown animation */
//  boolean                                          set_play_shutdown_animation;
//  /* ramp up and ramp down profile for polar GSM/EDGE. */
//  nv_gsm_polar_ramp_profile_type                   gsm_polar_ramp_profile;
//  /* MS-Based Back off factor to throttle data dowload */
//  uint8                                            gps1_msb_back_off_factor;
//  /* MS-Based Back off minimum duration to throttle data dowload */
//  uint32                                           gps1_msb_back_off_min;
//  /* MS-Based Back off maximum duration to throttle data dowload */
//  uint32                                           gps1_msb_back_off_max;
//  /* MS-Based Back off reset duration to throttle data dowload */
//  uint32                                           gps1_msb_back_off_reset;
//  /* Enable MS-B throttling  */
//  boolean                                          gps1_msb_throttle_enable;
//  /* Displays the Manual PLMN Selection Menu regardless of the info in card */
//  boolean                                          manual_plmn_sel;
//  /* Displays the Manual PLMN Selection Menu regardless of the info in card */
//  boolean                                          manual_plmn_selection;
//  /* number of consortium_configs */
//  uint16                                           consortium_config_numb;
//  /* HDR Equalizer on/off, Rake/Eq/best selection demod mode control */
//  uint8                                            hdr_equalizer_ctrl;
//  /* Enables the 802.11 power save mode (0=disabled) */
//  uint8                                            wlan_enable_ps_mode;
//  /* LNA rise for gain state 1 to gain state 2 transition */
//  uint16                                           mf_700_lna_rise_2;
//  /* LNA rise for gain state 1 to gain state 2 transition */
//  uint16                                           mf_700_lna_rise_3;
//  /* LNA rise for gain state 3 to gain state 4 transition */
//  uint16                                           mf_700_lna_rise_4;
//  /* LNA fall for gain state 2 to gain state 1 transition */
//  uint16                                           mf_700_lna_fall_2;
//  /* LNA fall for gain state 3 to gain state 2 transition */
//  uint16                                           mf_700_lna_fall_3;
//  /* LNA fall for gain state 4 to gain state 3 transition */
//  uint16                                           mf_700_lna_fall_4;
//  /* AGC calibration points versus frequency */
//  int16                                            mf_700_agc_vs_freq[64];
//  /* RX Calibration channel list  */
//  uint16                                           mf_700_rx_cal_chan[16];
//  /* MF RF HW Configuration */
//  uint16                                           mf_hw_config;
//  /* MF Band configuration */
//  uint16                                           mf_band_config;
//  /* AFC Loop Parameters */
//  nv_mf_afc_loop_params_type                       mf_afc_loop_params;
//  /* This is the last registered SCI value for Release D and above. */
//  int8                                             last_registered_sci;
//  /* Maximum number of characters in an MMS slide */
//  int16                                            mms_max_chars_slide;
//  /* Maximum number of slides in a messages */
//  uint8                                            mms_max_number_of_slides;
//  /* Maximum size of subject */
//  uint8                                            mms_max_subject_size;
//  /* Gives the default audio codec preference for QVideoPhone */
//  uint16                                           qvp_app_default_audio_capability_type;
//  /* Gives the default video codec preference for QVideoPhone */
//  uint16                                           qvp_app_default_video_capability_type;
//  /* Max number of Tx/Rx MRLP bytes to log(0= FULL RLP logging) */
//  uint16                                           hdrmrlp_num_bytes_to_log;
//  /* Secure time offsets */
//  nv_sectime_offsets_type                          sectime_time_offsets;
//  /* UMTS CS Data sends CONNECT after NT connect state (0=L2R 1=RLP) */
//  uint8                                            ds_ucsd_nt_connect_state;

} nv_item_type;


#endif  /* NV_ITEMS_H */

