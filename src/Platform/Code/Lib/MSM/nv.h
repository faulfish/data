#ifndef NV_H
#define NV_H
/*==========================================================================

              N V    T A S K    H E A D E R    F I L E

DESCRIPTION

  This header file contains all the definitions necessary for any task
  to interface with the Non Volatile Memory task, in order to access
  the NV EEPROM to read, write, and start.

Copyright (c) 1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000 by 
QUALCOMM Incorporated.  All Rights Reserved.
Copyright (c)  2001 by QUALCOMM, Incorporated.  All Rights Reserved.
===========================================================================*/

/*===========================================================================

                           EDIT HISTORY FOR FILE

$PVCSPath:  L:/src/asw/MSM5200/drivers/vcs/nv.h_v   1.17   10 Jul 2002 11:24:04   pingguan  $
$Header:   //BQT/VM67/Prjbase3/QSyncher_V2/PlatformTool/Code/Lib/MSM/nv.h.-arc   1.1   Apr 01 2009 14:19:26   Kevin Tai  $ $DateTime: 2003/08/25 15:59:26 $ $Author:   Kevin Tai  $
   
when       who     what, where, why
--------   ---     ---------------------------------------------------------
05/29/03   pg      Changed (FEATURE_DS_PAP) || (FEATURE_DS_CHAP) to
                   (FEATURE_DATA) || (FEATURE_DS).
03/27/03   pg      Define FEATURE_NV_OTASP when FEATURE_OTASP is defined.
10/29/02   pg      Added code for Run Time R-UIM Enable.  Added another command
                   for NV to process and added another interface function to
                   retrieve RTRE control.
10/07/02   he      Turned on internal feature FEATURE_NV_PAP when external feature 
                   FEATURE_GSM_GPRS is defined.
07/10/02   pg      Removed reference to T_O and T_Q.
05/30/02   pg      Turned on internal feature FEATURE_NV_PAP when external
                   feature FEATURE_DATA_WCDMA_PS is defined.
04/25/02   pg      Removed target dependent features under T_PC, T_SP, and T_DM.
03/13/02   kar     Added nv_cmd_r under FEATURE_RPC.
11/28/01   pg      Increament NVI_KLT_REV to generate an NV rebuild for moving
                   NV_RF_NV_LOADED_DATE_I from invariant file to non invariant
                   file.
11/21/01   pg      Added support for KOVU.
10/10/01   pg      Removed FEATURE_NV_IMSI_T so that True IMSI items are
                   always supported.
09/24/01   pg      Removed support for NV_IMEI_I and NV_IMEI_CHKSUM_I.
                   These items are no longer used.
06/29/01   pg      Made FEATURE_NV_RENTAL defined only for T_Q.
04/13/01   pg      Added support for special items NV_IMEI_I and 
                   NV_IMEI_CHKSUM_I.
04/02/01   pg      Deleted some redefined constants.
03/30/01   pg      Made changes to make use of the files generated by NVC.
                   Ported to simba MSM5200.
12/18/00   pg      Added support for TG=T_NT and FEATURE_TREX.
12/14/00   pg      Added pads to some enum types. 
12/13/00   pg      Removed #ifdef FEATURE_NV_ENUMS_ARE_WORDS on
                   nv_gps1_transport_type.
12/13/00   pg      Made nv_gps1_transport_type to occupy 4 bytes instead of 
11/29/00   pg      Replaced all internal defined features: FEATURE_XX_ENABLED
                   as NV_FEATURE_XX_ENABLED.
11/01/00   pg      Reverted the previous change.
                   Added supported for FEATURE_TRIMODE_ITEMS. If this feature
                   is turned on by customers, NV_FEATURE_TRIMODE_ITEMS is 
                   defined.
10/31/00   pg      Replaced NV_FEATURE_TRIMODE_ITEMS with FEATURE_TRIMODE_ITEMS.
                   And made it a feature to be turned on by customers.
10/19/00   pg      Added support for NV_GPS1_GPS_RF_LOSS_I associated with
                   FEATURE_GPSONE.
10/05/00   pg      Merged TigerII and PP/PPG archive.
                   Added support for NV_SUBPCG_PA_WARMUP_DELAY_I associated
                   with FEATURE_SUBPCG_PA_WARMUP_DELAY.
09/25/00   pg      Added NV_FEATURE_TRIMODE_ITEMS to associated with 
                   NV_PCS_ENC_BTF_I to make sure that it can only accessed
                   in Trimode builds.
09/20/00   pg      Added support for invariant item NV_BD_ADDR_I associated
                   with FEATURE_BT.
09/18/00   pg      Added support for NV_PCS_ENC_BTF_I and NV_CDMA_ENC_BTF_I 
                   associated with FEATURE_ENC_BTF_IN_NV.
09/07/00   pg      Added support for NV_GPS1_GPS_RF_DELAY_I and 
                   NV_GPS1_CDMA_RF_DELAY_I associated with FEATURE_GPSONE.
09/01/00   pg      Changed FEATURE_RUIM_SMS to FEATURE_RUIM_SMSS.
08/29/00   rp      Fixed comment on line 6511 to prevent compiler warnings. 
08/25/00   pg      Added support for 
                   NV_RUIM_SMS_STATUS_I 
                   NV_PCS_TX_LIN_MASTER0_I          
                   NV_PCS_TX_LIN_MASTER1_I          
                   NV_PCS_TX_LIN_MASTER2_I 
                   NV_PCS_TX_LIN_MASTER3_I   
                   NV_PCS_PA_RANGE_OFFSETS_I
                   NV_PCS_TX_COMP0_I
                   NV_PCS_TX_COMP1_I
                   NV_PCS_TX_COMP2_I
                   NV_PCS_TX_COMP3_I
                   NV_DIAG_RESTART_CONFIG_I
07/25/00   rp      Defined NV_FS_FILENAME_MAX_LENGTH to remove dependency on
                   FS_FILENAME_MAX_LENGTH.
07/18/00   pg      Changed NV_UBROWSER_TABLE_SIZE from 32 to 30.
07/06/00   pg      Added support for NV_MM_STORAGE_DEVICE_I, NV_UBROWSER_I.
07/05/00   pg      Added support for NV_MM_RINGER_FILE_I.
06/23/00   rp      Merged in support for all MSM3300 GPS One items under
                   FEATURE_GPSONE.
06/23/00   rp      Added NVI_VERNO_EXT_BYTE_2 and NVI_VERNO_EXT_BYTE_3
                   used in nvi_verno_ext_type to track new features.
06/07/00   rp      Incremented minor revs due to NVIM file changes.
05/30/00   pg      Added support for NV_PRIMARY_DNS_I, NV_SECONDARY_DNS_I.
                   Added support for NV_DIAG_PORT_SELECT_I associated with
                   FEATURE_DIAG_PORT_SELECT.
05/22/00   pg      Fixed typo in comment so that tools would be able to 
                   generate nv list automaticly.
05/08/00   jah     Added signal for R-UIM access
05/05/00   pg      Cleaned out obsolete items:
                   NV_PPCNCH_I
                   NV_SPCNCH_I
                   NV_CDMA_TX_LIM_VS_VOLT_I
                   NV_WILDCARD_SID_I
                   NV_ROAM_MSG_I
                   NV_FULL_PREF_MODE_I
                   NV_CDMA_TX_LIMIT_I
                   NV_CDMA_RIPPLE_I
                   NV_CDMA_RX_OFFSET_I
                   NV_CDMA_RX_POWER_I
                   NV_CDMA_RX_ERROR_I
                   NV_CDMA_TX_SLOPE_1_I
                   NV_CDMA_TX_SLOPE_2_I
                   NV_CDMA_TX_ERROR_I
                   NV_VOC_GAIN_I
                   NV_POWER_CYCLES_I
                   NV_MESSAGE_ALERT_I
                   NV_AUTO_REDIAL_SHADOW_I
                   NV_IMSI_I
                   NV_RESTRICT_GLOBAL_I
                   NV_CALL_TIMER_I
                   NV_LIFE_TIMER_I
                   NV_SONY_ATTEN_1_I
                   NV_SONY_ATTEN_2_I
                   NV_SIO_PWRDWN_I
05/02/00   pg      Changed NV_TX_COMP_I from indexed item to individual items:
                   NV_TX_COMP0_I, NV_TX_COMP1_I, NV_TX_COMP2_I, NV_TX_COMP3_I.
04/25/00   pg      Added support for NV_PA_RANGE_OFFSETS_I, NV_TX_COMP_I 
                   associated with FEATURE_PA_RANGE_TEMP_FREQ_COMP.
                   Added support for SDAC items associated with 
                   FEATURE_STEREO_DAC.
                   Added support for multimedia items associated with 
                   FEATURE_MULTIMEDIA.
04/09/00   pg      Added support for NV_PREF_FOR_RC_I, NV_DS_DEFAULT_BAUD_I,
                   NV_DIAG_DEFAULT_BAUD_I, NV_SIO_DEV_MAP_MENU_ITEM_I,
                   NV_TTY_I.
03/29/00   rp      Incremented minor revs due to array update for
03/18/00   rp      Fixed typo in NV_RUIM_CHV_SIZE. 
03/16/00   rp      Added support for R-UIM items
                   sms_bc_service_table.
03/13/00   rp      Added conditional code for Broadcast SMS items support to
                   limit the table size with EEPROM. 
03/09/00   rp      Changed #ifdef FEATURE_DS_PAP to 
                   #if (defined (FEATURE_DS_PAP) || defined (FEATURE_DS_CHAP) )
03/09/00   rp      Added support for RF calibration items associated with
                   FEATURE_PA_RANGE_DIG_COMP and FEATURE_4PAGE_TX_LINEARIZER.
03/09/00   rp      Updated type for NVI_IM_LEVEL1_I and NVI_IM_LEVEL2_I from
                   byte to int1.  
03/01/00   rp      Added limited support for nvi_verno_ext_type to track new 
                   feature definitions so that a rebuild will occur when
                   feature selection changes, this code will be obsolete
                   when the new NV meta compiler is available in the future.
02/23/00   rp      Changed type for NV_CDMA_LNA_OFFSET_VS_FREQ_I and 
                   NV_CDMA_LNA_12_OFFSET_VS_FREQ_I from word to int1.  
02/22/00   rp      Added support for new RFR3100 items for Trimode.
02/22/00   rp      Changed type for NV_LNA_RANGE_12_OFFSET_I from word to 
                   int2.  
02/22/00   rp      Added support for new RFR3100 item NV_RX_AGC_MIN_11_I.
02/22/00   rp      Made NAM_LOCK a per-NAM item and added it to OTASP_COMMIT.
02/16/00   rp      Added support for new RFR3100 items.
01/31/00   rp      Added Broadcast SMS items support.
12/06/99   rp      Added Trimode items support.
                   If Trimode (FEATURE_CDMA_1900 and FEATURE_CDMA_800) then
                   #define NV_FEATURE_TRIMODE_ITEMS, FEATURE_NV_ANALOG,
                   NV_FEATURE_IMSI_T_ITEMS and NV_FEATURE_SSPR_ENHANCEMENTS. 
                   Updated nv_mode_enum_type to support Trimode. 
11/24/99   rp      Incremented minor revs due to NVIM file changes.
10/14/99   rp      Added #pragma pack(1) for Comet testing.
10/04/99   rp      Removed definitions for FEATURE_NV_OTASP_800.  Added 
                   a single defintion for FEATURE_NV_OTASP based on
                   FEATURE_NV_OTASP.
                   Added featurized support for NV_ROAM_MSG_I, NV_OTKSL_FLAG_I,
                   NV_SMS_REMINDER_TONE_I, NV_FULL_PREF_MODE_I,
                   NV_UP_BROWSER_WARN_I, NV_USER_ZONE_ENABLED_I, NV_USER_ZONE_I,
                   NV_AUTO_VOLUME_ENABLED_I, and NV_WILDCARD_SID_I for Digby.
                   Addded support to target T_O for Digby.
                   Increased nv_up_parms_type from 6 entries to 10 for Digby.
09/15/99   ymc     Undefined NV_FEATURE_PDM_TABLES as PRF3000 doesn't support it.
08/16/99   rp      Removed support for NV_PAP_DATA_I. Added support for
                   NV_PAP_USER_ID_I and NV_PAP_PASSWORD_I.
08/13/99   rp      Added support for NV_PAP_DATA_I.
07/28/99   kmp     Removed #else from #if (TG==T_O) for PDM tables. Added
                   PDM tables back for all PCS builds.
07/26/99   ks      Added support for target T_O (Odie) and enabled the PDM
                   Tables.
06/30/99   kmp     Removed references to FEATURE_NV_JSTD008 and replace them
                   with FEATURE_NV_TMSI. Replaced FEATURE_JSTD008 with
                   FEATURE_CDMA_1900 and removed PACKED from the enums for the
                   ARM 2.50 compiler. Added support for PCS NV True IMSI items.
04/18/99   snn     Enabled NV_FEATURE_PDM_TABLES in the JSTD008 path because PDM1 
                   PDM2 are used in the PCS build.
04/18/99   abh     Modified nv_otasp_commit_type otasp_commit to 
                   nv_otasp_commit_type * otasp_commit                   
04/09/99   abh     Made changes to use HOME_SID_NID item in case of OTASP commit
                   for SSPR enabled targets
04/02/99   abh     Added definitions for FEATURE_NV_OTASP_800.
03/31/99   snn     Deleted the references to 80186 pragma packs
03/31/99   snn     Added new feature definitions under T_G. 
03/26/99   snn     Modified the NVI_KLT_REV to 0x81 and NVI_VERNO_MIN;
03/24/99   snn     Added definitions for the SSPR Enhancements.
03/11/99   snn     ck made some changes to earlier files and I added them here.
                   Ifdefed the Service Negotiation item PREF_VOICE_SO_I under
                   FEATURE_EVRC_SO_MGMT
03/11/99   snn     udp made some changes to earlier files and I added them here.
                   Added T_Q #ifdef for rental items
03/11/99   snn     ny made some changes to earlier files and I added them here.
                   Cleaned up the compilation to remove warnings/error messges.
                   Applied merge guidelines 3.0 to clean up the code
03/19/99   ls      Made NV_OTKSL_I universal.
03/11/99   ls      Added NV_DATA_AUTO_PACKET_DETECTION_I item.
03/05/99   ls      Made UP link access key a separate item.
03/02/99   ls      Changed "int" to "word" in UP items.
02/26/99   ls      Added MDR items and IS-95B support.
02/11/99   ls      Merged OTASP 3.0.
02/10/99   ls      Added new Odie configuration.
02/05/99   ls      Changed featurization of NV_PREF_MODE_I.
02/03/99   ls      Introduced enums-as-words option.
02/02/99   ls      Added more PACKED and pads, added stack checker items.
01/28/99   ls      Added a new TGP configuration.
01/14/99   ls      Added PDM tables support for ISS2 targets.
01/12/99   ls      Added PACKED keyword to more types.
12/03/98   ls      Added additional support for FEATURE_NV_CARRIER_ITEMS.
11/29/98   ls      Added support for FEATURE_NV_CARRIER_ITEMS for T_MD.
11/21/98   ls      Added nv_dp_capacity function and NV_OUTPUT_UI_KEYS_I.
11/19/98   dlb     Padded command enum's to 16 bits.
11/09/98   ls      Added SSPR_ENHANCEMENTS to new Peabody configuration.
11/04/98   ls      Added another Peabody configuration.
10/30/98   ls      Linked SMS auto-reservations with external UI feature.
10/28/98   dlb     Added support for ARM.
10/26/98   ls      Added NV_SRDA_ENABLED_I.
10/19/98   ls      Merged remainder of SSPR Enhancements and IMSI-T.
10/09/98   ls      Added SSPR_ENHANCEMENTS support to Odie, Peabody, Q.
10/07/98   ls      Added large roaming list configuration for Odie.
10/01/98   ls      Changed EVRC item subtypes and added NV_SMS_AUTO_DELETE_I.
09/29/98   ls      Added EVRC, VRHFK, and new RF Cal items.
09/21/98   ls      Increased MAX_SPEED_DIALS to 109 for Q and Odie targets.
09/10/98   ls      Revived AUTO_ANSWER_SHADOW, added NV_SIO_PWRDWN_I.
09/08/98   ht      Added nv_ram_roaming_list_type for FASTPRL.
08/27/98   ls      Added NV_AFAX_I, plus other configuration changes.
08/25/98   ls      Added CARRIER_INFO for module.
08/19/98   ls      Added BORSCHT items.
08/11/98   ls      Added NV_FULL_SYSTEM_PREF_I.
08/04/98   ls      Added rental timer enabled item support.
08/02/98   ls      Added rental counter item support.
07/27/98   ls      Added rental timer items.
07/14/98   ls      Merged remainder of SSPR-800 support under internal 
                   feature control.
07/06/98   ls      Partial merge of SSPR-800: added IS-683A PRL support.
06/22/98   ls      Removed Unwired Planet cache.
06/12/98   ls      Added Unwired Planet alert items, fixed ISS2 roaming
                   list sizing problem.
06/11/98   ls      Added web items support for all targets except T_I2.
06/04/98   ls      Implemented dynamic pool reservation system.
05/14/98   ls      Added NV_PDM1_VS_TEMP_I and NV_PDM2_VS_TEMP_I.
05/08/98   ls      Added next set of SSPR-800 changes.
04/30/98   ls      Added SSPR-800 new/changed items.
04/17/98   grl     Changed MAX_SPEED_DIALS to 109 for T_DM and T_SP targets.
03/19/98   ls      Added PDM1, BELL_MODEM, and ALERTS_LVL_SHADOW.
01/20/98   ls      Added DTACO items, new RF Cal items, version field in
                   roaming list, and Odie target.
12/22/97   ls      Added AUTOMATIC and E911 values for PREF_MODE item.
12/16/97   ls      Added RF Cal pointer, elapsed_time item, and disconnect
                   timer.
11/26/97   ls      Removed several obsolete items.
11/05/97   ls      Added Unwired Planet support, version 2.
10/31/97   ls      Made OTKSL available to 2-NAM builds.
10/22/97   ls      ISS2 builds always have a 1K roaming list.
10/21/97   ls      Added data services items.
08/29/97   ls      Rebuild due to nvi_dir_number_type change.
08/22/97   ls      Replaced calculate_sms_memavail() with sms_sizeof().
08/03/97   ls      Added nv_calculate_sms_memavail() function plus support.
07/23/97   ls      Added initial support for Unwired Planet.
07/22/97   ls      Changed roaming list max size to 1024 when autosize
                   feature is enabled.
07/21/97   ls      Changed roaming list max size to 1000 when autosize
                   feature is enabled.
07/16/97   ls      Made redial item available to T_Q target.
07/15/97   ls      Added 2-NAM with 4 SID/NID pairs configuration for TGP.
07/01/97   ls      Added 8K NV support for ISS2, removed 4-NAM TGP target.
06/17/97   dhh     Added target T_Q for Q phone.
06/06/97   ls      Added voice_privacy_alert item for TGP.
06/05/97   ls      Added another phone book entry for ISS2.
06/03/97   ls      Implemented auto-detection of EEPROM configuration.
05/15/97   ls      Added support for OTASP-800.
04/30/97   ls      Added ISS2 dialing plan state table item.
04/22/97   ls      Made redial item available to all TGP variants.
04/02/97   ls      Added Clam-Shell Call Answer item, removed old MRU
                   table format.
03/14/97   jjn     Defined new target called T_MD for the Module.
02/25/97   ls      Re-enabled T_DM and T_SP configurations.
02/13/97   ls      Added vibrator item, defined both MRU table formats.
01/29/97   ls      Re-enabled ISS2 non-JSTD008 configuration.
01/23/97   ls      Added support for TGP without Roaming Lists or MRU Table.
01/17/97   ls      Changed MRU Table format.
01/08/97   ls      Increment major, not minor verno until PST updated.
01/03/97   ls      Featurized NV.
11/11/96   ls      Added valid flag to roaming_list_type.
10/03/96   ls      Added NV_TIMED_PREF_MODE_I
08/22/96   ls      Make FEATURE_JSTD008 available to ISS2 target
08/14/96   ls      Save RAM by using a single, global roaming list buffer
08/06/96   ls      Added FEATURE_NV_ONE_NAM_RL_LARGE
07/18/96   ls      Fixed embedded comment for lint
07/03/96   ls      Added NV_REDIAL_I item
06/26/96   ls      Added Roaming List and MRU Table support
06/17/96   ls      Added support for OTASP "commit" operation
06/06/96   ls      Increased to 31 speed dials for ISS2
05/30/96   ls      Added initial subset of J-STD-008 NAM parameters and 
                   extensions
05/10/96   ls      Added PCS registration updates
02/28/96   ls      Changed types of RF Cal items NV_LNA_RANGE_RISE_I and
                   NV_LNA_RANGE_FALL_I to int1
02/27/96   ls      Added N1M nv item
02/26/96   ls      Increased NV_SMS_DATA_SIZ to 388
02/20/96   ls      Added RF Calibration items
01/30/96   ras     Pre-code review cleanup
12/12/95   ras     added NV_CHKPNT_ENA_F and NV_CHKPNT_DIS_F
11/29/95   ras     changed NV_SYS_SID_ONLY to NV_SYS_HOME_PREF
11/22/95   ras     added NV_HW_CONFIG. Fixed sizing of WDC.
10/31/95   ras     added #if's for initial CSS build from ref. "spooky"
10/02/95   ras     added fm_agc,fsc2,fsc2_chksum,wdc, moved lcd to fixed item.
09/18/95   ras     changed pwr_up_cnt to pwr_dwn_cnt
09/11/95   ras     added fm_lna,life_timer_g,call_timer_g, pwr_up_tmr
09/08/95   ras     added support for ALARMS, STANDING_ALARMS, DIALING_PLAN,
                   ISD_STD_PASSWD, ISD_STD_RESTRICT
09/05/95   ras     all ISS2 speed dials are 21. Added NV_FSC_I.
08/31/95   dak     Changed NV_MAX_SPEED_DIALS to be 21 in ISS2/INDIA and
                   20 in ISS2/US.
08/23/95   ras     added DIR_NAME
08/17/95   jmk     Took out the T_SP conditionally excluded stuff.  Kept in
                   the T_SP added at the same place as T_DM.
08/11/95   jmk     Added T_SP conditional compilation (exclude rex, protos, etc)
08/08/95   ras     lint cleanup, IMSI, bad pwr down structures
07/17/95   ras     added support for sms
06/11/95   ras     added support for 20 new rf & ui items
05/22/95   ras     Gemini back to 102 stored numbers
05/12/95   ras     rf item additions + NV_LCD_I - NV_BRIGHT_I
05/09/95   ras     Initial next generation nv checkin
12/17/93   jjw     Added DM address item
11/08/93   jjw     uncommented the External Port mode values
11/04/93   jjw     Fixed a boo-boo (sony_atten_2)
08/22/93   jjw     Added data services items and several other items
05/14/93   jjw     Added compile-time directive for Beta II target
05/10/93   jjw     Changed FM_RSSI to a min_max type
04/06/93   jjw     Major upgrade: Added numerous new items, changed numerous 
                   items, removed ESN from poke, disallowed changing ESN after
                   it becomes non-zero
02/05/93   jjw     Added new items: 1) FM TX power levels (8) and 2) V Battery
                   minimum and maximum values.
10/29/92    ip     Modified items: err_log, sid_acq, auto_answer,
                   auto_redial, page_set, stack_idx.  Added items:
                   unit_id, name_nam, roam_timer, freq_adj.
10/07/92    ip     Removed boot_err item.
07/18/92    ip     Release after code review and initial unit test.
07/03/92    ip     Released per CAI 2.0 plus several items changes.
04/10/92    ip     Changes after code review and per CAI Rev 1.14.
02/24/92    ip     First porting of file from brassboard to DMSS.

===========================================================================*/

/*===========================================================================
 
                           INCLUDE FILES

===========================================================================*/

#include "target.h"
#include "comdef.h"
#include "rex.h"
#include "queue.h"
#include "qw.h"

#ifdef FEATURE_TREX
#error code not present
#endif

#ifdef FEATURE_TREX
#error code not present
#endif

#include "nv_items.h"     // This header file is generated by NVC

#ifdef FEATURE_TREX
#error code not present
#endif


/*===========================================================================
 
                           DATA DECLARATIONS

===========================================================================*/

/*  Signals declarations.                                                  */

#define  NV_RPT_TIMER_SIG     0x0001      /* Watchdog report signal */
#define  NV_WRITE_TIMER_SIG   0x0002      /* Write timer signal */
#define  NV_CMD_Q_SIG         0x0004      /* Command queue signal */
#define  NV_ERR_LOG_SIG       0x0008      /* error log buffer siganl */

#ifdef FEATURE_NV_RUIM
#define  NV_RUIM_ACCESS_SIG   0x0010      /* R-UIM Access Synchronization  */
#endif

/*  Reserved signals.                                                      */

#define  NV_RSVD_0010_SIG     0x0010
#define  NV_RSVD_0020_SIG     0x0020
#define  NV_RSVD_0040_SIG     0x0040
#define  NV_RSVD_0080_SIG     0x0080
#define  NV_RSVD_0100_SIG     0x0100
#define  NV_RSVD_0200_SIG     0x0200
#define  NV_RSVD_0400_SIG     0x0400
#define  NV_RSVD_0800_SIG     0x0800

/*  Signals 0x1000 thru 0x8000 are system wide and defined in task.h.      */

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

#ifdef FEATURE_TREX
#error code not present
#endif

#ifdef FEATURE_TREX
#error code not present
#endif


/*  Command codes when command is issued to the NV task.                   */
#ifdef FEATURE_NV_ENUMS_ARE_WORDS
#error code not present
#else
  typedef enum {
    NV_READ_F,          /* Read item */
    NV_WRITE_F,         /* Write item */
    NV_PEEK_F,          /* Peek at a location */
    NV_POKE_F,          /* Poke into a location */
    NV_FREE_F,          /* Free an nv item's memory allocation */
    NV_CHKPNT_DIS_F,    /* Disable cache checkpointing for glitch recovery */
    NV_CHKPNT_ENA_F,    /* Enable cache checkpointing for glitch recovery */
    NV_OTASP_COMMIT_F,  /* Commit (write) OTASP parameters to nv */
    NV_REPLACE_F,       /* Replace (overwrite) a dynamic pool item */
    NV_INCREMENT_F,     /* Increment the rental timer item */
#ifdef FEATURE_UIM_RUN_TIME_ENABLE
    NV_RTRE_OP_CONFIG_F,/* Set the operational configuration of RTRE */
#endif /* FEATURE_UIM_RUN_TIME_ENABLE */
    NV_FUNC_ENUM_PAD = 0x7FFF     /* Pad to 16 bits on ARM */
  } nv_func_enum_type;
#endif


/*  Returned status codes for requested operation.                         */
#ifdef FEATURE_NV_ENUMS_ARE_WORDS
#error code not present
#else
  typedef enum {
    NV_DONE_S,          /* Request completed okay */
    NV_BUSY_S,          /* Request is queued */
    NV_BADCMD_S,        /* Unrecognizable command field */
    NV_FULL_S,          /* The NVM is full */
    NV_FAIL_S,          /* Command failed, reason other than NVM was full */
    NV_NOTACTIVE_S,     /* Variable was not active */
    NV_BADPARM_S,       /* Bad parameter in command block */
    NV_READONLY_S,      /* Parameter is write-protected and thus read only */
    NV_BADTG_S,         /* Item not valid for Target */
    NV_NOMEM_S,         /* free memory exhausted */
    NV_NOTALLOC_S,      /* address is not a valid allocation */
    NV_STAT_ENUM_PAD = 0x7FFF     /* Pad to 16 bits on ARM */
  } nv_stat_enum_type;
#endif

/*  Dynamic Pool Reservation return type.  */
typedef struct {
  word    amount_reserved;      /* number of bytes actually reserved */
  dword   confirmation_code;    /* confirmation code for the reservation */
} nv_reservation_type;

#define  NV_INVALID_CONF_CODE   0xFFFFFFFF
#define  NV_MAX_RSVD_AMOUNT     0x01C0       /* largest valid request  */


/***************************************************************************/
/*                                                                         */
/* NV Features                                                             */
/* ----------------------------------------------------------------------- */
/*                                                                         */
/* FEATURE_NV_ONE_NAM_RL_LARGE   Specifies a single NAM with a large       */
/*                                 roaming list.                           */
/* FEATURE_NV_TWO_NAMS_RL_MEDIUM Specifies two NAMs with medium-sized      */
/*                                 roaming lists.                          */
/* FEATURE_NV_TWO_NAMS_RL_SMALL  Specifies two NAMs with small roaming     */
/*                                 lists.                                  */
/* FEATURE_NV_JSTD008            Enables J-STD-008 parameters(obsolete).   */
/* FEATURE_NV_TMSI               Enables TMSI parameters.                  */
/* NV_FEATURE_SSPR_ENHANCEMENTS  Enables SSPR-800 items and modifications. */
/* FEATURE_IS683A_PRL            Selects IS-683 format roaming list.       */
/* NV_FEATURE_ROAMING_LIST_683   Enables IS-683 format roaming list.       */
/* FEATURE_NV_1K_RL              Specifies a 1K roaming list regardless of */
/*                                 autosize results.                       */
/* NV_FEATURE_200_1K_RL          Specifies 200 byte roaming list(s) for 8K */
/*                                 phones, 1K roaming list(s) for 16K.     */
/* NV_FEATURE_PRL_ITEMS          Enables roaming list and related items.   */
/* NV_FEATURE_IMSI_T_ITEMS       Enables True IMSI item support.           */
/* NV_FEATURE_ANS_SHADOW_ITEMS   Enables AUTO_ANSWER_SHADOW item support.  */
/* NV_FEATURE_SIO_PWRDWN_ITEMS   Enables NV_SIO_PWRDWN item support.       */
/* FEATURE_NV_ANALOG             Enables analog calling parameters (number */
/*                                 of NAMs depends on target).             */
/* FEATURE_NV_OTASP              Enables OTASP parameters.                 */
/* FEATURE_NV_RF_CAL             Enables RF calibration parameters.        */
/* FEATURE_NV_DIAL_PLAN          Enables ISS2 dialing plan parameters.     */
/* FEATURE_NV_ALARMS             Enables ISS2 alarm parameters.            */
/* FEATURE_NV_FULL_DIAL_TYPE     Enables status and/or time stamp fields   */
/*                                 in dial type and stack dial type items. */
/* FEATURE_NV_EXTENDED_UI        Enables TGP-unique items and the duration */
/*                                 field in stack dial type items.         */
/* FEATURE_NV_REDIAL_ITEM        Enables "last number redial" item.        */
/* NV_FEATURE_RENTAL_ITEMS       Enables rental timer items.               */
/* NV_FEATURE_BORSCHT_ITEMS      Enables Borscht/payphone/afax, etc items. */
/* NV_FEATURE_TPR_ITEMS          Enables Timeout-for-Polarity-Reversal     */
/*                                 item for ISS2.                          */
/* FEATURE_NV_CARRIER_ITEMS      Enables Carrier Info items.               */
/* FEATURE_NV_ATTENUATION        Enables audio attenuation items.          */
/* FEATURE_NV_SI_DATA            Enables stack-checker diagnostic items    */
/* FEATURE_NV_FACTORY_INFO       Enables the factory info item (note: not  */
/*                                 the same as the free-form factory info  */
/*                                 data area).                             */
/* FEATURE_NV_DYNAMIC_ITEMS      Enables dynamic pool operations for       */
/*                                 certain non-SMS items.                  */
/* NV_FEATURE_WEB_ITEMS          Enables web browser items.                */
/* NV_FEATURE_BELL_MODEM         Enables the BELL_MODEM item for ISS2.     */
/* NV_FEATURE_PDM_TABLES         Enables the PDM1/2_VS_TEMP tables and     */
/*                                 disables PA_RANGE_VS_TEMP.              */
/* NV_FEATURE_I2C                Specifies use of I2C library routines for */
/*                                 accessing the EEPROM.                   */
/* FEATURE_NV_24LC32             Specifies model 24LC32 NV part in use.    */
/* FEATURE_NV_24LC65             Specifies model 24LC65 NV part in use.    */
/* FEATURE_NV_CHECKPOINT         Enables cache checkpointing for glitch    */
/*                                 recovery.                               */
/* FEATURE_NV_DEADCELL_RECOVERY  Enables deadcell recovery.                */
/* FEATURE_NV_UNIT_TEST          Enables unit test code.                   */
/*                                                                         */
/***************************************************************************/

#ifdef FEATURE_NV_TMSI
#error Cannot externally #define FEATURE_NV_TMSI
#endif
#ifdef NV_FEATURE_SSPR_ENHANCEMENTS
#error Cannot externally #define NV_FEATURE_SSPR_ENHANCEMENTS
#endif
#ifdef NV_FEATURE_ROAMING_LIST_683
#error Cannot externally #define NV_FEATURE_ROAMING_LIST_683
#endif
#ifdef FEATURE_NV_1K_RL
#error code not present
#endif
#ifdef NV_FEATURE_200_1K_RL 
#error Cannot externally #define NV_FEATURE_200_1K_RL 
#endif
#ifdef NV_FEATURE_PRL_ITEMS
#error Cannot externally #define NV_FEATURE_PRL_ITEMS
#endif
#ifdef NV_FEATURE_IMSI_T_ITEMS
#error Cannot externally #define NV_FEATURE_IMSI_T_ITEMS
#endif
#ifdef NV_FEATURE_ANS_SHADOW_ITEMS
#error code not present
#endif
#ifdef NV_FEATURE_SIO_PWRDWN_ITEMS
#error code not present
#endif
#ifdef FEATURE_NV_ANALOG
#error Cannot externally #define FEATURE_NV_ANALOG
#endif
#ifdef FEATURE_NV_OTASP
#error code not present
#endif
#ifdef FEATURE_NV_RF_CAL
#error Cannot externally #define FEATURE_NV_RF_CAL
#endif
#ifdef FEATURE_NV_DIAL_PLAN
#error code not present
#endif
#ifdef FEATURE_NV_ALARMS
#error code not present
#endif
#ifdef FEATURE_NV_FULL_DIAL_TYPE
#error Cannot externally #define FEATURE_NV_FULL_DIAL_TYPE
#endif
#ifdef FEATURE_NV_EXTENDED_UI
#error Cannot externally #define FEATURE_NV_EXTENDED_UI
#endif
#ifdef FEATURE_NV_REDIAL_ITEM
#error Cannot externally #define FEATURE_NV_REDIAL_ITEM
#endif
#ifdef NV_FEATURE_RENTAL_ITEMS
#error code not present
#endif
#ifdef NV_FEATURE_BORSCHT_ITEMS
#error code not present
#endif
#ifdef NV_FEATURE_TPR_ITEMS
#error code not present
#endif
#ifdef NV_FEATURE_CARRIER_ITEMS
#error code not present
#endif
#ifdef FEATURE_NV_ATTENUATION
#error Cannot externally #define FEATURE_NV_ATTENUATION
#endif
#ifdef NV_FEATURE_SI_DATA  
#error code not present
#endif
#ifdef FEATURE_NV_FACTORY_INFO
#error Cannot externally #define FEATURE_NV_FACTORY_INFO
#endif
#ifdef FEATURE_NV_DYNAMIC_ITEMS
#error Cannot externally #define FEATURE_NV_DYNAMIC_ITEMS
#endif
#ifdef NV_FEATURE_WEB_ITEMS
#error code not present
#endif
#ifdef NV_FEATURE_BELL_MODEM
#error code not present
#endif
#ifdef NV_FEATURE_PDM_TABLES
#error Cannot externally #define NV_FEATURE_PDM_TABLES
#endif
#ifdef NV_FEATURE_I2C
#error code not present
#endif
#ifdef FEATURE_NV_24LC32
#error code not present
#endif
#ifdef FEATURE_NV_24LC65
#error Cannot externally #define FEATURE_NV_24LC65
#endif
#ifdef NV_FEATURE_DYNAMIC_NVDIV
#error code not present
#endif
#ifdef FEATURE_NV_CHECKPOINT
#error Cannot externally #define FEATURE_NV_CHECKPOINT
#endif
#ifdef FEATURE_NV_DEADCELL_RECOVERY
#error Cannot externally #define FEATURE_NV_DEADCELL_RECOVERY
#endif
#ifdef FEATURE_NV_UNIT_TEST
#error code not present
#endif

/* Set internal NV feature defines based on inputs:  */ 
/*   TG (the specified target),                      */
/*   FEATURE_NV_OTASP,                               */
/*   FEATURE_NV_ONE_NAM_RL_LARGE,                    */
/*   FEATURE_NV_TWO_NAMS_RL_MEDIUM,                  */
/*   FEATURE_NV_TWO_NAMS_RL_SMALL, and               */ 
/*   FEATURE_NV_WEB_ITEMS                            */ 

/*=========================================================================*/
/* Common defines for all Targets                                          */
/*=========================================================================*/

/* Determines NV Major version number */
#define NVI_KLT_REV            0x83
/* Length of variable sized part of extended version designator */
#define NVI_VERNO_LENGTH       NVI_VERNO_EXT_LENGTH
/* General revision number for feature bits assignment */
#define NVI_VERNO_GENERAL_REV  0x0010

/* Determines whether I2C library is used for device access */
#ifdef FEATURE_NV_I2C
#error code not present
#endif  

/* If defined, "diag_wins" closes the write gate to all tasks once diag */
/* has written anything to NV (other tasks will receive good status but */
/* no data will actually be written to NV).                             */
#ifdef FEATURE_NV_DIAG_WINS
  #define NV_FEATURE_DIAG_WINS
#endif  

/* Until clients are ready to use the dynamic pool reservation system, */
/* this define will automatically handle reservations for the caller.  */
/* Once the clients are ready to use reservations, remove this define  */
/* and the associated code in file nvw.c.                              */
#ifndef FEATURE_UI_SMS_NV_RESERVATION
  #define NV_TEMP_AUTO_RESERVATIONS
#endif

/*=========================================================================*/
/* Target T_Q, T_G, T_O, T_MSM5200, T_KOVU                                                          */
/*=========================================================================*/

  #ifdef FEATURE_TRIMODE_ITEMS
    #define FEATURE_NV_TRIMODE
  #endif
  
//  #if (TG==T_O)
//    #define FEATURE_NV_SI
//  #endif
  
//  #if (TG==T_Q)
//    #define FEATURE_NV_RENTAL
//  #endif

  #ifdef FEATURE_CDMA1900
    #ifdef T_MSM5000
#error code not present
    #endif
  
    #ifdef FEATURE_CDMA800
#error code not present
    #elif defined (FEATURE_ACP)
#error code not present
    #endif
    
    #ifdef FEATURE_NV_WEB_ITEMS
#error code not present
    #endif
    
  #else
    #define FEATURE_NV_ANALOG
    #define FEATURE_NV_CDMACH
    
//    #if (TG==T_O)
//      #define NV_FEATURE_PDM_TABLES
//    #endif
  #endif
  
  
  #ifdef FEATURE_NV_ONE_NAM_RL_LARGE
    #define FEATURE_NV_ONE_NAM
    #define FEATURE_NV_SID_NID_1
    #define FEATURE_NV_PRL_4096
    #define FEATURE_NV_8K_PRL_625
  #elif defined (FEATURE_NV_TWO_NAMS_RL_SMALL)
    #define FEATURE_NV_TWO_NAMS
    #define FEATURE_NV_SID_NID_1
    #define FEATURE_NV_PRL_3072
    #define FEATURE_NV_8K_PRL_200
  #elif defined (FEATURE_NV_TWO_NAMS_RL_MEDIUM)
#error code not present
  #else
    #define FEATURE_NV_FOUR_NAMS
    #define FEATURE_NV_SID_NID_4
    #define FEATURE_NV_8K_PRL_200
  #endif
  
  #ifdef FEATURE_IS683A_PRL
    #define FEATURE_NV_IS683A_PRL
  #else
    #define FEATURE_NV_NS_PRL
  #endif
  
  #ifdef FEATURE_SSPR_ENHANCEMENTS
    #define FEATURE_NV_SSPR_ENHANCEMENTS
    #define FEATURE_NV_CDMACH
  #else
    #define FEATURE_NV_SID_NID
  #endif
  
  #ifdef FEATURE_OTASP_OTAPA
#error code not present
  #endif
  
  #ifdef FEATURE_OTASP
#error code not present
  #endif
  
  #if (defined (FEATURE_DATA_WCDMA_PS) || defined(FEATURE_GSM_GPRS) || defined (FEATURE_DATA) || defined (FEATURE_DS))
    #define FEATURE_NV_PAP
  #endif
  /* Standard features for target O/Q/Gemini */
  
  #define NV_FEATURE_RF_CAL
  #define NV_FEATURE_REDIAL
  #define NV_FEATURE_EXTENDED_UI
  #define NV_FEATURE_DEADCELL_RECOVERY
  #define NV_FEATURE_FACTORY_INFO
  #define FEATURE_NV_TMSI
  

/*=========================================================================*/
/* Generate the unique NV version designator based on defined features     */
/*=========================================================================*/

  /* Complete version number:
       byte 0:     NVI_VERNO_MAJ_I      (byte)
       byte 1:     NVI_VERNO_LENGTH_I   (byte)
       byte 2..n:  NVI_VERNO_EXT_I      (NV_VERNO_LENGTH_I bytes)

       NV_VERNO_EXT_I format:
       byte 2 (byte 0): auto-generated version number byte #1
       byte 3 (byte 1): auto-generated version number byte #2
       byte 4 (byte 2): auto-generated version number byte #3
       byte 5 (byte 3): auto-generated version number byte #4
       byte 6 (byte 4): auto-generated version number byte #5
       byte 7 (byte 5): auto-generated version number byte #6
       byte 8..9 (byte 6..7): feature mask general revision number (word)
       byte 10 (byte 8): feature mask (currently four bytes)
  */

  /*** Feature mask bits ***/
  /*** Byte 0 ***/
  /* Bits 0..1: Number of NAMs */
  #define  NV_ONE_NAM_M          0x00
  #define  NV_TWO_NAMS_M         0x40
  #define  NV_FOUR_NAMS_M        0xC0
  /* Bits 2..4: PRL size (7 valid choices) */
  #define  NV_PRL_SIZE_200_M     0x00
  #define  NV_PRL_SIZE_625_M     0x08
  #define  NV_PRL_SIZE_1024_M    0x10
  #define  NV_PRL_SIZE_3072_M    0x18
  #define  NV_PRL_SIZE_4096_M    0x20
  #define  NV_PRL_SIZE_6144_M    0x28
  #define  NV_PRL_SIZE_8000_M    0x30
  #define  NV_PRL_SIZE_RSVD_M    0x38
  /* Bit 5: Non-standard PRL enabled */
  #define  NV_PRL_NS_ON_M        0x04
  /* Bit 6: IS683A PRL enabled */
  #define  NV_PRL_683A_ON_M      0x02
  /* Bit 7: Analog items enabled */
  #define  NV_ANALOG_ON_M        0x01

  /*** Byte 1 ***/
  /* Bit 0: CDMACH items enabled */
  #define  NV_CDMACH_ON_M        0x80
  /* Bit 1: SSPR enhancements enabled */
  #define  NV_SSPR_ENH_ON_M      0x40
  /* Bit 2: "Old" format SID-NID list enabled */
  #define  NV_SID_NID_ON_M       0x20
  /* Bit 3: TMSI items enabled */
  #define  NV_TMSI_ON_M          0x10
  /* Bit 4: IMSI-T items enabled */
  #define  NV_IMSI_T_ON_M        0x08
  /* Bit 5: Stack Data items enabled */
  #define  NV_SI_ON_M            0x04
  /* Bit 6: UP web items enabled */
  #define  NV_UP_ON_M            0x02
  /* Bit 7: Microbrowser items enabled */
  #define  NV_UBROWSER_ON_M      0x01

  /*** Byte 2 ***/
  /* Bit 0: Extended UI support enabled */
  #define  NV_EXT_UI_ON_M        0x80
  /* Bit 1: ISS2-specific items enabled */
  #define  NV_ISS2_ON_M          0x40
  /* Bits 2..3: NV_MAX_SID_NID value */
  #define  NV_MAX_SID_NID_1_M    0x10
  #define  NV_MAX_SID_NID_4_M    0x20
  /* Bit 4: RF Calibration items enabled */
  #define  NV_RF_CAL_ON_M        0x08
  /* Bit 5: Rental items enabled */
  #define  NV_RENTAL_ON_M        0x04
  /* Bit 6: Carrier items enabled */
  #define  NV_CARRIER_ON_M       0x02
  /* Bit 7: PDM tables enabled */
  #define  NV_PDM_ON_M           0x01
  
  /*** Byte 3 ***/
  /* Bit 0: Last number redial enabled */
  #define  NV_REDIAL_ON_M        0x80
  /* Bits 1..2: PRL size when 8K EEPROM exists */
  #define  NV_PRL_8K_SIZE_200_M  0x00
  #define  NV_PRL_8K_SIZE_625_M  0x20
  #define  NV_PRL_8K_SIZE_1024_M 0x40
  /* Bit 3: User Zone Table item enabled */
  #define  NV_USER_ZONE_ON_M     0x10
  /* Bit 4: PN ID Table item enabled */
  #define  NV_PN_ID_ON_M         0x08
  /* Bit 5: PAP data item enabled */
  #define  NV_PAP_ON_M           0x04
  /* Bit 6: OTAPA items enabled */
  #define  NV_OTAPA_ON_M         0x02
  /* Bit 7: Trimode items enabled */
  #define  NV_TRIMODE_ON_M       0x01

  /*** Byte 4 ***/
  /* Bit 0: PA Range compensation enabled */
  #define  NV_PA_RANGE_ON_M      0x80
  /* Bit 1: Broadcast SMS enabled */
  #define  NV_BC_SMS_ON_M        0x40
  /* Bit 2: RFR3100 items enabled */
  #define  NV_RFR3100_ON_M       0x20
  /* Bit 3: */
  #define  NV_4PAGE_TX_LIN_ON_M  0x08
  /* Bit 4: */
  #define  NV_RUIM_CHV_ON_M      0x04
  /* Bit 5: */
  #define  NV_IS2000_ON_M        0x02
  /* Bit 6: */
  #define  NV_DS_BRATE_ON_M      0x01
  /* Bit 7: */
  #define  NV_DIAG_BRATE_ON_M    0x80
  
  /*** Byte 5 ***/
  /* Bit 0: */
  #define  NV_SDEVMAP_MENU_ON_M  0x40
  /* Bit 1: */
  #define  NV_TTY_ON_M           0x20
  /* Bit 2: */
  #define  NV_PA_RANGE_TF_ON_M   0x10
  /* Bit 3: */
  #define  NV_STEREO_DAC_ON_M    0x08
  /* Bit 4: */
  #define  NV_MULTIMEDIA_ON_M    0x04
  /* Bit 5: */
  #define  NV_DIAG_PORT_ON_M     0x02
  /* Bit 6: */
  #define  NV_GPSONE_ON_M        0x01
  /* Bit 7: */
  #define  NV_MMC_ON_M           0x80
  

  /*** Byte 6 ***/
  /* Bit 0: */
  #define  NV_RUIM_SMSS_ON_M     0x40
  /* Bit 1: */
  #define  NV_DIAG_RESTART_ON_M  0x20
  /* Bit 2: */
  #define  NV_ENC_BTF_ON_M       0x10
  /* Bit 3: */
  #define  NV_IS2000_R_SCH_ON_M  0x08
  /* Bit 4: */
  #define  NV_SD20_ON_M          0x04
  /* Bit 5: */
  #define  NV_WARMUP_DELAY_ON_M  0x02
  /* Bit 6: */
  #define  NV_FAC_TMODE_ON_M     0x01
  /* Bit 7: */
  #define  NV_JCDMA_DS_ON_M      0x80
  
  

  /* Resolution of external features into internal features */
  #ifdef FEATURE_NV_ONE_NAM
    #define  NV_NAM_COUNT             NV_ONE_NAM_M
  #elif defined(FEATURE_NV_TWO_NAMS)
    #define  NV_NAM_COUNT             NV_TWO_NAMS_M
  #elif defined(FEATURE_NV_FOUR_NAMS)
    #define  NV_NAM_COUNT             NV_FOUR_NAMS_M
  #else
    #error  Must specify number of NAMs
  #endif

 
  #ifdef FEATURE_NV_PRL_200
    #define  NV_FEATURE_PRL_ITEMS
    #define  NV_PRL_SIZE_CODE         NV_PRL_SIZE_200_M
  #elif  defined(FEATURE_NV_PRL_625)
    #define  NV_FEATURE_PRL_ITEMS
    #define  NV_PRL_SIZE_CODE         NV_PRL_SIZE_625_M
  #elif  defined(FEATURE_NV_PRL_1024)
    #define  NV_FEATURE_PRL_ITEMS
    #define  NV_PRL_SIZE_CODE         NV_PRL_SIZE_1024_M
  #elif  defined(FEATURE_NV_PRL_3072)
    #define  NV_FEATURE_PRL_ITEMS
    #define  NV_PRL_SIZE_CODE         NV_PRL_SIZE_3072_M
  #elif  defined(FEATURE_NV_PRL_4096)
    #define  NV_FEATURE_PRL_ITEMS
    #define  NV_PRL_SIZE_CODE         NV_PRL_SIZE_4096_M
  #elif  defined(FEATURE_NV_PRL_6144)
    #define  NV_FEATURE_PRL_ITEMS
    #define  NV_PRL_SIZE_CODE         NV_PRL_SIZE_6144_M
  #elif  defined(FEATURE_NV_PRL_8000)
    #define  NV_FEATURE_PRL_ITEMS
    #define  NV_PRL_SIZE_CODE         NV_PRL_SIZE_8000_M
  #else
    #define  NV_PRL_SIZE_CODE         0x00
  #endif


  #ifdef FEATURE_NV_8K_PRL_200
    #define  NV_FEATURE_PRL_ITEMS
    #define  NV_PRL_8K_SIZE_CODE      NV_PRL_8K_SIZE_200_M
  #elif  defined(FEATURE_NV_8K_PRL_625)
    #define  NV_FEATURE_PRL_ITEMS
    #define  NV_PRL_8K_SIZE_CODE      NV_PRL_8K_SIZE_625_M
  #elif  defined(FEATURE_NV_8K_PRL_1024)
    #define  NV_FEATURE_PRL_ITEMS
    #define  NV_PRL_8K_SIZE_CODE      NV_PRL_8K_SIZE_1024_M
  #else
    #define  NV_PRL_8K_SIZE_CODE      0x00
  #endif 


  #ifdef FEATURE_NV_SID_NID_1 
    #define  NV_SID_NID_SIZE          NV_MAX_SID_NID_1_M
  #else
    #define  NV_SID_NID_SIZE          NV_MAX_SID_NID_4_M
  #endif


  #ifdef FEATURE_NV_NS_PRL
    #define  NV_FEATURE_NS_PRL
    #define  NV_PRL_NS_ENABLED        NV_PRL_NS_ON_M
  #else
    #undef   NV_FEATURE_NS_PRL
    #define  NV_PRL_NS_ENABLED        0x00
  #endif

  #ifdef FEATURE_NV_IS683A_PRL
    #define  NV_FEATURE_IS683A_PRL
    #define  NV_PRL_683A_ENABLED      NV_PRL_683A_ON_M
  #else
    #undef   NV_FEATURE_IS683A_PRL
    #define  NV_PRL_683A_ENABLED      0x00
  #endif

  #ifdef FEATURE_NV_ANALOG
    #define  NV_FEATURE_ANALOG
    #define  NV_ANALOG_ENABLED        NV_ANALOG_ON_M
  #else
    #undef   NV_FEATURE_ANALOG
    #define  NV_ANALOG_ENABLED        0x00
  #endif

  #ifdef FEATURE_NV_CDMACH
    #define  NV_FEATURE_CDMACH
    #define  NV_CDMACH_ENABLED        NV_CDMACH_ON_M
  #else
    #undef   NV_FEATURE_CDMACH
    #define  NV_CDMACH_ENABLED        0x00
  #endif

  #ifdef FEATURE_SSPR_ENHANCEMENTS
    #define  NV_FEATURE_SSPR_ENHANCEMENTS
    #define  NV_SSPR_ENH_ENABLED      NV_SSPR_ENH_ON_M
  #else
    #undef   NV_FEATURE_SSPR_ENHANCEMENTS
    #define  NV_SSPR_ENH_ENABLED      0x00
  #endif

  #ifdef FEATURE_NV_SID_NID
    #define  NV_FEATURE_SID_NID
    #define  NV_SID_NID_ENABLED       NV_SID_NID_ON_M
  #else
    #undef   NV_FEATURE_SID_NID
    #define  NV_SID_NID_ENABLED       0x00
  #endif

  #ifdef FEATURE_NV_TMSI
    #define  NV_FEATURE_TMSI
    #define  NV_TMSI_ENABLED          NV_TMSI_ON_M
  #else
    #undef   NV_FEATURE_TMSI
    #define  NV_TMSI_ENABLED          0x00
  #endif

  #ifdef FEATURE_NV_IMSI_T
    #define  NV_FEATURE_IMSI_T
    #define  NV_IMSI_T_ENABLED        NV_IMSI_T_ON_M
  #else
    #undef   NV_FEATURE_IMSI_T
    #define  NV_IMSI_T_ENABLED        0x00
  #endif

  #ifdef FEATURE_NV_SI
    #define  NV_FEATURE_SI_DATA
    #define  NV_SI_ENABLED            NV_SI_ON_M
  #else
    #undef   NV_FEATURE_SI_DATA
    #define  NV_SI_ENABLED            0x00
  #endif

  #ifdef FEATURE_NV_UP
    #define  NV_FEATURE_UP
    #define  NV_UP_ENABLED            NV_UP_ON_M
  #else
    #undef   NV_FEATURE_UP
    #define  NV_UP_ENABLED            0x00
  #endif

  #ifdef FEATURE_UBROWSER
#error code not present
  #else
    #undef   NV_FEATURE_UBROWSER
    #define  NV_UBROWSER_ENABLED      0x00
  #endif

  #ifdef FEATURE_NV_RENTAL
    #define  NV_FEATURE_RENTAL_ITEMS
    #define  NV_RENTAL_ENABLED        NV_RENTAL_ON_M
  #else
    #define  NV_RENTAL_ENABLED        0x00
  #endif

  #ifdef FEATURE_NV_CARRIER_ITEMS
    #define  NV_FEATURE_CARRIER_ITEMS
    #define  NV_CARRIER_ENABLED       NV_CARRIER_ON_M
  #else
    #define  NV_CARRIER_ENABLED       0x00
  #endif

  #ifdef NV_FEATURE_EXTENDED_UI
    #define  NV_EXT_UI_ENABLED        NV_EXT_UI_ON_M
  #else
    #define  NV_EXT_UI_ENABLED        0x00
  #endif
  
  #ifdef NV_FEATURE_ISS2_ITEMS
    #define  NV_ISS2_ENABLED          NV_ISS2_ON_M
  #else
    #define  NV_ISS2_ENABLED          0x00
  #endif

  #ifdef NV_FEATURE_RF_CAL
    #define  NV_RF_CAL_ENABLED        NV_RF_CAL_ON_M
  #else
    #define  NV_RF_CAL_ENABLED        0x00
  #endif

  #ifdef NV_FEATURE_PDM_TABLES
    #define  NV_PDM_ENABLED           NV_PDM_ON_M
  #else
    #define  NV_PDM_ENABLED           0x00
  #endif

  #ifdef NV_FEATURE_REDIAL
    #define  NV_REDIAL_ENABLED        NV_REDIAL_ON_M
  #else
    #define  NV_REDIAL_ENABLED        0x00
  #endif

  #ifdef FEATURE_NV_USER_ZONE
    #define  NV_FEATURE_USER_ZONE
    #define  NV_USER_ZONE_ENABLED     NV_USER_ZONE_ON_M
  #else
    #define  NV_USER_ZONE_ENABLED     0x00
  #endif

  #ifdef FEATURE_NV_PN_ID
    #define  NV_FEATURE_PN_ID
    #define  NV_PN_ID_ENABLED         NV_PN_ID_ON_M
  #else
    #define  NV_PN_ID_ENABLED         0x00
  #endif
  
  #ifdef FEATURE_NV_PAP
    #define  NV_FEATURE_PAP
    #define  NV_PAP_ENABLED           NV_PAP_ON_M
  #else
    #define  NV_PAP_ENABLED           0x00
  #endif

  #ifdef FEATURE_NV_OTASP_OTAPA
#error code not present
  #else
    #define  NV_OTAPA_ENABLED         0x00
  #endif

  #ifdef FEATURE_NV_TRIMODE
    #define  NV_FEATURE_TRIMODE_ITEMS
    #define  NV_TRIMODE_ENABLED       NV_TRIMODE_ON_M
  #else
    #define  NV_TRIMODE_ENABLED       0x00
  #endif

  #ifdef FEATURE_PA_RANGE_DIG_COMP
    #define  NV_FEATURE_PA_RANGE_COMP
    #define  NV_PA_RANGE_ENABLED      NV_PA_RANGE_ON_M
  #else
    #define  NV_PA_RANGE_ENABLED      0x00
  #endif
  
//
  #ifdef FEATURE_BROADCAST_SMS
#error code not present
  #else
    #define  NV_BC_SMS_ENABLED        0x00
  #endif
  
  #ifdef FEATURE_RFR3100
    #define  NV_RFR3100_ENABLED       NV_RFR3100_ON_M
  #else
    #define  NV_RFR3100_ENABLED       0x00
  #endif
  
  #ifdef FEATURE_4PAGE_TX_LINEARIZER
    #define  NV_4PAGE_TX_LIN_ENABLED  NV_4PAGE_TX_LIN_ON_M
  #else
    #define  NV_4PAGE_TX_LIN_ENABLED  0x00
  #endif
  
  #ifdef FEATURE_RUIM_CHV_FROM_NV
    #define  NV_RUIM_CHV_ENABLED      NV_RUIM_CHV_ON_M
  #else
    #define  NV_RUIM_CHV_ENABLED      0x00
  #endif
  
  #ifdef FEATURE_IS2000
    #define  NV_IS2000_ENABLED        NV_IS2000_ON_M
  #else
    #define  NV_IS2000_ENABLED        0x00
  #endif
  
  #ifdef FEATURE_DS_DEFAULT_BITRATE_NV
    #define  NV_DS_BRATE_ENABLED      NV_DS_BRATE_ON_M
  #else
    #define  NV_DS_BRATE_ENABLED      0x00
  #endif
  
  #ifdef FEATURE_DIAG_DEFAULT_BITRATE_NV
    #define  NV_DIAG_BRATE_ENABLED    NV_DIAG_BRATE_ON_M
  #else
    #define  NV_DIAG_BRATE_ENABLED    0x00
  #endif
  
  #ifdef FEATURE_SDEVMAP_MENU_ITEM_NV
    #define  NV_SDEVMAP_MENU_ENABLED  NV_SDEVMAP_MENU_ON_M
  #else
    #define  NV_SDEVMAP_MENU_ENABLED  0x00
  #endif
  
  #ifdef FEATURE_TTY
#error code not present
  #else
    #define  NV_TTY_ENABLED           0x00
  #endif
  
  #ifdef FEATURE_PA_RANGE_TEMP_FREQ_COMP
    #define  NV_PA_RANGE_TF_ENABLED   NV_PA_RANGE_TF_ON_M
  #else
    #define  NV_PA_RANGE_TF_ENABLED   0x00
  #endif
  
  #ifdef FEATURE_STEREO_DAC
    #define  NV_STEREO_DAC_ENABLED    NV_STEREO_DAC_ON_M
  #else
    #define  NV_STEREO_DAC_ENABLED    0x00
  #endif
      
  #ifdef FEATURE_MULTIMEDIA
    #define  NV_MULTIMEDIA_ENABLED    NV_MULTIMEDIA_ON_M
  #else
    #define  NV_MULTIMEDIA_ENABLED    0x00
  #endif
  
  #ifdef FEATURE_DIAG_PORT_SELECT
#error code not present
  #else
    #define  NV_DIAG_PORT_ENABLED     0x00
  #endif
    
  #ifdef FEATURE_GPSONE
    #define  NV_GPSONE_ENABLED        NV_GPSONE_ON_M
  #else
    #define  NV_GPSONE_ENABLED        0x00
  #endif
  
  #ifdef FEATURE_MMC
    #define  NV_MMC_ENABLED           NV_MMC_ON_M
  #else
    #define  NV_MMC_ENABLED           0x00
  #endif
  
  #ifdef FEATURE_RUIM_SMSS
#error code not present
  #else
    #define  NV_RUIM_SMSS_ENABLED     0x00
  #endif
  
  #ifdef FEATURE_DIAG_RESTART_CONFIG
    #define  NV_DIAG_RESTART_ENABLED  NV_DIAG_RESTART_ON_M
  #else
    #define  NV_DIAG_RESTART_ENABLED  0x00
  #endif
  
  #ifdef FEATURE_ENC_BTF_IN_NV
    #define  NV_ENC_BTF_ENABLED       NV_ENC_BTF_ON_M
  #else
    #define  NV_ENC_BTF_ENABLED       0x00
  #endif
  
  #ifdef FEATURE_IS2000_R_SCH
    #define  NV_IS2000_R_SCH_ENABLED  NV_IS2000_R_SCH_ON_M
  #else
    #define  NV_IS2000_R_SCH_ENABLED  0x00
  #endif
  
  #ifdef FEATURE_SD20
    #define  NV_SD20_ENABLED          NV_SD20_ON_M
  #else
    #define  NV_SD20_ENABLED          0x00
  #endif
  
  #ifdef FEATURE_SUBPCG_PA_WARMUP_DELAY
    #define  NV_WARMUP_DELAY_ENABLED  NV_WARMUP_DELAY_ON_M
  #else
    #define  NV_WARMUP_DELAY_ENABLED  0x00
  #endif
  
  #ifdef FEATURE_FACTORY_TESTMODE
    #define  NV_FAC_TMODE_ENABLED     NV_FAC_TMODE_ON_M
  #else
    #define  NV_FAC_TMODE_ENABLED     0x00
  #endif
  
  #ifdef FEATURE_JCDMA_DS
    #define  NV_JCDMA_DS_ENABLED      NV_JCDMA_DS_ON_M
  #else
    #define  NV_JCDMA_DS_ENABLED      0x00
  #endif
  
  
  /* Version designator feature bits - byte 0 */
  #define  NVI_VERNO_EXT_BYTE_0                                     \
    (NV_NAM_COUNT | NV_PRL_SIZE_CODE | NV_PRL_NS_ENABLED |          \
     NV_PRL_683A_ENABLED | NV_ANALOG_ENABLED )

  /* Version designator feature bits - byte 1 */
  #define  NVI_VERNO_EXT_BYTE_1                                     \
    (NV_CDMACH_ENABLED | NV_SSPR_ENH_ENABLED |                      \
     NV_SID_NID_ENABLED | NV_TMSI_ENABLED | NV_IMSI_T_ENABLED |     \
     NV_SI_ENABLED | NV_UP_ENABLED | NV_UBROWSER_ENABLED )

  /* Version designator feature bits - byte 2 */
  #define  NVI_VERNO_EXT_BYTE_2                                     \
    (NV_EXT_UI_ENABLED | NV_ISS2_ENABLED |                          \
     NV_SID_NID_SIZE | NV_RF_CAL_ENABLED | NV_RENTAL_ENABLED |      \
     NV_CARRIER_ENABLED | NV_PDM_ENABLED )

  /* Version designator feature bits - byte 3 */
  #define  NVI_VERNO_EXT_BYTE_3                                     \
    (NV_REDIAL_ENABLED | NV_PRL_8K_SIZE_CODE |                      \
     NV_USER_ZONE_ENABLED | NV_PN_ID_ENABLED | NV_PAP_ENABLED |     \
     NV_OTAPA_ENABLED | NV_TRIMODE_ENABLED )

  /* Version designator feature bits - byte 4 */
  #define  NVI_VERNO_EXT_BYTE_4                                     \
    (NV_PA_RANGE_ENABLED | NV_BC_SMS_ENABLED | NV_RFR3100_ENABLED | \
     NV_4PAGE_TX_LIN_ENABLED | NV_RUIM_CHV_ENABLED |                \
     NV_IS2000_ENABLED | NV_DS_BRATE_ENABLED | NV_DIAG_BRATE_ENABLED)
      
  /* Version designator feature bits - byte 5 */
  #define  NVI_VERNO_EXT_BYTE_5                                     \
    (NV_SDEVMAP_MENU_ENABLED | NV_TTY_ENABLED |                     \
     NV_PA_RANGE_TF_ENABLED | NV_STEREO_DAC_ENABLED |               \
     NV_MULTIMEDIA_ENABLED | NV_DIAG_PORT_ENABLED |                 \
     NV_GPSONE_ENABLED | NV_MMC_ENABLED )
      
  /* Version designator feature bits - byte 6 */
  #define  NVI_VERNO_EXT_BYTE_6                                     \
    (NV_RUIM_SMSS_ENABLED | NV_DIAG_RESTART_ENABLED |               \
     NV_ENC_BTF_ENABLED | NV_IS2000_R_SCH_ENABLED |                 \
     NV_SD20_ENABLED | NV_WARMUP_DELAY_ENABLED |                    \
     NV_FAC_TMODE_ENABLED | NV_JCDMA_DS_ENABLED )
     

/*=========================================================================*/
/* End of NV Feature Defines Section                                       */
/*=========================================================================*/


/*=========================================================================*/

/* Following are all the types to be used in message.  Unless otherwise    */
/* specified all fields are right justified.  All nv.h structures are      */
/* packed(1).  This is done so that external and internal NV storage       */
/* representation is as identical as possible and it minimizes storage     */
/* requirements.                                                           */

/*-------------------------------------------------------------------------*/

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

/* All items marked by a checksum, except the ESN take a simple checksum.  */
/* If set as defined below it denotes that the item has been programmed    */
/* to NV and is valid.  Any other value denotes that the item is invalid.  */
/* The ESN checksum is hidden from the user, and the flag returned, as     */
/* defined below, indicates if the ESN checksum is valid.                  */

#define     NV_VALID_GEN_CHKSUM     0xFFFF
#define     NV_VALID_ESN_CHKSUM     0xFFFFFFFFL

/* Total size of header fields within nv_roaming_list_type */
#define NV_ROAMING_LIST_HEADER_SIZE  (sizeof(nv_roaming_list_header_type))



/*-------------------------------------------------------------------------*/

/* The command on the NVM queue */

typedef struct {
  q_link_type           link;           /* Queue field */
  nv_items_enum_type    item;           /* Item to access */
  nv_func_enum_type     cmd;            /* READ, WRITE, PEEK, POKE, etc. */
  nv_item_type          *data_ptr;      /* Pointer to read or write data */
  rex_tcb_type          *tcb_ptr;       /* Task to signal */
  rex_sigs_type         sigs;           /* Rex signals for task */
  q_type                *done_q_ptr;    /* Where to place done buffer */
  nv_stat_enum_type     status;         /* Status of request */
} nv_cmd_type;

/*-------------------------------------------------------------------------*/
/* Return to default packing of data structures.                        */
   
#ifdef FEATURE_TREX
#error code not present
#endif


/*===========================================================================
                                                                         
                              MACROS                                     
                                                                         
===========================================================================*/


/* Macro to set specific bits of the SMS deletion_list (which specifies    */
/* which SMS messages are to be deleted prior to writing a new one).       */
/* Each call sets exactly one bit, but leaves all other bits unchanged.    */

#define NV_SET_SMS_DELETE_LIST( sms_index, delete_list )    \
          ( (dword)(0x80000000>>(sms_index))|(delete_list) )

/* Macro to allow reading specific bits of the SMS deletion_list by        */
/* simple indexing.  Output is a Boolean, TRUE if the corresponding        */
/* deletion bit is set, FALSE otherwise.                                   */

#define NV_READ_SMS_DELETE_LIST( sms_index, delete_list )   \
          ( (( (0x80000000>>(sms_index))&(delete_list) ) ? TRUE : FALSE) )

extern nv_rtre_control_type nv_rtre_control_value;
extern nv_rtre_polling_control_type nv_rtre_polling_control_value;


/*===========================================================================

                      FUNCTION DECLARATIONS

===========================================================================*/



/*===========================================================================

FUNCTION NV_TASK

DESCRIPTION
  The main control task calls this function with rex_def_task to start up
  the nv task.  This function then initializes NV timers and command queue.
  If the major revision number has changed then this function rebuilds the
  NV itself.  Once initialization is complete the function sets MC_ACK_SIG
  and it waits for NV_START_SIG.  When the start signal is received the
  function reads and processes any request it finds on its queue until
  there are no more requests.  Once the request queue is empty the task
  then starts normal operation by waiting for and processing any new commands
  when they arrrive on its command queue.  Throughout its operation the
  NV task wakes up periodically to kick the watchdog task.

DEPENDENCIES
  This function must be called with rex_def_task _once_.  It requires the
  NV_START_SIG before proceeding past the initialization stage.

RETURN VALUE
  Never returns.

SIDE EFFECTS
  Modifies NVM.

===========================================================================*/

extern void nv_task
(
  dword param      /* parameter from REX, unused */
);


/*===========================================================================

FUNCTION NV_CMD

DESCRIPTION
  This is the outside world's interface to the non volatile memory task.
  This function takes an already filled out nv_cmd_type which it places
  on the nv command queue.  The function then returns to the caller.
  Return to the caller does not mean that the command has been executed
  yet, only that it is queued for execution.  When nv_cmd is done processing
  the request it returns the buffer to the specified queue if a return
  queue adress is provided.  Otherwise it does not move the buffer.

  An example NV READ request for MIN1 is as follows:
                              
  static   nv_cmd_type       cmd_buf;        - Define command buffer
  static   nv_item_type      data_buf;       - Define data buffer

  data_buf.min1.nam  = current_nam;          - Specify which NAM          
  cmd_buf.cmd        = NV_READ_F;            - Specify read operation     
  cmd_buf.tcb_ptr    = rex_self();           - Own TCB                    
  cmd_buf.sigs       = XX_NV_CMD_SIG;        - Signal to set when done    
  cmd_buf.done_q_ptr = NULL;                 - No buffer return required  
  cmd_buf.item       = NV_MIN1_I;            - Specify the item to read   
  cmd_buf.data_ptr   = &data_buf;            - Where to place read data   

  rex_clr_sigs (rex_self(), XX_NV_CMD_SIG);  - Clear the signal        
  nv_cmd (&cmd_buf);                         - And issue the command   

DEPENDENCIES
  The NV task must have been started up already.  All of the items in
  the nv_cmd_type must be already set.

RETURN VALUE
  None directly.  The requested data is returned in the buffer pointed
  to inside the nv_cmd_type.  The status variable of the nv_cmd_type
  will be updated to reflect the current status of this command as it
  is processed.  In the above nv_cmd buffer nv_cmd.status is set to:

  NV_DONE_S,      -  Request completed okay 
  NV_BUSY_S,      -  Request is queued 
  NV_BADCMD_S,    -  Unrecognizable command field 
  NV_FULL_S,      -  The NVM is full 
  NV_FAIL_S,      -  Command failed, reason other than NVM was full 
  NV_NOTACTIVE_S, -  Variable was not active 
  NV_BADPARM_S,   -  Bad parameter in command block 
  NV_READONLY_S,  -  Parameter is write-protected and thus read only 
  NV_BADTG_S,     -  Item not valid for Target 
  NV_NOMEM_S,     -  free memory exhausted 
  NV_NOTALLOC_S   -  address is not a valid allocation 

SIDE EFFECTS
  The nv_cmd_type is placed on the NV command queue.  It must not be
  modified until the command has been processed!

===========================================================================*/

extern void nv_cmd
(
  nv_cmd_type *cmd_ptr  /* pointer to the NV command block */
);



/*===========================================================================

FUNCTION NV_SMS_SIZEOF

DESCRIPTION
  When passed the number of SMS message bytes, this function returns
  the number of "raw" bytes of NVRAM that will be required to store
  the SMS message.
  
DEPENDENCIES
  None.

RETURN VALUE
  The number of "raw" bytes of NVRAM required to store the specified
  SMS message length.

SIDE EFFECTS
  None.

===========================================================================*/

word nv_sms_sizeof
(
  word sms_message_size       /* Size of sms message data in bytes */
);


#ifdef FEATURE_GWSMS
/*===========================================================================

FUNCTION NV_SMS_GW_SIZEOF

DESCRIPTION
  When passed the number of SMS message bytes, this function returns
  the number of "raw" bytes of NVRAM that will be required to store
  the SMS message.
  
DEPENDENCIES
  None.

RETURN VALUE
  The number of "raw" bytes of NVRAM required to store the specified
  SMS message length.

SIDE EFFECTS
  None.

===========================================================================*/

word nv_sms_gw_sizeof
(
  word sms_gw_message_size       /* Size of sms message data in bytes */
);
#endif



/*===========================================================================

FUNCTION NV_MEMAVAIL

DESCRIPTION
  Return the number of bytes available in the long pool for allocation
  The number is calculated at each write or free operation, and stored
  globally. This function provides an interface to that global data.

DEPENDENCIES
  nva_memavail must have been called

RETURN VALUE
  The number of bytes available in the long pool for allocation

SIDE EFFECTS
  None.

===========================================================================*/

extern word nv_memavail (void);

/*===========================================================================

FUNCTION NV_READ_ERR_LOG

DESCRIPTION
  This function reads an error log from NVM.

DEPENDENCIES
  The function MUST NOT USE ANY TASK SERVICES, so that it can be
  called when tasks are not initialized.  The function MUST NOT
  USE ERROR SERVICES.  It returns status to the caller if there
  is a failure.

RETURN VALUE
  NV_DONE_S         if it worked
  NV_NOT_ACTIVE_S   if item was not active
  NV_FAIL_S         if item could not be read

SIDE EFFECTS
  None.

===========================================================================*/

nv_stat_enum_type nv_read_err_log
(
  nv_err_log_type  *nv_err_log_ptr    /* Pointer where to return read data */
);

/*===========================================================================

FUNCTION NV_WRITE_ERR_LOG

DESCRIPTION
  This function writes the boot error log to NVM.

DEPENDENCIES
  The function MUST NOT USE ANY TASK SERVICES, so that it can be
  called when tasks are not initialized.  The function MUST NOT
  USE ERROR SERVICES.  It returns status to the caller if there
  is a failure.

RETURN VALUE
  NV_DONE_S - if it worked
  NV_FAIL_S - if item could not be written

SIDE EFFECTS
  None.

===========================================================================*/

nv_stat_enum_type nv_write_err_log
(
  nv_err_log_type  *nv_err_log_ptr    /* Pointer where to get write data */
);


/*===========================================================================

FUNCTION NV_MAX_SIZE_OF_ROAMING_LIST

DESCRIPTION
  This function returns the maximum number of bytes available for
  storage of a roaming list (per NAM).  The value returned depends 
  on the total amount of NVRAM installed in the phone and the total 
  number of NAMs defined.  

DEPENDENCIES
  The function cannot be called until NV is initialized.  A
  premature call will raise err_fatal.

RETURN VALUE
  The maximum number of bytes available for storage of a roaming list
  (per NAM).

SIDE EFFECTS
  None.

===========================================================================*/

word  nv_max_size_of_roaming_list (void);


/*===========================================================================

FUNCTION NV_MAX_SIZE_OF_WEB_CACHE

DESCRIPTION
  This function returns the maximum number of bytes currently available 
  for storage of the Unwired Planet cache.  Currently, this item is not
  supported, so this function will always return zero.
  
DEPENDENCIES
  The function cannot be called until NV is initialized.  A
  premature call will raise err_fatal.

RETURN VALUE
  The maximum number of bytes currently available for storage of the
  Unwired Planet cache.

SIDE EFFECTS
  None.

===========================================================================*/

word  nv_max_size_of_web_cache (void);


/*===========================================================================

FUNCTION NV_DP_CAPACITY

DESCRIPTION
  This function returns the maximum capcity of the dynamic pool.
  
DEPENDENCIES
  The function cannot be called until NV is initialized.

RETURN VALUE
  The maximum capacity (in bytes) of the dynamic pool.

SIDE EFFECTS
  None.

===========================================================================*/

word  nv_dp_capacity( void );


/*===========================================================================

FUNCTION NV_RESERVE_MEM

DESCRIPTION
  This function reserves a specified quantity of dynamic pool memory
  for the caller.  All users of the dynamic pool must call this function
  prior to attempting a "write" operation.  (Note: currently, only SMS
  messages are stored in the dynamic pool).  
  
  If there is not enough available memory to fulfill the request, the
  input "accept_partial_reservation" flag is checked.  If TRUE, then all
  remaining free memory will be reserved for the caller (even though it 
  will be less than the amount requested); if FALSE, then no memory will 
  be reserved.
  
  If a reservation is made, a confirmation code is returned to the caller.
  This confirmation code must be passed back to the NV task with the 
  subsequent "write" command.
  
DEPENDENCIES
  None.

RETURN VALUE
  An "nv_reservation_type" object is returned which contains two items:
  1) the actual amount of dynamic pool memory reserved; and
  2) a confirmation code.

SIDE EFFECTS
  The "memory available" state data items may be changed.

===========================================================================*/

nv_reservation_type  nv_reserve_mem
( 
  word     amount_requested,
  boolean  accept_partial_reservation
);


/*===========================================================================

FUNCTION NV_CANCEL_RESERVATION

DESCRIPTION
  This function cancels a previously-made reservation for a specified 
  quantity of dynamic pool memory (see function "nv_reserve_mem").  
  
  Note that this function only needs to be called if a reservation
  is made that will NOT be followed by a "write" command; that is,
  if the caller decides he will not be needing the reserved memory
  after all.  Normally, a reservation disappears automatically when 
  the corresponding "write" command is processed by the NV task.
  
  The confirmation code received by the previous call to nv_reserve_mem
  must be passed in to allow identification of which reservation is
  being cancelled and how many bytes to return to "available" status.
  
DEPENDENCIES
  None.

RETURN VALUE
  NV_DONE_S     - if all worked properly.
  NV_BADPARM_S  - if an invalid confirmation code was provided.

SIDE EFFECTS
  The "memory available" state data items may be changed.

===========================================================================*/

nv_stat_enum_type  nv_cancel_reservation
( 
  dword    confirmation_code
);


/*===========================================================================

FUNCTION NV_PRL_IS_VALID

DESCRIPTION
  This function returns the "valid" indicator from the specified NAM's
  roaming list.  

DEPENDENCIES
  None.

RETURN VALUE
  TRUE         if the roaming list "valid" field is TRUE 
  FALSE        if the roaming list "valid" field is FALSE or if the
                 specified NAM is invalid or if the roaming list
                 is currently NOT_ACTIVE

SIDE EFFECTS
  None.

===========================================================================*/

boolean  nv_prl_is_valid
(
  byte  nam
);


/*===========================================================================

FUNCTION NV_PRL_VERSION

DESCRIPTION
  This function returns the "prl_version" indicator from the specified NAM's
  roaming list.  

DEPENDENCIES
  None.

RETURN VALUE
  prl_version             if the roaming list for the specified NAM is
                            currently ACTIVE 
  NV_PRL_VERSION_INVALID  if the specified NAM is invalid or if the 
                            roaming list for the specified NAM is 
                            currently NOT_ACTIVE

SIDE EFFECTS
  None.

===========================================================================*/

word  nv_prl_version
(
  byte  nam
);


/*===========================================================================

FUNCTION NV_BUILT

DESCRIPTION
  This function checks the major version number of the the NV task
  as stored at edit time, against the major version number of the
  NV EEPROM as read from NVM.  If the numbers are different then the
  function returns FALSE, which indicates that the NV is not built
  and it may not be accessed from any external task.  If the numbers
  are the same then the function returns TRUE, which indicates that
  NV is built and it may be accessed.  This function lets other units
  issue direct NV read and write commands if the status returned is
  TRUE, thus allowing NV read and write before the NV task has been
  started.

DEPENDENCIES
  This is a special use function, normally called by error services
  to allow early access to NV, and before the NV task has been started.
  If NV_BUILT returns TRUE the NV may be accessed BUT ONLY USING DIRECT
  READ AND WRITES OF THE ERROR LOG (NV_READ_ERR_LOG and NV_WRITE_ERR_LOG).
  The NV task itself can not be counted upon to be started yet and normal
  NV requests must not be used.  As with all direct read and write
  operation, the data item (here it is the major version number) must
  be contained on a signle physical NV page.

RETURN VALUE
  TRUE      - The NV has been built and direct read/write is allowed
  FALSE     - The NV has not been built and access is not allowed

SIDE EFFECTS
  None.

===========================================================================*/

extern boolean nv_built (void);


/*===========================================================================

FUNCTION NV_DETERMINE_ESN_VALIDITY

DESCRIPTION
  This function is determines if the current ESN has been programmed with the
  status of this check returned.

DEPENDENCIES
  None.

RETURN VALUE
  TRUE if the current ESN is non-zero with proper checksums, else FALSE

SIDE EFFECTS

===========================================================================*/

boolean nv_determine_esn_validity( void);

#ifdef FEATURE_RPC
#error code not present
#endif /* FEATURE_RPC */



#ifdef FEATURE_UIM_RUN_TIME_ENABLE
/*===========================================================================

FUNCTION NV_RTRE_CONTROL

DESCRIPTION
  This function provides the current RTRE control.  The control indicates 
  whether the use the R-UIM in an operation or not.

DEPENDENCIES
  The return value has a default setting and is updated when NV receives
  a NV_RTRE_OP_CONFIG_F command.

RETURN VALUE
  The RTRE control

SIDE EFFECTS
  This function returns the current value of the RTRE control.  It may
  change.

===========================================================================*/

INLINE nv_rtre_control_type nv_rtre_control( void )
{
  /* Retrieve the current RTRE control value */
  return (nv_rtre_control_value);
}

/*===========================================================================

FUNCTION NV_RTRE_USE_RUIM_FOR_NAM

DESCRIPTION
  This function determines if the R-UIM is to be used (based on RTRE control)
  and the NAM is the R-UIM NAM.
  
DEPENDENCIES
  The return value has a default setting and is updated when NV receives
  a NV_RTRE_OP_CONFIG_F command.

RETURN VALUE
  The RTRE control indicates to use the R-UIM and the NAM matches the R-UIM 
  NAM.

SIDE EFFECTS
  This function uses the current value of the RTRE control.  It may
  change.

===========================================================================*/

INLINE boolean nv_rtre_use_ruim_for_nam
(
  byte nam
)
{
  /* Determine if the current RTRE control is for the R-UIM */
  return ((NV_RTRE_CONTROL_USE_RUIM == nv_rtre_control()) &&
  /* and the NAM matches the R-UIM NAM */
          (NV_RUIM_NAM == nam));
}

/*===========================================================================

FUNCTION NV_RTRE_POLLING_CONTROL

DESCRIPTION
  This function provides the current RTRE polling control.  The polling control
  indicates whether to poll the UIM card when originating a call or while on 
  the traffic channel.

DEPENDENCIES
  The return value has a default setting and is updated when NV receives
  a NV_RTRE_OP_CONFIG_F command.

RETURN VALUE
  The RTRE polling control

SIDE EFFECTS
  This function returns the current value of the RTRE polling control.  It may
  change.

===========================================================================*/

INLINE nv_rtre_polling_control_type nv_rtre_polling_control( void )
{
  /* Retrieve the current RTRE control value */
  return (nv_rtre_polling_control_value);
}

/*===========================================================================

FUNCTION NV_RTRE_POLLING_FOR_NAM

DESCRIPTION
  This function provides the current RTRE polling control when the NAM is the 
  R_UIM NAM.  The polling control indicates whether to poll the UIM card when 
  originating a call or while on the traffic channel.

DEPENDENCIES
  The return value has a default setting and is updated when NV receives
  a NV_RTRE_OP_CONFIG_F command.

RETURN VALUE
  The RTRE polling control indicates whether to poll and the NAM matches the
  R-UIM NAM.

SIDE EFFECTS
  This function returns the current value of the RTRE polling control.  It may
  change.

===========================================================================*/

INLINE boolean nv_rtre_polling_for_nam
( 
  byte nam
)
{
  /* Retrieve the current RTRE control value */
  return ((NV_RTRE_POLLING_CONTROL_POLL == nv_rtre_polling_control_value) &&
  /* and the NAM matches the R-UIM NAM */
          (NV_RUIM_NAM == nam));

}

#endif /* FEATURE_UIM_RUN_TIME_ENABLE */


#endif /* NV_H */

