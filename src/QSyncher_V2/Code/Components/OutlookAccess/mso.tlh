// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.762 (29a0b8cd).
//
// c:\qsyncher_v2\code\components\outlookaccess\debug\mso.tlh
//
// C++ source equivalent of Win32 type library C:\Program Files\Common Files\Microsoft Shared\OFFICE11\MSO.DLL
// compiler-generated file created 08/21/07 at 16:58:48 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace Office {

//
// Forward references and typedefs
//

struct __declspec(uuid("2df8d04c-5bfa-101b-bde5-00aa0044de52"))
/* LIBID */ __Office;
enum MsoLineDashStyle;
enum MsoLineStyle;
enum MsoArrowheadStyle;
enum MsoArrowheadWidth;
enum MsoArrowheadLength;
enum MsoFillType;
enum MsoGradientStyle;
enum MsoGradientColorType;
enum MsoTextureType;
enum MsoPresetTexture;
enum MsoPatternType;
enum MsoPresetGradientType;
enum MsoShadowType;
enum MsoPresetTextEffect;
enum MsoPresetTextEffectShape;
enum MsoTextEffectAlignment;
enum MsoPresetLightingDirection;
enum MsoPresetLightingSoftness;
enum MsoPresetMaterial;
enum MsoPresetExtrusionDirection;
enum MsoPresetThreeDFormat;
enum MsoExtrusionColorType;
enum MsoAlignCmd;
enum MsoDistributeCmd;
enum MsoConnectorType;
enum MsoHorizontalAnchor;
enum MsoVerticalAnchor;
enum MsoOrientation;
enum MsoZOrderCmd;
enum MsoSegmentType;
enum MsoEditingType;
enum MsoAutoShapeType;
enum MsoShapeType;
enum MsoFlipCmd;
enum MsoTriState;
enum MsoColorType;
enum MsoPictureColorType;
enum MsoCalloutAngleType;
enum MsoCalloutDropType;
enum MsoCalloutType;
enum MsoBlackWhiteMode;
enum MsoMixedType;
enum MsoTextOrientation;
enum MsoScaleFrom;
enum MsoBarPosition;
enum MsoBarProtection;
enum MsoBarType;
enum MsoControlType;
enum MsoButtonState;
enum MsoControlOLEUsage;
enum MsoButtonStyleHidden;
enum MsoButtonStyle;
enum MsoComboStyle;
enum MsoOLEMenuGroup;
enum MsoMenuAnimation;
enum MsoBarRow;
enum MsoCommandBarButtonHyperlinkType;
enum MsoHyperlinkType;
enum MsoExtraInfoMethod;
enum MsoAnimationType;
enum MsoButtonSetType;
enum MsoIconType;
enum MsoBalloonType;
enum MsoModeType;
enum MsoBalloonErrorType;
enum MsoWizardActType;
enum MsoWizardMsgType;
enum MsoBalloonButtonType;
enum DocProperties;
enum MsoDocProperties;
enum MsoAppLanguageID;
enum MsoFarEastLineBreakLanguageID;
enum MsoFeatureInstall;
struct __declspec(uuid("618736e0-3c3d-11cf-810c-00aa00389b71"))
/* dual interface */ IAccessible;
struct __declspec(uuid("000c0300-0000-0000-c000-000000000046"))
/* dual interface */ _IMsoDispObj;
struct __declspec(uuid("000c0301-0000-0000-c000-000000000046"))
/* dual interface */ _IMsoOleAccDispObj;
struct __declspec(uuid("000c0302-0000-0000-c000-000000000046"))
/* dual interface */ _CommandBars;
struct __declspec(uuid("000c0304-0000-0000-c000-000000000046"))
/* dual interface */ CommandBar;
struct __declspec(uuid("000c0306-0000-0000-c000-000000000046"))
/* dual interface */ CommandBarControls;
struct __declspec(uuid("000c0308-0000-0000-c000-000000000046"))
/* dual interface */ CommandBarControl;
struct __declspec(uuid("000c030e-0000-0000-c000-000000000046"))
/* dual interface */ _CommandBarButton;
struct __declspec(uuid("000c030a-0000-0000-c000-000000000046"))
/* dual interface */ CommandBarPopup;
struct __declspec(uuid("000c030c-0000-0000-c000-000000000046"))
/* dual interface */ _CommandBarComboBox;
struct __declspec(uuid("000c030d-0000-0000-c000-000000000046"))
/* dual interface */ _CommandBarActiveX;
struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
/* dual interface */ Adjustments;
struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
/* dual interface */ CalloutFormat;
struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
/* dual interface */ ColorFormat;
struct __declspec(uuid("000c0313-0000-0000-c000-000000000046"))
/* dual interface */ ConnectorFormat;
struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
/* dual interface */ FillFormat;
struct __declspec(uuid("000c0315-0000-0000-c000-000000000046"))
/* dual interface */ FreeformBuilder;
struct __declspec(uuid("000c0316-0000-0000-c000-000000000046"))
/* dual interface */ GroupShapes;
struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
/* dual interface */ LineFormat;
struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNode;
struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNodes;
struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
/* dual interface */ PictureFormat;
struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
/* dual interface */ ShadowFormat;
enum MsoScriptLanguage;
enum MsoScriptLocation;
struct __declspec(uuid("000c0341-0000-0000-c000-000000000046"))
/* dual interface */ Script;
struct __declspec(uuid("000c0340-0000-0000-c000-000000000046"))
/* dual interface */ Scripts;
struct __declspec(uuid("000c031c-0000-0000-c000-000000000046"))
/* dual interface */ Shape;
struct __declspec(uuid("000c031d-0000-0000-c000-000000000046"))
/* dual interface */ ShapeRange;
struct __declspec(uuid("000c031e-0000-0000-c000-000000000046"))
/* dual interface */ Shapes;
struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
/* dual interface */ TextEffectFormat;
struct __declspec(uuid("000c0320-0000-0000-c000-000000000046"))
/* dual interface */ TextFrame;
struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
/* dual interface */ ThreeDFormat;
struct __declspec(uuid("000c0359-0000-0000-c000-000000000046"))
/* dual interface */ IMsoDispCagNotifySink;
struct __declspec(uuid("000c0324-0000-0000-c000-000000000046"))
/* dual interface */ Balloon;
struct __declspec(uuid("000c0326-0000-0000-c000-000000000046"))
/* dual interface */ BalloonCheckboxes;
struct __declspec(uuid("000c0328-0000-0000-c000-000000000046"))
/* dual interface */ BalloonCheckbox;
struct __declspec(uuid("000c032e-0000-0000-c000-000000000046"))
/* dual interface */ BalloonLabels;
struct __declspec(uuid("000c0330-0000-0000-c000-000000000046"))
/* dual interface */ BalloonLabel;
struct __declspec(uuid("000c0361-0000-0000-c000-000000000046"))
/* dual interface */ AnswerWizardFiles;
struct __declspec(uuid("000c0360-0000-0000-c000-000000000046"))
/* dual interface */ AnswerWizard;
struct __declspec(uuid("000c0322-0000-0000-c000-000000000046"))
/* dual interface */ Assistant;
struct __declspec(uuid("2df8d04e-5bfa-101b-bde5-00aa0044de52"))
/* interface */ DocumentProperty;
struct __declspec(uuid("2df8d04d-5bfa-101b-bde5-00aa0044de52"))
/* interface */ DocumentProperties;
enum MsoFileFindOptions;
enum MsoFileFindView;
enum MsoFileFindSortBy;
enum MsoFileFindListBy;
struct __declspec(uuid("000c0338-0000-0000-c000-000000000046"))
/* dual interface */ IFoundFiles;
struct __declspec(uuid("000c0337-0000-0000-c000-000000000046"))
/* dual interface */ IFind;
enum MsoLastModified;
enum MsoSortBy;
enum MsoSortOrder;
enum MsoConnector;
enum MsoCondition;
enum MsoFileType;
struct __declspec(uuid("000c0331-0000-0000-c000-000000000046"))
/* dual interface */ FoundFiles;
struct __declspec(uuid("000c0333-0000-0000-c000-000000000046"))
/* dual interface */ PropertyTest;
struct __declspec(uuid("000c0334-0000-0000-c000-000000000046"))
/* dual interface */ PropertyTests;
struct __declspec(uuid("000c0332-0000-0000-c000-000000000046"))
/* dual interface */ FileSearch;
struct __declspec(uuid("000c033a-0000-0000-c000-000000000046"))
/* dual interface */ COMAddIn;
struct __declspec(uuid("000c0339-0000-0000-c000-000000000046"))
/* dual interface */ COMAddIns;
enum MsoLanguageID;
struct __declspec(uuid("000c0353-0000-0000-c000-000000000046"))
/* dual interface */ LanguageSettings;
struct __declspec(uuid("55f88892-7708-11d1-aceb-006008961da5"))
/* dual interface */ ICommandBarsEvents;
struct __declspec(uuid("000c0352-0000-0000-c000-000000000046"))
/* dispinterface */ _CommandBarsEvents;
struct /* coclass */ CommandBars;
struct __declspec(uuid("55f88896-7708-11d1-aceb-006008961da5"))
/* dual interface */ ICommandBarComboBoxEvents;
struct __declspec(uuid("000c0354-0000-0000-c000-000000000046"))
/* dispinterface */ _CommandBarComboBoxEvents;
struct /* coclass */ CommandBarComboBox;
struct __declspec(uuid("55f88890-7708-11d1-aceb-006008961da5"))
/* dual interface */ ICommandBarButtonEvents;
struct __declspec(uuid("000c0351-0000-0000-c000-000000000046"))
/* dispinterface */ _CommandBarButtonEvents;
struct /* coclass */ CommandBarButton;
enum MsoScreenSize;
enum MsoCharacterSet;
enum MsoEncoding;
struct __declspec(uuid("000c0913-0000-0000-c000-000000000046"))
/* dual interface */ WebPageFont;
struct __declspec(uuid("000c0914-0000-0000-c000-000000000046"))
/* dual interface */ WebPageFonts;
enum MsoHTMLProjectOpen;
enum MsoHTMLProjectState;
struct __declspec(uuid("000c0358-0000-0000-c000-000000000046"))
/* dual interface */ HTMLProjectItem;
struct __declspec(uuid("000c0357-0000-0000-c000-000000000046"))
/* dual interface */ HTMLProjectItems;
struct __declspec(uuid("000c0356-0000-0000-c000-000000000046"))
/* dual interface */ HTMLProject;
struct __declspec(uuid("000c035a-0000-0000-c000-000000000046"))
/* dual interface */ MsoDebugOptions;
enum MsoFileDialogType;
enum MsoFileDialogView;
struct __declspec(uuid("000c0363-0000-0000-c000-000000000046"))
/* dual interface */ FileDialogSelectedItems;
struct __declspec(uuid("000c0364-0000-0000-c000-000000000046"))
/* dual interface */ FileDialogFilter;
struct __declspec(uuid("000c0365-0000-0000-c000-000000000046"))
/* dual interface */ FileDialogFilters;
struct __declspec(uuid("000c0362-0000-0000-c000-000000000046"))
/* dual interface */ FileDialog;
enum MsoAutomationSecurity;
struct __declspec(uuid("000c0410-0000-0000-c000-000000000046"))
/* dual interface */ SignatureSet;
struct __declspec(uuid("000c0411-0000-0000-c000-000000000046"))
/* dual interface */ Signature;
enum MailFormat;
struct __declspec(uuid("000672ac-0000-0000-c000-000000000046"))
/* dual interface */ IMsoEnvelopeVB;
struct __declspec(uuid("000672ad-0000-0000-c000-000000000046"))
/* dispinterface */ IMsoEnvelopeVBEvents;
struct /* coclass */ MsoEnvelope;
enum MsoAlertButtonType;
enum MsoAlertIconType;
enum MsoAlertDefaultType;
enum MsoAlertCancelType;
enum MsoSearchIn;
enum MsoTargetBrowser;
struct __declspec(uuid("000c036c-0000-0000-c000-000000000046"))
/* dual interface */ FileTypes;
struct __declspec(uuid("000c036a-0000-0000-c000-000000000046"))
/* dual interface */ SearchFolders;
struct __declspec(uuid("000c0369-0000-0000-c000-000000000046"))
/* dual interface */ ScopeFolders;
struct __declspec(uuid("000c0368-0000-0000-c000-000000000046"))
/* dual interface */ ScopeFolder;
struct __declspec(uuid("000c0367-0000-0000-c000-000000000046"))
/* dual interface */ SearchScope;
struct __declspec(uuid("000c0366-0000-0000-c000-000000000046"))
/* dual interface */ SearchScopes;
enum MsoOrgChartOrientation;
enum MsoOrgChartLayoutType;
enum MsoRelativeNodePosition;
enum MsoDiagramType;
enum MsoDiagramNodeType;
struct __declspec(uuid("000c036d-0000-0000-c000-000000000046"))
/* dual interface */ IMsoDiagram;
struct __declspec(uuid("000c036e-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNodes;
struct __declspec(uuid("000c036f-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNodeChildren;
struct __declspec(uuid("000c0370-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNode;
struct __declspec(uuid("000c0371-0000-0000-c000-000000000046"))
/* dual interface */ CanvasShapes;
enum MsoMoveRow;
struct __declspec(uuid("000c1530-0000-0000-c000-000000000046"))
/* dual interface */ OfficeDataSourceObject;
struct __declspec(uuid("000c1531-0000-0000-c000-000000000046"))
/* dual interface */ ODSOColumn;
struct __declspec(uuid("000c1532-0000-0000-c000-000000000046"))
/* dual interface */ ODSOColumns;
enum MsoFilterComparison;
enum MsoFilterConjunction;
struct __declspec(uuid("000c1533-0000-0000-c000-000000000046"))
/* dual interface */ ODSOFilter;
struct __declspec(uuid("000c1534-0000-0000-c000-000000000046"))
/* dual interface */ ODSOFilters;
enum MsoFileNewSection;
enum MsoFileNewAction;
struct __declspec(uuid("000c0936-0000-0000-c000-000000000046"))
/* dual interface */ NewFile;
struct __declspec(uuid("000cd100-0000-0000-c000-000000000046"))
/* dual interface */ WebComponent;
struct __declspec(uuid("000cd101-0000-0000-c000-000000000046"))
/* dual interface */ WebComponentWindowExternal;
struct __declspec(uuid("000cd102-0000-0000-c000-000000000046"))
/* dual interface */ WebComponentFormat;
enum MsoLanguageIDHidden;
struct __declspec(uuid("4cac6328-b9b0-11d3-8d59-0050048384e3"))
/* dual interface */ ILicWizExternal;
struct __declspec(uuid("919aa22c-b9ad-11d3-8d59-0050048384e3"))
/* dual interface */ ILicValidator;
struct __declspec(uuid("00194002-d9c3-11d3-8d59-0050048384e3"))
/* dual interface */ ILicAgent;
struct __declspec(uuid("000c0372-0000-0000-c000-000000000046"))
/* dual interface */ IMsoEServicesDialog;
struct __declspec(uuid("000c0373-0000-0000-c000-000000000046"))
/* dual interface */ WebComponentProperties;
struct __declspec(uuid("000c0377-0000-0000-c000-000000000046"))
/* dual interface */ SmartDocument;
struct __declspec(uuid("000c0381-0000-0000-c000-000000000046"))
/* dual interface */ SharedWorkspaceMember;
struct __declspec(uuid("000c0382-0000-0000-c000-000000000046"))
/* dual interface */ SharedWorkspaceMembers;
enum MsoSharedWorkspaceTaskStatus;
enum MsoSharedWorkspaceTaskPriority;
struct __declspec(uuid("000c0379-0000-0000-c000-000000000046"))
/* dual interface */ SharedWorkspaceTask;
struct __declspec(uuid("000c037a-0000-0000-c000-000000000046"))
/* dual interface */ SharedWorkspaceTasks;
struct __declspec(uuid("000c037b-0000-0000-c000-000000000046"))
/* dual interface */ SharedWorkspaceFile;
struct __declspec(uuid("000c037c-0000-0000-c000-000000000046"))
/* dual interface */ SharedWorkspaceFiles;
struct __declspec(uuid("000c037d-0000-0000-c000-000000000046"))
/* dual interface */ SharedWorkspaceFolder;
struct __declspec(uuid("000c037e-0000-0000-c000-000000000046"))
/* dual interface */ SharedWorkspaceFolders;
struct __declspec(uuid("000c037f-0000-0000-c000-000000000046"))
/* dual interface */ SharedWorkspaceLink;
struct __declspec(uuid("000c0380-0000-0000-c000-000000000046"))
/* dual interface */ SharedWorkspaceLinks;
struct __declspec(uuid("000c0385-0000-0000-c000-000000000046"))
/* dual interface */ SharedWorkspace;
enum MsoSyncVersionType;
enum MsoSyncConflictResolutionType;
enum MsoSyncCompareType;
enum MsoSyncAvailableType;
enum MsoSyncEventType;
enum MsoSyncErrorType;
enum MsoSyncStatusType;
struct __declspec(uuid("000c0386-0000-0000-c000-000000000046"))
/* dual interface */ Sync;
struct __declspec(uuid("000c0387-0000-0000-c000-000000000046"))
/* dual interface */ DocumentLibraryVersion;
struct __declspec(uuid("000c0388-0000-0000-c000-000000000046"))
/* dual interface */ DocumentLibraryVersions;
enum MsoPermission;
struct __declspec(uuid("000c0375-0000-0000-c000-000000000046"))
/* dual interface */ UserPermission;
struct __declspec(uuid("000c0376-0000-0000-c000-000000000046"))
/* dual interface */ Permission;
typedef long MsoRGBType;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAccessible, __uuidof(IAccessible));
_COM_SMARTPTR_TYPEDEF(_IMsoDispObj, __uuidof(_IMsoDispObj));
_COM_SMARTPTR_TYPEDEF(_IMsoOleAccDispObj, __uuidof(_IMsoOleAccDispObj));
_COM_SMARTPTR_TYPEDEF(Adjustments, __uuidof(Adjustments));
_COM_SMARTPTR_TYPEDEF(CalloutFormat, __uuidof(CalloutFormat));
_COM_SMARTPTR_TYPEDEF(ColorFormat, __uuidof(ColorFormat));
_COM_SMARTPTR_TYPEDEF(FillFormat, __uuidof(FillFormat));
_COM_SMARTPTR_TYPEDEF(LineFormat, __uuidof(LineFormat));
_COM_SMARTPTR_TYPEDEF(ShapeNode, __uuidof(ShapeNode));
_COM_SMARTPTR_TYPEDEF(ShapeNodes, __uuidof(ShapeNodes));
_COM_SMARTPTR_TYPEDEF(PictureFormat, __uuidof(PictureFormat));
_COM_SMARTPTR_TYPEDEF(ShadowFormat, __uuidof(ShadowFormat));
_COM_SMARTPTR_TYPEDEF(Script, __uuidof(Script));
_COM_SMARTPTR_TYPEDEF(Scripts, __uuidof(Scripts));
_COM_SMARTPTR_TYPEDEF(TextEffectFormat, __uuidof(TextEffectFormat));
_COM_SMARTPTR_TYPEDEF(TextFrame, __uuidof(TextFrame));
_COM_SMARTPTR_TYPEDEF(ThreeDFormat, __uuidof(ThreeDFormat));
_COM_SMARTPTR_TYPEDEF(IMsoDispCagNotifySink, __uuidof(IMsoDispCagNotifySink));
_COM_SMARTPTR_TYPEDEF(Balloon, __uuidof(Balloon));
_COM_SMARTPTR_TYPEDEF(BalloonCheckboxes, __uuidof(BalloonCheckboxes));
_COM_SMARTPTR_TYPEDEF(BalloonCheckbox, __uuidof(BalloonCheckbox));
_COM_SMARTPTR_TYPEDEF(BalloonLabels, __uuidof(BalloonLabels));
_COM_SMARTPTR_TYPEDEF(BalloonLabel, __uuidof(BalloonLabel));
_COM_SMARTPTR_TYPEDEF(AnswerWizardFiles, __uuidof(AnswerWizardFiles));
_COM_SMARTPTR_TYPEDEF(AnswerWizard, __uuidof(AnswerWizard));
_COM_SMARTPTR_TYPEDEF(DocumentProperty, __uuidof(DocumentProperty));
_COM_SMARTPTR_TYPEDEF(DocumentProperties, __uuidof(DocumentProperties));
_COM_SMARTPTR_TYPEDEF(IFoundFiles, __uuidof(IFoundFiles));
_COM_SMARTPTR_TYPEDEF(IFind, __uuidof(IFind));
_COM_SMARTPTR_TYPEDEF(FoundFiles, __uuidof(FoundFiles));
_COM_SMARTPTR_TYPEDEF(PropertyTest, __uuidof(PropertyTest));
_COM_SMARTPTR_TYPEDEF(PropertyTests, __uuidof(PropertyTests));
_COM_SMARTPTR_TYPEDEF(COMAddIn, __uuidof(COMAddIn));
_COM_SMARTPTR_TYPEDEF(COMAddIns, __uuidof(COMAddIns));
_COM_SMARTPTR_TYPEDEF(LanguageSettings, __uuidof(LanguageSettings));
_COM_SMARTPTR_TYPEDEF(ICommandBarsEvents, __uuidof(ICommandBarsEvents));
_COM_SMARTPTR_TYPEDEF(_CommandBarsEvents, __uuidof(_CommandBarsEvents));
_COM_SMARTPTR_TYPEDEF(_CommandBarComboBoxEvents, __uuidof(_CommandBarComboBoxEvents));
_COM_SMARTPTR_TYPEDEF(ICommandBarComboBoxEvents, __uuidof(ICommandBarComboBoxEvents));
_COM_SMARTPTR_TYPEDEF(_CommandBarButtonEvents, __uuidof(_CommandBarButtonEvents));
_COM_SMARTPTR_TYPEDEF(ICommandBarButtonEvents, __uuidof(ICommandBarButtonEvents));
_COM_SMARTPTR_TYPEDEF(WebPageFont, __uuidof(WebPageFont));
_COM_SMARTPTR_TYPEDEF(WebPageFonts, __uuidof(WebPageFonts));
_COM_SMARTPTR_TYPEDEF(HTMLProjectItem, __uuidof(HTMLProjectItem));
_COM_SMARTPTR_TYPEDEF(HTMLProjectItems, __uuidof(HTMLProjectItems));
_COM_SMARTPTR_TYPEDEF(HTMLProject, __uuidof(HTMLProject));
_COM_SMARTPTR_TYPEDEF(MsoDebugOptions, __uuidof(MsoDebugOptions));
_COM_SMARTPTR_TYPEDEF(FileDialogSelectedItems, __uuidof(FileDialogSelectedItems));
_COM_SMARTPTR_TYPEDEF(FileDialogFilter, __uuidof(FileDialogFilter));
_COM_SMARTPTR_TYPEDEF(FileDialogFilters, __uuidof(FileDialogFilters));
_COM_SMARTPTR_TYPEDEF(FileDialog, __uuidof(FileDialog));
_COM_SMARTPTR_TYPEDEF(Signature, __uuidof(Signature));
_COM_SMARTPTR_TYPEDEF(SignatureSet, __uuidof(SignatureSet));
_COM_SMARTPTR_TYPEDEF(IMsoEnvelopeVB, __uuidof(IMsoEnvelopeVB));
_COM_SMARTPTR_TYPEDEF(IMsoEnvelopeVBEvents, __uuidof(IMsoEnvelopeVBEvents));
_COM_SMARTPTR_TYPEDEF(Assistant, __uuidof(Assistant));
_COM_SMARTPTR_TYPEDEF(FileTypes, __uuidof(FileTypes));
_COM_SMARTPTR_TYPEDEF(OfficeDataSourceObject, __uuidof(OfficeDataSourceObject));
_COM_SMARTPTR_TYPEDEF(ODSOColumn, __uuidof(ODSOColumn));
_COM_SMARTPTR_TYPEDEF(ODSOColumns, __uuidof(ODSOColumns));
_COM_SMARTPTR_TYPEDEF(ODSOFilter, __uuidof(ODSOFilter));
_COM_SMARTPTR_TYPEDEF(ODSOFilters, __uuidof(ODSOFilters));
_COM_SMARTPTR_TYPEDEF(NewFile, __uuidof(NewFile));
_COM_SMARTPTR_TYPEDEF(WebComponent, __uuidof(WebComponent));
_COM_SMARTPTR_TYPEDEF(WebComponentWindowExternal, __uuidof(WebComponentWindowExternal));
_COM_SMARTPTR_TYPEDEF(WebComponentFormat, __uuidof(WebComponentFormat));
_COM_SMARTPTR_TYPEDEF(ILicWizExternal, __uuidof(ILicWizExternal));
_COM_SMARTPTR_TYPEDEF(ILicValidator, __uuidof(ILicValidator));
_COM_SMARTPTR_TYPEDEF(ILicAgent, __uuidof(ILicAgent));
_COM_SMARTPTR_TYPEDEF(IMsoEServicesDialog, __uuidof(IMsoEServicesDialog));
_COM_SMARTPTR_TYPEDEF(WebComponentProperties, __uuidof(WebComponentProperties));
_COM_SMARTPTR_TYPEDEF(SmartDocument, __uuidof(SmartDocument));
_COM_SMARTPTR_TYPEDEF(SharedWorkspaceMember, __uuidof(SharedWorkspaceMember));
_COM_SMARTPTR_TYPEDEF(SharedWorkspaceMembers, __uuidof(SharedWorkspaceMembers));
_COM_SMARTPTR_TYPEDEF(SharedWorkspaceTask, __uuidof(SharedWorkspaceTask));
_COM_SMARTPTR_TYPEDEF(SharedWorkspaceTasks, __uuidof(SharedWorkspaceTasks));
_COM_SMARTPTR_TYPEDEF(SharedWorkspaceFile, __uuidof(SharedWorkspaceFile));
_COM_SMARTPTR_TYPEDEF(SharedWorkspaceFiles, __uuidof(SharedWorkspaceFiles));
_COM_SMARTPTR_TYPEDEF(SharedWorkspaceFolder, __uuidof(SharedWorkspaceFolder));
_COM_SMARTPTR_TYPEDEF(SharedWorkspaceFolders, __uuidof(SharedWorkspaceFolders));
_COM_SMARTPTR_TYPEDEF(SharedWorkspaceLink, __uuidof(SharedWorkspaceLink));
_COM_SMARTPTR_TYPEDEF(SharedWorkspaceLinks, __uuidof(SharedWorkspaceLinks));
_COM_SMARTPTR_TYPEDEF(SharedWorkspace, __uuidof(SharedWorkspace));
_COM_SMARTPTR_TYPEDEF(Sync, __uuidof(Sync));
_COM_SMARTPTR_TYPEDEF(DocumentLibraryVersion, __uuidof(DocumentLibraryVersion));
_COM_SMARTPTR_TYPEDEF(DocumentLibraryVersions, __uuidof(DocumentLibraryVersions));
_COM_SMARTPTR_TYPEDEF(UserPermission, __uuidof(UserPermission));
_COM_SMARTPTR_TYPEDEF(Permission, __uuidof(Permission));
_COM_SMARTPTR_TYPEDEF(_CommandBars, __uuidof(_CommandBars));
_COM_SMARTPTR_TYPEDEF(CommandBar, __uuidof(CommandBar));
_COM_SMARTPTR_TYPEDEF(CommandBarControl, __uuidof(CommandBarControl));
_COM_SMARTPTR_TYPEDEF(CommandBarControls, __uuidof(CommandBarControls));
_COM_SMARTPTR_TYPEDEF(_CommandBarButton, __uuidof(_CommandBarButton));
_COM_SMARTPTR_TYPEDEF(CommandBarPopup, __uuidof(CommandBarPopup));
_COM_SMARTPTR_TYPEDEF(_CommandBarComboBox, __uuidof(_CommandBarComboBox));
_COM_SMARTPTR_TYPEDEF(_CommandBarActiveX, __uuidof(_CommandBarActiveX));
_COM_SMARTPTR_TYPEDEF(ConnectorFormat, __uuidof(ConnectorFormat));
_COM_SMARTPTR_TYPEDEF(FreeformBuilder, __uuidof(FreeformBuilder));
_COM_SMARTPTR_TYPEDEF(GroupShapes, __uuidof(GroupShapes));
_COM_SMARTPTR_TYPEDEF(Shape, __uuidof(Shape));
_COM_SMARTPTR_TYPEDEF(ShapeRange, __uuidof(ShapeRange));
_COM_SMARTPTR_TYPEDEF(Shapes, __uuidof(Shapes));
_COM_SMARTPTR_TYPEDEF(CanvasShapes, __uuidof(CanvasShapes));
_COM_SMARTPTR_TYPEDEF(FileSearch, __uuidof(FileSearch));
_COM_SMARTPTR_TYPEDEF(SearchFolders, __uuidof(SearchFolders));
_COM_SMARTPTR_TYPEDEF(ScopeFolders, __uuidof(ScopeFolders));
_COM_SMARTPTR_TYPEDEF(ScopeFolder, __uuidof(ScopeFolder));
_COM_SMARTPTR_TYPEDEF(SearchScope, __uuidof(SearchScope));
_COM_SMARTPTR_TYPEDEF(SearchScopes, __uuidof(SearchScopes));
_COM_SMARTPTR_TYPEDEF(IMsoDiagram, __uuidof(IMsoDiagram));
_COM_SMARTPTR_TYPEDEF(DiagramNodes, __uuidof(DiagramNodes));
_COM_SMARTPTR_TYPEDEF(DiagramNodeChildren, __uuidof(DiagramNodeChildren));
_COM_SMARTPTR_TYPEDEF(DiagramNode, __uuidof(DiagramNode));

//
// Type library items
//

enum MsoLineDashStyle
{
    msoLineDashStyleMixed = -2,
    msoLineSolid = 1,
    msoLineSquareDot = 2,
    msoLineRoundDot = 3,
    msoLineDash = 4,
    msoLineDashDot = 5,
    msoLineDashDotDot = 6,
    msoLineLongDash = 7,
    msoLineLongDashDot = 8
};

enum MsoLineStyle
{
    msoLineStyleMixed = -2,
    msoLineSingle = 1,
    msoLineThinThin = 2,
    msoLineThinThick = 3,
    msoLineThickThin = 4,
    msoLineThickBetweenThin = 5
};

enum MsoArrowheadStyle
{
    msoArrowheadStyleMixed = -2,
    msoArrowheadNone = 1,
    msoArrowheadTriangle = 2,
    msoArrowheadOpen = 3,
    msoArrowheadStealth = 4,
    msoArrowheadDiamond = 5,
    msoArrowheadOval = 6
};

enum MsoArrowheadWidth
{
    msoArrowheadWidthMixed = -2,
    msoArrowheadNarrow = 1,
    msoArrowheadWidthMedium = 2,
    msoArrowheadWide = 3
};

enum MsoArrowheadLength
{
    msoArrowheadLengthMixed = -2,
    msoArrowheadShort = 1,
    msoArrowheadLengthMedium = 2,
    msoArrowheadLong = 3
};

enum MsoFillType
{
    msoFillMixed = -2,
    msoFillSolid = 1,
    msoFillPatterned = 2,
    msoFillGradient = 3,
    msoFillTextured = 4,
    msoFillBackground = 5,
    msoFillPicture = 6
};

enum MsoGradientStyle
{
    msoGradientMixed = -2,
    msoGradientHorizontal = 1,
    msoGradientVertical = 2,
    msoGradientDiagonalUp = 3,
    msoGradientDiagonalDown = 4,
    msoGradientFromCorner = 5,
    msoGradientFromTitle = 6,
    msoGradientFromCenter = 7
};

enum MsoGradientColorType
{
    msoGradientColorMixed = -2,
    msoGradientOneColor = 1,
    msoGradientTwoColors = 2,
    msoGradientPresetColors = 3
};

enum MsoTextureType
{
    msoTextureTypeMixed = -2,
    msoTexturePreset = 1,
    msoTextureUserDefined = 2
};

enum MsoPresetTexture
{
    msoPresetTextureMixed = -2,
    msoTexturePapyrus = 1,
    msoTextureCanvas = 2,
    msoTextureDenim = 3,
    msoTextureWovenMat = 4,
    msoTextureWaterDroplets = 5,
    msoTexturePaperBag = 6,
    msoTextureFishFossil = 7,
    msoTextureSand = 8,
    msoTextureGreenMarble = 9,
    msoTextureWhiteMarble = 10,
    msoTextureBrownMarble = 11,
    msoTextureGranite = 12,
    msoTextureNewsprint = 13,
    msoTextureRecycledPaper = 14,
    msoTextureParchment = 15,
    msoTextureStationery = 16,
    msoTextureBlueTissuePaper = 17,
    msoTexturePinkTissuePaper = 18,
    msoTexturePurpleMesh = 19,
    msoTextureBouquet = 20,
    msoTextureCork = 21,
    msoTextureWalnut = 22,
    msoTextureOak = 23,
    msoTextureMediumWood = 24
};

enum MsoPatternType
{
    msoPatternMixed = -2,
    msoPattern5Percent = 1,
    msoPattern10Percent = 2,
    msoPattern20Percent = 3,
    msoPattern25Percent = 4,
    msoPattern30Percent = 5,
    msoPattern40Percent = 6,
    msoPattern50Percent = 7,
    msoPattern60Percent = 8,
    msoPattern70Percent = 9,
    msoPattern75Percent = 10,
    msoPattern80Percent = 11,
    msoPattern90Percent = 12,
    msoPatternDarkHorizontal = 13,
    msoPatternDarkVertical = 14,
    msoPatternDarkDownwardDiagonal = 15,
    msoPatternDarkUpwardDiagonal = 16,
    msoPatternSmallCheckerBoard = 17,
    msoPatternTrellis = 18,
    msoPatternLightHorizontal = 19,
    msoPatternLightVertical = 20,
    msoPatternLightDownwardDiagonal = 21,
    msoPatternLightUpwardDiagonal = 22,
    msoPatternSmallGrid = 23,
    msoPatternDottedDiamond = 24,
    msoPatternWideDownwardDiagonal = 25,
    msoPatternWideUpwardDiagonal = 26,
    msoPatternDashedUpwardDiagonal = 27,
    msoPatternDashedDownwardDiagonal = 28,
    msoPatternNarrowVertical = 29,
    msoPatternNarrowHorizontal = 30,
    msoPatternDashedVertical = 31,
    msoPatternDashedHorizontal = 32,
    msoPatternLargeConfetti = 33,
    msoPatternLargeGrid = 34,
    msoPatternHorizontalBrick = 35,
    msoPatternLargeCheckerBoard = 36,
    msoPatternSmallConfetti = 37,
    msoPatternZigZag = 38,
    msoPatternSolidDiamond = 39,
    msoPatternDiagonalBrick = 40,
    msoPatternOutlinedDiamond = 41,
    msoPatternPlaid = 42,
    msoPatternSphere = 43,
    msoPatternWeave = 44,
    msoPatternDottedGrid = 45,
    msoPatternDivot = 46,
    msoPatternShingle = 47,
    msoPatternWave = 48
};

enum MsoPresetGradientType
{
    msoPresetGradientMixed = -2,
    msoGradientEarlySunset = 1,
    msoGradientLateSunset = 2,
    msoGradientNightfall = 3,
    msoGradientDaybreak = 4,
    msoGradientHorizon = 5,
    msoGradientDesert = 6,
    msoGradientOcean = 7,
    msoGradientCalmWater = 8,
    msoGradientFire = 9,
    msoGradientFog = 10,
    msoGradientMoss = 11,
    msoGradientPeacock = 12,
    msoGradientWheat = 13,
    msoGradientParchment = 14,
    msoGradientMahogany = 15,
    msoGradientRainbow = 16,
    msoGradientRainbowII = 17,
    msoGradientGold = 18,
    msoGradientGoldII = 19,
    msoGradientBrass = 20,
    msoGradientChrome = 21,
    msoGradientChromeII = 22,
    msoGradientSilver = 23,
    msoGradientSapphire = 24
};

enum MsoShadowType
{
    msoShadowMixed = -2,
    msoShadow1 = 1,
    msoShadow2 = 2,
    msoShadow3 = 3,
    msoShadow4 = 4,
    msoShadow5 = 5,
    msoShadow6 = 6,
    msoShadow7 = 7,
    msoShadow8 = 8,
    msoShadow9 = 9,
    msoShadow10 = 10,
    msoShadow11 = 11,
    msoShadow12 = 12,
    msoShadow13 = 13,
    msoShadow14 = 14,
    msoShadow15 = 15,
    msoShadow16 = 16,
    msoShadow17 = 17,
    msoShadow18 = 18,
    msoShadow19 = 19,
    msoShadow20 = 20
};

enum MsoPresetTextEffect
{
    msoTextEffectMixed = -2,
    msoTextEffect1 = 0,
    msoTextEffect2 = 1,
    msoTextEffect3 = 2,
    msoTextEffect4 = 3,
    msoTextEffect5 = 4,
    msoTextEffect6 = 5,
    msoTextEffect7 = 6,
    msoTextEffect8 = 7,
    msoTextEffect9 = 8,
    msoTextEffect10 = 9,
    msoTextEffect11 = 10,
    msoTextEffect12 = 11,
    msoTextEffect13 = 12,
    msoTextEffect14 = 13,
    msoTextEffect15 = 14,
    msoTextEffect16 = 15,
    msoTextEffect17 = 16,
    msoTextEffect18 = 17,
    msoTextEffect19 = 18,
    msoTextEffect20 = 19,
    msoTextEffect21 = 20,
    msoTextEffect22 = 21,
    msoTextEffect23 = 22,
    msoTextEffect24 = 23,
    msoTextEffect25 = 24,
    msoTextEffect26 = 25,
    msoTextEffect27 = 26,
    msoTextEffect28 = 27,
    msoTextEffect29 = 28,
    msoTextEffect30 = 29
};

enum MsoPresetTextEffectShape
{
    msoTextEffectShapeMixed = -2,
    msoTextEffectShapePlainText = 1,
    msoTextEffectShapeStop = 2,
    msoTextEffectShapeTriangleUp = 3,
    msoTextEffectShapeTriangleDown = 4,
    msoTextEffectShapeChevronUp = 5,
    msoTextEffectShapeChevronDown = 6,
    msoTextEffectShapeRingInside = 7,
    msoTextEffectShapeRingOutside = 8,
    msoTextEffectShapeArchUpCurve = 9,
    msoTextEffectShapeArchDownCurve = 10,
    msoTextEffectShapeCircleCurve = 11,
    msoTextEffectShapeButtonCurve = 12,
    msoTextEffectShapeArchUpPour = 13,
    msoTextEffectShapeArchDownPour = 14,
    msoTextEffectShapeCirclePour = 15,
    msoTextEffectShapeButtonPour = 16,
    msoTextEffectShapeCurveUp = 17,
    msoTextEffectShapeCurveDown = 18,
    msoTextEffectShapeCanUp = 19,
    msoTextEffectShapeCanDown = 20,
    msoTextEffectShapeWave1 = 21,
    msoTextEffectShapeWave2 = 22,
    msoTextEffectShapeDoubleWave1 = 23,
    msoTextEffectShapeDoubleWave2 = 24,
    msoTextEffectShapeInflate = 25,
    msoTextEffectShapeDeflate = 26,
    msoTextEffectShapeInflateBottom = 27,
    msoTextEffectShapeDeflateBottom = 28,
    msoTextEffectShapeInflateTop = 29,
    msoTextEffectShapeDeflateTop = 30,
    msoTextEffectShapeDeflateInflate = 31,
    msoTextEffectShapeDeflateInflateDeflate = 32,
    msoTextEffectShapeFadeRight = 33,
    msoTextEffectShapeFadeLeft = 34,
    msoTextEffectShapeFadeUp = 35,
    msoTextEffectShapeFadeDown = 36,
    msoTextEffectShapeSlantUp = 37,
    msoTextEffectShapeSlantDown = 38,
    msoTextEffectShapeCascadeUp = 39,
    msoTextEffectShapeCascadeDown = 40
};

enum MsoTextEffectAlignment
{
    msoTextEffectAlignmentMixed = -2,
    msoTextEffectAlignmentLeft = 1,
    msoTextEffectAlignmentCentered = 2,
    msoTextEffectAlignmentRight = 3,
    msoTextEffectAlignmentLetterJustify = 4,
    msoTextEffectAlignmentWordJustify = 5,
    msoTextEffectAlignmentStretchJustify = 6
};

enum MsoPresetLightingDirection
{
    msoPresetLightingDirectionMixed = -2,
    msoLightingTopLeft = 1,
    msoLightingTop = 2,
    msoLightingTopRight = 3,
    msoLightingLeft = 4,
    msoLightingNone = 5,
    msoLightingRight = 6,
    msoLightingBottomLeft = 7,
    msoLightingBottom = 8,
    msoLightingBottomRight = 9
};

enum MsoPresetLightingSoftness
{
    msoPresetLightingSoftnessMixed = -2,
    msoLightingDim = 1,
    msoLightingNormal = 2,
    msoLightingBright = 3
};

enum MsoPresetMaterial
{
    msoPresetMaterialMixed = -2,
    msoMaterialMatte = 1,
    msoMaterialPlastic = 2,
    msoMaterialMetal = 3,
    msoMaterialWireFrame = 4
};

enum MsoPresetExtrusionDirection
{
    msoPresetExtrusionDirectionMixed = -2,
    msoExtrusionBottomRight = 1,
    msoExtrusionBottom = 2,
    msoExtrusionBottomLeft = 3,
    msoExtrusionRight = 4,
    msoExtrusionNone = 5,
    msoExtrusionLeft = 6,
    msoExtrusionTopRight = 7,
    msoExtrusionTop = 8,
    msoExtrusionTopLeft = 9
};

enum MsoPresetThreeDFormat
{
    msoPresetThreeDFormatMixed = -2,
    msoThreeD1 = 1,
    msoThreeD2 = 2,
    msoThreeD3 = 3,
    msoThreeD4 = 4,
    msoThreeD5 = 5,
    msoThreeD6 = 6,
    msoThreeD7 = 7,
    msoThreeD8 = 8,
    msoThreeD9 = 9,
    msoThreeD10 = 10,
    msoThreeD11 = 11,
    msoThreeD12 = 12,
    msoThreeD13 = 13,
    msoThreeD14 = 14,
    msoThreeD15 = 15,
    msoThreeD16 = 16,
    msoThreeD17 = 17,
    msoThreeD18 = 18,
    msoThreeD19 = 19,
    msoThreeD20 = 20
};

enum MsoExtrusionColorType
{
    msoExtrusionColorTypeMixed = -2,
    msoExtrusionColorAutomatic = 1,
    msoExtrusionColorCustom = 2
};

enum MsoAlignCmd
{
    msoAlignLefts = 0,
    msoAlignCenters = 1,
    msoAlignRights = 2,
    msoAlignTops = 3,
    msoAlignMiddles = 4,
    msoAlignBottoms = 5
};

enum MsoDistributeCmd
{
    msoDistributeHorizontally = 0,
    msoDistributeVertically = 1
};

enum MsoConnectorType
{
    msoConnectorTypeMixed = -2,
    msoConnectorStraight = 1,
    msoConnectorElbow = 2,
    msoConnectorCurve = 3
};

enum MsoHorizontalAnchor
{
    msoHorizontalAnchorMixed = -2,
    msoAnchorNone = 1,
    msoAnchorCenter = 2
};

enum MsoVerticalAnchor
{
    msoVerticalAnchorMixed = -2,
    msoAnchorTop = 1,
    msoAnchorTopBaseline = 2,
    msoAnchorMiddle = 3,
    msoAnchorBottom = 4,
    msoAnchorBottomBaseLine = 5
};

enum MsoOrientation
{
    msoOrientationMixed = -2,
    msoOrientationHorizontal = 1,
    msoOrientationVertical = 2
};

enum MsoZOrderCmd
{
    msoBringToFront = 0,
    msoSendToBack = 1,
    msoBringForward = 2,
    msoSendBackward = 3,
    msoBringInFrontOfText = 4,
    msoSendBehindText = 5
};

enum MsoSegmentType
{
    msoSegmentLine = 0,
    msoSegmentCurve = 1
};

enum MsoEditingType
{
    msoEditingAuto = 0,
    msoEditingCorner = 1,
    msoEditingSmooth = 2,
    msoEditingSymmetric = 3
};

enum MsoAutoShapeType
{
    msoShapeMixed = -2,
    msoShapeRectangle = 1,
    msoShapeParallelogram = 2,
    msoShapeTrapezoid = 3,
    msoShapeDiamond = 4,
    msoShapeRoundedRectangle = 5,
    msoShapeOctagon = 6,
    msoShapeIsoscelesTriangle = 7,
    msoShapeRightTriangle = 8,
    msoShapeOval = 9,
    msoShapeHexagon = 10,
    msoShapeCross = 11,
    msoShapeRegularPentagon = 12,
    msoShapeCan = 13,
    msoShapeCube = 14,
    msoShapeBevel = 15,
    msoShapeFoldedCorner = 16,
    msoShapeSmileyFace = 17,
    msoShapeDonut = 18,
    msoShapeNoSymbol = 19,
    msoShapeBlockArc = 20,
    msoShapeHeart = 21,
    msoShapeLightningBolt = 22,
    msoShapeSun = 23,
    msoShapeMoon = 24,
    msoShapeArc = 25,
    msoShapeDoubleBracket = 26,
    msoShapeDoubleBrace = 27,
    msoShapePlaque = 28,
    msoShapeLeftBracket = 29,
    msoShapeRightBracket = 30,
    msoShapeLeftBrace = 31,
    msoShapeRightBrace = 32,
    msoShapeRightArrow = 33,
    msoShapeLeftArrow = 34,
    msoShapeUpArrow = 35,
    msoShapeDownArrow = 36,
    msoShapeLeftRightArrow = 37,
    msoShapeUpDownArrow = 38,
    msoShapeQuadArrow = 39,
    msoShapeLeftRightUpArrow = 40,
    msoShapeBentArrow = 41,
    msoShapeUTurnArrow = 42,
    msoShapeLeftUpArrow = 43,
    msoShapeBentUpArrow = 44,
    msoShapeCurvedRightArrow = 45,
    msoShapeCurvedLeftArrow = 46,
    msoShapeCurvedUpArrow = 47,
    msoShapeCurvedDownArrow = 48,
    msoShapeStripedRightArrow = 49,
    msoShapeNotchedRightArrow = 50,
    msoShapePentagon = 51,
    msoShapeChevron = 52,
    msoShapeRightArrowCallout = 53,
    msoShapeLeftArrowCallout = 54,
    msoShapeUpArrowCallout = 55,
    msoShapeDownArrowCallout = 56,
    msoShapeLeftRightArrowCallout = 57,
    msoShapeUpDownArrowCallout = 58,
    msoShapeQuadArrowCallout = 59,
    msoShapeCircularArrow = 60,
    msoShapeFlowchartProcess = 61,
    msoShapeFlowchartAlternateProcess = 62,
    msoShapeFlowchartDecision = 63,
    msoShapeFlowchartData = 64,
    msoShapeFlowchartPredefinedProcess = 65,
    msoShapeFlowchartInternalStorage = 66,
    msoShapeFlowchartDocument = 67,
    msoShapeFlowchartMultidocument = 68,
    msoShapeFlowchartTerminator = 69,
    msoShapeFlowchartPreparation = 70,
    msoShapeFlowchartManualInput = 71,
    msoShapeFlowchartManualOperation = 72,
    msoShapeFlowchartConnector = 73,
    msoShapeFlowchartOffpageConnector = 74,
    msoShapeFlowchartCard = 75,
    msoShapeFlowchartPunchedTape = 76,
    msoShapeFlowchartSummingJunction = 77,
    msoShapeFlowchartOr = 78,
    msoShapeFlowchartCollate = 79,
    msoShapeFlowchartSort = 80,
    msoShapeFlowchartExtract = 81,
    msoShapeFlowchartMerge = 82,
    msoShapeFlowchartStoredData = 83,
    msoShapeFlowchartDelay = 84,
    msoShapeFlowchartSequentialAccessStorage = 85,
    msoShapeFlowchartMagneticDisk = 86,
    msoShapeFlowchartDirectAccessStorage = 87,
    msoShapeFlowchartDisplay = 88,
    msoShapeExplosion1 = 89,
    msoShapeExplosion2 = 90,
    msoShape4pointStar = 91,
    msoShape5pointStar = 92,
    msoShape8pointStar = 93,
    msoShape16pointStar = 94,
    msoShape24pointStar = 95,
    msoShape32pointStar = 96,
    msoShapeUpRibbon = 97,
    msoShapeDownRibbon = 98,
    msoShapeCurvedUpRibbon = 99,
    msoShapeCurvedDownRibbon = 100,
    msoShapeVerticalScroll = 101,
    msoShapeHorizontalScroll = 102,
    msoShapeWave = 103,
    msoShapeDoubleWave = 104,
    msoShapeRectangularCallout = 105,
    msoShapeRoundedRectangularCallout = 106,
    msoShapeOvalCallout = 107,
    msoShapeCloudCallout = 108,
    msoShapeLineCallout1 = 109,
    msoShapeLineCallout2 = 110,
    msoShapeLineCallout3 = 111,
    msoShapeLineCallout4 = 112,
    msoShapeLineCallout1AccentBar = 113,
    msoShapeLineCallout2AccentBar = 114,
    msoShapeLineCallout3AccentBar = 115,
    msoShapeLineCallout4AccentBar = 116,
    msoShapeLineCallout1NoBorder = 117,
    msoShapeLineCallout2NoBorder = 118,
    msoShapeLineCallout3NoBorder = 119,
    msoShapeLineCallout4NoBorder = 120,
    msoShapeLineCallout1BorderandAccentBar = 121,
    msoShapeLineCallout2BorderandAccentBar = 122,
    msoShapeLineCallout3BorderandAccentBar = 123,
    msoShapeLineCallout4BorderandAccentBar = 124,
    msoShapeActionButtonCustom = 125,
    msoShapeActionButtonHome = 126,
    msoShapeActionButtonHelp = 127,
    msoShapeActionButtonInformation = 128,
    msoShapeActionButtonBackorPrevious = 129,
    msoShapeActionButtonForwardorNext = 130,
    msoShapeActionButtonBeginning = 131,
    msoShapeActionButtonEnd = 132,
    msoShapeActionButtonReturn = 133,
    msoShapeActionButtonDocument = 134,
    msoShapeActionButtonSound = 135,
    msoShapeActionButtonMovie = 136,
    msoShapeBalloon = 137,
    msoShapeNotPrimitive = 138
};

enum MsoShapeType
{
    msoShapeTypeMixed = -2,
    msoAutoShape = 1,
    msoCallout = 2,
    msoChart = 3,
    msoComment = 4,
    msoFreeform = 5,
    msoGroup = 6,
    msoEmbeddedOLEObject = 7,
    msoFormControl = 8,
    msoLine = 9,
    msoLinkedOLEObject = 10,
    msoLinkedPicture = 11,
    msoOLEControlObject = 12,
    msoPicture = 13,
    msoPlaceholder = 14,
    msoTextEffect = 15,
    msoMedia = 16,
    msoTextBox = 17,
    msoScriptAnchor = 18,
    msoTable = 19,
    msoCanvas = 20,
    msoDiagram = 21,
    msoInk = 22,
    msoInkComment = 23
};

enum MsoFlipCmd
{
    msoFlipHorizontal = 0,
    msoFlipVertical = 1
};

enum MsoTriState
{
    msoTrue = -1,
    msoFalse = 0,
    msoCTrue = 1,
    msoTriStateToggle = -3,
    msoTriStateMixed = -2
};

enum MsoColorType
{
    msoColorTypeMixed = -2,
    msoColorTypeRGB = 1,
    msoColorTypeScheme = 2,
    msoColorTypeCMYK = 3,
    msoColorTypeCMS = 4,
    msoColorTypeInk = 5
};

enum MsoPictureColorType
{
    msoPictureMixed = -2,
    msoPictureAutomatic = 1,
    msoPictureGrayscale = 2,
    msoPictureBlackAndWhite = 3,
    msoPictureWatermark = 4
};

enum MsoCalloutAngleType
{
    msoCalloutAngleMixed = -2,
    msoCalloutAngleAutomatic = 1,
    msoCalloutAngle30 = 2,
    msoCalloutAngle45 = 3,
    msoCalloutAngle60 = 4,
    msoCalloutAngle90 = 5
};

enum MsoCalloutDropType
{
    msoCalloutDropMixed = -2,
    msoCalloutDropCustom = 1,
    msoCalloutDropTop = 2,
    msoCalloutDropCenter = 3,
    msoCalloutDropBottom = 4
};

enum MsoCalloutType
{
    msoCalloutMixed = -2,
    msoCalloutOne = 1,
    msoCalloutTwo = 2,
    msoCalloutThree = 3,
    msoCalloutFour = 4
};

enum MsoBlackWhiteMode
{
    msoBlackWhiteMixed = -2,
    msoBlackWhiteAutomatic = 1,
    msoBlackWhiteGrayScale = 2,
    msoBlackWhiteLightGrayScale = 3,
    msoBlackWhiteInverseGrayScale = 4,
    msoBlackWhiteGrayOutline = 5,
    msoBlackWhiteBlackTextAndLine = 6,
    msoBlackWhiteHighContrast = 7,
    msoBlackWhiteBlack = 8,
    msoBlackWhiteWhite = 9,
    msoBlackWhiteDontShow = 10
};

enum MsoMixedType
{
    msoIntegerMixed = 32768,
    msoSingleMixed = 0x80000000
};

enum MsoTextOrientation
{
    msoTextOrientationMixed = -2,
    msoTextOrientationHorizontal = 1,
    msoTextOrientationUpward = 2,
    msoTextOrientationDownward = 3,
    msoTextOrientationVerticalFarEast = 4,
    msoTextOrientationVertical = 5,
    msoTextOrientationHorizontalRotatedFarEast = 6
};

enum MsoScaleFrom
{
    msoScaleFromTopLeft = 0,
    msoScaleFromMiddle = 1,
    msoScaleFromBottomRight = 2
};

enum MsoBarPosition
{
    msoBarLeft = 0,
    msoBarTop = 1,
    msoBarRight = 2,
    msoBarBottom = 3,
    msoBarFloating = 4,
    msoBarPopup = 5,
    msoBarMenuBar = 6
};

enum MsoBarProtection
{
    msoBarNoProtection = 0,
    msoBarNoCustomize = 1,
    msoBarNoResize = 2,
    msoBarNoMove = 4,
    msoBarNoChangeVisible = 8,
    msoBarNoChangeDock = 16,
    msoBarNoVerticalDock = 32,
    msoBarNoHorizontalDock = 64
};

enum MsoBarType
{
    msoBarTypeNormal = 0,
    msoBarTypeMenuBar = 1,
    msoBarTypePopup = 2
};

enum MsoControlType
{
    msoControlCustom = 0,
    msoControlButton = 1,
    msoControlEdit = 2,
    msoControlDropdown = 3,
    msoControlComboBox = 4,
    msoControlButtonDropdown = 5,
    msoControlSplitDropdown = 6,
    msoControlOCXDropdown = 7,
    msoControlGenericDropdown = 8,
    msoControlGraphicDropdown = 9,
    msoControlPopup = 10,
    msoControlGraphicPopup = 11,
    msoControlButtonPopup = 12,
    msoControlSplitButtonPopup = 13,
    msoControlSplitButtonMRUPopup = 14,
    msoControlLabel = 15,
    msoControlExpandingGrid = 16,
    msoControlSplitExpandingGrid = 17,
    msoControlGrid = 18,
    msoControlGauge = 19,
    msoControlGraphicCombo = 20,
    msoControlPane = 21,
    msoControlActiveX = 22,
    msoControlSpinner = 23,
    msoControlLabelEx = 24,
    msoControlWorkPane = 25,
    msoControlAutoCompleteCombo = 26
};

enum MsoButtonState
{
    msoButtonUp = 0,
    msoButtonDown = -1,
    msoButtonMixed = 2
};

enum MsoControlOLEUsage
{
    msoControlOLEUsageNeither = 0,
    msoControlOLEUsageServer = 1,
    msoControlOLEUsageClient = 2,
    msoControlOLEUsageBoth = 3
};

enum MsoButtonStyleHidden
{
    msoButtonWrapText = 4,
    msoButtonTextBelow = 8
};

enum MsoButtonStyle
{
    msoButtonAutomatic = 0,
    msoButtonIcon = 1,
    msoButtonCaption = 2,
    msoButtonIconAndCaption = 3,
    msoButtonIconAndWrapCaption = 7,
    msoButtonIconAndCaptionBelow = 11,
    msoButtonWrapCaption = 14,
    msoButtonIconAndWrapCaptionBelow = 15
};

enum MsoComboStyle
{
    msoComboNormal = 0,
    msoComboLabel = 1
};

enum MsoOLEMenuGroup
{
    msoOLEMenuGroupNone = -1,
    msoOLEMenuGroupFile = 0,
    msoOLEMenuGroupEdit = 1,
    msoOLEMenuGroupContainer = 2,
    msoOLEMenuGroupObject = 3,
    msoOLEMenuGroupWindow = 4,
    msoOLEMenuGroupHelp = 5
};

enum MsoMenuAnimation
{
    msoMenuAnimationNone = 0,
    msoMenuAnimationRandom = 1,
    msoMenuAnimationUnfold = 2,
    msoMenuAnimationSlide = 3
};

enum MsoBarRow
{
    msoBarRowFirst = 0,
    msoBarRowLast = -1
};

enum MsoCommandBarButtonHyperlinkType
{
    msoCommandBarButtonHyperlinkNone = 0,
    msoCommandBarButtonHyperlinkOpen = 1,
    msoCommandBarButtonHyperlinkInsertPicture = 2
};

enum MsoHyperlinkType
{
    msoHyperlinkRange = 0,
    msoHyperlinkShape = 1,
    msoHyperlinkInlineShape = 2
};

enum MsoExtraInfoMethod
{
    msoMethodGet = 0,
    msoMethodPost = 1
};

enum MsoAnimationType
{
    msoAnimationIdle = 1,
    msoAnimationGreeting = 2,
    msoAnimationGoodbye = 3,
    msoAnimationBeginSpeaking = 4,
    msoAnimationRestPose = 5,
    msoAnimationCharacterSuccessMajor = 6,
    msoAnimationGetAttentionMajor = 11,
    msoAnimationGetAttentionMinor = 12,
    msoAnimationSearching = 13,
    msoAnimationPrinting = 18,
    msoAnimationGestureRight = 19,
    msoAnimationWritingNotingSomething = 22,
    msoAnimationWorkingAtSomething = 23,
    msoAnimationThinking = 24,
    msoAnimationSendingMail = 25,
    msoAnimationListensToComputer = 26,
    msoAnimationDisappear = 31,
    msoAnimationAppear = 32,
    msoAnimationGetArtsy = 100,
    msoAnimationGetTechy = 101,
    msoAnimationGetWizardy = 102,
    msoAnimationCheckingSomething = 103,
    msoAnimationLookDown = 104,
    msoAnimationLookDownLeft = 105,
    msoAnimationLookDownRight = 106,
    msoAnimationLookLeft = 107,
    msoAnimationLookRight = 108,
    msoAnimationLookUp = 109,
    msoAnimationLookUpLeft = 110,
    msoAnimationLookUpRight = 111,
    msoAnimationSaving = 112,
    msoAnimationGestureDown = 113,
    msoAnimationGestureLeft = 114,
    msoAnimationGestureUp = 115,
    msoAnimationEmptyTrash = 116
};

enum MsoButtonSetType
{
    msoButtonSetNone = 0,
    msoButtonSetOK = 1,
    msoButtonSetCancel = 2,
    msoButtonSetOkCancel = 3,
    msoButtonSetYesNo = 4,
    msoButtonSetYesNoCancel = 5,
    msoButtonSetBackClose = 6,
    msoButtonSetNextClose = 7,
    msoButtonSetBackNextClose = 8,
    msoButtonSetRetryCancel = 9,
    msoButtonSetAbortRetryIgnore = 10,
    msoButtonSetSearchClose = 11,
    msoButtonSetBackNextSnooze = 12,
    msoButtonSetTipsOptionsClose = 13,
    msoButtonSetYesAllNoCancel = 14
};

enum MsoIconType
{
    msoIconNone = 0,
    msoIconAlert = 2,
    msoIconTip = 3,
    msoIconAlertInfo = 4,
    msoIconAlertWarning = 5,
    msoIconAlertQuery = 6,
    msoIconAlertCritical = 7
};

enum MsoBalloonType
{
    msoBalloonTypeButtons = 0,
    msoBalloonTypeBullets = 1,
    msoBalloonTypeNumbers = 2
};

enum MsoModeType
{
    msoModeModal = 0,
    msoModeAutoDown = 1,
    msoModeModeless = 2
};

enum MsoBalloonErrorType
{
    msoBalloonErrorNone = 0,
    msoBalloonErrorOther = 1,
    msoBalloonErrorTooBig = 2,
    msoBalloonErrorOutOfMemory = 3,
    msoBalloonErrorBadPictureRef = 4,
    msoBalloonErrorBadReference = 5,
    msoBalloonErrorButtonlessModal = 6,
    msoBalloonErrorButtonModeless = 7,
    msoBalloonErrorBadCharacter = 8,
    msoBalloonErrorCOMFailure = 9,
    msoBalloonErrorCharNotTopmostForModal = 10,
    msoBalloonErrorTooManyControls = 11
};

enum MsoWizardActType
{
    msoWizardActInactive = 0,
    msoWizardActActive = 1,
    msoWizardActSuspend = 2,
    msoWizardActResume = 3
};

enum MsoWizardMsgType
{
    msoWizardMsgLocalStateOn = 1,
    msoWizardMsgLocalStateOff = 2,
    msoWizardMsgShowHelp = 3,
    msoWizardMsgSuspending = 4,
    msoWizardMsgResuming = 5
};

enum MsoBalloonButtonType
{
    msoBalloonButtonYesToAll = -15,
    msoBalloonButtonOptions = -14,
    msoBalloonButtonTips = -13,
    msoBalloonButtonClose = -12,
    msoBalloonButtonSnooze = -11,
    msoBalloonButtonSearch = -10,
    msoBalloonButtonIgnore = -9,
    msoBalloonButtonAbort = -8,
    msoBalloonButtonRetry = -7,
    msoBalloonButtonNext = -6,
    msoBalloonButtonBack = -5,
    msoBalloonButtonNo = -4,
    msoBalloonButtonYes = -3,
    msoBalloonButtonCancel = -2,
    msoBalloonButtonOK = -1,
    msoBalloonButtonNull = 0
};

enum DocProperties
{
    offPropertyTypeNumber = 1,
    offPropertyTypeBoolean = 2,
    offPropertyTypeDate = 3,
    offPropertyTypeString = 4,
    offPropertyTypeFloat = 5
};

enum MsoDocProperties
{
    msoPropertyTypeNumber = 1,
    msoPropertyTypeBoolean = 2,
    msoPropertyTypeDate = 3,
    msoPropertyTypeString = 4,
    msoPropertyTypeFloat = 5
};

enum MsoAppLanguageID
{
    msoLanguageIDInstall = 1,
    msoLanguageIDUI = 2,
    msoLanguageIDHelp = 3,
    msoLanguageIDExeMode = 4,
    msoLanguageIDUIPrevious = 5
};

enum MsoFarEastLineBreakLanguageID
{
    MsoFarEastLineBreakLanguageJapanese = 1041,
    MsoFarEastLineBreakLanguageKorean = 1042,
    MsoFarEastLineBreakLanguageSimplifiedChinese = 2052,
    MsoFarEastLineBreakLanguageTraditionalChinese = 1028
};

enum MsoFeatureInstall
{
    msoFeatureInstallNone = 0,
    msoFeatureInstallOnDemand = 1,
    msoFeatureInstallOnDemandWithUI = 2
};

struct __declspec(uuid("618736e0-3c3d-11cf-810c-00aa00389b71"))
IAccessible : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetaccDefaultAction))
    _bstr_t accDefaultAction[];
    __declspec(property(get=GetaccSelection))
    _variant_t accSelection;
    __declspec(property(get=GetaccFocus))
    _variant_t accFocus;
    __declspec(property(get=GetaccKeyboardShortcut))
    _bstr_t accKeyboardShortcut[];
    __declspec(property(get=GetaccHelp))
    _bstr_t accHelp[];
    __declspec(property(get=GetaccState))
    _variant_t accState[];
    __declspec(property(get=GetaccRole))
    _variant_t accRole[];
    __declspec(property(get=GetaccDescription))
    _bstr_t accDescription[];
    __declspec(property(get=GetaccValue,put=PutaccValue))
    _bstr_t accValue[];
    __declspec(property(get=GetaccName,put=PutaccName))
    _bstr_t accName[];
    __declspec(property(get=GetaccChild))
    IDispatchPtr accChild[];
    __declspec(property(get=GetaccChildCount))
    long accChildCount;
    __declspec(property(get=GetaccParent))
    IDispatchPtr accParent;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetaccParent ( );
    long GetaccChildCount ( );
    IDispatchPtr GetaccChild (
        const _variant_t & varChild );
    _bstr_t GetaccName (
        const _variant_t & varChild = vtMissing );
    _bstr_t GetaccValue (
        const _variant_t & varChild = vtMissing );
    _bstr_t GetaccDescription (
        const _variant_t & varChild = vtMissing );
    _variant_t GetaccRole (
        const _variant_t & varChild = vtMissing );
    _variant_t GetaccState (
        const _variant_t & varChild = vtMissing );
    _bstr_t GetaccHelp (
        const _variant_t & varChild = vtMissing );
    long GetaccHelpTopic (
        BSTR * pszHelpFile,
        const _variant_t & varChild = vtMissing );
    _bstr_t GetaccKeyboardShortcut (
        const _variant_t & varChild = vtMissing );
    _variant_t GetaccFocus ( );
    _variant_t GetaccSelection ( );
    _bstr_t GetaccDefaultAction (
        const _variant_t & varChild = vtMissing );
    HRESULT accSelect (
        long flagsSelect,
        const _variant_t & varChild = vtMissing );
    HRESULT accLocation (
        long * pxLeft,
        long * pyTop,
        long * pcxWidth,
        long * pcyHeight,
        const _variant_t & varChild = vtMissing );
    _variant_t accNavigate (
        long navDir,
        const _variant_t & varStart = vtMissing );
    _variant_t accHitTest (
        long xLeft,
        long yTop );
    HRESULT accDoDefaultAction (
        const _variant_t & varChild = vtMissing );
    void PutaccName (
        const _variant_t & varChild,
        _bstr_t pszName );
    void PutaccValue (
        const _variant_t & varChild,
        _bstr_t pszValue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_accParent (
        /*[out,retval]*/ IDispatch * * ppdispParent ) = 0;
      virtual HRESULT __stdcall get_accChildCount (
        /*[out,retval]*/ long * pcountChildren ) = 0;
      virtual HRESULT __stdcall get_accChild (
        /*[in]*/ VARIANT varChild,
        /*[out,retval]*/ IDispatch * * ppdispChild ) = 0;
      virtual HRESULT __stdcall get_accName (
        /*[in]*/ VARIANT varChild,
        /*[out,retval]*/ BSTR * pszName ) = 0;
      virtual HRESULT __stdcall get_accValue (
        /*[in]*/ VARIANT varChild,
        /*[out,retval]*/ BSTR * pszValue ) = 0;
      virtual HRESULT __stdcall get_accDescription (
        /*[in]*/ VARIANT varChild,
        /*[out,retval]*/ BSTR * pszDescription ) = 0;
      virtual HRESULT __stdcall get_accRole (
        /*[in]*/ VARIANT varChild,
        /*[out,retval]*/ VARIANT * pvarRole ) = 0;
      virtual HRESULT __stdcall get_accState (
        /*[in]*/ VARIANT varChild,
        /*[out,retval]*/ VARIANT * pvarState ) = 0;
      virtual HRESULT __stdcall get_accHelp (
        /*[in]*/ VARIANT varChild,
        /*[out,retval]*/ BSTR * pszHelp ) = 0;
      virtual HRESULT __stdcall get_accHelpTopic (
        /*[out]*/ BSTR * pszHelpFile,
        /*[in]*/ VARIANT varChild,
        /*[out,retval]*/ long * pidTopic ) = 0;
      virtual HRESULT __stdcall get_accKeyboardShortcut (
        /*[in]*/ VARIANT varChild,
        /*[out,retval]*/ BSTR * pszKeyboardShortcut ) = 0;
      virtual HRESULT __stdcall get_accFocus (
        /*[out,retval]*/ VARIANT * pvarChild ) = 0;
      virtual HRESULT __stdcall get_accSelection (
        /*[out,retval]*/ VARIANT * pvarChildren ) = 0;
      virtual HRESULT __stdcall get_accDefaultAction (
        /*[in]*/ VARIANT varChild,
        /*[out,retval]*/ BSTR * pszDefaultAction ) = 0;
      virtual HRESULT __stdcall raw_accSelect (
        /*[in]*/ long flagsSelect,
        /*[in]*/ VARIANT varChild = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_accLocation (
        /*[out]*/ long * pxLeft,
        /*[out]*/ long * pyTop,
        /*[out]*/ long * pcxWidth,
        /*[out]*/ long * pcyHeight,
        /*[in]*/ VARIANT varChild = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_accNavigate (
        /*[in]*/ long navDir,
        /*[in]*/ VARIANT varStart,
        /*[out,retval]*/ VARIANT * pvarEndUpAt ) = 0;
      virtual HRESULT __stdcall raw_accHitTest (
        /*[in]*/ long xLeft,
        /*[in]*/ long yTop,
        /*[out,retval]*/ VARIANT * pvarChild ) = 0;
      virtual HRESULT __stdcall raw_accDoDefaultAction (
        /*[in]*/ VARIANT varChild = vtMissing ) = 0;
      virtual HRESULT __stdcall put_accName (
        /*[in]*/ VARIANT varChild,
        /*[in]*/ BSTR pszName ) = 0;
      virtual HRESULT __stdcall put_accValue (
        /*[in]*/ VARIANT varChild,
        /*[in]*/ BSTR pszValue ) = 0;
};

struct __declspec(uuid("000c0300-0000-0000-c000-000000000046"))
_IMsoDispObj : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
};

struct __declspec(uuid("000c0301-0000-0000-c000-000000000046"))
_IMsoOleAccDispObj : IAccessible
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
};

struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
Adjustments : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    float Item[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    float GetItem (
        int Index );
    void PutItem (
        int Index,
        float Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ float * Val ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ int Index,
        /*[in]*/ float Val ) = 0;
};

struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
CalloutFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAccent,put=PutAccent))
    enum MsoTriState Accent;
    __declspec(property(get=GetAngle,put=PutAngle))
    enum MsoCalloutAngleType Angle;
    __declspec(property(get=GetAutoAttach,put=PutAutoAttach))
    enum MsoTriState AutoAttach;
    __declspec(property(get=GetAutoLength))
    enum MsoTriState AutoLength;
    __declspec(property(get=GetBorder,put=PutBorder))
    enum MsoTriState Border;
    __declspec(property(get=GetDrop))
    float Drop;
    __declspec(property(get=GetDropType))
    enum MsoCalloutDropType DropType;
    __declspec(property(get=GetGap,put=PutGap))
    float Gap;
    __declspec(property(get=GetLength))
    float Length;
    __declspec(property(get=GetType,put=PutType))
    enum MsoCalloutType Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT AutomaticLength ( );
    HRESULT CustomDrop (
        float Drop );
    HRESULT CustomLength (
        float Length );
    HRESULT PresetDrop (
        enum MsoCalloutDropType DropType );
    enum MsoTriState GetAccent ( );
    void PutAccent (
        enum MsoTriState Accent );
    enum MsoCalloutAngleType GetAngle ( );
    void PutAngle (
        enum MsoCalloutAngleType Angle );
    enum MsoTriState GetAutoAttach ( );
    void PutAutoAttach (
        enum MsoTriState AutoAttach );
    enum MsoTriState GetAutoLength ( );
    enum MsoTriState GetBorder ( );
    void PutBorder (
        enum MsoTriState Border );
    float GetDrop ( );
    enum MsoCalloutDropType GetDropType ( );
    float GetGap ( );
    void PutGap (
        float Gap );
    float GetLength ( );
    enum MsoCalloutType GetType ( );
    void PutType (
        enum MsoCalloutType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AutomaticLength ( ) = 0;
      virtual HRESULT __stdcall raw_CustomDrop (
        /*[in]*/ float Drop ) = 0;
      virtual HRESULT __stdcall raw_CustomLength (
        /*[in]*/ float Length ) = 0;
      virtual HRESULT __stdcall raw_PresetDrop (
        /*[in]*/ enum MsoCalloutDropType DropType ) = 0;
      virtual HRESULT __stdcall get_Accent (
        /*[out,retval]*/ enum MsoTriState * Accent ) = 0;
      virtual HRESULT __stdcall put_Accent (
        /*[in]*/ enum MsoTriState Accent ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ enum MsoCalloutAngleType * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ enum MsoCalloutAngleType Angle ) = 0;
      virtual HRESULT __stdcall get_AutoAttach (
        /*[out,retval]*/ enum MsoTriState * AutoAttach ) = 0;
      virtual HRESULT __stdcall put_AutoAttach (
        /*[in]*/ enum MsoTriState AutoAttach ) = 0;
      virtual HRESULT __stdcall get_AutoLength (
        /*[out,retval]*/ enum MsoTriState * AutoLength ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ enum MsoTriState * Border ) = 0;
      virtual HRESULT __stdcall put_Border (
        /*[in]*/ enum MsoTriState Border ) = 0;
      virtual HRESULT __stdcall get_Drop (
        /*[out,retval]*/ float * Drop ) = 0;
      virtual HRESULT __stdcall get_DropType (
        /*[out,retval]*/ enum MsoCalloutDropType * DropType ) = 0;
      virtual HRESULT __stdcall get_Gap (
        /*[out,retval]*/ float * Gap ) = 0;
      virtual HRESULT __stdcall put_Gap (
        /*[in]*/ float Gap ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ float * Length ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoCalloutType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum MsoCalloutType Type ) = 0;
};

struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
ColorFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetRGB,put=PutRGB))
    MsoRGBType RGB;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    int SchemeColor;
    __declspec(property(get=GetType))
    enum MsoColorType Type;
    __declspec(property(get=GetTintAndShade,put=PutTintAndShade))
    float TintAndShade;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    MsoRGBType GetRGB ( );
    void PutRGB (
        MsoRGBType RGB );
    int GetSchemeColor ( );
    void PutSchemeColor (
        int SchemeColor );
    enum MsoColorType GetType ( );
    float GetTintAndShade ( );
    void PutTintAndShade (
        float pValue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_RGB (
        /*[out,retval]*/ MsoRGBType * RGB ) = 0;
      virtual HRESULT __stdcall put_RGB (
        /*[in]*/ MsoRGBType RGB ) = 0;
      virtual HRESULT __stdcall get_SchemeColor (
        /*[out,retval]*/ int * SchemeColor ) = 0;
      virtual HRESULT __stdcall put_SchemeColor (
        /*[in]*/ int SchemeColor ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoColorType * Type ) = 0;
      virtual HRESULT __stdcall get_TintAndShade (
        /*[out,retval]*/ float * pValue ) = 0;
      virtual HRESULT __stdcall put_TintAndShade (
        /*[in]*/ float pValue ) = 0;
};

struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
FillFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    int GradientVariant;
    __declspec(property(get=GetPattern))
    enum MsoPatternType Pattern;
    __declspec(property(get=GetPresetGradientType))
    enum MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetPresetTexture))
    enum MsoPresetTexture PresetTexture;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum MsoTextureType TextureType;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType))
    enum MsoFillType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Background ( );
    HRESULT OneColorGradient (
        enum MsoGradientStyle Style,
        int Variant,
        float Degree );
    HRESULT Patterned (
        enum MsoPatternType Pattern );
    HRESULT PresetGradient (
        enum MsoGradientStyle Style,
        int Variant,
        enum MsoPresetGradientType PresetGradientType );
    HRESULT PresetTextured (
        enum MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT TwoColorGradient (
        enum MsoGradientStyle Style,
        int Variant );
    HRESULT UserPicture (
        _bstr_t PictureFile );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum MsoGradientStyle GetGradientStyle ( );
    int GetGradientVariant ( );
    enum MsoPatternType GetPattern ( );
    enum MsoPresetGradientType GetPresetGradientType ( );
    enum MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum MsoTextureType GetTextureType ( );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum MsoFillType GetType ( );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Background ( ) = 0;
      virtual HRESULT __stdcall raw_OneColorGradient (
        /*[in]*/ enum MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ float Degree ) = 0;
      virtual HRESULT __stdcall raw_Patterned (
        /*[in]*/ enum MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall raw_PresetGradient (
        /*[in]*/ enum MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ enum MsoPresetGradientType PresetGradientType ) = 0;
      virtual HRESULT __stdcall raw_PresetTextured (
        /*[in]*/ enum MsoPresetTexture PresetTexture ) = 0;
      virtual HRESULT __stdcall raw_Solid ( ) = 0;
      virtual HRESULT __stdcall raw_TwoColorGradient (
        /*[in]*/ enum MsoGradientStyle Style,
        /*[in]*/ int Variant ) = 0;
      virtual HRESULT __stdcall raw_UserPicture (
        /*[in]*/ BSTR PictureFile ) = 0;
      virtual HRESULT __stdcall raw_UserTextured (
        /*[in]*/ BSTR TextureFile ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_GradientColorType (
        /*[out,retval]*/ enum MsoGradientColorType * GradientColorType ) = 0;
      virtual HRESULT __stdcall get_GradientDegree (
        /*[out,retval]*/ float * GradientDegree ) = 0;
      virtual HRESULT __stdcall get_GradientStyle (
        /*[out,retval]*/ enum MsoGradientStyle * GradientStyle ) = 0;
      virtual HRESULT __stdcall get_GradientVariant (
        /*[out,retval]*/ int * GradientVariant ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall get_PresetGradientType (
        /*[out,retval]*/ enum MsoPresetGradientType * PresetGradientType ) = 0;
      virtual HRESULT __stdcall get_PresetTexture (
        /*[out,retval]*/ enum MsoPresetTexture * PresetTexture ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * TextureName ) = 0;
      virtual HRESULT __stdcall get_TextureType (
        /*[out,retval]*/ enum MsoTextureType * TextureType ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoFillType * Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
LineFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetBeginArrowheadLength,put=PutBeginArrowheadLength))
    enum MsoArrowheadLength BeginArrowheadLength;
    __declspec(property(get=GetBeginArrowheadStyle,put=PutBeginArrowheadStyle))
    enum MsoArrowheadStyle BeginArrowheadStyle;
    __declspec(property(get=GetBeginArrowheadWidth,put=PutBeginArrowheadWidth))
    enum MsoArrowheadWidth BeginArrowheadWidth;
    __declspec(property(get=GetDashStyle,put=PutDashStyle))
    enum MsoLineDashStyle DashStyle;
    __declspec(property(get=GetEndArrowheadLength,put=PutEndArrowheadLength))
    enum MsoArrowheadLength EndArrowheadLength;
    __declspec(property(get=GetEndArrowheadStyle,put=PutEndArrowheadStyle))
    enum MsoArrowheadStyle EndArrowheadStyle;
    __declspec(property(get=GetEndArrowheadWidth,put=PutEndArrowheadWidth))
    enum MsoArrowheadWidth EndArrowheadWidth;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetPattern,put=PutPattern))
    enum MsoPatternType Pattern;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum MsoLineStyle Style;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;
    __declspec(property(get=GetWeight,put=PutWeight))
    float Weight;
    __declspec(property(get=GetInsetPen,put=PutInsetPen))
    enum MsoTriState InsetPen;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    enum MsoArrowheadLength GetBeginArrowheadLength ( );
    void PutBeginArrowheadLength (
        enum MsoArrowheadLength BeginArrowheadLength );
    enum MsoArrowheadStyle GetBeginArrowheadStyle ( );
    void PutBeginArrowheadStyle (
        enum MsoArrowheadStyle BeginArrowheadStyle );
    enum MsoArrowheadWidth GetBeginArrowheadWidth ( );
    void PutBeginArrowheadWidth (
        enum MsoArrowheadWidth BeginArrowheadWidth );
    enum MsoLineDashStyle GetDashStyle ( );
    void PutDashStyle (
        enum MsoLineDashStyle DashStyle );
    enum MsoArrowheadLength GetEndArrowheadLength ( );
    void PutEndArrowheadLength (
        enum MsoArrowheadLength EndArrowheadLength );
    enum MsoArrowheadStyle GetEndArrowheadStyle ( );
    void PutEndArrowheadStyle (
        enum MsoArrowheadStyle EndArrowheadStyle );
    enum MsoArrowheadWidth GetEndArrowheadWidth ( );
    void PutEndArrowheadWidth (
        enum MsoArrowheadWidth EndArrowheadWidth );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum MsoPatternType GetPattern ( );
    void PutPattern (
        enum MsoPatternType Pattern );
    enum MsoLineStyle GetStyle ( );
    void PutStyle (
        enum MsoLineStyle Style );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );
    float GetWeight ( );
    void PutWeight (
        float Weight );
    enum MsoTriState GetInsetPen ( );
    void PutInsetPen (
        enum MsoTriState InsetPen );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadLength (
        /*[out,retval]*/ enum MsoArrowheadLength * BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadLength (
        /*[in]*/ enum MsoArrowheadLength BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadStyle (
        /*[out,retval]*/ enum MsoArrowheadStyle * BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadStyle (
        /*[in]*/ enum MsoArrowheadStyle BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadWidth (
        /*[out,retval]*/ enum MsoArrowheadWidth * BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadWidth (
        /*[in]*/ enum MsoArrowheadWidth BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_DashStyle (
        /*[out,retval]*/ enum MsoLineDashStyle * DashStyle ) = 0;
      virtual HRESULT __stdcall put_DashStyle (
        /*[in]*/ enum MsoLineDashStyle DashStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadLength (
        /*[out,retval]*/ enum MsoArrowheadLength * EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadLength (
        /*[in]*/ enum MsoArrowheadLength EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadStyle (
        /*[out,retval]*/ enum MsoArrowheadStyle * EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadStyle (
        /*[in]*/ enum MsoArrowheadStyle EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadWidth (
        /*[out,retval]*/ enum MsoArrowheadWidth * EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadWidth (
        /*[in]*/ enum MsoArrowheadWidth EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ enum MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum MsoLineStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum MsoLineStyle Style ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ float * Weight ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ float Weight ) = 0;
      virtual HRESULT __stdcall get_InsetPen (
        /*[out,retval]*/ enum MsoTriState * InsetPen ) = 0;
      virtual HRESULT __stdcall put_InsetPen (
        /*[in]*/ enum MsoTriState InsetPen ) = 0;
};

struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
ShapeNode : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEditingType))
    enum MsoEditingType EditingType;
    __declspec(property(get=GetPoints))
    _variant_t Points;
    __declspec(property(get=GetSegmentType))
    enum MsoSegmentType SegmentType;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    enum MsoEditingType GetEditingType ( );
    _variant_t GetPoints ( );
    enum MsoSegmentType GetSegmentType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_EditingType (
        /*[out,retval]*/ enum MsoEditingType * EditingType ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall get_SegmentType (
        /*[out,retval]*/ enum MsoSegmentType * SegmentType ) = 0;
};

struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
ShapeNodes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapeNodePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete (
        int Index );
    HRESULT Insert (
        int Index,
        enum MsoSegmentType SegmentType,
        enum MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    HRESULT SetEditingType (
        int Index,
        enum MsoEditingType EditingType );
    HRESULT SetPosition (
        int Index,
        float X1,
        float Y1 );
    HRESULT SetSegmentType (
        int Index,
        enum MsoSegmentType SegmentType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeNode * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ int Index,
        /*[in]*/ enum MsoSegmentType SegmentType,
        /*[in]*/ enum MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ float X2,
        /*[in]*/ float Y2,
        /*[in]*/ float X3,
        /*[in]*/ float Y3 ) = 0;
      virtual HRESULT __stdcall raw_SetEditingType (
        /*[in]*/ int Index,
        /*[in]*/ enum MsoEditingType EditingType ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ int Index,
        /*[in]*/ float X1,
        /*[in]*/ float Y1 ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentType (
        /*[in]*/ int Index,
        /*[in]*/ enum MsoSegmentType SegmentType ) = 0;
};

struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
PictureFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetColorType,put=PutColorType))
    enum MsoPictureColorType ColorType;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetTransparencyColor,put=PutTransparencyColor))
    MsoRGBType TransparencyColor;
    __declspec(property(get=GetTransparentBackground,put=PutTransparentBackground))
    enum MsoTriState TransparentBackground;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementBrightness (
        float Increment );
    HRESULT IncrementContrast (
        float Increment );
    float GetBrightness ( );
    void PutBrightness (
        float Brightness );
    enum MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum MsoPictureColorType ColorType );
    float GetContrast ( );
    void PutContrast (
        float Contrast );
    float GetCropBottom ( );
    void PutCropBottom (
        float CropBottom );
    float GetCropLeft ( );
    void PutCropLeft (
        float CropLeft );
    float GetCropRight ( );
    void PutCropRight (
        float CropRight );
    float GetCropTop ( );
    void PutCropTop (
        float CropTop );
    MsoRGBType GetTransparencyColor ( );
    void PutTransparencyColor (
        MsoRGBType TransparencyColor );
    enum MsoTriState GetTransparentBackground ( );
    void PutTransparentBackground (
        enum MsoTriState TransparentBackground );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementBrightness (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementContrast (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ float * Brightness ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ float Brightness ) = 0;
      virtual HRESULT __stdcall get_ColorType (
        /*[out,retval]*/ enum MsoPictureColorType * ColorType ) = 0;
      virtual HRESULT __stdcall put_ColorType (
        /*[in]*/ enum MsoPictureColorType ColorType ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ float * Contrast ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ float Contrast ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ float * CropBottom ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ float CropBottom ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ float * CropLeft ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ float CropLeft ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ float * CropRight ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ float CropRight ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ float * CropTop ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ float CropTop ) = 0;
      virtual HRESULT __stdcall get_TransparencyColor (
        /*[out,retval]*/ MsoRGBType * TransparencyColor ) = 0;
      virtual HRESULT __stdcall put_TransparencyColor (
        /*[in]*/ MsoRGBType TransparencyColor ) = 0;
      virtual HRESULT __stdcall get_TransparentBackground (
        /*[out,retval]*/ enum MsoTriState * TransparentBackground ) = 0;
      virtual HRESULT __stdcall put_TransparentBackground (
        /*[in]*/ enum MsoTriState TransparentBackground ) = 0;
};

struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
ShadowFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetObscured,put=PutObscured))
    enum MsoTriState Obscured;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    float OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    float OffsetY;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType,put=PutType))
    enum MsoShadowType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementOffsetX (
        float Increment );
    HRESULT IncrementOffsetY (
        float Increment );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum MsoTriState GetObscured ( );
    void PutObscured (
        enum MsoTriState Obscured );
    float GetOffsetX ( );
    void PutOffsetX (
        float OffsetX );
    float GetOffsetY ( );
    void PutOffsetY (
        float OffsetY );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum MsoShadowType GetType ( );
    void PutType (
        enum MsoShadowType Type );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Obscured (
        /*[out,retval]*/ enum MsoTriState * Obscured ) = 0;
      virtual HRESULT __stdcall put_Obscured (
        /*[in]*/ enum MsoTriState Obscured ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ float * OffsetX ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ float OffsetX ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ float * OffsetY ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ float OffsetY ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoShadowType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum MsoShadowType Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum MsoTriState Visible ) = 0;
};

enum MsoScriptLanguage
{
    msoScriptLanguageJava = 1,
    msoScriptLanguageVisualBasic = 2,
    msoScriptLanguageASP = 3,
    msoScriptLanguageOther = 4
};

enum MsoScriptLocation
{
    msoScriptLocationInHead = 1,
    msoScriptLocationInBody = 2
};

struct __declspec(uuid("000c0341-0000-0000-c000-000000000046"))
Script : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetExtended,put=PutExtended))
    _bstr_t Extended;
    __declspec(property(get=GetScriptText,put=PutScriptText))
    _bstr_t ScriptText;
    __declspec(property(get=GetId,put=PutId))
    _bstr_t Id;
    __declspec(property(get=GetLanguage,put=PutLanguage))
    enum MsoScriptLanguage Language;
    __declspec(property(get=GetLocation))
    enum MsoScriptLocation Location;
    __declspec(property(get=GetShape))
    IDispatchPtr Shape;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetExtended ( );
    void PutExtended (
        _bstr_t Extended );
    _bstr_t GetId ( );
    void PutId (
        _bstr_t Id );
    enum MsoScriptLanguage GetLanguage ( );
    void PutLanguage (
        enum MsoScriptLanguage Language );
    enum MsoScriptLocation GetLocation ( );
    HRESULT Delete ( );
    IDispatchPtr GetShape ( );
    _bstr_t GetScriptText ( );
    void PutScriptText (
        _bstr_t Script );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Extended (
        /*[out,retval]*/ BSTR * Extended ) = 0;
      virtual HRESULT __stdcall put_Extended (
        /*[in]*/ BSTR Extended ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * Id ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ BSTR Id ) = 0;
      virtual HRESULT __stdcall get_Language (
        /*[out,retval]*/ enum MsoScriptLanguage * Language ) = 0;
      virtual HRESULT __stdcall put_Language (
        /*[in]*/ enum MsoScriptLanguage Language ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ enum MsoScriptLocation * Location ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall get_ScriptText (
        /*[out,retval]*/ BSTR * Script ) = 0;
      virtual HRESULT __stdcall put_ScriptText (
        /*[in]*/ BSTR Script ) = 0;
};

struct __declspec(uuid("000c0340-0000-0000-c000-000000000046"))
Scripts : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    ScriptPtr Item (
        const _variant_t & Index );
    ScriptPtr Add (
        IDispatch * Anchor,
        enum MsoScriptLocation Location,
        enum MsoScriptLanguage Language,
        _bstr_t Id,
        _bstr_t Extended,
        _bstr_t ScriptText );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Script * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Anchor,
        /*[in]*/ enum MsoScriptLocation Location,
        /*[in]*/ enum MsoScriptLanguage Language,
        /*[in]*/ BSTR Id,
        /*[in]*/ BSTR Extended,
        /*[in]*/ BSTR ScriptText,
        /*[out,retval]*/ struct Script * * Add ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
TextEffectFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum MsoTextEffectAlignment Alignment;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    enum MsoTriState FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    enum MsoTriState FontItalic;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    float FontSize;
    __declspec(property(get=GetKernedPairs,put=PutKernedPairs))
    enum MsoTriState KernedPairs;
    __declspec(property(get=GetNormalizedHeight,put=PutNormalizedHeight))
    enum MsoTriState NormalizedHeight;
    __declspec(property(get=GetPresetShape,put=PutPresetShape))
    enum MsoPresetTextEffectShape PresetShape;
    __declspec(property(get=GetPresetTextEffect,put=PutPresetTextEffect))
    enum MsoPresetTextEffect PresetTextEffect;
    __declspec(property(get=GetRotatedChars,put=PutRotatedChars))
    enum MsoTriState RotatedChars;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTracking,put=PutTracking))
    float Tracking;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT ToggleVerticalText ( );
    enum MsoTextEffectAlignment GetAlignment ( );
    void PutAlignment (
        enum MsoTextEffectAlignment Alignment );
    enum MsoTriState GetFontBold ( );
    void PutFontBold (
        enum MsoTriState FontBold );
    enum MsoTriState GetFontItalic ( );
    void PutFontItalic (
        enum MsoTriState FontItalic );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t FontName );
    float GetFontSize ( );
    void PutFontSize (
        float FontSize );
    enum MsoTriState GetKernedPairs ( );
    void PutKernedPairs (
        enum MsoTriState KernedPairs );
    enum MsoTriState GetNormalizedHeight ( );
    void PutNormalizedHeight (
        enum MsoTriState NormalizedHeight );
    enum MsoPresetTextEffectShape GetPresetShape ( );
    void PutPresetShape (
        enum MsoPresetTextEffectShape PresetShape );
    enum MsoPresetTextEffect GetPresetTextEffect ( );
    void PutPresetTextEffect (
        enum MsoPresetTextEffect Preset );
    enum MsoTriState GetRotatedChars ( );
    void PutRotatedChars (
        enum MsoTriState RotatedChars );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    float GetTracking ( );
    void PutTracking (
        float Tracking );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_ToggleVerticalText ( ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum MsoTextEffectAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum MsoTextEffectAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ enum MsoTriState * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ enum MsoTriState FontBold ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ enum MsoTriState * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ enum MsoTriState FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ float * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ float FontSize ) = 0;
      virtual HRESULT __stdcall get_KernedPairs (
        /*[out,retval]*/ enum MsoTriState * KernedPairs ) = 0;
      virtual HRESULT __stdcall put_KernedPairs (
        /*[in]*/ enum MsoTriState KernedPairs ) = 0;
      virtual HRESULT __stdcall get_NormalizedHeight (
        /*[out,retval]*/ enum MsoTriState * NormalizedHeight ) = 0;
      virtual HRESULT __stdcall put_NormalizedHeight (
        /*[in]*/ enum MsoTriState NormalizedHeight ) = 0;
      virtual HRESULT __stdcall get_PresetShape (
        /*[out,retval]*/ enum MsoPresetTextEffectShape * PresetShape ) = 0;
      virtual HRESULT __stdcall put_PresetShape (
        /*[in]*/ enum MsoPresetTextEffectShape PresetShape ) = 0;
      virtual HRESULT __stdcall get_PresetTextEffect (
        /*[out,retval]*/ enum MsoPresetTextEffect * Preset ) = 0;
      virtual HRESULT __stdcall put_PresetTextEffect (
        /*[in]*/ enum MsoPresetTextEffect Preset ) = 0;
      virtual HRESULT __stdcall get_RotatedChars (
        /*[out,retval]*/ enum MsoTriState * RotatedChars ) = 0;
      virtual HRESULT __stdcall put_RotatedChars (
        /*[in]*/ enum MsoTriState RotatedChars ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Tracking (
        /*[out,retval]*/ float * Tracking ) = 0;
      virtual HRESULT __stdcall put_Tracking (
        /*[in]*/ float Tracking ) = 0;
};

struct __declspec(uuid("000c0320-0000-0000-c000-000000000046"))
TextFrame : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum MsoTextOrientation Orientation;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float MarginBottom );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float MarginLeft );
    float GetMarginRight ( );
    void PutMarginRight (
        float MarginRight );
    float GetMarginTop ( );
    void PutMarginTop (
        float MarginTop );
    enum MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum MsoTextOrientation Orientation );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ float * MarginBottom ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ float MarginBottom ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ float * MarginLeft ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ float MarginLeft ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ float * MarginRight ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ float MarginRight ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ float * MarginTop ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ float MarginTop ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum MsoTextOrientation * Orientation ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum MsoTextOrientation Orientation ) = 0;
};

struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
ThreeDFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDepth,put=PutDepth))
    float Depth;
    __declspec(property(get=GetExtrusionColor))
    ColorFormatPtr ExtrusionColor;
    __declspec(property(get=GetExtrusionColorType,put=PutExtrusionColorType))
    enum MsoExtrusionColorType ExtrusionColorType;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    enum MsoTriState Perspective;
    __declspec(property(get=GetPresetExtrusionDirection))
    enum MsoPresetExtrusionDirection PresetExtrusionDirection;
    __declspec(property(get=GetPresetLightingDirection,put=PutPresetLightingDirection))
    enum MsoPresetLightingDirection PresetLightingDirection;
    __declspec(property(get=GetPresetLightingSoftness,put=PutPresetLightingSoftness))
    enum MsoPresetLightingSoftness PresetLightingSoftness;
    __declspec(property(get=GetPresetMaterial,put=PutPresetMaterial))
    enum MsoPresetMaterial PresetMaterial;
    __declspec(property(get=GetPresetThreeDFormat))
    enum MsoPresetThreeDFormat PresetThreeDFormat;
    __declspec(property(get=GetRotationX,put=PutRotationX))
    float RotationX;
    __declspec(property(get=GetRotationY,put=PutRotationY))
    float RotationY;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementRotationX (
        float Increment );
    HRESULT IncrementRotationY (
        float Increment );
    HRESULT ResetRotation ( );
    HRESULT SetThreeDFormat (
        enum MsoPresetThreeDFormat PresetThreeDFormat );
    HRESULT SetExtrusionDirection (
        enum MsoPresetExtrusionDirection PresetExtrusionDirection );
    float GetDepth ( );
    void PutDepth (
        float Depth );
    ColorFormatPtr GetExtrusionColor ( );
    enum MsoExtrusionColorType GetExtrusionColorType ( );
    void PutExtrusionColorType (
        enum MsoExtrusionColorType ExtrusionColorType );
    enum MsoTriState GetPerspective ( );
    void PutPerspective (
        enum MsoTriState Perspective );
    enum MsoPresetExtrusionDirection GetPresetExtrusionDirection ( );
    enum MsoPresetLightingDirection GetPresetLightingDirection ( );
    void PutPresetLightingDirection (
        enum MsoPresetLightingDirection PresetLightingDirection );
    enum MsoPresetLightingSoftness GetPresetLightingSoftness ( );
    void PutPresetLightingSoftness (
        enum MsoPresetLightingSoftness PresetLightingSoftness );
    enum MsoPresetMaterial GetPresetMaterial ( );
    void PutPresetMaterial (
        enum MsoPresetMaterial PresetMaterial );
    enum MsoPresetThreeDFormat GetPresetThreeDFormat ( );
    float GetRotationX ( );
    void PutRotationX (
        float RotationX );
    float GetRotationY ( );
    void PutRotationY (
        float RotationY );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_ResetRotation ( ) = 0;
      virtual HRESULT __stdcall raw_SetThreeDFormat (
        /*[in]*/ enum MsoPresetThreeDFormat PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall raw_SetExtrusionDirection (
        /*[in]*/ enum MsoPresetExtrusionDirection PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ float * Depth ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ float Depth ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColor (
        /*[out,retval]*/ struct ColorFormat * * ExtrusionColor ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColorType (
        /*[out,retval]*/ enum MsoExtrusionColorType * ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall put_ExtrusionColorType (
        /*[in]*/ enum MsoExtrusionColorType ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ enum MsoTriState * Perspective ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ enum MsoTriState Perspective ) = 0;
      virtual HRESULT __stdcall get_PresetExtrusionDirection (
        /*[out,retval]*/ enum MsoPresetExtrusionDirection * PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingDirection (
        /*[out,retval]*/ enum MsoPresetLightingDirection * PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall put_PresetLightingDirection (
        /*[in]*/ enum MsoPresetLightingDirection PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingSoftness (
        /*[out,retval]*/ enum MsoPresetLightingSoftness * PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall put_PresetLightingSoftness (
        /*[in]*/ enum MsoPresetLightingSoftness PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall get_PresetMaterial (
        /*[out,retval]*/ enum MsoPresetMaterial * PresetMaterial ) = 0;
      virtual HRESULT __stdcall put_PresetMaterial (
        /*[in]*/ enum MsoPresetMaterial PresetMaterial ) = 0;
      virtual HRESULT __stdcall get_PresetThreeDFormat (
        /*[out,retval]*/ enum MsoPresetThreeDFormat * PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall get_RotationX (
        /*[out,retval]*/ float * RotationX ) = 0;
      virtual HRESULT __stdcall put_RotationX (
        /*[in]*/ float RotationX ) = 0;
      virtual HRESULT __stdcall get_RotationY (
        /*[out,retval]*/ float * RotationY ) = 0;
      virtual HRESULT __stdcall put_RotationY (
        /*[in]*/ float RotationY ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c0359-0000-0000-c000-000000000046"))
IMsoDispCagNotifySink : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT InsertClip (
        IUnknown * pClipMoniker,
        IUnknown * pItemMoniker );
    HRESULT WindowIsClosing ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InsertClip (
        /*[in]*/ IUnknown * pClipMoniker,
        /*[in]*/ IUnknown * pItemMoniker ) = 0;
      virtual HRESULT __stdcall raw_WindowIsClosing ( ) = 0;
};

struct __declspec(uuid("000c0324-0000-0000-c000-000000000046"))
Balloon : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCheckboxes))
    IDispatchPtr Checkboxes;
    __declspec(property(get=GetLabels))
    IDispatchPtr Labels;
    __declspec(property(get=GetBalloonType,put=PutBalloonType))
    enum MsoBalloonType BalloonType;
    __declspec(property(get=GetIcon,put=PutIcon))
    enum MsoIconType Icon;
    __declspec(property(get=GetHeading,put=PutHeading))
    _bstr_t Heading;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetMode,put=PutMode))
    enum MsoModeType Mode;
    __declspec(property(get=GetAnimation,put=PutAnimation))
    enum MsoAnimationType Animation;
    __declspec(property(get=GetButton,put=PutButton))
    enum MsoButtonSetType Button;
    __declspec(property(get=GetCallback,put=PutCallback))
    _bstr_t Callback;
    __declspec(property(get=GetPrivate,put=PutPrivate))
    long Private;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    IDispatchPtr GetCheckboxes ( );
    IDispatchPtr GetLabels ( );
    void PutBalloonType (
        enum MsoBalloonType pbty );
    enum MsoBalloonType GetBalloonType ( );
    void PutIcon (
        enum MsoIconType picn );
    enum MsoIconType GetIcon ( );
    void PutHeading (
        _bstr_t pbstr );
    _bstr_t GetHeading ( );
    void PutText (
        _bstr_t pbstr );
    _bstr_t GetText ( );
    void PutMode (
        enum MsoModeType pmd );
    enum MsoModeType GetMode ( );
    void PutAnimation (
        enum MsoAnimationType pfca );
    enum MsoAnimationType GetAnimation ( );
    void PutButton (
        enum MsoButtonSetType psbs );
    enum MsoButtonSetType GetButton ( );
    void PutCallback (
        _bstr_t pbstr );
    _bstr_t GetCallback ( );
    void PutPrivate (
        long plPrivate );
    long GetPrivate ( );
    HRESULT SetAvoidRectangle (
        int Left,
        int Top,
        int Right,
        int Bottom );
    _bstr_t GetName ( );
    enum MsoBalloonButtonType Show ( );
    HRESULT Close ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Checkboxes (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall put_BalloonType (
        /*[in]*/ enum MsoBalloonType pbty ) = 0;
      virtual HRESULT __stdcall get_BalloonType (
        /*[out,retval]*/ enum MsoBalloonType * pbty ) = 0;
      virtual HRESULT __stdcall put_Icon (
        /*[in]*/ enum MsoIconType picn ) = 0;
      virtual HRESULT __stdcall get_Icon (
        /*[out,retval]*/ enum MsoIconType * picn ) = 0;
      virtual HRESULT __stdcall put_Heading (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Heading (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum MsoModeType pmd ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum MsoModeType * pmd ) = 0;
      virtual HRESULT __stdcall put_Animation (
        /*[in]*/ enum MsoAnimationType pfca ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ enum MsoAnimationType * pfca ) = 0;
      virtual HRESULT __stdcall put_Button (
        /*[in]*/ enum MsoButtonSetType psbs ) = 0;
      virtual HRESULT __stdcall get_Button (
        /*[out,retval]*/ enum MsoButtonSetType * psbs ) = 0;
      virtual HRESULT __stdcall put_Callback (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Callback (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_Private (
        /*[in]*/ long plPrivate ) = 0;
      virtual HRESULT __stdcall get_Private (
        /*[out,retval]*/ long * plPrivate ) = 0;
      virtual HRESULT __stdcall raw_SetAvoidRectangle (
        /*[in]*/ int Left,
        /*[in]*/ int Top,
        /*[in]*/ int Right,
        /*[in]*/ int Bottom ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ enum MsoBalloonButtonType * pibtn ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
};

struct __declspec(uuid("000c0326-0000-0000-c000-000000000046"))
BalloonCheckboxes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetCount,put=PutCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetItem (
        int Index );
    int GetCount ( );
    void PutCount (
        int pccbx );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pccbx ) = 0;
      virtual HRESULT __stdcall put_Count (
        /*[in]*/ int pccbx ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
};

struct __declspec(uuid("000c0328-0000-0000-c000-000000000046"))
BalloonCheckbox : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetItem ( );
    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    void PutChecked (
        VARIANT_BOOL pvarfChecked );
    VARIANT_BOOL GetChecked ( );
    void PutText (
        _bstr_t pbstr );
    _bstr_t GetText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall put_Checked (
        /*[in]*/ VARIANT_BOOL pvarfChecked ) = 0;
      virtual HRESULT __stdcall get_Checked (
        /*[out,retval]*/ VARIANT_BOOL * pvarfChecked ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
};

struct __declspec(uuid("000c032e-0000-0000-c000-000000000046"))
BalloonLabels : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetCount,put=PutCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetItem (
        int Index );
    int GetCount ( );
    void PutCount (
        int pcwz );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcwz ) = 0;
      virtual HRESULT __stdcall put_Count (
        /*[in]*/ int pcwz ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
};

struct __declspec(uuid("000c0330-0000-0000-c000-000000000046"))
BalloonLabel : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetItem ( );
    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    void PutText (
        _bstr_t pbstr );
    _bstr_t GetText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
};

struct __declspec(uuid("000c0361-0000-0000-c000-000000000046"))
AnswerWizardFiles : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetItem (
        int Index );
    int GetCount ( );
    HRESULT Add (
        _bstr_t FileName );
    HRESULT Delete (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR FileName ) = 0;
};

struct __declspec(uuid("000c0360-0000-0000-c000-000000000046"))
AnswerWizard : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFiles))
    AnswerWizardFilesPtr Files;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    AnswerWizardFilesPtr GetFiles ( );
    HRESULT ClearFileList ( );
    HRESULT ResetFileList ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Files (
        /*[out,retval]*/ struct AnswerWizardFiles * * Files ) = 0;
      virtual HRESULT __stdcall raw_ClearFileList ( ) = 0;
      virtual HRESULT __stdcall raw_ResetFileList ( ) = 0;
};

struct __declspec(uuid("2df8d04e-5bfa-101b-bde5-00aa0044de52"))
DocumentProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name[];
    __declspec(property(get=GetType,put=PutType))
    enum MsoDocProperties Type[];
    __declspec(property(get=GetLinkToContent,put=PutLinkToContent))
    VARIANT_BOOL LinkToContent;
    __declspec(property(get=GetLinkSource,put=PutLinkSource))
    _bstr_t LinkSource;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Delete ( );
    _bstr_t GetName (
        long lcid = 0 );
    void PutName (
        long lcid,
        _bstr_t pbstrRetVal );
    _variant_t GetValue (
        long lcid = 0 );
    void PutValue (
        long lcid,
        const _variant_t & pvargRetVal );
    enum MsoDocProperties GetType (
        long lcid = 0 );
    void PutType (
        long lcid,
        enum MsoDocProperties ptypeRetVal );
    VARIANT_BOOL GetLinkToContent ( );
    void PutLinkToContent (
        VARIANT_BOOL pfLinkRetVal );
    _bstr_t GetLinkSource ( );
    void PutLinkSource (
        _bstr_t pbstrSourceRetVal );
    IDispatchPtr GetApplication ( );
    long GetCreator ( );

    //
    // Raw methods provided by interface
    //

      virtual IDispatch * __stdcall get_Parent ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * pbstrRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR pbstrRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * pvargRetVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT pvargRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum MsoDocProperties * ptypeRetVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum MsoDocProperties ptypeRetVal ) = 0;
      virtual HRESULT __stdcall get_LinkToContent (
        /*[out,retval]*/ VARIANT_BOOL * pfLinkRetVal ) = 0;
      virtual HRESULT __stdcall put_LinkToContent (
        /*[in]*/ VARIANT_BOOL pfLinkRetVal ) = 0;
      virtual HRESULT __stdcall get_LinkSource (
        /*[out,retval]*/ BSTR * pbstrSourceRetVal ) = 0;
      virtual HRESULT __stdcall put_LinkSource (
        /*[in]*/ BSTR pbstrSourceRetVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
};

struct __declspec(uuid("2df8d04d-5bfa-101b-bde5-00aa0044de52"))
DocumentProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    DocumentPropertyPtr Item[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    DocumentPropertyPtr GetItem (
        const _variant_t & Index,
        long lcid = 0 );
    long GetCount ( );
    DocumentPropertyPtr Add (
        _bstr_t Name,
        VARIANT_BOOL LinkToContent,
        const _variant_t & Type = vtMissing,
        const _variant_t & Value = vtMissing,
        const _variant_t & LinkSource = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetApplication ( );
    long GetCreator ( );

    //
    // Raw methods provided by interface
    //

      virtual IDispatch * __stdcall get_Parent ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct DocumentProperty * * ppIDocProp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pc ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL LinkToContent,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Value,
        /*[in]*/ VARIANT LinkSource,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct DocumentProperty * * ppIDocProp ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
};

enum MsoFileFindOptions
{
    msoOptionsNew = 1,
    msoOptionsAdd = 2,
    msoOptionsWithin = 3
};

enum MsoFileFindView
{
    msoViewFileInfo = 1,
    msoViewPreview = 2,
    msoViewSummaryInfo = 3
};

enum MsoFileFindSortBy
{
    msoFileFindSortbyAuthor = 1,
    msoFileFindSortbyDateCreated = 2,
    msoFileFindSortbyLastSavedBy = 3,
    msoFileFindSortbyDateSaved = 4,
    msoFileFindSortbyFileName = 5,
    msoFileFindSortbySize = 6,
    msoFileFindSortbyTitle = 7
};

enum MsoFileFindListBy
{
    msoListbyName = 1,
    msoListbyTitle = 2
};

struct __declspec(uuid("000c0338-0000-0000-c000-000000000046"))
IFoundFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetItem (
        int Index );
    int GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
};

struct __declspec(uuid("000c0337-0000-0000-c000-000000000046"))
IFind : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSearchPath,put=PutSearchPath))
    _bstr_t SearchPath;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSubDir,put=PutSubDir))
    VARIANT_BOOL SubDir;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetOptions,put=PutOptions))
    enum MsoFileFindOptions Options;
    __declspec(property(get=GetMatchCase,put=PutMatchCase))
    VARIANT_BOOL MatchCase;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetPatternMatch,put=PutPatternMatch))
    VARIANT_BOOL PatternMatch;
    __declspec(property(get=GetDateSavedFrom,put=PutDateSavedFrom))
    _variant_t DateSavedFrom;
    __declspec(property(get=GetDateSavedTo,put=PutDateSavedTo))
    _variant_t DateSavedTo;
    __declspec(property(get=GetSavedBy,put=PutSavedBy))
    _bstr_t SavedBy;
    __declspec(property(get=GetDateCreatedFrom,put=PutDateCreatedFrom))
    _variant_t DateCreatedFrom;
    __declspec(property(get=GetDateCreatedTo,put=PutDateCreatedTo))
    _variant_t DateCreatedTo;
    __declspec(property(get=GetView,put=PutView))
    enum MsoFileFindView View;
    __declspec(property(get=GetSortBy,put=PutSortBy))
    enum MsoFileFindSortBy SortBy;
    __declspec(property(get=GetListBy,put=PutListBy))
    enum MsoFileFindListBy ListBy;
    __declspec(property(get=GetSelectedFile,put=PutSelectedFile))
    int SelectedFile;
    __declspec(property(get=GetResults))
    IFoundFilesPtr Results;
    __declspec(property(get=GetFileType,put=PutFileType))
    long FileType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSearchPath ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetSubDir ( );
    _bstr_t GetTitle ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetKeywords ( );
    _bstr_t GetSubject ( );
    enum MsoFileFindOptions GetOptions ( );
    VARIANT_BOOL GetMatchCase ( );
    _bstr_t GetText ( );
    VARIANT_BOOL GetPatternMatch ( );
    _variant_t GetDateSavedFrom ( );
    _variant_t GetDateSavedTo ( );
    _bstr_t GetSavedBy ( );
    _variant_t GetDateCreatedFrom ( );
    _variant_t GetDateCreatedTo ( );
    enum MsoFileFindView GetView ( );
    enum MsoFileFindSortBy GetSortBy ( );
    enum MsoFileFindListBy GetListBy ( );
    int GetSelectedFile ( );
    IFoundFilesPtr GetResults ( );
    int Show ( );
    void PutSearchPath (
        _bstr_t pbstr );
    void PutName (
        _bstr_t pbstr );
    void PutSubDir (
        VARIANT_BOOL retval );
    void PutTitle (
        _bstr_t pbstr );
    void PutAuthor (
        _bstr_t pbstr );
    void PutKeywords (
        _bstr_t pbstr );
    void PutSubject (
        _bstr_t pbstr );
    void PutOptions (
        enum MsoFileFindOptions penmOptions );
    void PutMatchCase (
        VARIANT_BOOL retval );
    void PutText (
        _bstr_t pbstr );
    void PutPatternMatch (
        VARIANT_BOOL retval );
    void PutDateSavedFrom (
        const _variant_t & pdatSavedFrom );
    void PutDateSavedTo (
        const _variant_t & pdatSavedTo );
    void PutSavedBy (
        _bstr_t pbstr );
    void PutDateCreatedFrom (
        const _variant_t & pdatCreatedFrom );
    void PutDateCreatedTo (
        const _variant_t & pdatCreatedTo );
    void PutView (
        enum MsoFileFindView penmView );
    void PutSortBy (
        enum MsoFileFindSortBy penmSortBy );
    void PutListBy (
        enum MsoFileFindListBy penmListBy );
    void PutSelectedFile (
        int pintSelectedFile );
    HRESULT Execute ( );
    HRESULT Load (
        _bstr_t bstrQueryName );
    HRESULT Save (
        _bstr_t bstrQueryName );
    HRESULT Delete (
        _bstr_t bstrQueryName );
    long GetFileType ( );
    void PutFileType (
        long plFileType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SearchPath (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_SubDir (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ enum MsoFileFindOptions * penmOptions ) = 0;
      virtual HRESULT __stdcall get_MatchCase (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_PatternMatch (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_DateSavedFrom (
        /*[out,retval]*/ VARIANT * pdatSavedFrom ) = 0;
      virtual HRESULT __stdcall get_DateSavedTo (
        /*[out,retval]*/ VARIANT * pdatSavedTo ) = 0;
      virtual HRESULT __stdcall get_SavedBy (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_DateCreatedFrom (
        /*[out,retval]*/ VARIANT * pdatCreatedFrom ) = 0;
      virtual HRESULT __stdcall get_DateCreatedTo (
        /*[out,retval]*/ VARIANT * pdatCreatedTo ) = 0;
      virtual HRESULT __stdcall get_View (
        /*[out,retval]*/ enum MsoFileFindView * penmView ) = 0;
      virtual HRESULT __stdcall get_SortBy (
        /*[out,retval]*/ enum MsoFileFindSortBy * penmSortBy ) = 0;
      virtual HRESULT __stdcall get_ListBy (
        /*[out,retval]*/ enum MsoFileFindListBy * penmListBy ) = 0;
      virtual HRESULT __stdcall get_SelectedFile (
        /*[out,retval]*/ int * pintSelectedFile ) = 0;
      virtual HRESULT __stdcall get_Results (
        /*[out,retval]*/ struct IFoundFiles * * pdisp ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ int * pRows ) = 0;
      virtual HRESULT __stdcall put_SearchPath (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall put_SubDir (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall put_Keywords (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall put_Options (
        /*[in]*/ enum MsoFileFindOptions penmOptions ) = 0;
      virtual HRESULT __stdcall put_MatchCase (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall put_PatternMatch (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall put_DateSavedFrom (
        /*[in]*/ VARIANT pdatSavedFrom ) = 0;
      virtual HRESULT __stdcall put_DateSavedTo (
        /*[in]*/ VARIANT pdatSavedTo ) = 0;
      virtual HRESULT __stdcall put_SavedBy (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall put_DateCreatedFrom (
        /*[in]*/ VARIANT pdatCreatedFrom ) = 0;
      virtual HRESULT __stdcall put_DateCreatedTo (
        /*[in]*/ VARIANT pdatCreatedTo ) = 0;
      virtual HRESULT __stdcall put_View (
        /*[in]*/ enum MsoFileFindView penmView ) = 0;
      virtual HRESULT __stdcall put_SortBy (
        /*[in]*/ enum MsoFileFindSortBy penmSortBy ) = 0;
      virtual HRESULT __stdcall put_ListBy (
        /*[in]*/ enum MsoFileFindListBy penmListBy ) = 0;
      virtual HRESULT __stdcall put_SelectedFile (
        /*[in]*/ int pintSelectedFile ) = 0;
      virtual HRESULT __stdcall raw_Execute ( ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR bstrQueryName ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR bstrQueryName ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR bstrQueryName ) = 0;
      virtual HRESULT __stdcall get_FileType (
        /*[out,retval]*/ long * plFileType ) = 0;
      virtual HRESULT __stdcall put_FileType (
        /*[in]*/ long plFileType ) = 0;
};

enum MsoLastModified
{
    msoLastModifiedYesterday = 1,
    msoLastModifiedToday = 2,
    msoLastModifiedLastWeek = 3,
    msoLastModifiedThisWeek = 4,
    msoLastModifiedLastMonth = 5,
    msoLastModifiedThisMonth = 6,
    msoLastModifiedAnyTime = 7
};

enum MsoSortBy
{
    msoSortByFileName = 1,
    msoSortBySize = 2,
    msoSortByFileType = 3,
    msoSortByLastModified = 4,
    msoSortByNone = 5
};

enum MsoSortOrder
{
    msoSortOrderAscending = 1,
    msoSortOrderDescending = 2
};

enum MsoConnector
{
    msoConnectorAnd = 1,
    msoConnectorOr = 2
};

enum MsoCondition
{
    msoConditionFileTypeAllFiles = 1,
    msoConditionFileTypeOfficeFiles = 2,
    msoConditionFileTypeWordDocuments = 3,
    msoConditionFileTypeExcelWorkbooks = 4,
    msoConditionFileTypePowerPointPresentations = 5,
    msoConditionFileTypeBinders = 6,
    msoConditionFileTypeDatabases = 7,
    msoConditionFileTypeTemplates = 8,
    msoConditionIncludes = 9,
    msoConditionIncludesPhrase = 10,
    msoConditionBeginsWith = 11,
    msoConditionEndsWith = 12,
    msoConditionIncludesNearEachOther = 13,
    msoConditionIsExactly = 14,
    msoConditionIsNot = 15,
    msoConditionYesterday = 16,
    msoConditionToday = 17,
    msoConditionTomorrow = 18,
    msoConditionLastWeek = 19,
    msoConditionThisWeek = 20,
    msoConditionNextWeek = 21,
    msoConditionLastMonth = 22,
    msoConditionThisMonth = 23,
    msoConditionNextMonth = 24,
    msoConditionAnytime = 25,
    msoConditionAnytimeBetween = 26,
    msoConditionOn = 27,
    msoConditionOnOrAfter = 28,
    msoConditionOnOrBefore = 29,
    msoConditionInTheNext = 30,
    msoConditionInTheLast = 31,
    msoConditionEquals = 32,
    msoConditionDoesNotEqual = 33,
    msoConditionAnyNumberBetween = 34,
    msoConditionAtMost = 35,
    msoConditionAtLeast = 36,
    msoConditionMoreThan = 37,
    msoConditionLessThan = 38,
    msoConditionIsYes = 39,
    msoConditionIsNo = 40,
    msoConditionIncludesFormsOf = 41,
    msoConditionFreeText = 42,
    msoConditionFileTypeOutlookItems = 43,
    msoConditionFileTypeMailItem = 44,
    msoConditionFileTypeCalendarItem = 45,
    msoConditionFileTypeContactItem = 46,
    msoConditionFileTypeNoteItem = 47,
    msoConditionFileTypeJournalItem = 48,
    msoConditionFileTypeTaskItem = 49,
    msoConditionFileTypePhotoDrawFiles = 50,
    msoConditionFileTypeDataConnectionFiles = 51,
    msoConditionFileTypePublisherFiles = 52,
    msoConditionFileTypeProjectFiles = 53,
    msoConditionFileTypeDocumentImagingFiles = 54,
    msoConditionFileTypeVisioFiles = 55,
    msoConditionFileTypeDesignerFiles = 56,
    msoConditionFileTypeWebPages = 57,
    msoConditionEqualsLow = 58,
    msoConditionEqualsNormal = 59,
    msoConditionEqualsHigh = 60,
    msoConditionNotEqualToLow = 61,
    msoConditionNotEqualToNormal = 62,
    msoConditionNotEqualToHigh = 63,
    msoConditionEqualsNotStarted = 64,
    msoConditionEqualsInProgress = 65,
    msoConditionEqualsCompleted = 66,
    msoConditionEqualsWaitingForSomeoneElse = 67,
    msoConditionEqualsDeferred = 68,
    msoConditionNotEqualToNotStarted = 69,
    msoConditionNotEqualToInProgress = 70,
    msoConditionNotEqualToCompleted = 71,
    msoConditionNotEqualToWaitingForSomeoneElse = 72,
    msoConditionNotEqualToDeferred = 73
};

enum MsoFileType
{
    msoFileTypeAllFiles = 1,
    msoFileTypeOfficeFiles = 2,
    msoFileTypeWordDocuments = 3,
    msoFileTypeExcelWorkbooks = 4,
    msoFileTypePowerPointPresentations = 5,
    msoFileTypeBinders = 6,
    msoFileTypeDatabases = 7,
    msoFileTypeTemplates = 8,
    msoFileTypeOutlookItems = 9,
    msoFileTypeMailItem = 10,
    msoFileTypeCalendarItem = 11,
    msoFileTypeContactItem = 12,
    msoFileTypeNoteItem = 13,
    msoFileTypeJournalItem = 14,
    msoFileTypeTaskItem = 15,
    msoFileTypePhotoDrawFiles = 16,
    msoFileTypeDataConnectionFiles = 17,
    msoFileTypePublisherFiles = 18,
    msoFileTypeProjectFiles = 19,
    msoFileTypeDocumentImagingFiles = 20,
    msoFileTypeVisioFiles = 21,
    msoFileTypeDesignerFiles = 22,
    msoFileTypeWebPages = 23
};

struct __declspec(uuid("000c0331-0000-0000-c000-000000000046"))
FoundFiles : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _bstr_t Item[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetItem (
        int Index,
        long lcid = 0 );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * pbstrFile ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pc ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
};

struct __declspec(uuid("000c0333-0000-0000-c000-000000000046"))
PropertyTest : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetCondition))
    enum MsoCondition Condition;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetSecondValue))
    _variant_t SecondValue;
    __declspec(property(get=GetConnector))
    enum MsoConnector Connector;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum MsoCondition GetCondition ( );
    _variant_t GetValue ( );
    _variant_t GetSecondValue ( );
    enum MsoConnector GetConnector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrRetVal ) = 0;
      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ enum MsoCondition * pConditionRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * pvargRetVal ) = 0;
      virtual HRESULT __stdcall get_SecondValue (
        /*[out,retval]*/ VARIANT * pvargRetVal2 ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum MsoConnector * pConnector ) = 0;
};

struct __declspec(uuid("000c0334-0000-0000-c000-000000000046"))
PropertyTests : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    PropertyTestPtr Item[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    PropertyTestPtr GetItem (
        int Index,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Add (
        _bstr_t Name,
        enum MsoCondition Condition,
        const _variant_t & Value,
        const _variant_t & SecondValue,
        enum MsoConnector Connector );
    HRESULT Remove (
        int Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct PropertyTest * * ppIDocProp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pc ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum MsoCondition Condition,
        /*[in]*/ VARIANT Value,
        /*[in]*/ VARIANT SecondValue,
        /*[in]*/ enum MsoConnector Connector ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
};

struct __declspec(uuid("000c033a-0000-0000-c000-000000000046"))
COMAddIn : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetProgId))
    _bstr_t ProgId;
    __declspec(property(get=GetGuid))
    _bstr_t Guid;
    __declspec(property(get=GetConnect,put=PutConnect))
    VARIANT_BOOL Connect;
    __declspec(property(get=GetObject,put=PutObject))
    IDispatchPtr Object;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t RetValue );
    _bstr_t GetProgId ( );
    _bstr_t GetGuid ( );
    VARIANT_BOOL GetConnect ( );
    void PutConnect (
        VARIANT_BOOL RetValue );
    IDispatchPtr GetObject ( );
    void PutObject (
        IDispatch * RetValue );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_ProgId (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall get_Guid (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall get_Connect (
        /*[out,retval]*/ VARIANT_BOOL * RetValue ) = 0;
      virtual HRESULT __stdcall put_Connect (
        /*[in]*/ VARIANT_BOOL RetValue ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * RetValue ) = 0;
      virtual HRESULT __stdcall put_Object (
        /*[in]*/ IDispatch * RetValue ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * retval ) = 0;
};

struct __declspec(uuid("000c0339-0000-0000-c000-000000000046"))
COMAddIns : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    COMAddInPtr Item (
        VARIANT * Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Update ( );
    IDispatchPtr GetParent ( );
    HRESULT SetAppModal (
        VARIANT_BOOL varfModal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT * Index,
        /*[out,retval]*/ struct COMAddIn * * RetValue ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RetValue ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RetValue ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall raw_SetAppModal (
        /*[in]*/ VARIANT_BOOL varfModal ) = 0;
};

enum MsoLanguageID
{
    msoLanguageIDMixed = -2,
    msoLanguageIDNone = 0,
    msoLanguageIDNoProofing = 1024,
    msoLanguageIDAfrikaans = 1078,
    msoLanguageIDAlbanian = 1052,
    msoLanguageIDAmharic = 1118,
    msoLanguageIDArabicAlgeria = 5121,
    msoLanguageIDArabicBahrain = 15361,
    msoLanguageIDArabicEgypt = 3073,
    msoLanguageIDArabicIraq = 2049,
    msoLanguageIDArabicJordan = 11265,
    msoLanguageIDArabicKuwait = 13313,
    msoLanguageIDArabicLebanon = 12289,
    msoLanguageIDArabicLibya = 4097,
    msoLanguageIDArabicMorocco = 6145,
    msoLanguageIDArabicOman = 8193,
    msoLanguageIDArabicQatar = 16385,
    msoLanguageIDArabic = 1025,
    msoLanguageIDArabicSyria = 10241,
    msoLanguageIDArabicTunisia = 7169,
    msoLanguageIDArabicUAE = 14337,
    msoLanguageIDArabicYemen = 9217,
    msoLanguageIDArmenian = 1067,
    msoLanguageIDAssamese = 1101,
    msoLanguageIDAzeriCyrillic = 2092,
    msoLanguageIDAzeriLatin = 1068,
    msoLanguageIDBasque = 1069,
    msoLanguageIDByelorussian = 1059,
    msoLanguageIDBengali = 1093,
    msoLanguageIDBosnian = 4122,
    msoLanguageIDBosnianBosniaHerzegovinaCyrillic = 8218,
    msoLanguageIDBosnianBosniaHerzegovinaLatin = 5146,
    msoLanguageIDBulgarian = 1026,
    msoLanguageIDBurmese = 1109,
    msoLanguageIDCatalan = 1027,
    msoLanguageIDChineseHongKongSAR = 3076,
    msoLanguageIDChineseMacaoSAR = 5124,
    msoLanguageIDSimplifiedChinese = 2052,
    msoLanguageIDChineseSingapore = 4100,
    msoLanguageIDTraditionalChinese = 1028,
    msoLanguageIDCherokee = 1116,
    msoLanguageIDCroatian = 1050,
    msoLanguageIDCzech = 1029,
    msoLanguageIDDanish = 1030,
    msoLanguageIDDivehi = 1125,
    msoLanguageIDBelgianDutch = 2067,
    msoLanguageIDDutch = 1043,
    msoLanguageIDDzongkhaBhutan = 2129,
    msoLanguageIDEdo = 1126,
    msoLanguageIDEnglishAUS = 3081,
    msoLanguageIDEnglishBelize = 10249,
    msoLanguageIDEnglishCanadian = 4105,
    msoLanguageIDEnglishCaribbean = 9225,
    msoLanguageIDEnglishIndonesia = 14345,
    msoLanguageIDEnglishIreland = 6153,
    msoLanguageIDEnglishJamaica = 8201,
    msoLanguageIDEnglishNewZealand = 5129,
    msoLanguageIDEnglishPhilippines = 13321,
    msoLanguageIDEnglishSouthAfrica = 7177,
    msoLanguageIDEnglishTrinidadTobago = 11273,
    msoLanguageIDEnglishUK = 2057,
    msoLanguageIDEnglishUS = 1033,
    msoLanguageIDEnglishZimbabwe = 12297,
    msoLanguageIDEstonian = 1061,
    msoLanguageIDFaeroese = 1080,
    msoLanguageIDFarsi = 1065,
    msoLanguageIDFilipino = 1124,
    msoLanguageIDFinnish = 1035,
    msoLanguageIDBelgianFrench = 2060,
    msoLanguageIDFrenchCameroon = 11276,
    msoLanguageIDFrenchCanadian = 3084,
    msoLanguageIDFrenchCotedIvoire = 12300,
    msoLanguageIDFrench = 1036,
    msoLanguageIDFrenchHaiti = 15372,
    msoLanguageIDFrenchLuxembourg = 5132,
    msoLanguageIDFrenchMali = 13324,
    msoLanguageIDFrenchMonaco = 6156,
    msoLanguageIDFrenchMorocco = 14348,
    msoLanguageIDFrenchReunion = 8204,
    msoLanguageIDFrenchSenegal = 10252,
    msoLanguageIDSwissFrench = 4108,
    msoLanguageIDFrenchWestIndies = 7180,
    msoLanguageIDFrenchZaire = 9228,
    msoLanguageIDFrisianNetherlands = 1122,
    msoLanguageIDFulfulde = 1127,
    msoLanguageIDGaelicIreland = 2108,
    msoLanguageIDGaelicScotland = 1084,
    msoLanguageIDGalician = 1110,
    msoLanguageIDGeorgian = 1079,
    msoLanguageIDGermanAustria = 3079,
    msoLanguageIDGerman = 1031,
    msoLanguageIDGermanLiechtenstein = 5127,
    msoLanguageIDGermanLuxembourg = 4103,
    msoLanguageIDSwissGerman = 2055,
    msoLanguageIDGreek = 1032,
    msoLanguageIDGuarani = 1140,
    msoLanguageIDGujarati = 1095,
    msoLanguageIDHausa = 1128,
    msoLanguageIDHawaiian = 1141,
    msoLanguageIDHebrew = 1037,
    msoLanguageIDHindi = 1081,
    msoLanguageIDHungarian = 1038,
    msoLanguageIDIbibio = 1129,
    msoLanguageIDIcelandic = 1039,
    msoLanguageIDIgbo = 1136,
    msoLanguageIDIndonesian = 1057,
    msoLanguageIDInuktitut = 1117,
    msoLanguageIDItalian = 1040,
    msoLanguageIDSwissItalian = 2064,
    msoLanguageIDJapanese = 1041,
    msoLanguageIDKannada = 1099,
    msoLanguageIDKanuri = 1137,
    msoLanguageIDKashmiri = 1120,
    msoLanguageIDKashmiriDevanagari = 2144,
    msoLanguageIDKazakh = 1087,
    msoLanguageIDKhmer = 1107,
    msoLanguageIDKirghiz = 1088,
    msoLanguageIDKonkani = 1111,
    msoLanguageIDKorean = 1042,
    msoLanguageIDKyrgyz = 1088,
    msoLanguageIDLatin = 1142,
    msoLanguageIDLao = 1108,
    msoLanguageIDLatvian = 1062,
    msoLanguageIDLithuanian = 1063,
    msoLanguageIDMacedonian = 1071,
    msoLanguageIDMalaysian = 1086,
    msoLanguageIDMalayBruneiDarussalam = 2110,
    msoLanguageIDMalayalam = 1100,
    msoLanguageIDMaltese = 1082,
    msoLanguageIDManipuri = 1112,
    msoLanguageIDMaori = 1153,
    msoLanguageIDMarathi = 1102,
    msoLanguageIDMongolian = 1104,
    msoLanguageIDNepali = 1121,
    msoLanguageIDNorwegianBokmol = 1044,
    msoLanguageIDNorwegianNynorsk = 2068,
    msoLanguageIDOriya = 1096,
    msoLanguageIDOromo = 1138,
    msoLanguageIDPashto = 1123,
    msoLanguageIDPolish = 1045,
    msoLanguageIDBrazilianPortuguese = 1046,
    msoLanguageIDPortuguese = 2070,
    msoLanguageIDPunjabi = 1094,
    msoLanguageIDQuechuaBolivia = 1131,
    msoLanguageIDQuechuaEcuador = 2155,
    msoLanguageIDQuechuaPeru = 3179,
    msoLanguageIDRhaetoRomanic = 1047,
    msoLanguageIDRomanianMoldova = 2072,
    msoLanguageIDRomanian = 1048,
    msoLanguageIDRussianMoldova = 2073,
    msoLanguageIDRussian = 1049,
    msoLanguageIDSamiLappish = 1083,
    msoLanguageIDSanskrit = 1103,
    msoLanguageIDSepedi = 1132,
    msoLanguageIDSerbianBosniaHerzegovinaCyrillic = 7194,
    msoLanguageIDSerbianBosniaHerzegovinaLatin = 6170,
    msoLanguageIDSerbianCyrillic = 3098,
    msoLanguageIDSerbianLatin = 2074,
    msoLanguageIDSesotho = 1072,
    msoLanguageIDSindhi = 1113,
    msoLanguageIDSindhiPakistan = 2137,
    msoLanguageIDSinhalese = 1115,
    msoLanguageIDSlovak = 1051,
    msoLanguageIDSlovenian = 1060,
    msoLanguageIDSomali = 1143,
    msoLanguageIDSorbian = 1070,
    msoLanguageIDSpanishArgentina = 11274,
    msoLanguageIDSpanishBolivia = 16394,
    msoLanguageIDSpanishChile = 13322,
    msoLanguageIDSpanishColombia = 9226,
    msoLanguageIDSpanishCostaRica = 5130,
    msoLanguageIDSpanishDominicanRepublic = 7178,
    msoLanguageIDSpanishEcuador = 12298,
    msoLanguageIDSpanishElSalvador = 17418,
    msoLanguageIDSpanishGuatemala = 4106,
    msoLanguageIDSpanishHonduras = 18442,
    msoLanguageIDMexicanSpanish = 2058,
    msoLanguageIDSpanishNicaragua = 19466,
    msoLanguageIDSpanishPanama = 6154,
    msoLanguageIDSpanishParaguay = 15370,
    msoLanguageIDSpanishPeru = 10250,
    msoLanguageIDSpanishPuertoRico = 20490,
    msoLanguageIDSpanishModernSort = 3082,
    msoLanguageIDSpanish = 1034,
    msoLanguageIDSpanishUruguay = 14346,
    msoLanguageIDSpanishVenezuela = 8202,
    msoLanguageIDSutu = 1072,
    msoLanguageIDSwahili = 1089,
    msoLanguageIDSwedishFinland = 2077,
    msoLanguageIDSwedish = 1053,
    msoLanguageIDSyriac = 1114,
    msoLanguageIDTajik = 1064,
    msoLanguageIDTamil = 1097,
    msoLanguageIDTamazight = 1119,
    msoLanguageIDTamazightLatin = 2143,
    msoLanguageIDTatar = 1092,
    msoLanguageIDTelugu = 1098,
    msoLanguageIDThai = 1054,
    msoLanguageIDTibetan = 1105,
    msoLanguageIDTigrignaEthiopic = 1139,
    msoLanguageIDTigrignaEritrea = 2163,
    msoLanguageIDTsonga = 1073,
    msoLanguageIDTswana = 1074,
    msoLanguageIDTurkish = 1055,
    msoLanguageIDTurkmen = 1090,
    msoLanguageIDUkrainian = 1058,
    msoLanguageIDUrdu = 1056,
    msoLanguageIDUzbekCyrillic = 2115,
    msoLanguageIDUzbekLatin = 1091,
    msoLanguageIDVenda = 1075,
    msoLanguageIDVietnamese = 1066,
    msoLanguageIDWelsh = 1106,
    msoLanguageIDXhosa = 1076,
    msoLanguageIDYi = 1144,
    msoLanguageIDYiddish = 1085,
    msoLanguageIDYoruba = 1130,
    msoLanguageIDZulu = 1077
};

struct __declspec(uuid("000c0353-0000-0000-c000-000000000046"))
LanguageSettings : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetLanguageID))
    int LanguageID[];
    __declspec(property(get=GetLanguagePreferredForEditing))
    VARIANT_BOOL LanguagePreferredForEditing[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    int GetLanguageID (
        enum MsoAppLanguageID Id );
    VARIANT_BOOL GetLanguagePreferredForEditing (
        enum MsoLanguageID lid );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LanguageID (
        /*[in]*/ enum MsoAppLanguageID Id,
        /*[out,retval]*/ int * plid ) = 0;
      virtual HRESULT __stdcall get_LanguagePreferredForEditing (
        /*[in]*/ enum MsoLanguageID lid,
        /*[out,retval]*/ VARIANT_BOOL * pf ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
};

struct __declspec(uuid("55f88892-7708-11d1-aceb-006008961da5"))
ICommandBarsEvents : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual void __stdcall OnUpdate ( ) = 0;
};

struct __declspec(uuid("000c0352-0000-0000-c000-000000000046"))
_CommandBarsEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnUpdate ( );
};

struct __declspec(uuid("55f88893-7708-11d1-aceb-006008961da5"))
CommandBars;
    // [ default ] interface _CommandBars
    // [ default, source ] dispinterface _CommandBarsEvents

struct __declspec(uuid("000c0354-0000-0000-c000-000000000046"))
_CommandBarComboBoxEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Change (
        struct _CommandBarComboBox * Ctrl );
};

struct __declspec(uuid("55f88897-7708-11d1-aceb-006008961da5"))
CommandBarComboBox;
    // [ default ] interface _CommandBarComboBox
    // [ default, source ] dispinterface _CommandBarComboBoxEvents

struct __declspec(uuid("55f88896-7708-11d1-aceb-006008961da5"))
ICommandBarComboBoxEvents : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual void __stdcall Change (
        /*[in]*/ struct _CommandBarComboBox * Ctrl ) = 0;
};

struct __declspec(uuid("000c0351-0000-0000-c000-000000000046"))
_CommandBarButtonEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click (
        struct _CommandBarButton * Ctrl,
        VARIANT_BOOL * CancelDefault );
};

struct __declspec(uuid("55f88891-7708-11d1-aceb-006008961da5"))
CommandBarButton;
    // [ default ] interface _CommandBarButton
    // [ default, source ] dispinterface _CommandBarButtonEvents

struct __declspec(uuid("55f88890-7708-11d1-aceb-006008961da5"))
ICommandBarButtonEvents : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual void __stdcall Click (
        /*[in]*/ struct _CommandBarButton * Ctrl,
        /*[in,out]*/ VARIANT_BOOL * CancelDefault ) = 0;
};

enum MsoScreenSize
{
    msoScreenSize544x376 = 0,
    msoScreenSize640x480 = 1,
    msoScreenSize720x512 = 2,
    msoScreenSize800x600 = 3,
    msoScreenSize1024x768 = 4,
    msoScreenSize1152x882 = 5,
    msoScreenSize1152x900 = 6,
    msoScreenSize1280x1024 = 7,
    msoScreenSize1600x1200 = 8,
    msoScreenSize1800x1440 = 9,
    msoScreenSize1920x1200 = 10
};

enum MsoCharacterSet
{
    msoCharacterSetArabic = 1,
    msoCharacterSetCyrillic = 2,
    msoCharacterSetEnglishWesternEuropeanOtherLatinScript = 3,
    msoCharacterSetGreek = 4,
    msoCharacterSetHebrew = 5,
    msoCharacterSetJapanese = 6,
    msoCharacterSetKorean = 7,
    msoCharacterSetMultilingualUnicode = 8,
    msoCharacterSetSimplifiedChinese = 9,
    msoCharacterSetThai = 10,
    msoCharacterSetTraditionalChinese = 11,
    msoCharacterSetVietnamese = 12
};

enum MsoEncoding
{
    msoEncodingThai = 874,
    msoEncodingJapaneseShiftJIS = 932,
    msoEncodingSimplifiedChineseGBK = 936,
    msoEncodingKorean = 949,
    msoEncodingTraditionalChineseBig5 = 950,
    msoEncodingUnicodeLittleEndian = 1200,
    msoEncodingUnicodeBigEndian = 1201,
    msoEncodingCentralEuropean = 1250,
    msoEncodingCyrillic = 1251,
    msoEncodingWestern = 1252,
    msoEncodingGreek = 1253,
    msoEncodingTurkish = 1254,
    msoEncodingHebrew = 1255,
    msoEncodingArabic = 1256,
    msoEncodingBaltic = 1257,
    msoEncodingVietnamese = 1258,
    msoEncodingAutoDetect = 50001,
    msoEncodingJapaneseAutoDetect = 50932,
    msoEncodingSimplifiedChineseAutoDetect = 50936,
    msoEncodingKoreanAutoDetect = 50949,
    msoEncodingTraditionalChineseAutoDetect = 50950,
    msoEncodingCyrillicAutoDetect = 51251,
    msoEncodingGreekAutoDetect = 51253,
    msoEncodingArabicAutoDetect = 51256,
    msoEncodingISO88591Latin1 = 28591,
    msoEncodingISO88592CentralEurope = 28592,
    msoEncodingISO88593Latin3 = 28593,
    msoEncodingISO88594Baltic = 28594,
    msoEncodingISO88595Cyrillic = 28595,
    msoEncodingISO88596Arabic = 28596,
    msoEncodingISO88597Greek = 28597,
    msoEncodingISO88598Hebrew = 28598,
    msoEncodingISO88599Turkish = 28599,
    msoEncodingISO885915Latin9 = 28605,
    msoEncodingISO88598HebrewLogical = 38598,
    msoEncodingISO2022JPNoHalfwidthKatakana = 50220,
    msoEncodingISO2022JPJISX02021984 = 50221,
    msoEncodingISO2022JPJISX02011989 = 50222,
    msoEncodingISO2022KR = 50225,
    msoEncodingISO2022CNTraditionalChinese = 50227,
    msoEncodingISO2022CNSimplifiedChinese = 50229,
    msoEncodingMacRoman = 10000,
    msoEncodingMacJapanese = 10001,
    msoEncodingMacTraditionalChineseBig5 = 10002,
    msoEncodingMacKorean = 10003,
    msoEncodingMacArabic = 10004,
    msoEncodingMacHebrew = 10005,
    msoEncodingMacGreek1 = 10006,
    msoEncodingMacCyrillic = 10007,
    msoEncodingMacSimplifiedChineseGB2312 = 10008,
    msoEncodingMacRomania = 10010,
    msoEncodingMacUkraine = 10017,
    msoEncodingMacLatin2 = 10029,
    msoEncodingMacIcelandic = 10079,
    msoEncodingMacTurkish = 10081,
    msoEncodingMacCroatia = 10082,
    msoEncodingEBCDICUSCanada = 37,
    msoEncodingEBCDICInternational = 500,
    msoEncodingEBCDICMultilingualROECELatin2 = 870,
    msoEncodingEBCDICGreekModern = 875,
    msoEncodingEBCDICTurkishLatin5 = 1026,
    msoEncodingEBCDICGermany = 20273,
    msoEncodingEBCDICDenmarkNorway = 20277,
    msoEncodingEBCDICFinlandSweden = 20278,
    msoEncodingEBCDICItaly = 20280,
    msoEncodingEBCDICLatinAmericaSpain = 20284,
    msoEncodingEBCDICUnitedKingdom = 20285,
    msoEncodingEBCDICJapaneseKatakanaExtended = 20290,
    msoEncodingEBCDICFrance = 20297,
    msoEncodingEBCDICArabic = 20420,
    msoEncodingEBCDICGreek = 20423,
    msoEncodingEBCDICHebrew = 20424,
    msoEncodingEBCDICKoreanExtended = 20833,
    msoEncodingEBCDICThai = 20838,
    msoEncodingEBCDICIcelandic = 20871,
    msoEncodingEBCDICTurkish = 20905,
    msoEncodingEBCDICRussian = 20880,
    msoEncodingEBCDICSerbianBulgarian = 21025,
    msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese = 50930,
    msoEncodingEBCDICUSCanadaAndJapanese = 50931,
    msoEncodingEBCDICKoreanExtendedAndKorean = 50933,
    msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese = 50935,
    msoEncodingEBCDICUSCanadaAndTraditionalChinese = 50937,
    msoEncodingEBCDICJapaneseLatinExtendedAndJapanese = 50939,
    msoEncodingOEMUnitedStates = 437,
    msoEncodingOEMGreek437G = 737,
    msoEncodingOEMBaltic = 775,
    msoEncodingOEMMultilingualLatinI = 850,
    msoEncodingOEMMultilingualLatinII = 852,
    msoEncodingOEMCyrillic = 855,
    msoEncodingOEMTurkish = 857,
    msoEncodingOEMPortuguese = 860,
    msoEncodingOEMIcelandic = 861,
    msoEncodingOEMHebrew = 862,
    msoEncodingOEMCanadianFrench = 863,
    msoEncodingOEMArabic = 864,
    msoEncodingOEMNordic = 865,
    msoEncodingOEMCyrillicII = 866,
    msoEncodingOEMModernGreek = 869,
    msoEncodingEUCJapanese = 51932,
    msoEncodingEUCChineseSimplifiedChinese = 51936,
    msoEncodingEUCKorean = 51949,
    msoEncodingEUCTaiwaneseTraditionalChinese = 51950,
    msoEncodingISCIIDevanagari = 57002,
    msoEncodingISCIIBengali = 57003,
    msoEncodingISCIITamil = 57004,
    msoEncodingISCIITelugu = 57005,
    msoEncodingISCIIAssamese = 57006,
    msoEncodingISCIIOriya = 57007,
    msoEncodingISCIIKannada = 57008,
    msoEncodingISCIIMalayalam = 57009,
    msoEncodingISCIIGujarati = 57010,
    msoEncodingISCIIPunjabi = 57011,
    msoEncodingArabicASMO = 708,
    msoEncodingArabicTransparentASMO = 720,
    msoEncodingKoreanJohab = 1361,
    msoEncodingTaiwanCNS = 20000,
    msoEncodingTaiwanTCA = 20001,
    msoEncodingTaiwanEten = 20002,
    msoEncodingTaiwanIBM5550 = 20003,
    msoEncodingTaiwanTeleText = 20004,
    msoEncodingTaiwanWang = 20005,
    msoEncodingIA5IRV = 20105,
    msoEncodingIA5German = 20106,
    msoEncodingIA5Swedish = 20107,
    msoEncodingIA5Norwegian = 20108,
    msoEncodingUSASCII = 20127,
    msoEncodingT61 = 20261,
    msoEncodingISO6937NonSpacingAccent = 20269,
    msoEncodingKOI8R = 20866,
    msoEncodingExtAlphaLowercase = 21027,
    msoEncodingKOI8U = 21866,
    msoEncodingEuropa3 = 29001,
    msoEncodingHZGBSimplifiedChinese = 52936,
    msoEncodingSimplifiedChineseGB18030 = 54936,
    msoEncodingUTF7 = 65000,
    msoEncodingUTF8 = 65001
};

struct __declspec(uuid("000c0913-0000-0000-c000-000000000046"))
WebPageFont : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetProportionalFont,put=PutProportionalFont))
    _bstr_t ProportionalFont;
    __declspec(property(get=GetProportionalFontSize,put=PutProportionalFontSize))
    float ProportionalFontSize;
    __declspec(property(get=GetFixedWidthFont,put=PutFixedWidthFont))
    _bstr_t FixedWidthFont;
    __declspec(property(get=GetFixedWidthFontSize,put=PutFixedWidthFontSize))
    float FixedWidthFontSize;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetProportionalFont ( );
    void PutProportionalFont (
        _bstr_t pstr );
    float GetProportionalFontSize ( );
    void PutProportionalFontSize (
        float pf );
    _bstr_t GetFixedWidthFont ( );
    void PutFixedWidthFont (
        _bstr_t pstr );
    float GetFixedWidthFontSize ( );
    void PutFixedWidthFontSize (
        float pf );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ProportionalFont (
        /*[out,retval]*/ BSTR * pstr ) = 0;
      virtual HRESULT __stdcall put_ProportionalFont (
        /*[in]*/ BSTR pstr ) = 0;
      virtual HRESULT __stdcall get_ProportionalFontSize (
        /*[out,retval]*/ float * pf ) = 0;
      virtual HRESULT __stdcall put_ProportionalFontSize (
        /*[in]*/ float pf ) = 0;
      virtual HRESULT __stdcall get_FixedWidthFont (
        /*[out,retval]*/ BSTR * pstr ) = 0;
      virtual HRESULT __stdcall put_FixedWidthFont (
        /*[in]*/ BSTR pstr ) = 0;
      virtual HRESULT __stdcall get_FixedWidthFontSize (
        /*[out,retval]*/ float * pf ) = 0;
      virtual HRESULT __stdcall put_FixedWidthFontSize (
        /*[in]*/ float pf ) = 0;
};

struct __declspec(uuid("000c0914-0000-0000-c000-000000000046"))
WebPageFonts : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    WebPageFontPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    WebPageFontPtr GetItem (
        enum MsoCharacterSet Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ enum MsoCharacterSet Index,
        /*[out,retval]*/ struct WebPageFont * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
};

enum MsoHTMLProjectOpen
{
    msoHTMLProjectOpenSourceView = 1,
    msoHTMLProjectOpenTextView = 2
};

enum MsoHTMLProjectState
{
    msoHTMLProjectStateDocumentLocked = 1,
    msoHTMLProjectStateProjectLocked = 2,
    msoHTMLProjectStateDocumentProjectUnlocked = 3
};

struct __declspec(uuid("000c0358-0000-0000-c000-000000000046"))
HTMLProjectItem : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIsOpen))
    VARIANT_BOOL IsOpen;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    VARIANT_BOOL GetIsOpen ( );
    HRESULT LoadFromFile (
        _bstr_t FileName );
    HRESULT Open (
        enum MsoHTMLProjectOpen OpenKind );
    HRESULT SaveCopyAs (
        _bstr_t FileName );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall get_IsOpen (
        /*[out,retval]*/ VARIANT_BOOL * RetValue ) = 0;
      virtual HRESULT __stdcall raw_LoadFromFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ enum MsoHTMLProjectOpen OpenKind ) = 0;
      virtual HRESULT __stdcall raw_SaveCopyAs (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
};

struct __declspec(uuid("000c0357-0000-0000-c000-000000000046"))
HTMLProjectItems : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    HTMLProjectItemPtr Item (
        VARIANT * Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT * Index,
        /*[out,retval]*/ struct HTMLProjectItem * * RetValue ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RetValue ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RetValue ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
};

struct __declspec(uuid("000c0356-0000-0000-c000-000000000046"))
HTMLProject : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetState))
    enum MsoHTMLProjectState State;
    __declspec(property(get=GetHTMLProjectItems))
    HTMLProjectItemsPtr HTMLProjectItems;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    enum MsoHTMLProjectState GetState ( );
    HRESULT RefreshProject (
        VARIANT_BOOL Refresh );
    HRESULT RefreshDocument (
        VARIANT_BOOL Refresh );
    HTMLProjectItemsPtr GetHTMLProjectItems ( );
    IDispatchPtr GetParent ( );
    HRESULT Open (
        enum MsoHTMLProjectOpen OpenKind );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum MsoHTMLProjectState * State ) = 0;
      virtual HRESULT __stdcall raw_RefreshProject (
        /*[in]*/ VARIANT_BOOL Refresh ) = 0;
      virtual HRESULT __stdcall raw_RefreshDocument (
        /*[in]*/ VARIANT_BOOL Refresh ) = 0;
      virtual HRESULT __stdcall get_HTMLProjectItems (
        /*[out,retval]*/ struct HTMLProjectItems * * HTMLProjectItems ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ enum MsoHTMLProjectOpen OpenKind ) = 0;
};

struct __declspec(uuid("000c035a-0000-0000-c000-000000000046"))
MsoDebugOptions : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetFeatureReports,put=PutFeatureReports))
    int FeatureReports;
    __declspec(property(get=GetOutputToDebugger,put=PutOutputToDebugger))
    VARIANT_BOOL OutputToDebugger;
    __declspec(property(get=GetOutputToFile,put=PutOutputToFile))
    VARIANT_BOOL OutputToFile;
    __declspec(property(get=GetOutputToMessageBox,put=PutOutputToMessageBox))
    VARIANT_BOOL OutputToMessageBox;

    //
    // Wrapper methods for error-handling
    //

    int GetFeatureReports ( );
    void PutFeatureReports (
        int puintFeatureReports );
    VARIANT_BOOL GetOutputToDebugger ( );
    void PutOutputToDebugger (
        VARIANT_BOOL pvarfOutputToDebugger );
    VARIANT_BOOL GetOutputToFile ( );
    void PutOutputToFile (
        VARIANT_BOOL pvarfOutputToFile );
    VARIANT_BOOL GetOutputToMessageBox ( );
    void PutOutputToMessageBox (
        VARIANT_BOOL pvarfOutputToMessageBox );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FeatureReports (
        /*[out,retval]*/ int * puintFeatureReports ) = 0;
      virtual HRESULT __stdcall put_FeatureReports (
        /*[in]*/ int puintFeatureReports ) = 0;
      virtual HRESULT __stdcall get_OutputToDebugger (
        /*[out,retval]*/ VARIANT_BOOL * pvarfOutputToDebugger ) = 0;
      virtual HRESULT __stdcall put_OutputToDebugger (
        /*[in]*/ VARIANT_BOOL pvarfOutputToDebugger ) = 0;
      virtual HRESULT __stdcall get_OutputToFile (
        /*[out,retval]*/ VARIANT_BOOL * pvarfOutputToFile ) = 0;
      virtual HRESULT __stdcall put_OutputToFile (
        /*[in]*/ VARIANT_BOOL pvarfOutputToFile ) = 0;
      virtual HRESULT __stdcall get_OutputToMessageBox (
        /*[out,retval]*/ VARIANT_BOOL * pvarfOutputToMessageBox ) = 0;
      virtual HRESULT __stdcall put_OutputToMessageBox (
        /*[in]*/ VARIANT_BOOL pvarfOutputToMessageBox ) = 0;
};

enum MsoFileDialogType
{
    msoFileDialogOpen = 1,
    msoFileDialogSaveAs = 2,
    msoFileDialogFilePicker = 3,
    msoFileDialogFolderPicker = 4
};

enum MsoFileDialogView
{
    msoFileDialogViewList = 1,
    msoFileDialogViewDetails = 2,
    msoFileDialogViewProperties = 3,
    msoFileDialogViewPreview = 4,
    msoFileDialogViewThumbnail = 5,
    msoFileDialogViewLargeIcons = 6,
    msoFileDialogViewSmallIcons = 7,
    msoFileDialogViewWebView = 8,
    msoFileDialogViewTiles = 9
};

struct __declspec(uuid("000c0363-0000-0000-c000-000000000046"))
FileDialogSelectedItems : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    _bstr_t Item (
        int Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pcFiles ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * Item ) = 0;
};

struct __declspec(uuid("000c0364-0000-0000-c000-000000000046"))
FileDialogFilter : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetExtensions))
    _bstr_t Extensions;
    __declspec(property(get=GetDescription))
    _bstr_t Description;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    _bstr_t GetExtensions ( );
    _bstr_t GetDescription ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Extensions (
        /*[out,retval]*/ BSTR * Extensions ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
};

struct __declspec(uuid("000c0365-0000-0000-c000-000000000046"))
FileDialogFilters : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    FileDialogFilterPtr Item (
        int Index );
    HRESULT Delete (
        const _variant_t & filter = vtMissing );
    HRESULT Clear ( );
    FileDialogFilterPtr Add (
        _bstr_t Description,
        _bstr_t Extensions,
        const _variant_t & Position = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pcFilters ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct FileDialogFilter * * Item ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT filter = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Description,
        /*[in]*/ BSTR Extensions,
        /*[in]*/ VARIANT Position,
        /*[out,retval]*/ struct FileDialogFilter * * Add ) = 0;
};

struct __declspec(uuid("000c0362-0000-0000-c000-000000000046"))
FileDialog : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFilters))
    FileDialogFiltersPtr Filters;
    __declspec(property(get=GetFilterIndex,put=PutFilterIndex))
    int FilterIndex;
    __declspec(property(get=GetItem))
    _bstr_t Item;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetButtonName,put=PutButtonName))
    _bstr_t ButtonName;
    __declspec(property(get=GetAllowMultiSelect,put=PutAllowMultiSelect))
    VARIANT_BOOL AllowMultiSelect;
    __declspec(property(get=GetInitialView,put=PutInitialView))
    enum MsoFileDialogView InitialView;
    __declspec(property(get=GetInitialFileName,put=PutInitialFileName))
    _bstr_t InitialFileName;
    __declspec(property(get=GetSelectedItems))
    FileDialogSelectedItemsPtr SelectedItems;
    __declspec(property(get=GetDialogType))
    enum MsoFileDialogType DialogType;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    FileDialogFiltersPtr GetFilters ( );
    int GetFilterIndex ( );
    void PutFilterIndex (
        int FilterIndex );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t Title );
    _bstr_t GetButtonName ( );
    void PutButtonName (
        _bstr_t ButtonName );
    VARIANT_BOOL GetAllowMultiSelect ( );
    void PutAllowMultiSelect (
        VARIANT_BOOL pvarfAllowMultiSelect );
    enum MsoFileDialogView GetInitialView ( );
    void PutInitialView (
        enum MsoFileDialogView pinitialview );
    _bstr_t GetInitialFileName ( );
    void PutInitialFileName (
        _bstr_t InitialFileName );
    FileDialogSelectedItemsPtr GetSelectedItems ( );
    enum MsoFileDialogType GetDialogType ( );
    _bstr_t GetItem ( );
    int Show ( );
    HRESULT Execute ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Filters (
        /*[out,retval]*/ struct FileDialogFilters * * Filters ) = 0;
      virtual HRESULT __stdcall get_FilterIndex (
        /*[out,retval]*/ int * FilterIndex ) = 0;
      virtual HRESULT __stdcall put_FilterIndex (
        /*[in]*/ int FilterIndex ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * Title ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall get_ButtonName (
        /*[out,retval]*/ BSTR * ButtonName ) = 0;
      virtual HRESULT __stdcall put_ButtonName (
        /*[in]*/ BSTR ButtonName ) = 0;
      virtual HRESULT __stdcall get_AllowMultiSelect (
        /*[out,retval]*/ VARIANT_BOOL * pvarfAllowMultiSelect ) = 0;
      virtual HRESULT __stdcall put_AllowMultiSelect (
        /*[in]*/ VARIANT_BOOL pvarfAllowMultiSelect ) = 0;
      virtual HRESULT __stdcall get_InitialView (
        /*[out,retval]*/ enum MsoFileDialogView * pinitialview ) = 0;
      virtual HRESULT __stdcall put_InitialView (
        /*[in]*/ enum MsoFileDialogView pinitialview ) = 0;
      virtual HRESULT __stdcall get_InitialFileName (
        /*[out,retval]*/ BSTR * InitialFileName ) = 0;
      virtual HRESULT __stdcall put_InitialFileName (
        /*[in]*/ BSTR InitialFileName ) = 0;
      virtual HRESULT __stdcall get_SelectedItems (
        /*[out,retval]*/ struct FileDialogSelectedItems * * Files ) = 0;
      virtual HRESULT __stdcall get_DialogType (
        /*[out,retval]*/ enum MsoFileDialogType * pdialogtype ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ int * rval ) = 0;
      virtual HRESULT __stdcall raw_Execute ( ) = 0;
};

enum MsoAutomationSecurity
{
    msoAutomationSecurityLow = 1,
    msoAutomationSecurityByUI = 2,
    msoAutomationSecurityForceDisable = 3
};

struct __declspec(uuid("000c0411-0000-0000-c000-000000000046"))
Signature : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetSigner))
    _bstr_t Signer;
    __declspec(property(get=GetIssuer))
    _bstr_t Issuer;
    __declspec(property(get=GetExpireDate))
    _variant_t ExpireDate;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetAttachCertificate,put=PutAttachCertificate))
    VARIANT_BOOL AttachCertificate;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsCertificateExpired))
    VARIANT_BOOL IsCertificateExpired;
    __declspec(property(get=GetIsCertificateRevoked))
    VARIANT_BOOL IsCertificateRevoked;
    __declspec(property(get=GetSignDate))
    _variant_t SignDate;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSigner ( );
    _bstr_t GetIssuer ( );
    _variant_t GetExpireDate ( );
    VARIANT_BOOL GetIsValid ( );
    VARIANT_BOOL GetAttachCertificate ( );
    void PutAttachCertificate (
        VARIANT_BOOL pfAttach );
    HRESULT Delete ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetIsCertificateExpired ( );
    VARIANT_BOOL GetIsCertificateRevoked ( );
    _variant_t GetSignDate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Signer (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_Issuer (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall get_ExpireDate (
        /*[out,retval]*/ VARIANT * pvarDate ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * pfValid ) = 0;
      virtual HRESULT __stdcall get_AttachCertificate (
        /*[out,retval]*/ VARIANT_BOOL * pfAttach ) = 0;
      virtual HRESULT __stdcall put_AttachCertificate (
        /*[in]*/ VARIANT_BOOL pfAttach ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_IsCertificateExpired (
        /*[out,retval]*/ VARIANT_BOOL * pfExpired ) = 0;
      virtual HRESULT __stdcall get_IsCertificateRevoked (
        /*[out,retval]*/ VARIANT_BOOL * pfExpired ) = 0;
      virtual HRESULT __stdcall get_SignDate (
        /*[out,retval]*/ VARIANT * pvarDate ) = 0;
};

struct __declspec(uuid("000c0410-0000-0000-c000-000000000046"))
SignatureSet : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    SignaturePtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    int GetCount ( );
    SignaturePtr GetItem (
        int iSig );
    SignaturePtr Add ( );
    HRESULT Commit ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcSig ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int iSig,
        /*[out,retval]*/ struct Signature * * ppidisp ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct Signature * * ppidisp ) = 0;
      virtual HRESULT __stdcall raw_Commit ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
};

enum MailFormat
{
    mfPlainText = 1,
    mfHTML = 2,
    mfRTF = 3
};

struct __declspec(uuid("000672ac-0000-0000-c000-000000000046"))
IMsoEnvelopeVB : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIntroduction,put=PutIntroduction))
    _bstr_t Introduction;
    __declspec(property(get=GetItem))
    IDispatchPtr Item;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCommandBars))
    IDispatchPtr CommandBars;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetIntroduction ( );
    void PutIntroduction (
        _bstr_t pbstrIntro );
    IDispatchPtr GetItem ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetCommandBars ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Introduction (
        /*[out,retval]*/ BSTR * pbstrIntro ) = 0;
      virtual HRESULT __stdcall put_Introduction (
        /*[in]*/ BSTR pbstrIntro ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[out,retval]*/ IDispatch * * ppdisp ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppdisp ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ IDispatch * * ppdisp ) = 0;
};

struct __declspec(uuid("000672ad-0000-0000-c000-000000000046"))
IMsoEnvelopeVBEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT EnvelopeShow ( );
    HRESULT EnvelopeHide ( );
};

struct __declspec(uuid("0006f01a-0000-0000-c000-000000000046"))
MsoEnvelope;
    // [ default ] interface IMsoEnvelopeVB
    // [ default, source ] dispinterface IMsoEnvelopeVBEvents

enum MsoAlertButtonType
{
    msoAlertButtonOK = 0,
    msoAlertButtonOKCancel = 1,
    msoAlertButtonAbortRetryIgnore = 2,
    msoAlertButtonYesNoCancel = 3,
    msoAlertButtonYesNo = 4,
    msoAlertButtonRetryCancel = 5,
    msoAlertButtonYesAllNoCancel = 6
};

enum MsoAlertIconType
{
    msoAlertIconNoIcon = 0,
    msoAlertIconCritical = 1,
    msoAlertIconQuery = 2,
    msoAlertIconWarning = 3,
    msoAlertIconInfo = 4
};

enum MsoAlertDefaultType
{
    msoAlertDefaultFirst = 0,
    msoAlertDefaultSecond = 1,
    msoAlertDefaultThird = 2,
    msoAlertDefaultFourth = 3,
    msoAlertDefaultFifth = 4
};

enum MsoAlertCancelType
{
    msoAlertCancelDefault = -1,
    msoAlertCancelFirst = 0,
    msoAlertCancelSecond = 1,
    msoAlertCancelThird = 2,
    msoAlertCancelFourth = 3,
    msoAlertCancelFifth = 4
};

struct __declspec(uuid("000c0322-0000-0000-c000-000000000046"))
Assistant : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    _bstr_t Item;
    __declspec(property(get=GetTop,put=PutTop))
    int Top;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetLeft,put=PutLeft))
    int Left;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetOn,put=PutOn))
    VARIANT_BOOL On;
    __declspec(property(get=GetNewBalloon))
    BalloonPtr NewBalloon;
    __declspec(property(get=GetBalloonError))
    enum MsoBalloonErrorType BalloonError;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAnimation,put=PutAnimation))
    enum MsoAnimationType Animation;
    __declspec(property(get=GetReduced,put=PutReduced))
    VARIANT_BOOL Reduced;
    __declspec(property(get=GetAssistWithHelp,put=PutAssistWithHelp))
    VARIANT_BOOL AssistWithHelp;
    __declspec(property(get=GetAssistWithWizards,put=PutAssistWithWizards))
    VARIANT_BOOL AssistWithWizards;
    __declspec(property(get=GetAssistWithAlerts,put=PutAssistWithAlerts))
    VARIANT_BOOL AssistWithAlerts;
    __declspec(property(get=GetMoveWhenInTheWay,put=PutMoveWhenInTheWay))
    VARIANT_BOOL MoveWhenInTheWay;
    __declspec(property(get=GetSounds,put=PutSounds))
    VARIANT_BOOL Sounds;
    __declspec(property(get=GetFeatureTips,put=PutFeatureTips))
    VARIANT_BOOL FeatureTips;
    __declspec(property(get=GetMouseTips,put=PutMouseTips))
    VARIANT_BOOL MouseTips;
    __declspec(property(get=GetKeyboardShortcutTips,put=PutKeyboardShortcutTips))
    VARIANT_BOOL KeyboardShortcutTips;
    __declspec(property(get=GetHighPriorityTips,put=PutHighPriorityTips))
    VARIANT_BOOL HighPriorityTips;
    __declspec(property(get=GetTipOfDay,put=PutTipOfDay))
    VARIANT_BOOL TipOfDay;
    __declspec(property(get=GetGuessHelp,put=PutGuessHelp))
    VARIANT_BOOL GuessHelp;
    __declspec(property(get=GetSearchWhenProgramming,put=PutSearchWhenProgramming))
    VARIANT_BOOL SearchWhenProgramming;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Move (
        int xLeft,
        int yTop );
    void PutTop (
        int pyTop );
    int GetTop ( );
    void PutLeft (
        int pxLeft );
    int GetLeft ( );
    HRESULT Help ( );
    long StartWizard (
        VARIANT_BOOL On,
        _bstr_t Callback,
        long PrivateX,
        const _variant_t & Animation = vtMissing,
        const _variant_t & CustomTeaser = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Bottom = vtMissing,
        const _variant_t & Right = vtMissing );
    HRESULT EndWizard (
        long WizardID,
        VARIANT_BOOL varfSuccess,
        const _variant_t & Animation = vtMissing );
    HRESULT ActivateWizard (
        long WizardID,
        enum MsoWizardActType act,
        const _variant_t & Animation = vtMissing );
    HRESULT ResetTips ( );
    BalloonPtr GetNewBalloon ( );
    enum MsoBalloonErrorType GetBalloonError ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pvarfVisible );
    enum MsoAnimationType GetAnimation ( );
    void PutAnimation (
        enum MsoAnimationType pfca );
    VARIANT_BOOL GetReduced ( );
    void PutReduced (
        VARIANT_BOOL pvarfReduced );
    void PutAssistWithHelp (
        VARIANT_BOOL pvarfAssistWithHelp );
    VARIANT_BOOL GetAssistWithHelp ( );
    void PutAssistWithWizards (
        VARIANT_BOOL pvarfAssistWithWizards );
    VARIANT_BOOL GetAssistWithWizards ( );
    void PutAssistWithAlerts (
        VARIANT_BOOL pvarfAssistWithAlerts );
    VARIANT_BOOL GetAssistWithAlerts ( );
    void PutMoveWhenInTheWay (
        VARIANT_BOOL pvarfMove );
    VARIANT_BOOL GetMoveWhenInTheWay ( );
    void PutSounds (
        VARIANT_BOOL pvarfSounds );
    VARIANT_BOOL GetSounds ( );
    void PutFeatureTips (
        VARIANT_BOOL pvarfFeatures );
    VARIANT_BOOL GetFeatureTips ( );
    void PutMouseTips (
        VARIANT_BOOL pvarfMouse );
    VARIANT_BOOL GetMouseTips ( );
    void PutKeyboardShortcutTips (
        VARIANT_BOOL pvarfKeyboardShortcuts );
    VARIANT_BOOL GetKeyboardShortcutTips ( );
    void PutHighPriorityTips (
        VARIANT_BOOL pvarfHighPriorityTips );
    VARIANT_BOOL GetHighPriorityTips ( );
    void PutTipOfDay (
        VARIANT_BOOL pvarfTipOfDay );
    VARIANT_BOOL GetTipOfDay ( );
    void PutGuessHelp (
        VARIANT_BOOL pvarfGuessHelp );
    VARIANT_BOOL GetGuessHelp ( );
    void PutSearchWhenProgramming (
        VARIANT_BOOL pvarfSearchInProgram );
    VARIANT_BOOL GetSearchWhenProgramming ( );
    _bstr_t GetItem ( );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t pbstr );
    _bstr_t GetName ( );
    VARIANT_BOOL GetOn ( );
    void PutOn (
        VARIANT_BOOL pvarfOn );
    int DoAlert (
        _bstr_t bstrAlertTitle,
        _bstr_t bstrAlertText,
        enum MsoAlertButtonType alb,
        enum MsoAlertIconType alc,
        enum MsoAlertDefaultType ald,
        enum MsoAlertCancelType alq,
        VARIANT_BOOL varfSysAlert );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ int xLeft,
        /*[in]*/ int yTop ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ int pyTop ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ int * pyTop ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ int pxLeft ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ int * pxLeft ) = 0;
      virtual HRESULT __stdcall raw_Help ( ) = 0;
      virtual HRESULT __stdcall raw_StartWizard (
        /*[in]*/ VARIANT_BOOL On,
        /*[in]*/ BSTR Callback,
        /*[in]*/ long PrivateX,
        /*[in]*/ VARIANT Animation,
        /*[in]*/ VARIANT CustomTeaser,
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Bottom,
        /*[in]*/ VARIANT Right,
        /*[out,retval]*/ long * plWizID ) = 0;
      virtual HRESULT __stdcall raw_EndWizard (
        /*[in]*/ long WizardID,
        /*[in]*/ VARIANT_BOOL varfSuccess,
        /*[in]*/ VARIANT Animation = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ActivateWizard (
        /*[in]*/ long WizardID,
        /*[in]*/ enum MsoWizardActType act,
        /*[in]*/ VARIANT Animation = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ResetTips ( ) = 0;
      virtual HRESULT __stdcall get_NewBalloon (
        /*[out,retval]*/ struct Balloon * * ppibal ) = 0;
      virtual HRESULT __stdcall get_BalloonError (
        /*[out,retval]*/ enum MsoBalloonErrorType * pbne ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pvarfVisible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pvarfVisible ) = 0;
      virtual HRESULT __stdcall get_Animation (
        /*[out,retval]*/ enum MsoAnimationType * pfca ) = 0;
      virtual HRESULT __stdcall put_Animation (
        /*[in]*/ enum MsoAnimationType pfca ) = 0;
      virtual HRESULT __stdcall get_Reduced (
        /*[out,retval]*/ VARIANT_BOOL * pvarfReduced ) = 0;
      virtual HRESULT __stdcall put_Reduced (
        /*[in]*/ VARIANT_BOOL pvarfReduced ) = 0;
      virtual HRESULT __stdcall put_AssistWithHelp (
        /*[in]*/ VARIANT_BOOL pvarfAssistWithHelp ) = 0;
      virtual HRESULT __stdcall get_AssistWithHelp (
        /*[out,retval]*/ VARIANT_BOOL * pvarfAssistWithHelp ) = 0;
      virtual HRESULT __stdcall put_AssistWithWizards (
        /*[in]*/ VARIANT_BOOL pvarfAssistWithWizards ) = 0;
      virtual HRESULT __stdcall get_AssistWithWizards (
        /*[out,retval]*/ VARIANT_BOOL * pvarfAssistWithWizards ) = 0;
      virtual HRESULT __stdcall put_AssistWithAlerts (
        /*[in]*/ VARIANT_BOOL pvarfAssistWithAlerts ) = 0;
      virtual HRESULT __stdcall get_AssistWithAlerts (
        /*[out,retval]*/ VARIANT_BOOL * pvarfAssistWithAlerts ) = 0;
      virtual HRESULT __stdcall put_MoveWhenInTheWay (
        /*[in]*/ VARIANT_BOOL pvarfMove ) = 0;
      virtual HRESULT __stdcall get_MoveWhenInTheWay (
        /*[out,retval]*/ VARIANT_BOOL * pvarfMove ) = 0;
      virtual HRESULT __stdcall put_Sounds (
        /*[in]*/ VARIANT_BOOL pvarfSounds ) = 0;
      virtual HRESULT __stdcall get_Sounds (
        /*[out,retval]*/ VARIANT_BOOL * pvarfSounds ) = 0;
      virtual HRESULT __stdcall put_FeatureTips (
        /*[in]*/ VARIANT_BOOL pvarfFeatures ) = 0;
      virtual HRESULT __stdcall get_FeatureTips (
        /*[out,retval]*/ VARIANT_BOOL * pvarfFeatures ) = 0;
      virtual HRESULT __stdcall put_MouseTips (
        /*[in]*/ VARIANT_BOOL pvarfMouse ) = 0;
      virtual HRESULT __stdcall get_MouseTips (
        /*[out,retval]*/ VARIANT_BOOL * pvarfMouse ) = 0;
      virtual HRESULT __stdcall put_KeyboardShortcutTips (
        /*[in]*/ VARIANT_BOOL pvarfKeyboardShortcuts ) = 0;
      virtual HRESULT __stdcall get_KeyboardShortcutTips (
        /*[out,retval]*/ VARIANT_BOOL * pvarfKeyboardShortcuts ) = 0;
      virtual HRESULT __stdcall put_HighPriorityTips (
        /*[in]*/ VARIANT_BOOL pvarfHighPriorityTips ) = 0;
      virtual HRESULT __stdcall get_HighPriorityTips (
        /*[out,retval]*/ VARIANT_BOOL * pvarfHighPriorityTips ) = 0;
      virtual HRESULT __stdcall put_TipOfDay (
        /*[in]*/ VARIANT_BOOL pvarfTipOfDay ) = 0;
      virtual HRESULT __stdcall get_TipOfDay (
        /*[out,retval]*/ VARIANT_BOOL * pvarfTipOfDay ) = 0;
      virtual HRESULT __stdcall put_GuessHelp (
        /*[in]*/ VARIANT_BOOL pvarfGuessHelp ) = 0;
      virtual HRESULT __stdcall get_GuessHelp (
        /*[out,retval]*/ VARIANT_BOOL * pvarfGuessHelp ) = 0;
      virtual HRESULT __stdcall put_SearchWhenProgramming (
        /*[in]*/ VARIANT_BOOL pvarfSearchInProgram ) = 0;
      virtual HRESULT __stdcall get_SearchWhenProgramming (
        /*[out,retval]*/ VARIANT_BOOL * pvarfSearchInProgram ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pbstr ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR pbstr ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_On (
        /*[out,retval]*/ VARIANT_BOOL * pvarfOn ) = 0;
      virtual HRESULT __stdcall put_On (
        /*[in]*/ VARIANT_BOOL pvarfOn ) = 0;
      virtual HRESULT __stdcall raw_DoAlert (
        /*[in]*/ BSTR bstrAlertTitle,
        /*[in]*/ BSTR bstrAlertText,
        /*[in]*/ enum MsoAlertButtonType alb,
        /*[in]*/ enum MsoAlertIconType alc,
        /*[in]*/ enum MsoAlertDefaultType ald,
        /*[in]*/ enum MsoAlertCancelType alq,
        /*[in]*/ VARIANT_BOOL varfSysAlert,
        /*[out,retval]*/ int * pibtn ) = 0;
};

enum MsoSearchIn
{
    msoSearchInMyComputer = 0,
    msoSearchInOutlook = 1,
    msoSearchInMyNetworkPlaces = 2,
    msoSearchInCustom = 3
};

enum MsoTargetBrowser
{
    msoTargetBrowserV3 = 0,
    msoTargetBrowserV4 = 1,
    msoTargetBrowserIE4 = 2,
    msoTargetBrowserIE5 = 3,
    msoTargetBrowserIE6 = 4
};

struct __declspec(uuid("000c036c-0000-0000-c000-000000000046"))
FileTypes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    enum MsoFileType Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    enum MsoFileType GetItem (
        int Index );
    int GetCount ( );
    HRESULT Add (
        enum MsoFileType FileType );
    HRESULT Remove (
        int Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ enum MsoFileType * MsoFileTypeRet ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * iCountRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum MsoFileType FileType ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
};

enum MsoOrgChartOrientation
{
    msoOrgChartOrientationMixed = -2,
    msoOrgChartOrientationVertical = 1
};

enum MsoOrgChartLayoutType
{
    msoOrgChartLayoutMixed = -2,
    msoOrgChartLayoutStandard = 1,
    msoOrgChartLayoutBothHanging = 2,
    msoOrgChartLayoutLeftHanging = 3,
    msoOrgChartLayoutRightHanging = 4
};

enum MsoRelativeNodePosition
{
    msoBeforeNode = 1,
    msoAfterNode = 2,
    msoBeforeFirstSibling = 3,
    msoAfterLastSibling = 4
};

enum MsoDiagramType
{
    msoDiagramMixed = -2,
    msoDiagramOrgChart = 1,
    msoDiagramCycle = 2,
    msoDiagramRadial = 3,
    msoDiagramPyramid = 4,
    msoDiagramVenn = 5,
    msoDiagramTarget = 6
};

enum MsoDiagramNodeType
{
    msoDiagramNode = 1,
    msoDiagramAssistant = 2
};

enum MsoMoveRow
{
    msoMoveRowFirst = -4,
    msoMoveRowPrev = -3,
    msoMoveRowNext = -2,
    msoMoveRowNbr = -1
};

struct __declspec(uuid("000c1530-0000-0000-c000-000000000046"))
OfficeDataSourceObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConnectString,put=PutConnectString))
    _bstr_t ConnectString;
    __declspec(property(get=GetTable,put=PutTable))
    _bstr_t Table;
    __declspec(property(get=GetDataSource,put=PutDataSource))
    _bstr_t DataSource;
    __declspec(property(get=GetColumns))
    IDispatchPtr Columns;
    __declspec(property(get=GetRowCount))
    long RowCount;
    __declspec(property(get=GetFilters))
    IDispatchPtr Filters;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetConnectString ( );
    void PutConnectString (
        _bstr_t pbstrConnect );
    _bstr_t GetTable ( );
    void PutTable (
        _bstr_t pbstrTable );
    _bstr_t GetDataSource ( );
    void PutDataSource (
        _bstr_t pbstrSrc );
    IDispatchPtr GetColumns ( );
    long GetRowCount ( );
    IDispatchPtr GetFilters ( );
    int Move (
        enum MsoMoveRow MsoMoveRow,
        int RowNbr );
    HRESULT Open (
        _bstr_t bstrSrc,
        _bstr_t bstrConnect,
        _bstr_t bstrTable,
        long fOpenExclusive,
        long fNeverPrompt );
    HRESULT SetSortOrder (
        _bstr_t SortField1,
        VARIANT_BOOL SortAscending1,
        _bstr_t SortField2,
        VARIANT_BOOL SortAscending2,
        _bstr_t SortField3,
        VARIANT_BOOL SortAscending3 );
    HRESULT ApplyFilter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConnectString (
        /*[out,retval]*/ BSTR * pbstrConnect ) = 0;
      virtual HRESULT __stdcall put_ConnectString (
        /*[in]*/ BSTR pbstrConnect ) = 0;
      virtual HRESULT __stdcall get_Table (
        /*[out,retval]*/ BSTR * pbstrTable ) = 0;
      virtual HRESULT __stdcall put_Table (
        /*[in]*/ BSTR pbstrTable ) = 0;
      virtual HRESULT __stdcall get_DataSource (
        /*[out,retval]*/ BSTR * pbstrSrc ) = 0;
      virtual HRESULT __stdcall put_DataSource (
        /*[in]*/ BSTR pbstrSrc ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ IDispatch * * ppColumns ) = 0;
      virtual HRESULT __stdcall get_RowCount (
        /*[out,retval]*/ long * pcRows ) = 0;
      virtual HRESULT __stdcall get_Filters (
        /*[out,retval]*/ IDispatch * * ppFilters ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ enum MsoMoveRow MsoMoveRow,
        /*[in]*/ int RowNbr,
        /*[out,retval]*/ int * rval ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR bstrSrc,
        /*[in]*/ BSTR bstrConnect,
        /*[in]*/ BSTR bstrTable,
        /*[in]*/ long fOpenExclusive,
        /*[in]*/ long fNeverPrompt ) = 0;
      virtual HRESULT __stdcall raw_SetSortOrder (
        /*[in]*/ BSTR SortField1,
        /*[in]*/ VARIANT_BOOL SortAscending1,
        /*[in]*/ BSTR SortField2,
        /*[in]*/ VARIANT_BOOL SortAscending2,
        /*[in]*/ BSTR SortField3,
        /*[in]*/ VARIANT_BOOL SortAscending3 ) = 0;
      virtual HRESULT __stdcall raw_ApplyFilter ( ) = 0;
};

struct __declspec(uuid("000c1531-0000-0000-c000-000000000046"))
ODSOColumn : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetValue))
    _bstr_t Value;

    //
    // Wrapper methods for error-handling
    //

    long GetIndex ( );
    _bstr_t GetName ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * plIndex ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppParent ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * pbstrValue ) = 0;
};

struct __declspec(uuid("000c1532-0000-0000-c000-000000000046"))
ODSOColumns : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Item (
        const _variant_t & varIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppParentOdso ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT varIndex,
        /*[out,retval]*/ IDispatch * * ppColumn ) = 0;
};

enum MsoFilterComparison
{
    msoFilterComparisonEqual = 0,
    msoFilterComparisonNotEqual = 1,
    msoFilterComparisonLessThan = 2,
    msoFilterComparisonGreaterThan = 3,
    msoFilterComparisonLessThanEqual = 4,
    msoFilterComparisonGreaterThanEqual = 5,
    msoFilterComparisonIsBlank = 6,
    msoFilterComparisonIsNotBlank = 7,
    msoFilterComparisonContains = 8,
    msoFilterComparisonNotContains = 9
};

enum MsoFilterConjunction
{
    msoFilterConjunctionAnd = 0,
    msoFilterConjunctionOr = 1
};

struct __declspec(uuid("000c1533-0000-0000-c000-000000000046"))
ODSOFilter : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetColumn,put=PutColumn))
    _bstr_t Column;
    __declspec(property(get=GetComparison,put=PutComparison))
    enum MsoFilterComparison Comparison;
    __declspec(property(get=GetCompareTo,put=PutCompareTo))
    _bstr_t CompareTo;
    __declspec(property(get=GetConjunction,put=PutConjunction))
    enum MsoFilterConjunction Conjunction;

    //
    // Wrapper methods for error-handling
    //

    long GetIndex ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetColumn ( );
    void PutColumn (
        _bstr_t pbstrCol );
    enum MsoFilterComparison GetComparison ( );
    void PutComparison (
        enum MsoFilterComparison pComparison );
    _bstr_t GetCompareTo ( );
    void PutCompareTo (
        _bstr_t pbstrCompareTo );
    enum MsoFilterConjunction GetConjunction ( );
    void PutConjunction (
        enum MsoFilterConjunction pConjunction );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * plIndex ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppParent ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ BSTR * pbstrCol ) = 0;
      virtual HRESULT __stdcall put_Column (
        /*[in]*/ BSTR pbstrCol ) = 0;
      virtual HRESULT __stdcall get_Comparison (
        /*[out,retval]*/ enum MsoFilterComparison * pComparison ) = 0;
      virtual HRESULT __stdcall put_Comparison (
        /*[in]*/ enum MsoFilterComparison pComparison ) = 0;
      virtual HRESULT __stdcall get_CompareTo (
        /*[out,retval]*/ BSTR * pbstrCompareTo ) = 0;
      virtual HRESULT __stdcall put_CompareTo (
        /*[in]*/ BSTR pbstrCompareTo ) = 0;
      virtual HRESULT __stdcall get_Conjunction (
        /*[out,retval]*/ enum MsoFilterConjunction * pConjunction ) = 0;
      virtual HRESULT __stdcall put_Conjunction (
        /*[in]*/ enum MsoFilterConjunction pConjunction ) = 0;
};

struct __declspec(uuid("000c1534-0000-0000-c000-000000000046"))
ODSOFilters : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Item (
        long Index );
    HRESULT Add (
        _bstr_t Column,
        enum MsoFilterComparison Comparison,
        enum MsoFilterConjunction Conjunction,
        _bstr_t bstrCompareTo,
        VARIANT_BOOL DeferUpdate );
    HRESULT Delete (
        long Index,
        VARIANT_BOOL DeferUpdate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppParentOdso ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ IDispatch * * ppColumn ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Column,
        /*[in]*/ enum MsoFilterComparison Comparison,
        /*[in]*/ enum MsoFilterConjunction Conjunction,
        /*[in]*/ BSTR bstrCompareTo,
        /*[in]*/ VARIANT_BOOL DeferUpdate ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL DeferUpdate ) = 0;
};

enum MsoFileNewSection
{
    msoOpenDocument = 0,
    msoNew = 1,
    msoNewfromExistingFile = 2,
    msoNewfromTemplate = 3,
    msoBottomSection = 4
};

enum MsoFileNewAction
{
    msoEditFile = 0,
    msoCreateNewFile = 1,
    msoOpenFile = 2
};

struct __declspec(uuid("000c0936-0000-0000-c000-000000000046"))
NewFile : _IMsoDispObj
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Add (
        _bstr_t FileName,
        const _variant_t & Section = vtMissing,
        const _variant_t & DisplayName = vtMissing,
        const _variant_t & Action = vtMissing );
    VARIANT_BOOL Remove (
        _bstr_t FileName,
        const _variant_t & Section = vtMissing,
        const _variant_t & DisplayName = vtMissing,
        const _variant_t & Action = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT Section,
        /*[in]*/ VARIANT DisplayName,
        /*[in]*/ VARIANT Action,
        /*[out,retval]*/ VARIANT_BOOL * pvarf ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT Section,
        /*[in]*/ VARIANT DisplayName,
        /*[in]*/ VARIANT Action,
        /*[out,retval]*/ VARIANT_BOOL * pvarf ) = 0;
};

struct __declspec(uuid("000cd100-0000-0000-c000-000000000046"))
WebComponent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShape))
    IDispatchPtr Shape;
    __declspec(property(get=GetURL,put=PutURL))
    _bstr_t URL;
    __declspec(property(get=GetHTML,put=PutHTML))
    _bstr_t HTML;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetShape ( );
    _bstr_t GetURL ( );
    void PutURL (
        _bstr_t RetValue );
    _bstr_t GetHTML ( );
    void PutHTML (
        _bstr_t RetValue );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RetValue );
    long GetWidth ( );
    void PutWidth (
        long RetValue );
    long GetHeight ( );
    void PutHeight (
        long RetValue );
    HRESULT SetPlaceHolderGraphic (
        _bstr_t PlaceHolderGraphic );
    HRESULT Commit ( );
    HRESULT Revert ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ IDispatch * * RetValue ) = 0;
      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_URL (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_HTML (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_HTML (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * RetValue ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long RetValue ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * RetValue ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long RetValue ) = 0;
      virtual HRESULT __stdcall raw_SetPlaceHolderGraphic (
        /*[in]*/ BSTR PlaceHolderGraphic ) = 0;
      virtual HRESULT __stdcall raw_Commit ( ) = 0;
      virtual HRESULT __stdcall raw_Revert ( ) = 0;
};

struct __declspec(uuid("000cd101-0000-0000-c000-000000000046"))
WebComponentWindowExternal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterfaceVersion))
    long InterfaceVersion;
    __declspec(property(get=GetApplicationName))
    _bstr_t ApplicationName;
    __declspec(property(get=GetApplicationVersion))
    long ApplicationVersion;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetWebComponent))
    WebComponentPtr WebComponent;

    //
    // Wrapper methods for error-handling
    //

    long GetInterfaceVersion ( );
    _bstr_t GetApplicationName ( );
    long GetApplicationVersion ( );
    IDispatchPtr GetApplication ( );
    HRESULT CloseWindow ( );
    WebComponentPtr GetWebComponent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_InterfaceVersion (
        /*[out,retval]*/ long * RetValue ) = 0;
      virtual HRESULT __stdcall get_ApplicationName (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall get_ApplicationVersion (
        /*[out,retval]*/ long * RetValue ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * RetValue ) = 0;
      virtual HRESULT __stdcall raw_CloseWindow ( ) = 0;
      virtual HRESULT __stdcall get_WebComponent (
        /*[out,retval]*/ struct WebComponent * * RetValue ) = 0;
};

struct __declspec(uuid("000cd102-0000-0000-c000-000000000046"))
WebComponentFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetURL,put=PutURL))
    _bstr_t URL;
    __declspec(property(get=GetHTML,put=PutHTML))
    _bstr_t HTML;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetPreviewGraphic,put=PutPreviewGraphic))
    _bstr_t PreviewGraphic;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetURL ( );
    void PutURL (
        _bstr_t RetValue );
    _bstr_t GetHTML ( );
    void PutHTML (
        _bstr_t RetValue );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RetValue );
    long GetWidth ( );
    void PutWidth (
        long RetValue );
    long GetHeight ( );
    void PutHeight (
        long RetValue );
    _bstr_t GetPreviewGraphic ( );
    void PutPreviewGraphic (
        _bstr_t retval );
    HRESULT LaunchPropertiesWindow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * RetValue ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_URL (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_HTML (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_HTML (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * RetValue ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long RetValue ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * RetValue ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long RetValue ) = 0;
      virtual HRESULT __stdcall get_PreviewGraphic (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_PreviewGraphic (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall raw_LaunchPropertiesWindow ( ) = 0;
};

enum MsoLanguageIDHidden
{
    msoLanguageIDChineseHongKong = 3076,
    msoLanguageIDChineseMacao = 5124,
    msoLanguageIDEnglishTrinidad = 11273
};

struct __declspec(uuid("4cac6328-b9b0-11d3-8d59-0050048384e3"))
ILicWizExternal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetContext))
    long Context;
    __declspec(property(get=GetValidator))
    IDispatchPtr Validator;
    __declspec(property(get=GetLicAgent))
    IDispatchPtr LicAgent;
    __declspec(property(get=GetCountryInfo))
    _bstr_t CountryInfo;
    __declspec(property(put=PutWizardVisible))
    int WizardVisible;
    __declspec(property(put=PutWizardTitle))
    _bstr_t WizardTitle;
    __declspec(property(get=GetAnimationEnabled))
    int AnimationEnabled;
    __declspec(property(put=PutCurrentHelpId))
    long CurrentHelpId;
    __declspec(property(get=GetOfficeOnTheWebUrl))
    _bstr_t OfficeOnTheWebUrl;

    //
    // Wrapper methods for error-handling
    //

    HRESULT PrintHtmlDocument (
        IUnknown * punkHtmlDoc );
    HRESULT InvokeDateTimeApplet ( );
    _bstr_t FormatDate (
        DATE date,
        _bstr_t pFormat );
    HRESULT ShowHelp (
        VARIANT * pvarId = &vtMissing );
    HRESULT Terminate ( );
    HRESULT DisableVORWReminder (
        long BPC );
    _bstr_t SaveReceipt (
        _bstr_t bstrReceipt );
    HRESULT OpenInDefaultBrowser (
        _bstr_t bstrUrl );
    long MsoAlert (
        _bstr_t bstrText,
        _bstr_t bstrButtons,
        _bstr_t bstrIcon );
    long DepositPidKey (
        _bstr_t bstrKey,
        int fMORW );
    HRESULT WriteLog (
        _bstr_t bstrMessage );
    HRESULT ResignDpc (
        _bstr_t bstrProductCode );
    HRESULT ResetPID ( );
    HRESULT SetDialogSize (
        long dx,
        long dy );
    long VerifyClock (
        long lMode );
    HRESULT SortSelectOptions (
        IDispatch * pdispSelect );
    HRESULT InternetDisconnect ( );
    int GetConnectedState ( );
    long GetContext ( );
    IDispatchPtr GetValidator ( );
    IDispatchPtr GetLicAgent ( );
    _bstr_t GetCountryInfo ( );
    void PutWizardVisible (
        int _arg1 );
    void PutWizardTitle (
        _bstr_t _arg1 );
    int GetAnimationEnabled ( );
    void PutCurrentHelpId (
        long _arg1 );
    _bstr_t GetOfficeOnTheWebUrl ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_PrintHtmlDocument (
        /*[in]*/ IUnknown * punkHtmlDoc ) = 0;
      virtual HRESULT __stdcall raw_InvokeDateTimeApplet ( ) = 0;
      virtual HRESULT __stdcall raw_FormatDate (
        /*[in]*/ DATE date,
        /*[in]*/ BSTR pFormat,
        /*[out,retval]*/ BSTR * pDateString ) = 0;
      virtual HRESULT __stdcall raw_ShowHelp (
        /*[in]*/ VARIANT * pvarId = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Terminate ( ) = 0;
      virtual HRESULT __stdcall raw_DisableVORWReminder (
        /*[in]*/ long BPC ) = 0;
      virtual HRESULT __stdcall raw_SaveReceipt (
        /*[in]*/ BSTR bstrReceipt,
        /*[out,retval]*/ BSTR * pbstrPath ) = 0;
      virtual HRESULT __stdcall raw_OpenInDefaultBrowser (
        /*[in]*/ BSTR bstrUrl ) = 0;
      virtual HRESULT __stdcall raw_MsoAlert (
        /*[in]*/ BSTR bstrText,
        /*[in]*/ BSTR bstrButtons,
        /*[in]*/ BSTR bstrIcon,
        /*[out,retval]*/ long * plRet ) = 0;
      virtual HRESULT __stdcall raw_DepositPidKey (
        /*[in]*/ BSTR bstrKey,
        /*[in]*/ int fMORW,
        /*[out,retval]*/ long * plRet ) = 0;
      virtual HRESULT __stdcall raw_WriteLog (
        /*[in]*/ BSTR bstrMessage ) = 0;
      virtual HRESULT __stdcall raw_ResignDpc (
        /*[in]*/ BSTR bstrProductCode ) = 0;
      virtual HRESULT __stdcall raw_ResetPID ( ) = 0;
      virtual HRESULT __stdcall raw_SetDialogSize (
        /*[in]*/ long dx,
        /*[in]*/ long dy ) = 0;
      virtual HRESULT __stdcall raw_VerifyClock (
        /*[in]*/ long lMode,
        /*[out,retval]*/ long * plRet ) = 0;
      virtual HRESULT __stdcall raw_SortSelectOptions (
        /*[in]*/ IDispatch * pdispSelect ) = 0;
      virtual HRESULT __stdcall raw_InternetDisconnect ( ) = 0;
      virtual HRESULT __stdcall raw_GetConnectedState (
        /*[out,retval]*/ int * pfConnected ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ long * plwctx ) = 0;
      virtual HRESULT __stdcall get_Validator (
        /*[out,retval]*/ IDispatch * * ppdispValidator ) = 0;
      virtual HRESULT __stdcall get_LicAgent (
        /*[out,retval]*/ IDispatch * * ppdispLicAgent ) = 0;
      virtual HRESULT __stdcall get_CountryInfo (
        /*[out,retval]*/ BSTR * pbstrUrl ) = 0;
      virtual HRESULT __stdcall put_WizardVisible (
        /*[in]*/ int _arg1 ) = 0;
      virtual HRESULT __stdcall put_WizardTitle (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_AnimationEnabled (
        /*[out,retval]*/ int * fEnabled ) = 0;
      virtual HRESULT __stdcall put_CurrentHelpId (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall get_OfficeOnTheWebUrl (
        /*[out,retval]*/ BSTR * bstrUrl ) = 0;
};

struct __declspec(uuid("919aa22c-b9ad-11d3-8d59-0050048384e3"))
ILicValidator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProducts))
    _variant_t Products;
    __declspec(property(get=GetSelection,put=PutSelection))
    int Selection;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetProducts ( );
    int GetSelection ( );
    void PutSelection (
        int piSel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Products (
        /*[out,retval]*/ VARIANT * pVariant ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ int * piSel ) = 0;
      virtual HRESULT __stdcall put_Selection (
        /*[in]*/ int piSel ) = 0;
};

struct __declspec(uuid("00194002-d9c3-11d3-8d59-0050048384e3"))
ILicAgent : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    unsigned long Initialize (
        unsigned long dwBPC,
        unsigned long dwMode,
        _bstr_t bstrLicSource );
    _bstr_t GetFirstName ( );
    HRESULT SetFirstName (
        _bstr_t bstrNewVal );
    _bstr_t GetLastName ( );
    HRESULT SetLastName (
        _bstr_t bstrNewVal );
    _bstr_t GetOrgName ( );
    HRESULT SetOrgName (
        _bstr_t bstrNewVal );
    _bstr_t GetEmail ( );
    HRESULT SetEmail (
        _bstr_t bstrNewVal );
    _bstr_t GetPhone ( );
    HRESULT SetPhone (
        _bstr_t bstrNewVal );
    _bstr_t GetAddress1 ( );
    HRESULT SetAddress1 (
        _bstr_t bstrNewVal );
    _bstr_t GetCity ( );
    HRESULT SetCity (
        _bstr_t bstrNewVal );
    _bstr_t GetState ( );
    HRESULT SetState (
        _bstr_t bstrNewVal );
    _bstr_t GetCountryCode ( );
    HRESULT SetCountryCode (
        _bstr_t bstrNewVal );
    _bstr_t GetCountryDesc ( );
    HRESULT SetCountryDesc (
        _bstr_t bstrNewVal );
    _bstr_t GetZip ( );
    HRESULT SetZip (
        _bstr_t bstrNewVal );
    unsigned long GetIsoLanguage ( );
    HRESULT SetIsoLanguage (
        unsigned long dwNewVal );
    _bstr_t GetMSUpdate ( );
    HRESULT SetMSUpdate (
        _bstr_t bstrNewVal );
    _bstr_t GetMSOffer ( );
    HRESULT SetMSOffer (
        _bstr_t bstrNewVal );
    _bstr_t GetOtherOffer ( );
    HRESULT SetOtherOffer (
        _bstr_t bstrNewVal );
    _bstr_t GetAddress2 ( );
    HRESULT SetAddress2 (
        _bstr_t bstrNewVal );
    unsigned long CheckSystemClock ( );
    DATE GetExistingExpiryDate ( );
    DATE GetNewExpiryDate ( );
    _bstr_t GetBillingFirstName ( );
    HRESULT SetBillingFirstName (
        _bstr_t bstrNewVal );
    _bstr_t GetBillingLastName ( );
    HRESULT SetBillingLastName (
        _bstr_t bstrNewVal );
    _bstr_t GetBillingPhone ( );
    HRESULT SetBillingPhone (
        _bstr_t bstrNewVal );
    _bstr_t GetBillingAddress1 ( );
    HRESULT SetBillingAddress1 (
        _bstr_t bstrNewVal );
    _bstr_t GetBillingAddress2 ( );
    HRESULT SetBillingAddress2 (
        _bstr_t bstrNewVal );
    _bstr_t GetBillingCity ( );
    HRESULT SetBillingCity (
        _bstr_t bstrNewVal );
    _bstr_t GetBillingState ( );
    HRESULT SetBillingState (
        _bstr_t bstrNewVal );
    _bstr_t GetBillingCountryCode ( );
    HRESULT SetBillingCountryCode (
        _bstr_t bstrNewVal );
    _bstr_t GetBillingZip ( );
    HRESULT SetBillingZip (
        _bstr_t bstrNewVal );
    unsigned long SaveBillingInfo (
        int bSave );
    int IsCCRenewalCountry (
        _bstr_t bstrCountryCode );
    _bstr_t GetVATLabel (
        _bstr_t bstrCountryCode );
    DATE GetCCRenewalExpiryDate ( );
    HRESULT SetVATNumber (
        _bstr_t bstrVATNumber );
    HRESULT SetCreditCardType (
        _bstr_t bstrCCCode );
    HRESULT SetCreditCardNumber (
        _bstr_t bstrCCNumber );
    HRESULT SetCreditCardExpiryYear (
        unsigned long dwCCYear );
    HRESULT SetCreditCardExpiryMonth (
        unsigned long dwCCMonth );
    unsigned long GetCreditCardCount ( );
    _bstr_t GetCreditCardCode (
        unsigned long dwIndex );
    _bstr_t GetCreditCardName (
        unsigned long dwIndex );
    _bstr_t GetVATNumber ( );
    _bstr_t GetCreditCardType ( );
    _bstr_t GetCreditCardNumber ( );
    unsigned long GetCreditCardExpiryYear ( );
    unsigned long GetCreditCardExpiryMonth ( );
    int GetDisconnectOption ( );
    HRESULT SetDisconnectOption (
        int bNewVal );
    HRESULT AsyncProcessHandshakeRequest (
        int bReviseCustInfo );
    HRESULT AsyncProcessNewLicenseRequest ( );
    HRESULT AsyncProcessReissueLicenseRequest ( );
    HRESULT AsyncProcessRetailRenewalLicenseRequest ( );
    HRESULT AsyncProcessReviseCustInfoRequest ( );
    HRESULT AsyncProcessCCRenewalPriceRequest ( );
    HRESULT AsyncProcessCCRenewalLicenseRequest ( );
    unsigned long GetAsyncProcessReturnCode ( );
    int IsUpgradeAvailable ( );
    HRESULT WantUpgrade (
        int bWantUpgrade );
    HRESULT AsyncProcessDroppedLicenseRequest ( );
    _bstr_t GenerateInstallationId ( );
    unsigned long DepositConfirmationId (
        _bstr_t bstrVal );
    int VerifyCheckDigits (
        _bstr_t bstrCIDIID );
    DATE GetCurrentExpiryDate ( );
    HRESULT CancelAsyncProcessRequest (
        int bIsLicenseRequest );
    _bstr_t GetCurrencyDescription (
        unsigned long dwCurrencyIndex );
    unsigned long GetPriceItemCount ( );
    _bstr_t GetPriceItemLabel (
        unsigned long dwIndex );
    _bstr_t GetPriceItemValue (
        unsigned long dwCurrencyIndex,
        unsigned long dwIndex );
    _bstr_t GetInvoiceText ( );
    _bstr_t GetBackendErrorMsg ( );
    unsigned long GetCurrencyOption ( );
    HRESULT SetCurrencyOption (
        unsigned long dwCurrencyOption );
    _bstr_t GetEndOfLifeHtmlText ( );
    unsigned long DisplaySSLCert ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ unsigned long dwBPC,
        /*[in]*/ unsigned long dwMode,
        /*[in]*/ BSTR bstrLicSource,
        /*[out,retval]*/ unsigned long * pdwRetCode ) = 0;
      virtual HRESULT __stdcall raw_GetFirstName (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetFirstName (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetLastName (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetLastName (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetOrgName (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetOrgName (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetEmail (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetEmail (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetPhone (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetPhone (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetAddress1 (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetAddress1 (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetCity (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetCity (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetState (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetState (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetCountryCode (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetCountryCode (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetCountryDesc (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetCountryDesc (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetZip (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetZip (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetIsoLanguage (
        /*[out,retval]*/ unsigned long * pdwVal ) = 0;
      virtual HRESULT __stdcall raw_SetIsoLanguage (
        /*[in]*/ unsigned long dwNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetMSUpdate (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetMSUpdate (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetMSOffer (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetMSOffer (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetOtherOffer (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetOtherOffer (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetAddress2 (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetAddress2 (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_CheckSystemClock (
        /*[out,retval]*/ unsigned long * pdwRetCode ) = 0;
      virtual HRESULT __stdcall raw_GetExistingExpiryDate (
        /*[out,retval]*/ DATE * pDateVal ) = 0;
      virtual HRESULT __stdcall raw_GetNewExpiryDate (
        /*[out,retval]*/ DATE * pDateVal ) = 0;
      virtual HRESULT __stdcall raw_GetBillingFirstName (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetBillingFirstName (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetBillingLastName (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetBillingLastName (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetBillingPhone (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetBillingPhone (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetBillingAddress1 (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetBillingAddress1 (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetBillingAddress2 (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetBillingAddress2 (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetBillingCity (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetBillingCity (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetBillingState (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetBillingState (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetBillingCountryCode (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetBillingCountryCode (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetBillingZip (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_SetBillingZip (
        /*[in]*/ BSTR bstrNewVal ) = 0;
      virtual HRESULT __stdcall raw_SaveBillingInfo (
        /*[in]*/ int bSave,
        /*[out,retval]*/ unsigned long * pdwRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsCCRenewalCountry (
        /*[in]*/ BSTR bstrCountryCode,
        /*[out,retval]*/ int * pbRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetVATLabel (
        /*[in]*/ BSTR bstrCountryCode,
        /*[out,retval]*/ BSTR * pbstrVATLabel ) = 0;
      virtual HRESULT __stdcall raw_GetCCRenewalExpiryDate (
        /*[out,retval]*/ DATE * pDateVal ) = 0;
      virtual HRESULT __stdcall raw_SetVATNumber (
        /*[in]*/ BSTR bstrVATNumber ) = 0;
      virtual HRESULT __stdcall raw_SetCreditCardType (
        /*[in]*/ BSTR bstrCCCode ) = 0;
      virtual HRESULT __stdcall raw_SetCreditCardNumber (
        /*[in]*/ BSTR bstrCCNumber ) = 0;
      virtual HRESULT __stdcall raw_SetCreditCardExpiryYear (
        /*[in]*/ unsigned long dwCCYear ) = 0;
      virtual HRESULT __stdcall raw_SetCreditCardExpiryMonth (
        /*[in]*/ unsigned long dwCCMonth ) = 0;
      virtual HRESULT __stdcall raw_GetCreditCardCount (
        /*[out,retval]*/ unsigned long * pdwCount ) = 0;
      virtual HRESULT __stdcall raw_GetCreditCardCode (
        /*[in]*/ unsigned long dwIndex,
        /*[out,retval]*/ BSTR * pbstrCode ) = 0;
      virtual HRESULT __stdcall raw_GetCreditCardName (
        /*[in]*/ unsigned long dwIndex,
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall raw_GetVATNumber (
        /*[out,retval]*/ BSTR * pbstrVATNumber ) = 0;
      virtual HRESULT __stdcall raw_GetCreditCardType (
        /*[out,retval]*/ BSTR * pbstrCCCode ) = 0;
      virtual HRESULT __stdcall raw_GetCreditCardNumber (
        /*[out,retval]*/ BSTR * pbstrCCNumber ) = 0;
      virtual HRESULT __stdcall raw_GetCreditCardExpiryYear (
        /*[out,retval]*/ unsigned long * pdwCCYear ) = 0;
      virtual HRESULT __stdcall raw_GetCreditCardExpiryMonth (
        /*[out,retval]*/ unsigned long * pdwCCMonth ) = 0;
      virtual HRESULT __stdcall raw_GetDisconnectOption (
        /*[out,retval]*/ int * pbRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetDisconnectOption (
        /*[in]*/ int bNewVal ) = 0;
      virtual HRESULT __stdcall raw_AsyncProcessHandshakeRequest (
        /*[in]*/ int bReviseCustInfo ) = 0;
      virtual HRESULT __stdcall raw_AsyncProcessNewLicenseRequest ( ) = 0;
      virtual HRESULT __stdcall raw_AsyncProcessReissueLicenseRequest ( ) = 0;
      virtual HRESULT __stdcall raw_AsyncProcessRetailRenewalLicenseRequest ( ) = 0;
      virtual HRESULT __stdcall raw_AsyncProcessReviseCustInfoRequest ( ) = 0;
      virtual HRESULT __stdcall raw_AsyncProcessCCRenewalPriceRequest ( ) = 0;
      virtual HRESULT __stdcall raw_AsyncProcessCCRenewalLicenseRequest ( ) = 0;
      virtual HRESULT __stdcall raw_GetAsyncProcessReturnCode (
        /*[out,retval]*/ unsigned long * pdwRetCode ) = 0;
      virtual HRESULT __stdcall raw_IsUpgradeAvailable (
        /*[out,retval]*/ int * pbUpgradeAvailable ) = 0;
      virtual HRESULT __stdcall raw_WantUpgrade (
        /*[in]*/ int bWantUpgrade ) = 0;
      virtual HRESULT __stdcall raw_AsyncProcessDroppedLicenseRequest ( ) = 0;
      virtual HRESULT __stdcall raw_GenerateInstallationId (
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_DepositConfirmationId (
        /*[in]*/ BSTR bstrVal,
        /*[out,retval]*/ unsigned long * pdwRetCode ) = 0;
      virtual HRESULT __stdcall raw_VerifyCheckDigits (
        /*[in]*/ BSTR bstrCIDIID,
        /*[out,retval]*/ int * pbValue ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentExpiryDate (
        /*[out,retval]*/ DATE * pDateVal ) = 0;
      virtual HRESULT __stdcall raw_CancelAsyncProcessRequest (
        /*[in]*/ int bIsLicenseRequest ) = 0;
      virtual HRESULT __stdcall raw_GetCurrencyDescription (
        /*[in]*/ unsigned long dwCurrencyIndex,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_GetPriceItemCount (
        /*[out,retval]*/ unsigned long * pdwCount ) = 0;
      virtual HRESULT __stdcall raw_GetPriceItemLabel (
        /*[in]*/ unsigned long dwIndex,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_GetPriceItemValue (
        /*[in]*/ unsigned long dwCurrencyIndex,
        /*[in]*/ unsigned long dwIndex,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_GetInvoiceText (
        /*[out,retval]*/ BSTR * pNewVal ) = 0;
      virtual HRESULT __stdcall raw_GetBackendErrorMsg (
        /*[out,retval]*/ BSTR * pbstrErrMsg ) = 0;
      virtual HRESULT __stdcall raw_GetCurrencyOption (
        /*[out,retval]*/ unsigned long * dwCurrencyOption ) = 0;
      virtual HRESULT __stdcall raw_SetCurrencyOption (
        /*[in]*/ unsigned long dwCurrencyOption ) = 0;
      virtual HRESULT __stdcall raw_GetEndOfLifeHtmlText (
        /*[out,retval]*/ BSTR * pbstrHtmlText ) = 0;
      virtual HRESULT __stdcall raw_DisplaySSLCert (
        /*[out,retval]*/ unsigned long * dwRetCode ) = 0;
};

struct __declspec(uuid("000c0372-0000-0000-c000-000000000046"))
IMsoEServicesDialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplicationName))
    _bstr_t ApplicationName;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetWebComponent))
    IDispatchPtr WebComponent;
    __declspec(property(get=GetClipArt))
    IDispatchPtr ClipArt;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Close (
        VARIANT_BOOL ApplyWebComponentChanges );
    HRESULT AddTrustedDomain (
        _bstr_t Domain );
    _bstr_t GetApplicationName ( );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetWebComponent ( );
    IDispatchPtr GetClipArt ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT_BOOL ApplyWebComponentChanges ) = 0;
      virtual HRESULT __stdcall raw_AddTrustedDomain (
        /*[in]*/ BSTR Domain ) = 0;
      virtual HRESULT __stdcall get_ApplicationName (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppdisp ) = 0;
      virtual HRESULT __stdcall get_WebComponent (
        /*[out,retval]*/ IDispatch * * ppdisp ) = 0;
      virtual HRESULT __stdcall get_ClipArt (
        /*[out,retval]*/ IDispatch * * ppdisp ) = 0;
};

struct __declspec(uuid("000c0373-0000-0000-c000-000000000046"))
WebComponentProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShape))
    IDispatchPtr Shape;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetURL,put=PutURL))
    _bstr_t URL;
    __declspec(property(get=GetHTML,put=PutHTML))
    _bstr_t HTML;
    __declspec(property(get=GetPreviewGraphic,put=PutPreviewGraphic))
    _bstr_t PreviewGraphic;
    __declspec(property(get=GetPreviewHTML,put=PutPreviewHTML))
    _bstr_t PreviewHTML;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetShape ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RetValue );
    _bstr_t GetURL ( );
    void PutURL (
        _bstr_t RetValue );
    _bstr_t GetHTML ( );
    void PutHTML (
        _bstr_t RetValue );
    _bstr_t GetPreviewGraphic ( );
    void PutPreviewGraphic (
        _bstr_t RetValue );
    _bstr_t GetPreviewHTML ( );
    void PutPreviewHTML (
        _bstr_t RetValue );
    long GetWidth ( );
    void PutWidth (
        long RetValue );
    long GetHeight ( );
    void PutHeight (
        long RetValue );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t RetValue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ IDispatch * * RetValue ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_URL (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_HTML (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_HTML (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_PreviewGraphic (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_PreviewGraphic (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_PreviewHTML (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_PreviewHTML (
        /*[in]*/ BSTR RetValue ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * RetValue ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long RetValue ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * RetValue ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long RetValue ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * RetValue ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR RetValue ) = 0;
};

struct __declspec(uuid("000c0377-0000-0000-c000-000000000046"))
SmartDocument : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetSolutionID,put=PutSolutionID))
    _bstr_t SolutionID;
    __declspec(property(get=GetSolutionURL,put=PutSolutionURL))
    _bstr_t SolutionURL;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSolutionID ( );
    void PutSolutionID (
        _bstr_t pbstrID );
    _bstr_t GetSolutionURL ( );
    void PutSolutionURL (
        _bstr_t pbstrUrl );
    HRESULT PickSolution (
        VARIANT_BOOL ConsiderAllSchemas );
    HRESULT RefreshPane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SolutionID (
        /*[out,retval]*/ BSTR * pbstrID ) = 0;
      virtual HRESULT __stdcall put_SolutionID (
        /*[in]*/ BSTR pbstrID ) = 0;
      virtual HRESULT __stdcall get_SolutionURL (
        /*[out,retval]*/ BSTR * pbstrUrl ) = 0;
      virtual HRESULT __stdcall put_SolutionURL (
        /*[in]*/ BSTR pbstrUrl ) = 0;
      virtual HRESULT __stdcall raw_PickSolution (
        /*[in]*/ VARIANT_BOOL ConsiderAllSchemas ) = 0;
      virtual HRESULT __stdcall raw_RefreshPane ( ) = 0;
};

struct __declspec(uuid("000c0381-0000-0000-c000-000000000046"))
SharedWorkspaceMember : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetDomainName))
    _bstr_t DomainName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetEmail))
    _bstr_t Email;
    __declspec(property(get=GetId))
    _bstr_t Id;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDomainName ( );
    _bstr_t GetName ( );
    _bstr_t GetEmail ( );
    HRESULT Delete ( );
    _bstr_t GetId ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DomainName (
        /*[out,retval]*/ BSTR * pbstrDomainName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_Email (
        /*[out,retval]*/ BSTR * pbstrEmail ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * Id ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
};

struct __declspec(uuid("000c0382-0000-0000-c000-000000000046"))
SharedWorkspaceMembers : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    SharedWorkspaceMemberPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItemCountExceeded))
    VARIANT_BOOL ItemCountExceeded;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    SharedWorkspaceMemberPtr GetItem (
        int Index );
    int GetCount ( );
    SharedWorkspaceMemberPtr Add (
        _bstr_t Email,
        _bstr_t DomainName,
        _bstr_t DisplayName,
        const _variant_t & Role = vtMissing );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetItemCountExceeded ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct SharedWorkspaceMember * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcItems ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Email,
        /*[in]*/ BSTR DomainName,
        /*[in]*/ BSTR DisplayName,
        /*[in]*/ VARIANT Role,
        /*[out,retval]*/ struct SharedWorkspaceMember * * ppMember ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_ItemCountExceeded (
        /*[out,retval]*/ VARIANT_BOOL * pf ) = 0;
};

enum MsoSharedWorkspaceTaskStatus
{
    msoSharedWorkspaceTaskStatusNotStarted = 1,
    msoSharedWorkspaceTaskStatusInProgress = 2,
    msoSharedWorkspaceTaskStatusCompleted = 3,
    msoSharedWorkspaceTaskStatusDeferred = 4,
    msoSharedWorkspaceTaskStatusWaiting = 5
};

enum MsoSharedWorkspaceTaskPriority
{
    msoSharedWorkspaceTaskPriorityHigh = 1,
    msoSharedWorkspaceTaskPriorityNormal = 2,
    msoSharedWorkspaceTaskPriorityLow = 3
};

struct __declspec(uuid("000c0379-0000-0000-c000-000000000046"))
SharedWorkspaceTask : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetAssignedTo,put=PutAssignedTo))
    _bstr_t AssignedTo;
    __declspec(property(get=GetStatus,put=PutStatus))
    enum MsoSharedWorkspaceTaskStatus Status;
    __declspec(property(get=GetPriority,put=PutPriority))
    enum MsoSharedWorkspaceTaskPriority Priority;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetDueDate,put=PutDueDate))
    _variant_t DueDate;
    __declspec(property(get=GetCreatedBy))
    _bstr_t CreatedBy;
    __declspec(property(get=GetCreatedDate))
    _variant_t CreatedDate;
    __declspec(property(get=GetModifiedBy))
    _bstr_t ModifiedBy;
    __declspec(property(get=GetModifiedDate))
    _variant_t ModifiedDate;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t Title );
    _bstr_t GetAssignedTo ( );
    void PutAssignedTo (
        _bstr_t AssignedTo );
    enum MsoSharedWorkspaceTaskStatus GetStatus ( );
    void PutStatus (
        enum MsoSharedWorkspaceTaskStatus Status );
    enum MsoSharedWorkspaceTaskPriority GetPriority ( );
    void PutPriority (
        enum MsoSharedWorkspaceTaskPriority Priority );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t Description );
    _variant_t GetDueDate ( );
    void PutDueDate (
        const _variant_t & DueDate );
    _bstr_t GetCreatedBy ( );
    _variant_t GetCreatedDate ( );
    _bstr_t GetModifiedBy ( );
    _variant_t GetModifiedDate ( );
    HRESULT Save ( );
    HRESULT Delete ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * Title ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR Title ) = 0;
      virtual HRESULT __stdcall get_AssignedTo (
        /*[out,retval]*/ BSTR * AssignedTo ) = 0;
      virtual HRESULT __stdcall put_AssignedTo (
        /*[in]*/ BSTR AssignedTo ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum MsoSharedWorkspaceTaskStatus * Status ) = 0;
      virtual HRESULT __stdcall put_Status (
        /*[in]*/ enum MsoSharedWorkspaceTaskStatus Status ) = 0;
      virtual HRESULT __stdcall get_Priority (
        /*[out,retval]*/ enum MsoSharedWorkspaceTaskPriority * Priority ) = 0;
      virtual HRESULT __stdcall put_Priority (
        /*[in]*/ enum MsoSharedWorkspaceTaskPriority Priority ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Description ) = 0;
      virtual HRESULT __stdcall get_DueDate (
        /*[out,retval]*/ VARIANT * DueDate ) = 0;
      virtual HRESULT __stdcall put_DueDate (
        /*[in]*/ VARIANT DueDate ) = 0;
      virtual HRESULT __stdcall get_CreatedBy (
        /*[out,retval]*/ BSTR * CreatedBy ) = 0;
      virtual HRESULT __stdcall get_CreatedDate (
        /*[out,retval]*/ VARIANT * CreatedDate ) = 0;
      virtual HRESULT __stdcall get_ModifiedBy (
        /*[out,retval]*/ BSTR * ModifiedBy ) = 0;
      virtual HRESULT __stdcall get_ModifiedDate (
        /*[out,retval]*/ VARIANT * ModifiedDate ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
};

struct __declspec(uuid("000c037a-0000-0000-c000-000000000046"))
SharedWorkspaceTasks : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    SharedWorkspaceTaskPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItemCountExceeded))
    VARIANT_BOOL ItemCountExceeded;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    SharedWorkspaceTaskPtr GetItem (
        int Index );
    int GetCount ( );
    SharedWorkspaceTaskPtr Add (
        _bstr_t Title,
        const _variant_t & Status = vtMissing,
        const _variant_t & Priority = vtMissing,
        const _variant_t & Assignee = vtMissing,
        const _variant_t & Description = vtMissing,
        const _variant_t & DueDate = vtMissing );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetItemCountExceeded ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct SharedWorkspaceTask * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcItems ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Title,
        /*[in]*/ VARIANT Status,
        /*[in]*/ VARIANT Priority,
        /*[in]*/ VARIANT Assignee,
        /*[in]*/ VARIANT Description,
        /*[in]*/ VARIANT DueDate,
        /*[out,retval]*/ struct SharedWorkspaceTask * * ppTask ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_ItemCountExceeded (
        /*[out,retval]*/ VARIANT_BOOL * pf ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
};

struct __declspec(uuid("000c037b-0000-0000-c000-000000000046"))
SharedWorkspaceFile : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetURL))
    _bstr_t URL;
    __declspec(property(get=GetCreatedBy))
    _bstr_t CreatedBy;
    __declspec(property(get=GetCreatedDate))
    _variant_t CreatedDate;
    __declspec(property(get=GetModifiedBy))
    _bstr_t ModifiedBy;
    __declspec(property(get=GetModifiedDate))
    _variant_t ModifiedDate;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetURL ( );
    _bstr_t GetCreatedBy ( );
    _variant_t GetCreatedDate ( );
    _bstr_t GetModifiedBy ( );
    _variant_t GetModifiedDate ( );
    HRESULT Delete ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * pbstrFilename ) = 0;
      virtual HRESULT __stdcall get_CreatedBy (
        /*[out,retval]*/ BSTR * pbstrCreatedBy ) = 0;
      virtual HRESULT __stdcall get_CreatedDate (
        /*[out,retval]*/ VARIANT * CreatedDate ) = 0;
      virtual HRESULT __stdcall get_ModifiedBy (
        /*[out,retval]*/ BSTR * pbstrModifiedBy ) = 0;
      virtual HRESULT __stdcall get_ModifiedDate (
        /*[out,retval]*/ VARIANT * ModifiedDate ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
};

struct __declspec(uuid("000c037c-0000-0000-c000-000000000046"))
SharedWorkspaceFiles : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    SharedWorkspaceFilePtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItemCountExceeded))
    VARIANT_BOOL ItemCountExceeded;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    SharedWorkspaceFilePtr GetItem (
        int Index );
    int GetCount ( );
    SharedWorkspaceFilePtr Add (
        _bstr_t FileName,
        const _variant_t & ParentFolder = vtMissing,
        const _variant_t & OverwriteIfFileAlreadyExists = vtMissing,
        const _variant_t & KeepInSync = vtMissing );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetItemCountExceeded ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct SharedWorkspaceFile * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcItems ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT ParentFolder,
        /*[in]*/ VARIANT OverwriteIfFileAlreadyExists,
        /*[in]*/ VARIANT KeepInSync,
        /*[out,retval]*/ struct SharedWorkspaceFile * * ppFile ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_ItemCountExceeded (
        /*[out,retval]*/ VARIANT_BOOL * pf ) = 0;
};

struct __declspec(uuid("000c037d-0000-0000-c000-000000000046"))
SharedWorkspaceFolder : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetFolderName))
    _bstr_t FolderName;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFolderName ( );
    HRESULT Delete (
        const _variant_t & DeleteEventIfFolderContainsFiles = vtMissing );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FolderName (
        /*[out,retval]*/ BSTR * FolderName ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT DeleteEventIfFolderContainsFiles = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
};

struct __declspec(uuid("000c037e-0000-0000-c000-000000000046"))
SharedWorkspaceFolders : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    SharedWorkspaceFolderPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItemCountExceeded))
    VARIANT_BOOL ItemCountExceeded;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    SharedWorkspaceFolderPtr GetItem (
        int Index );
    int GetCount ( );
    SharedWorkspaceFolderPtr Add (
        _bstr_t FolderName,
        const _variant_t & ParentFolder = vtMissing );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetItemCountExceeded ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct SharedWorkspaceFolder * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcItems ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR FolderName,
        /*[in]*/ VARIANT ParentFolder,
        /*[out,retval]*/ struct SharedWorkspaceFolder * * ppFolder ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_ItemCountExceeded (
        /*[out,retval]*/ VARIANT_BOOL * pf ) = 0;
};

struct __declspec(uuid("000c037f-0000-0000-c000-000000000046"))
SharedWorkspaceLink : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetURL,put=PutURL))
    _bstr_t URL;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetNotes,put=PutNotes))
    _bstr_t Notes;
    __declspec(property(get=GetCreatedBy))
    _bstr_t CreatedBy;
    __declspec(property(get=GetCreatedDate))
    _variant_t CreatedDate;
    __declspec(property(get=GetModifiedBy))
    _bstr_t ModifiedBy;
    __declspec(property(get=GetModifiedDate))
    _variant_t ModifiedDate;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetURL ( );
    void PutURL (
        _bstr_t URL );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t Description );
    _bstr_t GetNotes ( );
    void PutNotes (
        _bstr_t Notes );
    _bstr_t GetCreatedBy ( );
    _variant_t GetCreatedDate ( );
    _bstr_t GetModifiedBy ( );
    _variant_t GetModifiedDate ( );
    HRESULT Save ( );
    HRESULT Delete ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * URL ) = 0;
      virtual HRESULT __stdcall put_URL (
        /*[in]*/ BSTR URL ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Description ) = 0;
      virtual HRESULT __stdcall get_Notes (
        /*[out,retval]*/ BSTR * Notes ) = 0;
      virtual HRESULT __stdcall put_Notes (
        /*[in]*/ BSTR Notes ) = 0;
      virtual HRESULT __stdcall get_CreatedBy (
        /*[out,retval]*/ BSTR * CreatedBy ) = 0;
      virtual HRESULT __stdcall get_CreatedDate (
        /*[out,retval]*/ VARIANT * CreatedDate ) = 0;
      virtual HRESULT __stdcall get_ModifiedBy (
        /*[out,retval]*/ BSTR * ModifiedBy ) = 0;
      virtual HRESULT __stdcall get_ModifiedDate (
        /*[out,retval]*/ VARIANT * ModifiedDate ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
};

struct __declspec(uuid("000c0380-0000-0000-c000-000000000046"))
SharedWorkspaceLinks : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    SharedWorkspaceLinkPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItemCountExceeded))
    VARIANT_BOOL ItemCountExceeded;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    SharedWorkspaceLinkPtr GetItem (
        int Index );
    int GetCount ( );
    SharedWorkspaceLinkPtr Add (
        _bstr_t URL,
        const _variant_t & Description = vtMissing,
        const _variant_t & Notes = vtMissing );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetItemCountExceeded ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct SharedWorkspaceLink * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcItems ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR URL,
        /*[in]*/ VARIANT Description,
        /*[in]*/ VARIANT Notes,
        /*[out,retval]*/ struct SharedWorkspaceLink * * ppLink ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_ItemCountExceeded (
        /*[out,retval]*/ VARIANT_BOOL * pf ) = 0;
};

struct __declspec(uuid("000c0385-0000-0000-c000-000000000046"))
SharedWorkspace : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetMembers))
    SharedWorkspaceMembersPtr Members;
    __declspec(property(get=GetTasks))
    SharedWorkspaceTasksPtr Tasks;
    __declspec(property(get=GetFiles))
    SharedWorkspaceFilesPtr Files;
    __declspec(property(get=GetFolders))
    SharedWorkspaceFoldersPtr Folders;
    __declspec(property(get=GetLinks))
    SharedWorkspaceLinksPtr Links;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetURL))
    _bstr_t URL;
    __declspec(property(get=GetConnected))
    VARIANT_BOOL Connected;
    __declspec(property(get=GetLastRefreshed))
    _variant_t LastRefreshed;
    __declspec(property(get=GetSourceURL,put=PutSourceURL))
    _bstr_t SourceURL;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    SharedWorkspaceMembersPtr GetMembers ( );
    SharedWorkspaceTasksPtr GetTasks ( );
    SharedWorkspaceFilesPtr GetFiles ( );
    SharedWorkspaceFoldersPtr GetFolders ( );
    SharedWorkspaceLinksPtr GetLinks ( );
    HRESULT Refresh ( );
    HRESULT CreateNew (
        const _variant_t & URL = vtMissing,
        const _variant_t & Name = vtMissing );
    HRESULT Delete ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetURL ( );
    VARIANT_BOOL GetConnected ( );
    _variant_t GetLastRefreshed ( );
    _bstr_t GetSourceURL ( );
    void PutSourceURL (
        _bstr_t pbstrSourceURL );
    HRESULT RemoveDocument ( );
    HRESULT Disconnect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Members (
        /*[out,retval]*/ struct SharedWorkspaceMembers * * ppMembers ) = 0;
      virtual HRESULT __stdcall get_Tasks (
        /*[out,retval]*/ struct SharedWorkspaceTasks * * ppTasks ) = 0;
      virtual HRESULT __stdcall get_Files (
        /*[out,retval]*/ struct SharedWorkspaceFiles * * ppFiles ) = 0;
      virtual HRESULT __stdcall get_Folders (
        /*[out,retval]*/ struct SharedWorkspaceFolders * * ppFolders ) = 0;
      virtual HRESULT __stdcall get_Links (
        /*[out,retval]*/ struct SharedWorkspaceLinks * * ppLinks ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_CreateNew (
        /*[in]*/ VARIANT URL = vtMissing,
        /*[in]*/ VARIANT Name = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * pbstrUrl ) = 0;
      virtual HRESULT __stdcall get_Connected (
        /*[out,retval]*/ VARIANT_BOOL * pfConnected ) = 0;
      virtual HRESULT __stdcall get_LastRefreshed (
        /*[out,retval]*/ VARIANT * pvarLastRefreshed ) = 0;
      virtual HRESULT __stdcall get_SourceURL (
        /*[out,retval]*/ BSTR * pbstrSourceURL ) = 0;
      virtual HRESULT __stdcall put_SourceURL (
        /*[in]*/ BSTR pbstrSourceURL ) = 0;
      virtual HRESULT __stdcall raw_RemoveDocument ( ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
};

enum MsoSyncVersionType
{
    msoSyncVersionLastViewed = 0,
    msoSyncVersionServer = 1
};

enum MsoSyncConflictResolutionType
{
    msoSyncConflictClientWins = 0,
    msoSyncConflictServerWins = 1,
    msoSyncConflictMerge = 2
};

enum MsoSyncCompareType
{
    msoSyncCompareAndMerge = 0,
    msoSyncCompareSideBySide = 1
};

enum MsoSyncAvailableType
{
    msoSyncAvailableNone = 0,
    msoSyncAvailableOffline = 1,
    msoSyncAvailableAnywhere = 2
};

enum MsoSyncEventType
{
    msoSyncEventDownloadInitiated = 0,
    msoSyncEventDownloadSucceeded = 1,
    msoSyncEventDownloadFailed = 2,
    msoSyncEventUploadInitiated = 3,
    msoSyncEventUploadSucceeded = 4,
    msoSyncEventUploadFailed = 5,
    msoSyncEventDownloadNoChange = 6,
    msoSyncEventOffline = 7
};

enum MsoSyncErrorType
{
    msoSyncErrorNone = 0,
    msoSyncErrorUnauthorizedUser = 1,
    msoSyncErrorCouldNotConnect = 2,
    msoSyncErrorOutOfSpace = 3,
    msoSyncErrorFileNotFound = 4,
    msoSyncErrorFileTooLarge = 5,
    msoSyncErrorFileInUse = 6,
    msoSyncErrorVirusUpload = 7,
    msoSyncErrorVirusDownload = 8,
    msoSyncErrorUnknownUpload = 9,
    msoSyncErrorUnknownDownload = 10,
    msoSyncErrorCouldNotOpen = 11,
    msoSyncErrorCouldNotUpdate = 12,
    msoSyncErrorCouldNotCompare = 13,
    msoSyncErrorCouldNotResolve = 14,
    msoSyncErrorNoNetwork = 15,
    msoSyncErrorUnknown = 16
};

enum MsoSyncStatusType
{
    msoSyncStatusNoSharedWorkspace = 0,
    msoSyncStatusLatest = 1,
    msoSyncStatusNewerAvailable = 2,
    msoSyncStatusLocalChanges = 3,
    msoSyncStatusConflict = 4,
    msoSyncStatusSuspended = 5,
    msoSyncStatusError = 6
};

struct __declspec(uuid("000c0386-0000-0000-c000-000000000046"))
Sync : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetStatus))
    enum MsoSyncStatusType Status;
    __declspec(property(get=GetWorkspaceLastChangedBy))
    _bstr_t WorkspaceLastChangedBy;
    __declspec(property(get=GetLastSyncTime))
    _variant_t LastSyncTime;
    __declspec(property(get=GetErrorType))
    enum MsoSyncErrorType ErrorType;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    enum MsoSyncStatusType GetStatus ( );
    _bstr_t GetWorkspaceLastChangedBy ( );
    _variant_t GetLastSyncTime ( );
    enum MsoSyncErrorType GetErrorType ( );
    HRESULT GetUpdate ( );
    HRESULT PutUpdate ( );
    HRESULT OpenVersion (
        enum MsoSyncVersionType SyncVersionType );
    HRESULT ResolveConflict (
        enum MsoSyncConflictResolutionType SyncConflictResolution );
    HRESULT Unsuspend ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum MsoSyncStatusType * pStatusType ) = 0;
      virtual HRESULT __stdcall get_WorkspaceLastChangedBy (
        /*[out,retval]*/ BSTR * pbstrWorkspaceLastChangedBy ) = 0;
      virtual HRESULT __stdcall get_LastSyncTime (
        /*[out,retval]*/ VARIANT * pdatSavedTo ) = 0;
      virtual HRESULT __stdcall get_ErrorType (
        /*[out,retval]*/ enum MsoSyncErrorType * pErrorType ) = 0;
      virtual HRESULT __stdcall raw_GetUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_PutUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_OpenVersion (
        /*[in]*/ enum MsoSyncVersionType SyncVersionType ) = 0;
      virtual HRESULT __stdcall raw_ResolveConflict (
        /*[in]*/ enum MsoSyncConflictResolutionType SyncConflictResolution ) = 0;
      virtual HRESULT __stdcall raw_Unsuspend ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
};

struct __declspec(uuid("000c0387-0000-0000-c000-000000000046"))
DocumentLibraryVersion : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetModified))
    _variant_t Modified;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetModifiedBy))
    _bstr_t ModifiedBy;
    __declspec(property(get=GetComments))
    _bstr_t Comments;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetModified ( );
    long GetIndex ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetModifiedBy ( );
    _bstr_t GetComments ( );
    HRESULT Delete ( );
    IDispatchPtr Open ( );
    IDispatchPtr Restore ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Modified (
        /*[out,retval]*/ VARIANT * pvarDate ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * lIndex ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_ModifiedBy (
        /*[out,retval]*/ BSTR * userName ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ BSTR * Comments ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[out,retval]*/ IDispatch * * ppdispOpened ) = 0;
      virtual HRESULT __stdcall raw_Restore (
        /*[out,retval]*/ IDispatch * * ppdispOpened ) = 0;
};

struct __declspec(uuid("000c0388-0000-0000-c000-000000000046"))
DocumentLibraryVersions : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    DocumentLibraryVersionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsVersioningEnabled))
    VARIANT_BOOL IsVersioningEnabled;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    DocumentLibraryVersionPtr GetItem (
        long lIndex );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetIsVersioningEnabled ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct DocumentLibraryVersion * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * lCount ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_IsVersioningEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pvarfVersioningOn ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
};

enum MsoPermission
{
    msoPermissionView = 1,
    msoPermissionRead = 1,
    msoPermissionEdit = 2,
    msoPermissionSave = 4,
    msoPermissionExtract = 8,
    msoPermissionChange = 15,
    msoPermissionPrint = 16,
    msoPermissionObjModel = 32,
    msoPermissionFullControl = 64
};

struct __declspec(uuid("000c0375-0000-0000-c000-000000000046"))
UserPermission : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetUserId))
    _bstr_t UserId;
    __declspec(property(get=GetPermission,put=PutPermission))
    long Permission;
    __declspec(property(get=GetExpirationDate,put=PutExpirationDate))
    _variant_t ExpirationDate;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUserId ( );
    long GetPermission ( );
    void PutPermission (
        long Permission );
    _variant_t GetExpirationDate ( );
    void PutExpirationDate (
        const _variant_t & ExpirationDate );
    IDispatchPtr GetParent ( );
    HRESULT Remove ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UserId (
        /*[out,retval]*/ BSTR * UserId ) = 0;
      virtual HRESULT __stdcall get_Permission (
        /*[out,retval]*/ long * Permission ) = 0;
      virtual HRESULT __stdcall put_Permission (
        /*[in]*/ long Permission ) = 0;
      virtual HRESULT __stdcall get_ExpirationDate (
        /*[out,retval]*/ VARIANT * ExpirationDate ) = 0;
      virtual HRESULT __stdcall put_ExpirationDate (
        /*[in]*/ VARIANT ExpirationDate ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall raw_Remove ( ) = 0;
};

struct __declspec(uuid("000c0376-0000-0000-c000-000000000046"))
Permission : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    UserPermissionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnableTrustedBrowser,put=PutEnableTrustedBrowser))
    VARIANT_BOOL EnableTrustedBrowser;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetRequestPermissionURL,put=PutRequestPermissionURL))
    _bstr_t RequestPermissionURL;
    __declspec(property(get=GetPolicyName))
    _bstr_t PolicyName;
    __declspec(property(get=GetPolicyDescription))
    _bstr_t PolicyDescription;
    __declspec(property(get=GetStoreLicenses,put=PutStoreLicenses))
    VARIANT_BOOL StoreLicenses;
    __declspec(property(get=GetDocumentAuthor,put=PutDocumentAuthor))
    _bstr_t DocumentAuthor;
    __declspec(property(get=GetPermissionFromPolicy))
    VARIANT_BOOL PermissionFromPolicy;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    UserPermissionPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    VARIANT_BOOL GetEnableTrustedBrowser ( );
    void PutEnableTrustedBrowser (
        VARIANT_BOOL Enable );
    UserPermissionPtr Add (
        _bstr_t UserId,
        const _variant_t & Permission = vtMissing,
        const _variant_t & ExpirationDate = vtMissing );
    HRESULT ApplyPolicy (
        _bstr_t FileName );
    IDispatchPtr GetParent ( );
    HRESULT RemoveAll ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    _bstr_t GetRequestPermissionURL ( );
    void PutRequestPermissionURL (
        _bstr_t Contact );
    _bstr_t GetPolicyName ( );
    _bstr_t GetPolicyDescription ( );
    VARIANT_BOOL GetStoreLicenses ( );
    void PutStoreLicenses (
        VARIANT_BOOL Enabled );
    _bstr_t GetDocumentAuthor ( );
    void PutDocumentAuthor (
        _bstr_t Author );
    VARIANT_BOOL GetPermissionFromPolicy ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct UserPermission * * UserPerm ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_EnableTrustedBrowser (
        /*[out,retval]*/ VARIANT_BOOL * Enable ) = 0;
      virtual HRESULT __stdcall put_EnableTrustedBrowser (
        /*[in]*/ VARIANT_BOOL Enable ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR UserId,
        /*[in]*/ VARIANT Permission,
        /*[in]*/ VARIANT ExpirationDate,
        /*[out,retval]*/ struct UserPermission * * UserPerm ) = 0;
      virtual HRESULT __stdcall raw_ApplyPolicy (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_RequestPermissionURL (
        /*[out,retval]*/ BSTR * Contact ) = 0;
      virtual HRESULT __stdcall put_RequestPermissionURL (
        /*[in]*/ BSTR Contact ) = 0;
      virtual HRESULT __stdcall get_PolicyName (
        /*[out,retval]*/ BSTR * PolicyName ) = 0;
      virtual HRESULT __stdcall get_PolicyDescription (
        /*[out,retval]*/ BSTR * PolicyDescription ) = 0;
      virtual HRESULT __stdcall get_StoreLicenses (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_StoreLicenses (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_DocumentAuthor (
        /*[out,retval]*/ BSTR * Author ) = 0;
      virtual HRESULT __stdcall put_DocumentAuthor (
        /*[in]*/ BSTR Author ) = 0;
      virtual HRESULT __stdcall get_PermissionFromPolicy (
        /*[out,retval]*/ VARIANT_BOOL * FromPolicy ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
};

struct __declspec(uuid("000c0302-0000-0000-c000-000000000046"))
_CommandBars : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetActionControl))
    CommandBarControlPtr ActionControl;
    __declspec(property(get=GetActiveMenuBar))
    CommandBarPtr ActiveMenuBar;
    __declspec(property(get=GetItem))
    CommandBarPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetDisplayTooltips,put=PutDisplayTooltips))
    VARIANT_BOOL DisplayTooltips;
    __declspec(property(get=GetDisplayKeysInTooltips,put=PutDisplayKeysInTooltips))
    VARIANT_BOOL DisplayKeysInTooltips;
    __declspec(property(get=GetLargeButtons,put=PutLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=GetMenuAnimationStyle,put=PutMenuAnimationStyle))
    enum MsoMenuAnimation MenuAnimationStyle;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAdaptiveMenus,put=PutAdaptiveMenus))
    VARIANT_BOOL AdaptiveMenus;
    __declspec(property(get=GetDisplayFonts,put=PutDisplayFonts))
    VARIANT_BOOL DisplayFonts;
    __declspec(property(get=GetDisableCustomize,put=PutDisableCustomize))
    VARIANT_BOOL DisableCustomize;
    __declspec(property(get=GetDisableAskAQuestionDropdown,put=PutDisableAskAQuestionDropdown))
    VARIANT_BOOL DisableAskAQuestionDropdown;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    CommandBarControlPtr GetActionControl ( );
    CommandBarPtr GetActiveMenuBar ( );
    CommandBarPtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & Position = vtMissing,
        const _variant_t & MenuBar = vtMissing,
        const _variant_t & Temporary = vtMissing );
    int GetCount ( );
    VARIANT_BOOL GetDisplayTooltips ( );
    void PutDisplayTooltips (
        VARIANT_BOOL pvarfDisplayTooltips );
    VARIANT_BOOL GetDisplayKeysInTooltips ( );
    void PutDisplayKeysInTooltips (
        VARIANT_BOOL pvarfDisplayKeys );
    CommandBarControlPtr FindControl (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Tag = vtMissing,
        const _variant_t & Visible = vtMissing );
    CommandBarPtr GetItem (
        const _variant_t & Index );
    VARIANT_BOOL GetLargeButtons ( );
    void PutLargeButtons (
        VARIANT_BOOL pvarfLargeButtons );
    enum MsoMenuAnimation GetMenuAnimationStyle ( );
    void PutMenuAnimationStyle (
        enum MsoMenuAnimation pma );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetParent ( );
    HRESULT ReleaseFocus ( );
    int GetIdsString (
        int ids,
        BSTR * pbstrName );
    int GetTmcGetName (
        int tmc,
        BSTR * pbstrName );
    VARIANT_BOOL GetAdaptiveMenus ( );
    void PutAdaptiveMenus (
        VARIANT_BOOL pvarfAdaptiveMenus );
    CommandBarControlsPtr FindControls (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Tag = vtMissing,
        const _variant_t & Visible = vtMissing );
    CommandBarPtr AddEx (
        const _variant_t & TbidOrName = vtMissing,
        const _variant_t & Position = vtMissing,
        const _variant_t & MenuBar = vtMissing,
        const _variant_t & Temporary = vtMissing,
        const _variant_t & TbtrProtection = vtMissing );
    VARIANT_BOOL GetDisplayFonts ( );
    void PutDisplayFonts (
        VARIANT_BOOL pvarfDisplayFonts );
    VARIANT_BOOL GetDisableCustomize ( );
    void PutDisableCustomize (
        VARIANT_BOOL pvarfDisableCustomize );
    VARIANT_BOOL GetDisableAskAQuestionDropdown ( );
    void PutDisableAskAQuestionDropdown (
        VARIANT_BOOL pvarfDisableAskAQuestionDropdown );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActionControl (
        /*[out,retval]*/ struct CommandBarControl * * ppcbc ) = 0;
      virtual HRESULT __stdcall get_ActiveMenuBar (
        /*[out,retval]*/ struct CommandBar * * ppcb ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Position,
        /*[in]*/ VARIANT MenuBar,
        /*[in]*/ VARIANT Temporary,
        /*[out,retval]*/ struct CommandBar * * ppcb ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcToolbars ) = 0;
      virtual HRESULT __stdcall get_DisplayTooltips (
        /*[out,retval]*/ VARIANT_BOOL * pvarfDisplayTooltips ) = 0;
      virtual HRESULT __stdcall put_DisplayTooltips (
        /*[in]*/ VARIANT_BOOL pvarfDisplayTooltips ) = 0;
      virtual HRESULT __stdcall get_DisplayKeysInTooltips (
        /*[out,retval]*/ VARIANT_BOOL * pvarfDisplayKeys ) = 0;
      virtual HRESULT __stdcall put_DisplayKeysInTooltips (
        /*[in]*/ VARIANT_BOOL pvarfDisplayKeys ) = 0;
      virtual HRESULT __stdcall raw_FindControl (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Id,
        /*[in]*/ VARIANT Tag,
        /*[in]*/ VARIANT Visible,
        /*[out,retval]*/ struct CommandBarControl * * ppcbc ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CommandBar * * ppcb ) = 0;
      virtual HRESULT __stdcall get_LargeButtons (
        /*[out,retval]*/ VARIANT_BOOL * pvarfLargeButtons ) = 0;
      virtual HRESULT __stdcall put_LargeButtons (
        /*[in]*/ VARIANT_BOOL pvarfLargeButtons ) = 0;
      virtual HRESULT __stdcall get_MenuAnimationStyle (
        /*[out,retval]*/ enum MsoMenuAnimation * pma ) = 0;
      virtual HRESULT __stdcall put_MenuAnimationStyle (
        /*[in]*/ enum MsoMenuAnimation pma ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall raw_ReleaseFocus ( ) = 0;
      virtual HRESULT __stdcall get_IdsString (
        /*[in]*/ int ids,
        /*[out]*/ BSTR * pbstrName,
        /*[out,retval]*/ int * pcch ) = 0;
      virtual HRESULT __stdcall get_TmcGetName (
        /*[in]*/ int tmc,
        /*[out]*/ BSTR * pbstrName,
        /*[out,retval]*/ int * pcch ) = 0;
      virtual HRESULT __stdcall get_AdaptiveMenus (
        /*[out,retval]*/ VARIANT_BOOL * pvarfAdaptiveMenus ) = 0;
      virtual HRESULT __stdcall put_AdaptiveMenus (
        /*[in]*/ VARIANT_BOOL pvarfAdaptiveMenus ) = 0;
      virtual HRESULT __stdcall raw_FindControls (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Id,
        /*[in]*/ VARIANT Tag,
        /*[in]*/ VARIANT Visible,
        /*[out,retval]*/ struct CommandBarControls * * ppcbcs ) = 0;
      virtual HRESULT __stdcall raw_AddEx (
        /*[in]*/ VARIANT TbidOrName,
        /*[in]*/ VARIANT Position,
        /*[in]*/ VARIANT MenuBar,
        /*[in]*/ VARIANT Temporary,
        /*[in]*/ VARIANT TbtrProtection,
        /*[out,retval]*/ struct CommandBar * * ppcb ) = 0;
      virtual HRESULT __stdcall get_DisplayFonts (
        /*[out,retval]*/ VARIANT_BOOL * pvarfDisplayFonts ) = 0;
      virtual HRESULT __stdcall put_DisplayFonts (
        /*[in]*/ VARIANT_BOOL pvarfDisplayFonts ) = 0;
      virtual HRESULT __stdcall get_DisableCustomize (
        /*[out,retval]*/ VARIANT_BOOL * pvarfDisableCustomize ) = 0;
      virtual HRESULT __stdcall put_DisableCustomize (
        /*[in]*/ VARIANT_BOOL pvarfDisableCustomize ) = 0;
      virtual HRESULT __stdcall get_DisableAskAQuestionDropdown (
        /*[out,retval]*/ VARIANT_BOOL * pvarfDisableAskAQuestionDropdown ) = 0;
      virtual HRESULT __stdcall put_DisableAskAQuestionDropdown (
        /*[in]*/ VARIANT_BOOL pvarfDisableAskAQuestionDropdown ) = 0;
};

struct __declspec(uuid("000c0304-0000-0000-c000-000000000046"))
CommandBar : _IMsoOleAccDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetContext,put=PutContext))
    _bstr_t Context;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetControls))
    CommandBarControlsPtr Controls;
    __declspec(property(get=GetAdaptiveMenu,put=PutAdaptiveMenu))
    VARIANT_BOOL AdaptiveMenu;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetId))
    int Id;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetInstanceId))
    long InstanceId;
    __declspec(property(get=GetLeft,put=PutLeft))
    int Left;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum MsoBarPosition Position;
    __declspec(property(get=GetRowIndex,put=PutRowIndex))
    int RowIndex;
    __declspec(property(get=GetProtection,put=PutProtection))
    enum MsoBarProtection Protection;
    __declspec(property(get=GetTop,put=PutTop))
    int Top;
    __declspec(property(get=GetType))
    enum MsoBarType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetContext ( );
    void PutContext (
        _bstr_t pbstrContext );
    CommandBarControlsPtr GetControls ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pvarfEnabled );
    CommandBarControlPtr FindControl (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Tag = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & Recursive = vtMissing );
    int GetHeight ( );
    void PutHeight (
        int pdy );
    int GetIndex ( );
    long GetInstanceId ( );
    int GetLeft ( );
    void PutLeft (
        int pxpLeft );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pbstrName );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t pbstrNameLocal );
    IDispatchPtr GetParent ( );
    enum MsoBarPosition GetPosition ( );
    void PutPosition (
        enum MsoBarPosition ppos );
    int GetRowIndex ( );
    void PutRowIndex (
        int piRow );
    enum MsoBarProtection GetProtection ( );
    void PutProtection (
        enum MsoBarProtection pprot );
    HRESULT Reset ( );
    HRESULT ShowPopup (
        const _variant_t & x = vtMissing,
        const _variant_t & y = vtMissing );
    int GetTop ( );
    void PutTop (
        int pypTop );
    enum MsoBarType GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pvarfVisible );
    int GetWidth ( );
    void PutWidth (
        int pdx );
    VARIANT_BOOL GetAdaptiveMenu ( );
    void PutAdaptiveMenu (
        VARIANT_BOOL pvarfAdaptiveMenu );
    int GetId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * pvarfBuiltIn ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ BSTR * pbstrContext ) = 0;
      virtual HRESULT __stdcall put_Context (
        /*[in]*/ BSTR pbstrContext ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct CommandBarControls * * ppcbcs ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pvarfEnabled ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pvarfEnabled ) = 0;
      virtual HRESULT __stdcall raw_FindControl (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Id,
        /*[in]*/ VARIANT Tag,
        /*[in]*/ VARIANT Visible,
        /*[in]*/ VARIANT Recursive,
        /*[out,retval]*/ struct CommandBarControl * * ppcbc ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pdy ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ int pdy ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * pi ) = 0;
      virtual HRESULT __stdcall get_InstanceId (
        /*[out,retval]*/ long * pid ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ int * pxpLeft ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ int pxpLeft ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstrName ) = 0;
      virtual HRESULT __stdcall get_NameLocal (
        /*[out,retval]*/ BSTR * pbstrNameLocal ) = 0;
      virtual HRESULT __stdcall put_NameLocal (
        /*[in]*/ BSTR pbstrNameLocal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum MsoBarPosition * ppos ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum MsoBarPosition ppos ) = 0;
      virtual HRESULT __stdcall get_RowIndex (
        /*[out,retval]*/ int * piRow ) = 0;
      virtual HRESULT __stdcall put_RowIndex (
        /*[in]*/ int piRow ) = 0;
      virtual HRESULT __stdcall get_Protection (
        /*[out,retval]*/ enum MsoBarProtection * pprot ) = 0;
      virtual HRESULT __stdcall put_Protection (
        /*[in]*/ enum MsoBarProtection pprot ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_ShowPopup (
        /*[in]*/ VARIANT x = vtMissing,
        /*[in]*/ VARIANT y = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ int * pypTop ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ int pypTop ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoBarType * ptype ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pvarfVisible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pvarfVisible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pdx ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ int pdx ) = 0;
      virtual HRESULT __stdcall get_AdaptiveMenu (
        /*[out,retval]*/ VARIANT_BOOL * pvarfAdaptiveMenu ) = 0;
      virtual HRESULT __stdcall put_AdaptiveMenu (
        /*[in]*/ VARIANT_BOOL pvarfAdaptiveMenu ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ int * pid ) = 0;
};

struct __declspec(uuid("000c0308-0000-0000-c000-000000000046"))
CommandBarControl : _IMsoOleAccDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetBeginGroup,put=PutBeginGroup))
    VARIANT_BOOL BeginGroup;
    __declspec(property(get=GetIsPriorityDropped))
    VARIANT_BOOL IsPriorityDropped;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetControl))
    IDispatchPtr Control;
    __declspec(property(get=GetDescriptionText,put=PutDescriptionText))
    _bstr_t DescriptionText;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GetHelpContextId,put=PutHelpContextId))
    int HelpContextId;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetId))
    int Id;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetInstanceId))
    long InstanceId;
    __declspec(property(get=GetLeft))
    int Left;
    __declspec(property(get=GetOLEUsage,put=PutOLEUsage))
    enum MsoControlOLEUsage OLEUsage;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetParent))
    CommandBarPtr Parent;
    __declspec(property(get=GetParameter,put=PutParameter))
    _bstr_t Parameter;
    __declspec(property(get=GetPriority,put=PutPriority))
    int Priority;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetTooltipText,put=PutTooltipText))
    _bstr_t TooltipText;
    __declspec(property(get=GetTop))
    int Top;
    __declspec(property(get=GetType))
    enum MsoControlType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBeginGroup ( );
    void PutBeginGroup (
        VARIANT_BOOL pvarfBeginGroup );
    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t pbstrCaption );
    IDispatchPtr GetControl ( );
    CommandBarControlPtr Copy (
        const _variant_t & Bar = vtMissing,
        const _variant_t & Before = vtMissing );
    HRESULT Delete (
        const _variant_t & Temporary = vtMissing );
    _bstr_t GetDescriptionText ( );
    void PutDescriptionText (
        _bstr_t pbstrText );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pvarfEnabled );
    HRESULT Execute ( );
    int GetHeight ( );
    void PutHeight (
        int pdy );
    int GetHelpContextId ( );
    void PutHelpContextId (
        int pid );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t pbstrFilename );
    int GetId ( );
    int GetIndex ( );
    long GetInstanceId ( );
    CommandBarControlPtr Move (
        const _variant_t & Bar = vtMissing,
        const _variant_t & Before = vtMissing );
    int GetLeft ( );
    enum MsoControlOLEUsage GetOLEUsage ( );
    void PutOLEUsage (
        enum MsoControlOLEUsage pcou );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t pbstrOnAction );
    CommandBarPtr GetParent ( );
    _bstr_t GetParameter ( );
    void PutParameter (
        _bstr_t pbstrParam );
    int GetPriority ( );
    void PutPriority (
        int pnPri );
    HRESULT Reset ( );
    HRESULT SetFocus ( );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t pbstrTag );
    _bstr_t GetTooltipText ( );
    void PutTooltipText (
        _bstr_t pbstrTooltip );
    int GetTop ( );
    enum MsoControlType GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pvarfVisible );
    int GetWidth ( );
    void PutWidth (
        int pdx );
    VARIANT_BOOL GetIsPriorityDropped ( );
    HRESULT Reserved1 ( );
    HRESULT Reserved2 ( );
    HRESULT Reserved3 ( );
    HRESULT Reserved4 ( );
    HRESULT Reserved5 ( );
    HRESULT Reserved6 ( );
    HRESULT Reserved7 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BeginGroup (
        /*[out,retval]*/ VARIANT_BOOL * pvarfBeginGroup ) = 0;
      virtual HRESULT __stdcall put_BeginGroup (
        /*[in]*/ VARIANT_BOOL pvarfBeginGroup ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * pvarfBuiltIn ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * pbstrCaption ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR pbstrCaption ) = 0;
      virtual HRESULT __stdcall get_Control (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Bar,
        /*[in]*/ VARIANT Before,
        /*[out,retval]*/ struct CommandBarControl * * ppcbc ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT Temporary = vtMissing ) = 0;
      virtual HRESULT __stdcall get_DescriptionText (
        /*[out,retval]*/ BSTR * pbstrText ) = 0;
      virtual HRESULT __stdcall put_DescriptionText (
        /*[in]*/ BSTR pbstrText ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pvarfEnabled ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pvarfEnabled ) = 0;
      virtual HRESULT __stdcall raw_Execute ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * pdy ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ int pdy ) = 0;
      virtual HRESULT __stdcall get_HelpContextId (
        /*[out,retval]*/ int * pid ) = 0;
      virtual HRESULT __stdcall put_HelpContextId (
        /*[in]*/ int pid ) = 0;
      virtual HRESULT __stdcall get_HelpFile (
        /*[out,retval]*/ BSTR * pbstrFilename ) = 0;
      virtual HRESULT __stdcall put_HelpFile (
        /*[in]*/ BSTR pbstrFilename ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ int * pid ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * pi ) = 0;
      virtual HRESULT __stdcall get_InstanceId (
        /*[out,retval]*/ long * pid ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Bar,
        /*[in]*/ VARIANT Before,
        /*[out,retval]*/ struct CommandBarControl * * ppcbc ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ int * px ) = 0;
      virtual HRESULT __stdcall get_OLEUsage (
        /*[out,retval]*/ enum MsoControlOLEUsage * pcou ) = 0;
      virtual HRESULT __stdcall put_OLEUsage (
        /*[in]*/ enum MsoControlOLEUsage pcou ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * pbstrOnAction ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR pbstrOnAction ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct CommandBar * * ppcb ) = 0;
      virtual HRESULT __stdcall get_Parameter (
        /*[out,retval]*/ BSTR * pbstrParam ) = 0;
      virtual HRESULT __stdcall put_Parameter (
        /*[in]*/ BSTR pbstrParam ) = 0;
      virtual HRESULT __stdcall get_Priority (
        /*[out,retval]*/ int * pnPri ) = 0;
      virtual HRESULT __stdcall put_Priority (
        /*[in]*/ int pnPri ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_SetFocus ( ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * pbstrTag ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR pbstrTag ) = 0;
      virtual HRESULT __stdcall get_TooltipText (
        /*[out,retval]*/ BSTR * pbstrTooltip ) = 0;
      virtual HRESULT __stdcall put_TooltipText (
        /*[in]*/ BSTR pbstrTooltip ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ int * py ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoControlType * ptype ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pvarfVisible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pvarfVisible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * pdx ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ int pdx ) = 0;
      virtual HRESULT __stdcall get_IsPriorityDropped (
        /*[out,retval]*/ VARIANT_BOOL * pvarfDropped ) = 0;
      virtual HRESULT __stdcall raw_Reserved1 ( ) = 0;
      virtual HRESULT __stdcall raw_Reserved2 ( ) = 0;
      virtual HRESULT __stdcall raw_Reserved3 ( ) = 0;
      virtual HRESULT __stdcall raw_Reserved4 ( ) = 0;
      virtual HRESULT __stdcall raw_Reserved5 ( ) = 0;
      virtual HRESULT __stdcall raw_Reserved6 ( ) = 0;
      virtual HRESULT __stdcall raw_Reserved7 ( ) = 0;
};

struct __declspec(uuid("000c0306-0000-0000-c000-000000000046"))
CommandBarControls : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    CommandBarControlPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetParent))
    CommandBarPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    CommandBarControlPtr Add (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Parameter = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Temporary = vtMissing );
    int GetCount ( );
    CommandBarControlPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    CommandBarPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Id,
        /*[in]*/ VARIANT Parameter,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT Temporary,
        /*[out,retval]*/ struct CommandBarControl * * ppcbc ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcToolbarControls ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CommandBarControl * * ppcbc ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct CommandBar * * ppcb ) = 0;
};

struct __declspec(uuid("000c030e-0000-0000-c000-000000000046"))
_CommandBarButton : CommandBarControl
{
    //
    // Property data
    //

    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetFaceId,put=PutFaceId))
    int FaceId;
    __declspec(property(get=GetShortcutText,put=PutShortcutText))
    _bstr_t ShortcutText;
    __declspec(property(get=GetState,put=PutState))
    enum MsoButtonState State;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum MsoButtonStyle Style;
    __declspec(property(get=GetHyperlinkType,put=PutHyperlinkType))
    enum MsoCommandBarButtonHyperlinkType HyperlinkType;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL pvarfBuiltIn );
    HRESULT CopyFace ( );
    int GetFaceId ( );
    void PutFaceId (
        int pid );
    HRESULT PasteFace ( );
    _bstr_t GetShortcutText ( );
    void PutShortcutText (
        _bstr_t pbstrText );
    enum MsoButtonState GetState ( );
    void PutState (
        enum MsoButtonState pstate );
    enum MsoButtonStyle GetStyle ( );
    void PutStyle (
        enum MsoButtonStyle pstyle );
    enum MsoCommandBarButtonHyperlinkType GetHyperlinkType ( );
    void PutHyperlinkType (
        enum MsoCommandBarButtonHyperlinkType phlType );
    IPictureDisp * GetPicture ( );
    void PutPicture (
        IPictureDisp * ppdispPicture );
    IPictureDisp * GetMask ( );
    void PutMask (
        IPictureDisp * ppipictdispMask );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BuiltInFace (
        /*[out,retval]*/ VARIANT_BOOL * pvarfBuiltIn ) = 0;
      virtual HRESULT __stdcall put_BuiltInFace (
        /*[in]*/ VARIANT_BOOL pvarfBuiltIn ) = 0;
      virtual HRESULT __stdcall raw_CopyFace ( ) = 0;
      virtual HRESULT __stdcall get_FaceId (
        /*[out,retval]*/ int * pid ) = 0;
      virtual HRESULT __stdcall put_FaceId (
        /*[in]*/ int pid ) = 0;
      virtual HRESULT __stdcall raw_PasteFace ( ) = 0;
      virtual HRESULT __stdcall get_ShortcutText (
        /*[out,retval]*/ BSTR * pbstrText ) = 0;
      virtual HRESULT __stdcall put_ShortcutText (
        /*[in]*/ BSTR pbstrText ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum MsoButtonState * pstate ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum MsoButtonState pstate ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum MsoButtonStyle * pstyle ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum MsoButtonStyle pstyle ) = 0;
      virtual HRESULT __stdcall get_HyperlinkType (
        /*[out,retval]*/ enum MsoCommandBarButtonHyperlinkType * phlType ) = 0;
      virtual HRESULT __stdcall put_HyperlinkType (
        /*[in]*/ enum MsoCommandBarButtonHyperlinkType phlType ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ IPictureDisp * * ppdispPicture ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ IPictureDisp * ppdispPicture ) = 0;
      virtual HRESULT __stdcall get_Mask (
        /*[out,retval]*/ IPictureDisp * * ppipictdispMask ) = 0;
      virtual HRESULT __stdcall put_Mask (
        /*[in]*/ IPictureDisp * ppipictdispMask ) = 0;
};

struct __declspec(uuid("000c030a-0000-0000-c000-000000000046"))
CommandBarPopup : CommandBarControl
{
    //
    // Property data
    //

    __declspec(property(get=GetCommandBar))
    CommandBarPtr CommandBar;
    __declspec(property(get=GetControls))
    CommandBarControlsPtr Controls;
    __declspec(property(get=GetOLEMenuGroup,put=PutOLEMenuGroup))
    enum MsoOLEMenuGroup OLEMenuGroup;

    //
    // Wrapper methods for error-handling
    //

    CommandBarPtr GetCommandBar ( );
    CommandBarControlsPtr GetControls ( );
    enum MsoOLEMenuGroup GetOLEMenuGroup ( );
    void PutOLEMenuGroup (
        enum MsoOLEMenuGroup pomg );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CommandBar (
        /*[out,retval]*/ struct CommandBar * * ppcb ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct CommandBarControls * * ppcbcs ) = 0;
      virtual HRESULT __stdcall get_OLEMenuGroup (
        /*[out,retval]*/ enum MsoOLEMenuGroup * pomg ) = 0;
      virtual HRESULT __stdcall put_OLEMenuGroup (
        /*[in]*/ enum MsoOLEMenuGroup pomg ) = 0;
};

struct __declspec(uuid("000c030c-0000-0000-c000-000000000046"))
_CommandBarComboBox : CommandBarControl
{
    //
    // Property data
    //

    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    int DropDownLines;
    __declspec(property(get=GetDropDownWidth,put=PutDropDownWidth))
    int DropDownWidth;
    __declspec(property(get=GetList,put=PutList))
    _bstr_t List[];
    __declspec(property(get=GetListCount))
    int ListCount;
    __declspec(property(get=GetListHeaderCount,put=PutListHeaderCount))
    int ListHeaderCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    int ListIndex;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum MsoComboStyle Style;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddItem (
        _bstr_t Text,
        const _variant_t & Index = vtMissing );
    HRESULT Clear ( );
    int GetDropDownLines ( );
    void PutDropDownLines (
        int pcLines );
    int GetDropDownWidth ( );
    void PutDropDownWidth (
        int pdx );
    _bstr_t GetList (
        int Index );
    void PutList (
        int Index,
        _bstr_t pbstrItem );
    int GetListCount ( );
    int GetListHeaderCount ( );
    void PutListHeaderCount (
        int pcItems );
    int GetListIndex ( );
    void PutListIndex (
        int pi );
    HRESULT RemoveItem (
        int Index );
    enum MsoComboStyle GetStyle ( );
    void PutStyle (
        enum MsoComboStyle pstyle );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pbstrText );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT Index = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ int * pcLines ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ int pcLines ) = 0;
      virtual HRESULT __stdcall get_DropDownWidth (
        /*[out,retval]*/ int * pdx ) = 0;
      virtual HRESULT __stdcall put_DropDownWidth (
        /*[in]*/ int pdx ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ int Index,
        /*[out,retval]*/ BSTR * pbstrItem ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ int Index,
        /*[in]*/ BSTR pbstrItem ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ int * pcItems ) = 0;
      virtual HRESULT __stdcall get_ListHeaderCount (
        /*[out,retval]*/ int * pcItems ) = 0;
      virtual HRESULT __stdcall put_ListHeaderCount (
        /*[in]*/ int pcItems ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ int * pi ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ int pi ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum MsoComboStyle * pstyle ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum MsoComboStyle pstyle ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pbstrText ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pbstrText ) = 0;
};

struct __declspec(uuid("000c030d-0000-0000-c000-000000000046"))
_CommandBarActiveX : CommandBarControl
{
    //
    // Property data
    //

    __declspec(property(get=GetControlCLSID,put=PutControlCLSID))
    _bstr_t ControlCLSID;
    __declspec(property(get=GetQueryControlInterface))
    IUnknownPtr QueryControlInterface[];
    __declspec(property(put=PutInitWith))
    IUnknownPtr InitWith;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetControlCLSID ( );
    void PutControlCLSID (
        _bstr_t pbstrClsid );
    IUnknownPtr GetQueryControlInterface (
        _bstr_t bstrIid );
    HRESULT SetInnerObjectFactory (
        IUnknown * pUnk );
    HRESULT EnsureControl ( );
    void PutInitWith (
        IUnknown * _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ControlCLSID (
        /*[out,retval]*/ BSTR * pbstrClsid ) = 0;
      virtual HRESULT __stdcall put_ControlCLSID (
        /*[in]*/ BSTR pbstrClsid ) = 0;
      virtual HRESULT __stdcall get_QueryControlInterface (
        /*[in]*/ BSTR bstrIid,
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall raw_SetInnerObjectFactory (
        /*[in]*/ IUnknown * pUnk ) = 0;
      virtual HRESULT __stdcall raw_EnsureControl ( ) = 0;
      virtual HRESULT __stdcall put_InitWith (
        /*[in]*/ IUnknown * _arg1 ) = 0;
};

struct __declspec(uuid("000c0313-0000-0000-c000-000000000046"))
ConnectorFormat : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    int BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum MsoTriState EndConnected;
    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    int EndConnectionSite;
    __declspec(property(get=GetType,put=PutType))
    enum MsoConnectorType Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite );
    HRESULT EndDisconnect ( );
    enum MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    int GetBeginConnectionSite ( );
    enum MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    int GetEndConnectionSite ( );
    enum MsoConnectorType GetType ( );
    void PutType (
        enum MsoConnectorType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_BeginConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ int ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_BeginDisconnect ( ) = 0;
      virtual HRESULT __stdcall raw_EndConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ int ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_EndDisconnect ( ) = 0;
      virtual HRESULT __stdcall get_BeginConnected (
        /*[out,retval]*/ enum MsoTriState * BeginConnected ) = 0;
      virtual HRESULT __stdcall get_BeginConnectedShape (
        /*[out,retval]*/ struct Shape * * BeginConnectedShape ) = 0;
      virtual HRESULT __stdcall get_BeginConnectionSite (
        /*[out,retval]*/ int * BeginConnectionSite ) = 0;
      virtual HRESULT __stdcall get_EndConnected (
        /*[out,retval]*/ enum MsoTriState * EndConnected ) = 0;
      virtual HRESULT __stdcall get_EndConnectedShape (
        /*[out,retval]*/ struct Shape * * EndConnectedShape ) = 0;
      virtual HRESULT __stdcall get_EndConnectionSite (
        /*[out,retval]*/ int * EndConnectionSite ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoConnectorType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum MsoConnectorType Type ) = 0;
};

struct __declspec(uuid("000c0315-0000-0000-c000-000000000046"))
FreeformBuilder : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum MsoSegmentType SegmentType,
        enum MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    ShapePtr ConvertToShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddNodes (
        /*[in]*/ enum MsoSegmentType SegmentType,
        /*[in]*/ enum MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ float X2,
        /*[in]*/ float Y2,
        /*[in]*/ float X3,
        /*[in]*/ float Y3 ) = 0;
      virtual HRESULT __stdcall raw_ConvertToShape (
        /*[out,retval]*/ struct Shape * * Freeform ) = 0;
};

struct __declspec(uuid("000c0316-0000-0000-c000-000000000046"))
GroupShapes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapeRangePtr Range (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pnShapes ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * Range ) = 0;
};

struct __declspec(uuid("000c031c-0000-0000-c000-000000000046"))
Shape : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetAutoShapeType,put=PutAutoShapeType))
    enum MsoAutoShapeType AutoShapeType;
    __declspec(property(get=GetBlackWhiteMode,put=PutBlackWhiteMode))
    enum MsoBlackWhiteMode BlackWhiteMode;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    int ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHorizontalFlip))
    enum MsoTriState HorizontalFlip;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    enum MsoTriState LockAspectRatio;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    enum MsoShapeType Type;
    __declspec(property(get=GetVerticalFlip))
    enum MsoTriState VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetScript))
    ScriptPtr Script;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetHasDiagram))
    enum MsoTriState HasDiagram;
    __declspec(property(get=GetDiagram))
    IMsoDiagramPtr Diagram;
    __declspec(property(get=GetHasDiagramNode))
    enum MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetChild))
    enum MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetId))
    int Id;
    __declspec(property(put=PutRTF))
    _bstr_t RTF;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    ShapePtr Duplicate ( );
    HRESULT Flip (
        enum MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale );
    HRESULT ScaleWidth (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    enum MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum MsoAutoShapeType AutoShapeType );
    enum MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum MsoBlackWhiteMode BlackWhiteMode );
    CalloutFormatPtr GetCallout ( );
    int GetConnectionSiteCount ( );
    enum MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float Height );
    enum MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    LineFormatPtr GetLine ( );
    enum MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum MsoTriState LockAspectRatio );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float Rotation );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float Top );
    enum MsoShapeType GetType ( );
    enum MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    ScriptPtr GetScript ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );
    enum MsoTriState GetHasDiagram ( );
    IMsoDiagramPtr GetDiagram ( );
    enum MsoTriState GetHasDiagramNode ( );
    DiagramNodePtr GetDiagramNode ( );
    enum MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    CanvasShapesPtr GetCanvasItems ( );
    int GetId ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
    void PutRTF (
        _bstr_t _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct Shape * * Duplicate ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * Ungroup ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * Adjustments ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum MsoAutoShapeType * AutoShapeType ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum MsoAutoShapeType AutoShapeType ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum MsoBlackWhiteMode * BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum MsoBlackWhiteMode BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * Callout ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ int * ConnectionSiteCount ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum MsoTriState * Connector ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * ConnectorFormat ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * Fill ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * GroupItems ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum MsoTriState * HorizontalFlip ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * Line ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum MsoTriState * LockAspectRatio ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum MsoTriState LockAspectRatio ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * Nodes ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * Rotation ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float Rotation ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * Picture ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * Shadow ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * TextEffect ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * TextFrame ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * ThreeD ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoShapeType * Type ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum MsoTriState * VerticalFlip ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * Vertices ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ int * ZOrderPosition ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ struct Script * * Script ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * AlternativeText ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR AlternativeText ) = 0;
      virtual HRESULT __stdcall get_HasDiagram (
        /*[out,retval]*/ enum MsoTriState * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct IMsoDiagram * * Diagram ) = 0;
      virtual HRESULT __stdcall get_HasDiagramNode (
        /*[out,retval]*/ enum MsoTriState * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_DiagramNode (
        /*[out,retval]*/ struct DiagramNode * * DiagramNode ) = 0;
      virtual HRESULT __stdcall get_Child (
        /*[out,retval]*/ enum MsoTriState * Child ) = 0;
      virtual HRESULT __stdcall get_ParentGroup (
        /*[out,retval]*/ struct Shape * * Parent ) = 0;
      virtual HRESULT __stdcall get_CanvasItems (
        /*[out,retval]*/ struct CanvasShapes * * CanvasShapes ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ int * pid ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropRight (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropBottom (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall put_RTF (
        /*[in]*/ BSTR _arg1 ) = 0;
};

struct __declspec(uuid("000c031d-0000-0000-c000-000000000046"))
ShapeRange : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetAutoShapeType,put=PutAutoShapeType))
    enum MsoAutoShapeType AutoShapeType;
    __declspec(property(get=GetBlackWhiteMode,put=PutBlackWhiteMode))
    enum MsoBlackWhiteMode BlackWhiteMode;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    int ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHorizontalFlip))
    enum MsoTriState HorizontalFlip;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    enum MsoTriState LockAspectRatio;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    enum MsoShapeType Type;
    __declspec(property(get=GetVerticalFlip))
    enum MsoTriState VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum MsoTriState Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetScript))
    ScriptPtr Script;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetHasDiagram))
    enum MsoTriState HasDiagram;
    __declspec(property(get=GetDiagram))
    IMsoDiagramPtr Diagram;
    __declspec(property(get=GetHasDiagramNode))
    enum MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetChild))
    enum MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetId))
    int Id;
    __declspec(property(put=PutRTF))
    _bstr_t RTF;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Align (
        enum MsoAlignCmd AlignCmd,
        enum MsoTriState RelativeTo );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Distribute (
        enum MsoDistributeCmd DistributeCmd,
        enum MsoTriState RelativeTo );
    ShapeRangePtr Duplicate ( );
    HRESULT Flip (
        enum MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    ShapePtr Group ( );
    HRESULT PickUp ( );
    ShapePtr Regroup ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale );
    HRESULT ScaleWidth (
        float Factor,
        enum MsoTriState RelativeToOriginalSize,
        enum MsoScaleFrom fScale );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    enum MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum MsoAutoShapeType AutoShapeType );
    enum MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum MsoBlackWhiteMode BlackWhiteMode );
    CalloutFormatPtr GetCallout ( );
    int GetConnectionSiteCount ( );
    enum MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float Height );
    enum MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    LineFormatPtr GetLine ( );
    enum MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum MsoTriState LockAspectRatio );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float Rotation );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float Top );
    enum MsoShapeType GetType ( );
    enum MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum MsoTriState GetVisible ( );
    void PutVisible (
        enum MsoTriState Visible );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    ScriptPtr GetScript ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );
    enum MsoTriState GetHasDiagram ( );
    IMsoDiagramPtr GetDiagram ( );
    enum MsoTriState GetHasDiagramNode ( );
    DiagramNodePtr GetDiagramNode ( );
    enum MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    CanvasShapesPtr GetCanvasItems ( );
    int GetId ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
    void PutRTF (
        _bstr_t _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_Align (
        /*[in]*/ enum MsoAlignCmd AlignCmd,
        /*[in]*/ enum MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Distribute (
        /*[in]*/ enum MsoDistributeCmd DistributeCmd,
        /*[in]*/ enum MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct ShapeRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct Shape * * Group ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_Regroup (
        /*[out,retval]*/ struct Shape * * Regroup ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * Ungroup ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * Adjustments ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum MsoAutoShapeType * AutoShapeType ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum MsoAutoShapeType AutoShapeType ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum MsoBlackWhiteMode * BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum MsoBlackWhiteMode BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * Callout ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ int * ConnectionSiteCount ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum MsoTriState * Connector ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * ConnectorFormat ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * Fill ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * GroupItems ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum MsoTriState * HorizontalFlip ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * Line ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum MsoTriState * LockAspectRatio ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum MsoTriState LockAspectRatio ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * Nodes ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * Rotation ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float Rotation ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * Picture ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * Shadow ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * TextEffect ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * TextFrame ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * ThreeD ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoShapeType * Type ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum MsoTriState * VerticalFlip ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * Vertices ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ int * ZOrderPosition ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ struct Script * * Script ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * AlternativeText ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR AlternativeText ) = 0;
      virtual HRESULT __stdcall get_HasDiagram (
        /*[out,retval]*/ enum MsoTriState * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct IMsoDiagram * * Diagram ) = 0;
      virtual HRESULT __stdcall get_HasDiagramNode (
        /*[out,retval]*/ enum MsoTriState * pHasDiagram ) = 0;
      virtual HRESULT __stdcall get_DiagramNode (
        /*[out,retval]*/ struct DiagramNode * * DiagramNode ) = 0;
      virtual HRESULT __stdcall get_Child (
        /*[out,retval]*/ enum MsoTriState * Child ) = 0;
      virtual HRESULT __stdcall get_ParentGroup (
        /*[out,retval]*/ struct Shape * * Parent ) = 0;
      virtual HRESULT __stdcall get_CanvasItems (
        /*[out,retval]*/ struct CanvasShapes * * CanvasShapes ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ int * pid ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropRight (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropBottom (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall put_RTF (
        /*[in]*/ BSTR _arg1 ) = 0;
};

struct __declspec(uuid("000c031e-0000-0000-c000-000000000046"))
Shapes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetBackground))
    ShapePtr Background;
    __declspec(property(get=GetDefault))
    ShapePtr Default;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t FileName,
        enum MsoTriState LinkToFile,
        enum MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum MsoTriState FontBold,
        enum MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr Range (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr GetBackground ( );
    ShapePtr GetDefault ( );
    ShapePtr AddDiagram (
        enum MsoDiagramType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddCanvas (
        float Left,
        float Top,
        float Width,
        float Height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_AddCallout (
        /*[in]*/ enum MsoCalloutType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Callout ) = 0;
      virtual HRESULT __stdcall raw_AddConnector (
        /*[in]*/ enum MsoConnectorType Type,
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Connector ) = 0;
      virtual HRESULT __stdcall raw_AddCurve (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Curve ) = 0;
      virtual HRESULT __stdcall raw_AddLabel (
        /*[in]*/ enum MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Label ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Line ) = 0;
      virtual HRESULT __stdcall raw_AddPicture (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum MsoTriState LinkToFile,
        /*[in]*/ enum MsoTriState SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Picture ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Polyline ) = 0;
      virtual HRESULT __stdcall raw_AddShape (
        /*[in]*/ enum MsoAutoShapeType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall raw_AddTextEffect (
        /*[in]*/ enum MsoPresetTextEffect PresetTextEffect,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR FontName,
        /*[in]*/ float FontSize,
        /*[in]*/ enum MsoTriState FontBold,
        /*[in]*/ enum MsoTriState FontItalic,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[out,retval]*/ struct Shape * * TextEffect ) = 0;
      virtual HRESULT __stdcall raw_AddTextbox (
        /*[in]*/ enum MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Textbox ) = 0;
      virtual HRESULT __stdcall raw_BuildFreeform (
        /*[in]*/ enum MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[out,retval]*/ struct FreeformBuilder * * FreeformBuilder ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * Range ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct Shape * * Background ) = 0;
      virtual HRESULT __stdcall get_Default (
        /*[out,retval]*/ struct Shape * * Default ) = 0;
      virtual HRESULT __stdcall raw_AddDiagram (
        /*[in]*/ enum MsoDiagramType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Diagram ) = 0;
      virtual HRESULT __stdcall raw_AddCanvas (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
};

struct __declspec(uuid("000c0371-0000-0000-c000-000000000046"))
CanvasShapes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetBackground))
    ShapePtr Background;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t FileName,
        enum MsoTriState LinkToFile,
        enum MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum MsoTriState FontBold,
        enum MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr Range (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr GetBackground ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_AddCallout (
        /*[in]*/ enum MsoCalloutType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Callout ) = 0;
      virtual HRESULT __stdcall raw_AddConnector (
        /*[in]*/ enum MsoConnectorType Type,
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Connector ) = 0;
      virtual HRESULT __stdcall raw_AddCurve (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Curve ) = 0;
      virtual HRESULT __stdcall raw_AddLabel (
        /*[in]*/ enum MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Label ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Line ) = 0;
      virtual HRESULT __stdcall raw_AddPicture (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum MsoTriState LinkToFile,
        /*[in]*/ enum MsoTriState SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Picture ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Polyline ) = 0;
      virtual HRESULT __stdcall raw_AddShape (
        /*[in]*/ enum MsoAutoShapeType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall raw_AddTextEffect (
        /*[in]*/ enum MsoPresetTextEffect PresetTextEffect,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR FontName,
        /*[in]*/ float FontSize,
        /*[in]*/ enum MsoTriState FontBold,
        /*[in]*/ enum MsoTriState FontItalic,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[out,retval]*/ struct Shape * * TextEffect ) = 0;
      virtual HRESULT __stdcall raw_AddTextbox (
        /*[in]*/ enum MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Textbox ) = 0;
      virtual HRESULT __stdcall raw_BuildFreeform (
        /*[in]*/ enum MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[out,retval]*/ struct FreeformBuilder * * FreeformBuilder ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * Range ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct Shape * * Background ) = 0;
};

struct __declspec(uuid("000c0332-0000-0000-c000-000000000046"))
FileSearch : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetSearchSubFolders,put=PutSearchSubFolders))
    VARIANT_BOOL SearchSubFolders;
    __declspec(property(get=GetMatchTextExactly,put=PutMatchTextExactly))
    VARIANT_BOOL MatchTextExactly;
    __declspec(property(get=GetMatchAllWordForms,put=PutMatchAllWordForms))
    VARIANT_BOOL MatchAllWordForms;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetFileType,put=PutFileType))
    enum MsoFileType FileType;
    __declspec(property(get=GetLastModified,put=PutLastModified))
    enum MsoLastModified LastModified;
    __declspec(property(get=GetTextOrProperty,put=PutTextOrProperty))
    _bstr_t TextOrProperty;
    __declspec(property(get=GetLookIn,put=PutLookIn))
    _bstr_t LookIn;
    __declspec(property(get=GetFoundFiles))
    FoundFilesPtr FoundFiles;
    __declspec(property(get=GetPropertyTests))
    PropertyTestsPtr PropertyTests;
    __declspec(property(get=GetSearchScopes))
    SearchScopesPtr SearchScopes;
    __declspec(property(get=GetSearchFolders))
    SearchFoldersPtr SearchFolders;
    __declspec(property(get=GetFileTypes))
    FileTypesPtr FileTypes;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetSearchSubFolders ( );
    void PutSearchSubFolders (
        VARIANT_BOOL SearchSubFoldersRetVal );
    VARIANT_BOOL GetMatchTextExactly ( );
    void PutMatchTextExactly (
        VARIANT_BOOL MatchTextRetVal );
    VARIANT_BOOL GetMatchAllWordForms ( );
    void PutMatchAllWordForms (
        VARIANT_BOOL MatchAllWordFormsRetVal );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t FileNameRetVal );
    enum MsoFileType GetFileType ( );
    void PutFileType (
        enum MsoFileType FileTypeRetVal );
    enum MsoLastModified GetLastModified ( );
    void PutLastModified (
        enum MsoLastModified LastModifiedRetVal );
    _bstr_t GetTextOrProperty ( );
    void PutTextOrProperty (
        _bstr_t TextOrProperty );
    _bstr_t GetLookIn ( );
    void PutLookIn (
        _bstr_t LookInRetVal );
    int Execute (
        enum MsoSortBy SortBy,
        enum MsoSortOrder SortOrder,
        VARIANT_BOOL AlwaysAccurate );
    HRESULT NewSearch ( );
    FoundFilesPtr GetFoundFiles ( );
    PropertyTestsPtr GetPropertyTests ( );
    SearchScopesPtr GetSearchScopes ( );
    SearchFoldersPtr GetSearchFolders ( );
    FileTypesPtr GetFileTypes ( );
    HRESULT RefreshScopes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SearchSubFolders (
        /*[out,retval]*/ VARIANT_BOOL * SearchSubFoldersRetVal ) = 0;
      virtual HRESULT __stdcall put_SearchSubFolders (
        /*[in]*/ VARIANT_BOOL SearchSubFoldersRetVal ) = 0;
      virtual HRESULT __stdcall get_MatchTextExactly (
        /*[out,retval]*/ VARIANT_BOOL * MatchTextRetVal ) = 0;
      virtual HRESULT __stdcall put_MatchTextExactly (
        /*[in]*/ VARIANT_BOOL MatchTextRetVal ) = 0;
      virtual HRESULT __stdcall get_MatchAllWordForms (
        /*[out,retval]*/ VARIANT_BOOL * MatchAllWordFormsRetVal ) = 0;
      virtual HRESULT __stdcall put_MatchAllWordForms (
        /*[in]*/ VARIANT_BOOL MatchAllWordFormsRetVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * FileNameRetVal ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR FileNameRetVal ) = 0;
      virtual HRESULT __stdcall get_FileType (
        /*[out,retval]*/ enum MsoFileType * FileTypeRetVal ) = 0;
      virtual HRESULT __stdcall put_FileType (
        /*[in]*/ enum MsoFileType FileTypeRetVal ) = 0;
      virtual HRESULT __stdcall get_LastModified (
        /*[out,retval]*/ enum MsoLastModified * LastModifiedRetVal ) = 0;
      virtual HRESULT __stdcall put_LastModified (
        /*[in]*/ enum MsoLastModified LastModifiedRetVal ) = 0;
      virtual HRESULT __stdcall get_TextOrProperty (
        /*[out,retval]*/ BSTR * TextOrProperty ) = 0;
      virtual HRESULT __stdcall put_TextOrProperty (
        /*[in]*/ BSTR TextOrProperty ) = 0;
      virtual HRESULT __stdcall get_LookIn (
        /*[out,retval]*/ BSTR * LookInRetVal ) = 0;
      virtual HRESULT __stdcall put_LookIn (
        /*[in]*/ BSTR LookInRetVal ) = 0;
      virtual HRESULT __stdcall raw_Execute (
        /*[in]*/ enum MsoSortBy SortBy,
        /*[in]*/ enum MsoSortOrder SortOrder,
        /*[in]*/ VARIANT_BOOL AlwaysAccurate,
        /*[out,retval]*/ int * pRet ) = 0;
      virtual HRESULT __stdcall raw_NewSearch ( ) = 0;
      virtual HRESULT __stdcall get_FoundFiles (
        /*[out,retval]*/ struct FoundFiles * * FoundFilesRet ) = 0;
      virtual HRESULT __stdcall get_PropertyTests (
        /*[out,retval]*/ struct PropertyTests * * PropTestsRet ) = 0;
      virtual HRESULT __stdcall get_SearchScopes (
        /*[out,retval]*/ struct SearchScopes * * SearchScopesRet ) = 0;
      virtual HRESULT __stdcall get_SearchFolders (
        /*[out,retval]*/ struct SearchFolders * * SearchFoldersRet ) = 0;
      virtual HRESULT __stdcall get_FileTypes (
        /*[out,retval]*/ struct FileTypes * * FileTypesRet ) = 0;
      virtual HRESULT __stdcall raw_RefreshScopes ( ) = 0;
};

struct __declspec(uuid("000c036a-0000-0000-c000-000000000046"))
SearchFolders : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ScopeFolderPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ScopeFolderPtr GetItem (
        int Index );
    int GetCount ( );
    HRESULT Add (
        struct ScopeFolder * ScopeFolder );
    HRESULT Remove (
        int Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct ScopeFolder * * ScopeFolderRet ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * iCountRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct ScopeFolder * ScopeFolder ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
};

struct __declspec(uuid("000c0369-0000-0000-c000-000000000046"))
ScopeFolders : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ScopeFolderPtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ScopeFolderPtr GetItem (
        int Index );
    int GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct ScopeFolder * * ScopeFolderRet ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * iCountRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
};

struct __declspec(uuid("000c0368-0000-0000-c000-000000000046"))
ScopeFolder : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetScopeFolders))
    ScopeFoldersPtr ScopeFolders;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    ScopeFoldersPtr GetScopeFolders ( );
    HRESULT AddToSearchFolders ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pbstrPath ) = 0;
      virtual HRESULT __stdcall get_ScopeFolders (
        /*[out,retval]*/ struct ScopeFolders * * ScopeFoldersRet ) = 0;
      virtual HRESULT __stdcall raw_AddToSearchFolders ( ) = 0;
};

struct __declspec(uuid("000c0367-0000-0000-c000-000000000046"))
SearchScope : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum MsoSearchIn Type;
    __declspec(property(get=GetScopeFolder))
    ScopeFolderPtr ScopeFolder;

    //
    // Wrapper methods for error-handling
    //

    enum MsoSearchIn GetType ( );
    ScopeFolderPtr GetScopeFolder ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoSearchIn * MsoSearchInRetVal ) = 0;
      virtual HRESULT __stdcall get_ScopeFolder (
        /*[out,retval]*/ struct ScopeFolder * * ScopeFolderRet ) = 0;
};

struct __declspec(uuid("000c0366-0000-0000-c000-000000000046"))
SearchScopes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    SearchScopePtr Item[];
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    SearchScopePtr GetItem (
        int Index );
    int GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct SearchScope * * SearchScopeRet ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * iCountRetVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
};

struct __declspec(uuid("000c036d-0000-0000-c000-000000000046"))
IMsoDiagram : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNodes))
    DiagramNodesPtr Nodes;
    __declspec(property(get=GetType))
    enum MsoDiagramType Type;
    __declspec(property(get=GetAutoLayout,put=PutAutoLayout))
    enum MsoTriState AutoLayout;
    __declspec(property(get=GetReverse,put=PutReverse))
    enum MsoTriState Reverse;
    __declspec(property(get=GetAutoFormat,put=PutAutoFormat))
    enum MsoTriState AutoFormat;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    DiagramNodesPtr GetNodes ( );
    enum MsoDiagramType GetType ( );
    enum MsoTriState GetAutoLayout ( );
    void PutAutoLayout (
        enum MsoTriState AutoLayout );
    enum MsoTriState GetReverse ( );
    void PutReverse (
        enum MsoTriState Reverse );
    enum MsoTriState GetAutoFormat ( );
    void PutAutoFormat (
        enum MsoTriState AutoFormat );
    HRESULT Convert (
        enum MsoDiagramType Type );
    HRESULT FitText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct DiagramNodes * * Nodes ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum MsoDiagramType * Type ) = 0;
      virtual HRESULT __stdcall get_AutoLayout (
        /*[out,retval]*/ enum MsoTriState * AutoLayout ) = 0;
      virtual HRESULT __stdcall put_AutoLayout (
        /*[in]*/ enum MsoTriState AutoLayout ) = 0;
      virtual HRESULT __stdcall get_Reverse (
        /*[out,retval]*/ enum MsoTriState * Reverse ) = 0;
      virtual HRESULT __stdcall put_Reverse (
        /*[in]*/ enum MsoTriState Reverse ) = 0;
      virtual HRESULT __stdcall get_AutoFormat (
        /*[out,retval]*/ enum MsoTriState * AutoFormat ) = 0;
      virtual HRESULT __stdcall put_AutoFormat (
        /*[in]*/ enum MsoTriState AutoFormat ) = 0;
      virtual HRESULT __stdcall raw_Convert (
        /*[in]*/ enum MsoDiagramType Type ) = 0;
      virtual HRESULT __stdcall raw_FitText ( ) = 0;
};

struct __declspec(uuid("000c036e-0000-0000-c000-000000000046"))
DiagramNodes : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DiagramNode * * ppdn ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * iDiagramNodes ) = 0;
};

struct __declspec(uuid("000c036f-0000-0000-c000-000000000046"))
DiagramNodeChildren : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetFirstChild))
    DiagramNodePtr FirstChild;
    __declspec(property(get=GetLastChild))
    DiagramNodePtr LastChild;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    DiagramNodePtr AddNode (
        const _variant_t & Index,
        enum MsoDiagramNodeType NodeType );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    DiagramNodePtr GetFirstChild ( );
    DiagramNodePtr GetLastChild ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DiagramNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_AddNode (
        /*[in]*/ VARIANT Index,
        /*[in]*/ enum MsoDiagramNodeType NodeType,
        /*[out,retval]*/ struct DiagramNode * * NewNode ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * iDiagramNodes ) = 0;
      virtual HRESULT __stdcall get_FirstChild (
        /*[out,retval]*/ struct DiagramNode * * First ) = 0;
      virtual HRESULT __stdcall get_LastChild (
        /*[out,retval]*/ struct DiagramNode * * Last ) = 0;
};

struct __declspec(uuid("000c0370-0000-0000-c000-000000000046"))
DiagramNode : _IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChildren))
    DiagramNodeChildrenPtr Children;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetRoot))
    DiagramNodePtr Root;
    __declspec(property(get=GetDiagram))
    IMsoDiagramPtr Diagram;
    __declspec(property(get=GetLayout,put=PutLayout))
    enum MsoOrgChartLayoutType Layout;
    __declspec(property(get=GetTextShape))
    ShapePtr TextShape;

    //
    // Wrapper methods for error-handling
    //

    DiagramNodePtr AddNode (
        enum MsoRelativeNodePosition Pos,
        enum MsoDiagramNodeType NodeType );
    HRESULT Delete ( );
    HRESULT MoveNode (
        struct DiagramNode * TargetNode,
        enum MsoRelativeNodePosition Pos );
    HRESULT ReplaceNode (
        struct DiagramNode * TargetNode );
    HRESULT SwapNode (
        struct DiagramNode * TargetNode,
        VARIANT_BOOL SwapChildren );
    DiagramNodePtr CloneNode (
        VARIANT_BOOL CopyChildren,
        struct DiagramNode * TargetNode,
        enum MsoRelativeNodePosition Pos );
    HRESULT TransferChildren (
        struct DiagramNode * ReceivingNode );
    DiagramNodePtr NextNode ( );
    DiagramNodePtr PrevNode ( );
    IDispatchPtr GetParent ( );
    DiagramNodeChildrenPtr GetChildren ( );
    ShapePtr GetShape ( );
    DiagramNodePtr GetRoot ( );
    IMsoDiagramPtr GetDiagram ( );
    enum MsoOrgChartLayoutType GetLayout ( );
    void PutLayout (
        enum MsoOrgChartLayoutType Type );
    ShapePtr GetTextShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddNode (
        /*[in]*/ enum MsoRelativeNodePosition Pos,
        /*[in]*/ enum MsoDiagramNodeType NodeType,
        /*[out,retval]*/ struct DiagramNode * * NewNode ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_MoveNode (
        /*[in]*/ struct DiagramNode * TargetNode,
        /*[in]*/ enum MsoRelativeNodePosition Pos ) = 0;
      virtual HRESULT __stdcall raw_ReplaceNode (
        /*[in]*/ struct DiagramNode * TargetNode ) = 0;
      virtual HRESULT __stdcall raw_SwapNode (
        /*[in]*/ struct DiagramNode * TargetNode,
        /*[in]*/ VARIANT_BOOL SwapChildren ) = 0;
      virtual HRESULT __stdcall raw_CloneNode (
        /*[in]*/ VARIANT_BOOL CopyChildren,
        /*[in]*/ struct DiagramNode * TargetNode,
        /*[in]*/ enum MsoRelativeNodePosition Pos,
        /*[out,retval]*/ struct DiagramNode * * Node ) = 0;
      virtual HRESULT __stdcall raw_TransferChildren (
        /*[in]*/ struct DiagramNode * ReceivingNode ) = 0;
      virtual HRESULT __stdcall raw_NextNode (
        /*[out,retval]*/ struct DiagramNode * * NextNode ) = 0;
      virtual HRESULT __stdcall raw_PrevNode (
        /*[out,retval]*/ struct DiagramNode * * PrevNode ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct DiagramNodeChildren * * Children ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct DiagramNode * * Root ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct IMsoDiagram * * Diagram ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum MsoOrgChartLayoutType * Type ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum MsoOrgChartLayoutType Type ) = 0;
      virtual HRESULT __stdcall get_TextShape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_Office =
    {0x2df8d04c,0x5bfa,0x101b,{0xbd,0xe5,0x00,0xaa,0x00,0x44,0xde,0x52}};
extern "C" const GUID __declspec(selectany) IID_IAccessible =
    {0x618736e0,0x3c3d,0x11cf,{0x81,0x0c,0x00,0xaa,0x00,0x38,0x9b,0x71}};
extern "C" const GUID __declspec(selectany) IID__IMsoDispObj =
    {0x000c0300,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__IMsoOleAccDispObj =
    {0x000c0301,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Adjustments =
    {0x000c0310,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_CalloutFormat =
    {0x000c0311,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ColorFormat =
    {0x000c0312,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_FillFormat =
    {0x000c0314,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_LineFormat =
    {0x000c0317,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ShapeNode =
    {0x000c0318,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ShapeNodes =
    {0x000c0319,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_PictureFormat =
    {0x000c031a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ShadowFormat =
    {0x000c031b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Script =
    {0x000c0341,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Scripts =
    {0x000c0340,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_TextEffectFormat =
    {0x000c031f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_TextFrame =
    {0x000c0320,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ThreeDFormat =
    {0x000c0321,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IMsoDispCagNotifySink =
    {0x000c0359,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Balloon =
    {0x000c0324,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_BalloonCheckboxes =
    {0x000c0326,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_BalloonCheckbox =
    {0x000c0328,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_BalloonLabels =
    {0x000c032e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_BalloonLabel =
    {0x000c0330,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_AnswerWizardFiles =
    {0x000c0361,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_AnswerWizard =
    {0x000c0360,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_DocumentProperty =
    {0x2df8d04e,0x5bfa,0x101b,{0xbd,0xe5,0x00,0xaa,0x00,0x44,0xde,0x52}};
extern "C" const GUID __declspec(selectany) IID_DocumentProperties =
    {0x2df8d04d,0x5bfa,0x101b,{0xbd,0xe5,0x00,0xaa,0x00,0x44,0xde,0x52}};
extern "C" const GUID __declspec(selectany) IID_IFoundFiles =
    {0x000c0338,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IFind =
    {0x000c0337,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_FoundFiles =
    {0x000c0331,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_PropertyTest =
    {0x000c0333,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_PropertyTests =
    {0x000c0334,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_COMAddIn =
    {0x000c033a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_COMAddIns =
    {0x000c0339,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_LanguageSettings =
    {0x000c0353,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICommandBarsEvents =
    {0x55f88892,0x7708,0x11d1,{0xac,0xeb,0x00,0x60,0x08,0x96,0x1d,0xa5}};
extern "C" const GUID __declspec(selectany) DIID__CommandBarsEvents =
    {0x000c0352,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_CommandBars =
    {0x55f88893,0x7708,0x11d1,{0xac,0xeb,0x00,0x60,0x08,0x96,0x1d,0xa5}};
extern "C" const GUID __declspec(selectany) DIID__CommandBarComboBoxEvents =
    {0x000c0354,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_CommandBarComboBox =
    {0x55f88897,0x7708,0x11d1,{0xac,0xeb,0x00,0x60,0x08,0x96,0x1d,0xa5}};
extern "C" const GUID __declspec(selectany) IID_ICommandBarComboBoxEvents =
    {0x55f88896,0x7708,0x11d1,{0xac,0xeb,0x00,0x60,0x08,0x96,0x1d,0xa5}};
extern "C" const GUID __declspec(selectany) DIID__CommandBarButtonEvents =
    {0x000c0351,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_CommandBarButton =
    {0x55f88891,0x7708,0x11d1,{0xac,0xeb,0x00,0x60,0x08,0x96,0x1d,0xa5}};
extern "C" const GUID __declspec(selectany) IID_ICommandBarButtonEvents =
    {0x55f88890,0x7708,0x11d1,{0xac,0xeb,0x00,0x60,0x08,0x96,0x1d,0xa5}};
extern "C" const GUID __declspec(selectany) IID_WebPageFont =
    {0x000c0913,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_WebPageFonts =
    {0x000c0914,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_HTMLProjectItem =
    {0x000c0358,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_HTMLProjectItems =
    {0x000c0357,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_HTMLProject =
    {0x000c0356,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_MsoDebugOptions =
    {0x000c035a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_FileDialogSelectedItems =
    {0x000c0363,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_FileDialogFilter =
    {0x000c0364,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_FileDialogFilters =
    {0x000c0365,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_FileDialog =
    {0x000c0362,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Signature =
    {0x000c0411,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SignatureSet =
    {0x000c0410,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IMsoEnvelopeVB =
    {0x000672ac,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_IMsoEnvelopeVBEvents =
    {0x000672ad,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_MsoEnvelope =
    {0x0006f01a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Assistant =
    {0x000c0322,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_FileTypes =
    {0x000c036c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_OfficeDataSourceObject =
    {0x000c1530,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ODSOColumn =
    {0x000c1531,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ODSOColumns =
    {0x000c1532,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ODSOFilter =
    {0x000c1533,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ODSOFilters =
    {0x000c1534,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_NewFile =
    {0x000c0936,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_WebComponent =
    {0x000cd100,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_WebComponentWindowExternal =
    {0x000cd101,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_WebComponentFormat =
    {0x000cd102,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ILicWizExternal =
    {0x4cac6328,0xb9b0,0x11d3,{0x8d,0x59,0x00,0x50,0x04,0x83,0x84,0xe3}};
extern "C" const GUID __declspec(selectany) IID_ILicValidator =
    {0x919aa22c,0xb9ad,0x11d3,{0x8d,0x59,0x00,0x50,0x04,0x83,0x84,0xe3}};
extern "C" const GUID __declspec(selectany) IID_ILicAgent =
    {0x00194002,0xd9c3,0x11d3,{0x8d,0x59,0x00,0x50,0x04,0x83,0x84,0xe3}};
extern "C" const GUID __declspec(selectany) IID_IMsoEServicesDialog =
    {0x000c0372,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_WebComponentProperties =
    {0x000c0373,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SmartDocument =
    {0x000c0377,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SharedWorkspaceMember =
    {0x000c0381,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SharedWorkspaceMembers =
    {0x000c0382,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SharedWorkspaceTask =
    {0x000c0379,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SharedWorkspaceTasks =
    {0x000c037a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SharedWorkspaceFile =
    {0x000c037b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SharedWorkspaceFiles =
    {0x000c037c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SharedWorkspaceFolder =
    {0x000c037d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SharedWorkspaceFolders =
    {0x000c037e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SharedWorkspaceLink =
    {0x000c037f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SharedWorkspaceLinks =
    {0x000c0380,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SharedWorkspace =
    {0x000c0385,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Sync =
    {0x000c0386,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_DocumentLibraryVersion =
    {0x000c0387,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_DocumentLibraryVersions =
    {0x000c0388,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_UserPermission =
    {0x000c0375,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Permission =
    {0x000c0376,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__CommandBars =
    {0x000c0302,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_CommandBar =
    {0x000c0304,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_CommandBarControl =
    {0x000c0308,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_CommandBarControls =
    {0x000c0306,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__CommandBarButton =
    {0x000c030e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_CommandBarPopup =
    {0x000c030a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__CommandBarComboBox =
    {0x000c030c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__CommandBarActiveX =
    {0x000c030d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ConnectorFormat =
    {0x000c0313,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_FreeformBuilder =
    {0x000c0315,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_GroupShapes =
    {0x000c0316,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Shape =
    {0x000c031c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ShapeRange =
    {0x000c031d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Shapes =
    {0x000c031e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_CanvasShapes =
    {0x000c0371,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_FileSearch =
    {0x000c0332,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SearchFolders =
    {0x000c036a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ScopeFolders =
    {0x000c0369,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ScopeFolder =
    {0x000c0368,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SearchScope =
    {0x000c0367,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_SearchScopes =
    {0x000c0366,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IMsoDiagram =
    {0x000c036d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_DiagramNodes =
    {0x000c036e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_DiagramNodeChildren =
    {0x000c036f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_DiagramNode =
    {0x000c0370,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};

//
// Function implementation mapping
//

#pragma start_map_region("c:\qsyncher_v2\code\components\outlookaccess\debug\mso.tli")
__declspec(implementation_key(1)) IDispatchPtr IAccessible::GetaccParent ( );
__declspec(implementation_key(2)) long IAccessible::GetaccChildCount ( );
__declspec(implementation_key(3)) IDispatchPtr IAccessible::GetaccChild ( const _variant_t & varChild );
__declspec(implementation_key(4)) _bstr_t IAccessible::GetaccName ( const _variant_t & varChild );
__declspec(implementation_key(5)) _bstr_t IAccessible::GetaccValue ( const _variant_t & varChild );
__declspec(implementation_key(6)) _bstr_t IAccessible::GetaccDescription ( const _variant_t & varChild );
__declspec(implementation_key(7)) _variant_t IAccessible::GetaccRole ( const _variant_t & varChild );
__declspec(implementation_key(8)) _variant_t IAccessible::GetaccState ( const _variant_t & varChild );
__declspec(implementation_key(9)) _bstr_t IAccessible::GetaccHelp ( const _variant_t & varChild );
__declspec(implementation_key(10)) long IAccessible::GetaccHelpTopic ( BSTR * pszHelpFile, const _variant_t & varChild );
__declspec(implementation_key(11)) _bstr_t IAccessible::GetaccKeyboardShortcut ( const _variant_t & varChild );
__declspec(implementation_key(12)) _variant_t IAccessible::GetaccFocus ( );
__declspec(implementation_key(13)) _variant_t IAccessible::GetaccSelection ( );
__declspec(implementation_key(14)) _bstr_t IAccessible::GetaccDefaultAction ( const _variant_t & varChild );
__declspec(implementation_key(15)) HRESULT IAccessible::accSelect ( long flagsSelect, const _variant_t & varChild );
__declspec(implementation_key(16)) HRESULT IAccessible::accLocation ( long * pxLeft, long * pyTop, long * pcxWidth, long * pcyHeight, const _variant_t & varChild );
__declspec(implementation_key(17)) _variant_t IAccessible::accNavigate ( long navDir, const _variant_t & varStart );
__declspec(implementation_key(18)) _variant_t IAccessible::accHitTest ( long xLeft, long yTop );
__declspec(implementation_key(19)) HRESULT IAccessible::accDoDefaultAction ( const _variant_t & varChild );
__declspec(implementation_key(20)) void IAccessible::PutaccName ( const _variant_t & varChild, _bstr_t pszName );
__declspec(implementation_key(21)) void IAccessible::PutaccValue ( const _variant_t & varChild, _bstr_t pszValue );
__declspec(implementation_key(22)) IDispatchPtr _IMsoDispObj::GetApplication ( );
__declspec(implementation_key(23)) long _IMsoDispObj::GetCreator ( );
__declspec(implementation_key(24)) IDispatchPtr _IMsoOleAccDispObj::GetApplication ( );
__declspec(implementation_key(25)) long _IMsoOleAccDispObj::GetCreator ( );
__declspec(implementation_key(26)) IDispatchPtr Adjustments::GetParent ( );
__declspec(implementation_key(27)) int Adjustments::GetCount ( );
__declspec(implementation_key(28)) float Adjustments::GetItem ( int Index );
__declspec(implementation_key(29)) void Adjustments::PutItem ( int Index, float Val );
__declspec(implementation_key(30)) IDispatchPtr CalloutFormat::GetParent ( );
__declspec(implementation_key(31)) HRESULT CalloutFormat::AutomaticLength ( );
__declspec(implementation_key(32)) HRESULT CalloutFormat::CustomDrop ( float Drop );
__declspec(implementation_key(33)) HRESULT CalloutFormat::CustomLength ( float Length );
__declspec(implementation_key(34)) HRESULT CalloutFormat::PresetDrop ( enum MsoCalloutDropType DropType );
__declspec(implementation_key(35)) enum MsoTriState CalloutFormat::GetAccent ( );
__declspec(implementation_key(36)) void CalloutFormat::PutAccent ( enum MsoTriState Accent );
__declspec(implementation_key(37)) enum MsoCalloutAngleType CalloutFormat::GetAngle ( );
__declspec(implementation_key(38)) void CalloutFormat::PutAngle ( enum MsoCalloutAngleType Angle );
__declspec(implementation_key(39)) enum MsoTriState CalloutFormat::GetAutoAttach ( );
__declspec(implementation_key(40)) void CalloutFormat::PutAutoAttach ( enum MsoTriState AutoAttach );
__declspec(implementation_key(41)) enum MsoTriState CalloutFormat::GetAutoLength ( );
__declspec(implementation_key(42)) enum MsoTriState CalloutFormat::GetBorder ( );
__declspec(implementation_key(43)) void CalloutFormat::PutBorder ( enum MsoTriState Border );
__declspec(implementation_key(44)) float CalloutFormat::GetDrop ( );
__declspec(implementation_key(45)) enum MsoCalloutDropType CalloutFormat::GetDropType ( );
__declspec(implementation_key(46)) float CalloutFormat::GetGap ( );
__declspec(implementation_key(47)) void CalloutFormat::PutGap ( float Gap );
__declspec(implementation_key(48)) float CalloutFormat::GetLength ( );
__declspec(implementation_key(49)) enum MsoCalloutType CalloutFormat::GetType ( );
__declspec(implementation_key(50)) void CalloutFormat::PutType ( enum MsoCalloutType Type );
__declspec(implementation_key(51)) IDispatchPtr ColorFormat::GetParent ( );
__declspec(implementation_key(52)) MsoRGBType ColorFormat::GetRGB ( );
__declspec(implementation_key(53)) void ColorFormat::PutRGB ( MsoRGBType RGB );
__declspec(implementation_key(54)) int ColorFormat::GetSchemeColor ( );
__declspec(implementation_key(55)) void ColorFormat::PutSchemeColor ( int SchemeColor );
__declspec(implementation_key(56)) enum MsoColorType ColorFormat::GetType ( );
__declspec(implementation_key(57)) float ColorFormat::GetTintAndShade ( );
__declspec(implementation_key(58)) void ColorFormat::PutTintAndShade ( float pValue );
__declspec(implementation_key(59)) IDispatchPtr FillFormat::GetParent ( );
__declspec(implementation_key(60)) HRESULT FillFormat::Background ( );
__declspec(implementation_key(61)) HRESULT FillFormat::OneColorGradient ( enum MsoGradientStyle Style, int Variant, float Degree );
__declspec(implementation_key(62)) HRESULT FillFormat::Patterned ( enum MsoPatternType Pattern );
__declspec(implementation_key(63)) HRESULT FillFormat::PresetGradient ( enum MsoGradientStyle Style, int Variant, enum MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(64)) HRESULT FillFormat::PresetTextured ( enum MsoPresetTexture PresetTexture );
__declspec(implementation_key(65)) HRESULT FillFormat::Solid ( );
__declspec(implementation_key(66)) HRESULT FillFormat::TwoColorGradient ( enum MsoGradientStyle Style, int Variant );
__declspec(implementation_key(67)) HRESULT FillFormat::UserPicture ( _bstr_t PictureFile );
__declspec(implementation_key(68)) HRESULT FillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(69)) ColorFormatPtr FillFormat::GetBackColor ( );
__declspec(implementation_key(70)) void FillFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(71)) ColorFormatPtr FillFormat::GetForeColor ( );
__declspec(implementation_key(72)) void FillFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(73)) enum MsoGradientColorType FillFormat::GetGradientColorType ( );
__declspec(implementation_key(74)) float FillFormat::GetGradientDegree ( );
__declspec(implementation_key(75)) enum MsoGradientStyle FillFormat::GetGradientStyle ( );
__declspec(implementation_key(76)) int FillFormat::GetGradientVariant ( );
__declspec(implementation_key(77)) enum MsoPatternType FillFormat::GetPattern ( );
__declspec(implementation_key(78)) enum MsoPresetGradientType FillFormat::GetPresetGradientType ( );
__declspec(implementation_key(79)) enum MsoPresetTexture FillFormat::GetPresetTexture ( );
__declspec(implementation_key(80)) _bstr_t FillFormat::GetTextureName ( );
__declspec(implementation_key(81)) enum MsoTextureType FillFormat::GetTextureType ( );
__declspec(implementation_key(82)) float FillFormat::GetTransparency ( );
__declspec(implementation_key(83)) void FillFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(84)) enum MsoFillType FillFormat::GetType ( );
__declspec(implementation_key(85)) enum MsoTriState FillFormat::GetVisible ( );
__declspec(implementation_key(86)) void FillFormat::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(87)) IDispatchPtr LineFormat::GetParent ( );
__declspec(implementation_key(88)) ColorFormatPtr LineFormat::GetBackColor ( );
__declspec(implementation_key(89)) void LineFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(90)) enum MsoArrowheadLength LineFormat::GetBeginArrowheadLength ( );
__declspec(implementation_key(91)) void LineFormat::PutBeginArrowheadLength ( enum MsoArrowheadLength BeginArrowheadLength );
__declspec(implementation_key(92)) enum MsoArrowheadStyle LineFormat::GetBeginArrowheadStyle ( );
__declspec(implementation_key(93)) void LineFormat::PutBeginArrowheadStyle ( enum MsoArrowheadStyle BeginArrowheadStyle );
__declspec(implementation_key(94)) enum MsoArrowheadWidth LineFormat::GetBeginArrowheadWidth ( );
__declspec(implementation_key(95)) void LineFormat::PutBeginArrowheadWidth ( enum MsoArrowheadWidth BeginArrowheadWidth );
__declspec(implementation_key(96)) enum MsoLineDashStyle LineFormat::GetDashStyle ( );
__declspec(implementation_key(97)) void LineFormat::PutDashStyle ( enum MsoLineDashStyle DashStyle );
__declspec(implementation_key(98)) enum MsoArrowheadLength LineFormat::GetEndArrowheadLength ( );
__declspec(implementation_key(99)) void LineFormat::PutEndArrowheadLength ( enum MsoArrowheadLength EndArrowheadLength );
__declspec(implementation_key(100)) enum MsoArrowheadStyle LineFormat::GetEndArrowheadStyle ( );
__declspec(implementation_key(101)) void LineFormat::PutEndArrowheadStyle ( enum MsoArrowheadStyle EndArrowheadStyle );
__declspec(implementation_key(102)) enum MsoArrowheadWidth LineFormat::GetEndArrowheadWidth ( );
__declspec(implementation_key(103)) void LineFormat::PutEndArrowheadWidth ( enum MsoArrowheadWidth EndArrowheadWidth );
__declspec(implementation_key(104)) ColorFormatPtr LineFormat::GetForeColor ( );
__declspec(implementation_key(105)) void LineFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(106)) enum MsoPatternType LineFormat::GetPattern ( );
__declspec(implementation_key(107)) void LineFormat::PutPattern ( enum MsoPatternType Pattern );
__declspec(implementation_key(108)) enum MsoLineStyle LineFormat::GetStyle ( );
__declspec(implementation_key(109)) void LineFormat::PutStyle ( enum MsoLineStyle Style );
__declspec(implementation_key(110)) float LineFormat::GetTransparency ( );
__declspec(implementation_key(111)) void LineFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(112)) enum MsoTriState LineFormat::GetVisible ( );
__declspec(implementation_key(113)) void LineFormat::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(114)) float LineFormat::GetWeight ( );
__declspec(implementation_key(115)) void LineFormat::PutWeight ( float Weight );
__declspec(implementation_key(116)) enum MsoTriState LineFormat::GetInsetPen ( );
__declspec(implementation_key(117)) void LineFormat::PutInsetPen ( enum MsoTriState InsetPen );
__declspec(implementation_key(118)) IDispatchPtr ShapeNode::GetParent ( );
__declspec(implementation_key(119)) enum MsoEditingType ShapeNode::GetEditingType ( );
__declspec(implementation_key(120)) _variant_t ShapeNode::GetPoints ( );
__declspec(implementation_key(121)) enum MsoSegmentType ShapeNode::GetSegmentType ( );
__declspec(implementation_key(122)) IDispatchPtr ShapeNodes::GetParent ( );
__declspec(implementation_key(123)) int ShapeNodes::GetCount ( );
__declspec(implementation_key(124)) ShapeNodePtr ShapeNodes::Item ( const _variant_t & Index );
__declspec(implementation_key(125)) IUnknownPtr ShapeNodes::Get_NewEnum ( );
__declspec(implementation_key(126)) HRESULT ShapeNodes::Delete ( int Index );
__declspec(implementation_key(127)) HRESULT ShapeNodes::Insert ( int Index, enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(128)) HRESULT ShapeNodes::SetEditingType ( int Index, enum MsoEditingType EditingType );
__declspec(implementation_key(129)) HRESULT ShapeNodes::SetPosition ( int Index, float X1, float Y1 );
__declspec(implementation_key(130)) HRESULT ShapeNodes::SetSegmentType ( int Index, enum MsoSegmentType SegmentType );
__declspec(implementation_key(131)) IDispatchPtr PictureFormat::GetParent ( );
__declspec(implementation_key(132)) HRESULT PictureFormat::IncrementBrightness ( float Increment );
__declspec(implementation_key(133)) HRESULT PictureFormat::IncrementContrast ( float Increment );
__declspec(implementation_key(134)) float PictureFormat::GetBrightness ( );
__declspec(implementation_key(135)) void PictureFormat::PutBrightness ( float Brightness );
__declspec(implementation_key(136)) enum MsoPictureColorType PictureFormat::GetColorType ( );
__declspec(implementation_key(137)) void PictureFormat::PutColorType ( enum MsoPictureColorType ColorType );
__declspec(implementation_key(138)) float PictureFormat::GetContrast ( );
__declspec(implementation_key(139)) void PictureFormat::PutContrast ( float Contrast );
__declspec(implementation_key(140)) float PictureFormat::GetCropBottom ( );
__declspec(implementation_key(141)) void PictureFormat::PutCropBottom ( float CropBottom );
__declspec(implementation_key(142)) float PictureFormat::GetCropLeft ( );
__declspec(implementation_key(143)) void PictureFormat::PutCropLeft ( float CropLeft );
__declspec(implementation_key(144)) float PictureFormat::GetCropRight ( );
__declspec(implementation_key(145)) void PictureFormat::PutCropRight ( float CropRight );
__declspec(implementation_key(146)) float PictureFormat::GetCropTop ( );
__declspec(implementation_key(147)) void PictureFormat::PutCropTop ( float CropTop );
__declspec(implementation_key(148)) MsoRGBType PictureFormat::GetTransparencyColor ( );
__declspec(implementation_key(149)) void PictureFormat::PutTransparencyColor ( MsoRGBType TransparencyColor );
__declspec(implementation_key(150)) enum MsoTriState PictureFormat::GetTransparentBackground ( );
__declspec(implementation_key(151)) void PictureFormat::PutTransparentBackground ( enum MsoTriState TransparentBackground );
__declspec(implementation_key(152)) IDispatchPtr ShadowFormat::GetParent ( );
__declspec(implementation_key(153)) HRESULT ShadowFormat::IncrementOffsetX ( float Increment );
__declspec(implementation_key(154)) HRESULT ShadowFormat::IncrementOffsetY ( float Increment );
__declspec(implementation_key(155)) ColorFormatPtr ShadowFormat::GetForeColor ( );
__declspec(implementation_key(156)) void ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(157)) enum MsoTriState ShadowFormat::GetObscured ( );
__declspec(implementation_key(158)) void ShadowFormat::PutObscured ( enum MsoTriState Obscured );
__declspec(implementation_key(159)) float ShadowFormat::GetOffsetX ( );
__declspec(implementation_key(160)) void ShadowFormat::PutOffsetX ( float OffsetX );
__declspec(implementation_key(161)) float ShadowFormat::GetOffsetY ( );
__declspec(implementation_key(162)) void ShadowFormat::PutOffsetY ( float OffsetY );
__declspec(implementation_key(163)) float ShadowFormat::GetTransparency ( );
__declspec(implementation_key(164)) void ShadowFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(165)) enum MsoShadowType ShadowFormat::GetType ( );
__declspec(implementation_key(166)) void ShadowFormat::PutType ( enum MsoShadowType Type );
__declspec(implementation_key(167)) enum MsoTriState ShadowFormat::GetVisible ( );
__declspec(implementation_key(168)) void ShadowFormat::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(169)) IDispatchPtr Script::GetParent ( );
__declspec(implementation_key(170)) _bstr_t Script::GetExtended ( );
__declspec(implementation_key(171)) void Script::PutExtended ( _bstr_t Extended );
__declspec(implementation_key(172)) _bstr_t Script::GetId ( );
__declspec(implementation_key(173)) void Script::PutId ( _bstr_t Id );
__declspec(implementation_key(174)) enum MsoScriptLanguage Script::GetLanguage ( );
__declspec(implementation_key(175)) void Script::PutLanguage ( enum MsoScriptLanguage Language );
__declspec(implementation_key(176)) enum MsoScriptLocation Script::GetLocation ( );
__declspec(implementation_key(177)) HRESULT Script::Delete ( );
__declspec(implementation_key(178)) IDispatchPtr Script::GetShape ( );
__declspec(implementation_key(179)) _bstr_t Script::GetScriptText ( );
__declspec(implementation_key(180)) void Script::PutScriptText ( _bstr_t Script );
__declspec(implementation_key(181)) IDispatchPtr Scripts::GetParent ( );
__declspec(implementation_key(182)) long Scripts::GetCount ( );
__declspec(implementation_key(183)) IUnknownPtr Scripts::Get_NewEnum ( );
__declspec(implementation_key(184)) ScriptPtr Scripts::Item ( const _variant_t & Index );
__declspec(implementation_key(185)) ScriptPtr Scripts::Add ( IDispatch * Anchor, enum MsoScriptLocation Location, enum MsoScriptLanguage Language, _bstr_t Id, _bstr_t Extended, _bstr_t ScriptText );
__declspec(implementation_key(186)) HRESULT Scripts::Delete ( );
__declspec(implementation_key(187)) IDispatchPtr TextEffectFormat::GetParent ( );
__declspec(implementation_key(188)) HRESULT TextEffectFormat::ToggleVerticalText ( );
__declspec(implementation_key(189)) enum MsoTextEffectAlignment TextEffectFormat::GetAlignment ( );
__declspec(implementation_key(190)) void TextEffectFormat::PutAlignment ( enum MsoTextEffectAlignment Alignment );
__declspec(implementation_key(191)) enum MsoTriState TextEffectFormat::GetFontBold ( );
__declspec(implementation_key(192)) void TextEffectFormat::PutFontBold ( enum MsoTriState FontBold );
__declspec(implementation_key(193)) enum MsoTriState TextEffectFormat::GetFontItalic ( );
__declspec(implementation_key(194)) void TextEffectFormat::PutFontItalic ( enum MsoTriState FontItalic );
__declspec(implementation_key(195)) _bstr_t TextEffectFormat::GetFontName ( );
__declspec(implementation_key(196)) void TextEffectFormat::PutFontName ( _bstr_t FontName );
__declspec(implementation_key(197)) float TextEffectFormat::GetFontSize ( );
__declspec(implementation_key(198)) void TextEffectFormat::PutFontSize ( float FontSize );
__declspec(implementation_key(199)) enum MsoTriState TextEffectFormat::GetKernedPairs ( );
__declspec(implementation_key(200)) void TextEffectFormat::PutKernedPairs ( enum MsoTriState KernedPairs );
__declspec(implementation_key(201)) enum MsoTriState TextEffectFormat::GetNormalizedHeight ( );
__declspec(implementation_key(202)) void TextEffectFormat::PutNormalizedHeight ( enum MsoTriState NormalizedHeight );
__declspec(implementation_key(203)) enum MsoPresetTextEffectShape TextEffectFormat::GetPresetShape ( );
__declspec(implementation_key(204)) void TextEffectFormat::PutPresetShape ( enum MsoPresetTextEffectShape PresetShape );
__declspec(implementation_key(205)) enum MsoPresetTextEffect TextEffectFormat::GetPresetTextEffect ( );
__declspec(implementation_key(206)) void TextEffectFormat::PutPresetTextEffect ( enum MsoPresetTextEffect Preset );
__declspec(implementation_key(207)) enum MsoTriState TextEffectFormat::GetRotatedChars ( );
__declspec(implementation_key(208)) void TextEffectFormat::PutRotatedChars ( enum MsoTriState RotatedChars );
__declspec(implementation_key(209)) _bstr_t TextEffectFormat::GetText ( );
__declspec(implementation_key(210)) void TextEffectFormat::PutText ( _bstr_t Text );
__declspec(implementation_key(211)) float TextEffectFormat::GetTracking ( );
__declspec(implementation_key(212)) void TextEffectFormat::PutTracking ( float Tracking );
__declspec(implementation_key(213)) IDispatchPtr TextFrame::GetParent ( );
__declspec(implementation_key(214)) float TextFrame::GetMarginBottom ( );
__declspec(implementation_key(215)) void TextFrame::PutMarginBottom ( float MarginBottom );
__declspec(implementation_key(216)) float TextFrame::GetMarginLeft ( );
__declspec(implementation_key(217)) void TextFrame::PutMarginLeft ( float MarginLeft );
__declspec(implementation_key(218)) float TextFrame::GetMarginRight ( );
__declspec(implementation_key(219)) void TextFrame::PutMarginRight ( float MarginRight );
__declspec(implementation_key(220)) float TextFrame::GetMarginTop ( );
__declspec(implementation_key(221)) void TextFrame::PutMarginTop ( float MarginTop );
__declspec(implementation_key(222)) enum MsoTextOrientation TextFrame::GetOrientation ( );
__declspec(implementation_key(223)) void TextFrame::PutOrientation ( enum MsoTextOrientation Orientation );
__declspec(implementation_key(224)) IDispatchPtr ThreeDFormat::GetParent ( );
__declspec(implementation_key(225)) HRESULT ThreeDFormat::IncrementRotationX ( float Increment );
__declspec(implementation_key(226)) HRESULT ThreeDFormat::IncrementRotationY ( float Increment );
__declspec(implementation_key(227)) HRESULT ThreeDFormat::ResetRotation ( );
__declspec(implementation_key(228)) HRESULT ThreeDFormat::SetThreeDFormat ( enum MsoPresetThreeDFormat PresetThreeDFormat );
__declspec(implementation_key(229)) HRESULT ThreeDFormat::SetExtrusionDirection ( enum MsoPresetExtrusionDirection PresetExtrusionDirection );
__declspec(implementation_key(230)) float ThreeDFormat::GetDepth ( );
__declspec(implementation_key(231)) void ThreeDFormat::PutDepth ( float Depth );
__declspec(implementation_key(232)) ColorFormatPtr ThreeDFormat::GetExtrusionColor ( );
__declspec(implementation_key(233)) enum MsoExtrusionColorType ThreeDFormat::GetExtrusionColorType ( );
__declspec(implementation_key(234)) void ThreeDFormat::PutExtrusionColorType ( enum MsoExtrusionColorType ExtrusionColorType );
__declspec(implementation_key(235)) enum MsoTriState ThreeDFormat::GetPerspective ( );
__declspec(implementation_key(236)) void ThreeDFormat::PutPerspective ( enum MsoTriState Perspective );
__declspec(implementation_key(237)) enum MsoPresetExtrusionDirection ThreeDFormat::GetPresetExtrusionDirection ( );
__declspec(implementation_key(238)) enum MsoPresetLightingDirection ThreeDFormat::GetPresetLightingDirection ( );
__declspec(implementation_key(239)) void ThreeDFormat::PutPresetLightingDirection ( enum MsoPresetLightingDirection PresetLightingDirection );
__declspec(implementation_key(240)) enum MsoPresetLightingSoftness ThreeDFormat::GetPresetLightingSoftness ( );
__declspec(implementation_key(241)) void ThreeDFormat::PutPresetLightingSoftness ( enum MsoPresetLightingSoftness PresetLightingSoftness );
__declspec(implementation_key(242)) enum MsoPresetMaterial ThreeDFormat::GetPresetMaterial ( );
__declspec(implementation_key(243)) void ThreeDFormat::PutPresetMaterial ( enum MsoPresetMaterial PresetMaterial );
__declspec(implementation_key(244)) enum MsoPresetThreeDFormat ThreeDFormat::GetPresetThreeDFormat ( );
__declspec(implementation_key(245)) float ThreeDFormat::GetRotationX ( );
__declspec(implementation_key(246)) void ThreeDFormat::PutRotationX ( float RotationX );
__declspec(implementation_key(247)) float ThreeDFormat::GetRotationY ( );
__declspec(implementation_key(248)) void ThreeDFormat::PutRotationY ( float RotationY );
__declspec(implementation_key(249)) enum MsoTriState ThreeDFormat::GetVisible ( );
__declspec(implementation_key(250)) void ThreeDFormat::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(251)) HRESULT IMsoDispCagNotifySink::InsertClip ( IUnknown * pClipMoniker, IUnknown * pItemMoniker );
__declspec(implementation_key(252)) HRESULT IMsoDispCagNotifySink::WindowIsClosing ( );
__declspec(implementation_key(253)) IDispatchPtr Balloon::GetParent ( );
__declspec(implementation_key(254)) IDispatchPtr Balloon::GetCheckboxes ( );
__declspec(implementation_key(255)) IDispatchPtr Balloon::GetLabels ( );
__declspec(implementation_key(256)) void Balloon::PutBalloonType ( enum MsoBalloonType pbty );
__declspec(implementation_key(257)) enum MsoBalloonType Balloon::GetBalloonType ( );
__declspec(implementation_key(258)) void Balloon::PutIcon ( enum MsoIconType picn );
__declspec(implementation_key(259)) enum MsoIconType Balloon::GetIcon ( );
__declspec(implementation_key(260)) void Balloon::PutHeading ( _bstr_t pbstr );
__declspec(implementation_key(261)) _bstr_t Balloon::GetHeading ( );
__declspec(implementation_key(262)) void Balloon::PutText ( _bstr_t pbstr );
__declspec(implementation_key(263)) _bstr_t Balloon::GetText ( );
__declspec(implementation_key(264)) void Balloon::PutMode ( enum MsoModeType pmd );
__declspec(implementation_key(265)) enum MsoModeType Balloon::GetMode ( );
__declspec(implementation_key(266)) void Balloon::PutAnimation ( enum MsoAnimationType pfca );
__declspec(implementation_key(267)) enum MsoAnimationType Balloon::GetAnimation ( );
__declspec(implementation_key(268)) void Balloon::PutButton ( enum MsoButtonSetType psbs );
__declspec(implementation_key(269)) enum MsoButtonSetType Balloon::GetButton ( );
__declspec(implementation_key(270)) void Balloon::PutCallback ( _bstr_t pbstr );
__declspec(implementation_key(271)) _bstr_t Balloon::GetCallback ( );
__declspec(implementation_key(272)) void Balloon::PutPrivate ( long plPrivate );
__declspec(implementation_key(273)) long Balloon::GetPrivate ( );
__declspec(implementation_key(274)) HRESULT Balloon::SetAvoidRectangle ( int Left, int Top, int Right, int Bottom );
__declspec(implementation_key(275)) _bstr_t Balloon::GetName ( );
__declspec(implementation_key(276)) enum MsoBalloonButtonType Balloon::Show ( );
__declspec(implementation_key(277)) HRESULT Balloon::Close ( );
__declspec(implementation_key(278)) _bstr_t BalloonCheckboxes::GetName ( );
__declspec(implementation_key(279)) IDispatchPtr BalloonCheckboxes::GetParent ( );
__declspec(implementation_key(280)) IDispatchPtr BalloonCheckboxes::GetItem ( int Index );
__declspec(implementation_key(281)) int BalloonCheckboxes::GetCount ( );
__declspec(implementation_key(282)) void BalloonCheckboxes::PutCount ( int pccbx );
__declspec(implementation_key(283)) IUnknownPtr BalloonCheckboxes::Get_NewEnum ( );
__declspec(implementation_key(284)) _bstr_t BalloonCheckbox::GetItem ( );
__declspec(implementation_key(285)) _bstr_t BalloonCheckbox::GetName ( );
__declspec(implementation_key(286)) IDispatchPtr BalloonCheckbox::GetParent ( );
__declspec(implementation_key(287)) void BalloonCheckbox::PutChecked ( VARIANT_BOOL pvarfChecked );
__declspec(implementation_key(288)) VARIANT_BOOL BalloonCheckbox::GetChecked ( );
__declspec(implementation_key(289)) void BalloonCheckbox::PutText ( _bstr_t pbstr );
__declspec(implementation_key(290)) _bstr_t BalloonCheckbox::GetText ( );
__declspec(implementation_key(291)) _bstr_t BalloonLabels::GetName ( );
__declspec(implementation_key(292)) IDispatchPtr BalloonLabels::GetParent ( );
__declspec(implementation_key(293)) IDispatchPtr BalloonLabels::GetItem ( int Index );
__declspec(implementation_key(294)) int BalloonLabels::GetCount ( );
__declspec(implementation_key(295)) void BalloonLabels::PutCount ( int pcwz );
__declspec(implementation_key(296)) IUnknownPtr BalloonLabels::Get_NewEnum ( );
__declspec(implementation_key(297)) _bstr_t BalloonLabel::GetItem ( );
__declspec(implementation_key(298)) _bstr_t BalloonLabel::GetName ( );
__declspec(implementation_key(299)) IDispatchPtr BalloonLabel::GetParent ( );
__declspec(implementation_key(300)) void BalloonLabel::PutText ( _bstr_t pbstr );
__declspec(implementation_key(301)) _bstr_t BalloonLabel::GetText ( );
__declspec(implementation_key(302)) IDispatchPtr AnswerWizardFiles::GetParent ( );
__declspec(implementation_key(303)) _bstr_t AnswerWizardFiles::GetItem ( int Index );
__declspec(implementation_key(304)) int AnswerWizardFiles::GetCount ( );
__declspec(implementation_key(305)) HRESULT AnswerWizardFiles::Add ( _bstr_t FileName );
__declspec(implementation_key(306)) HRESULT AnswerWizardFiles::Delete ( _bstr_t FileName );
__declspec(implementation_key(307)) IDispatchPtr AnswerWizard::GetParent ( );
__declspec(implementation_key(308)) AnswerWizardFilesPtr AnswerWizard::GetFiles ( );
__declspec(implementation_key(309)) HRESULT AnswerWizard::ClearFileList ( );
__declspec(implementation_key(310)) HRESULT AnswerWizard::ResetFileList ( );
__declspec(implementation_key(311)) HRESULT DocumentProperty::Delete ( );
__declspec(implementation_key(312)) _bstr_t DocumentProperty::GetName ( long lcid );
__declspec(implementation_key(313)) void DocumentProperty::PutName ( long lcid, _bstr_t pbstrRetVal );
__declspec(implementation_key(314)) _variant_t DocumentProperty::GetValue ( long lcid );
__declspec(implementation_key(315)) void DocumentProperty::PutValue ( long lcid, const _variant_t & pvargRetVal );
__declspec(implementation_key(316)) enum MsoDocProperties DocumentProperty::GetType ( long lcid );
__declspec(implementation_key(317)) void DocumentProperty::PutType ( long lcid, enum MsoDocProperties ptypeRetVal );
__declspec(implementation_key(318)) VARIANT_BOOL DocumentProperty::GetLinkToContent ( );
__declspec(implementation_key(319)) void DocumentProperty::PutLinkToContent ( VARIANT_BOOL pfLinkRetVal );
__declspec(implementation_key(320)) _bstr_t DocumentProperty::GetLinkSource ( );
__declspec(implementation_key(321)) void DocumentProperty::PutLinkSource ( _bstr_t pbstrSourceRetVal );
__declspec(implementation_key(322)) IDispatchPtr DocumentProperty::GetApplication ( );
__declspec(implementation_key(323)) long DocumentProperty::GetCreator ( );
__declspec(implementation_key(324)) DocumentPropertyPtr DocumentProperties::GetItem ( const _variant_t & Index, long lcid );
__declspec(implementation_key(325)) long DocumentProperties::GetCount ( );
__declspec(implementation_key(326)) DocumentPropertyPtr DocumentProperties::Add ( _bstr_t Name, VARIANT_BOOL LinkToContent, const _variant_t & Type, const _variant_t & Value, const _variant_t & LinkSource, long lcid );
__declspec(implementation_key(327)) IUnknownPtr DocumentProperties::Get_NewEnum ( );
__declspec(implementation_key(328)) IDispatchPtr DocumentProperties::GetApplication ( );
__declspec(implementation_key(329)) long DocumentProperties::GetCreator ( );
__declspec(implementation_key(330)) _bstr_t IFoundFiles::GetItem ( int Index );
__declspec(implementation_key(331)) int IFoundFiles::GetCount ( );
__declspec(implementation_key(332)) IUnknownPtr IFoundFiles::Get_NewEnum ( );
__declspec(implementation_key(333)) _bstr_t IFind::GetSearchPath ( );
__declspec(implementation_key(334)) _bstr_t IFind::GetName ( );
__declspec(implementation_key(335)) VARIANT_BOOL IFind::GetSubDir ( );
__declspec(implementation_key(336)) _bstr_t IFind::GetTitle ( );
__declspec(implementation_key(337)) _bstr_t IFind::GetAuthor ( );
__declspec(implementation_key(338)) _bstr_t IFind::GetKeywords ( );
__declspec(implementation_key(339)) _bstr_t IFind::GetSubject ( );
__declspec(implementation_key(340)) enum MsoFileFindOptions IFind::GetOptions ( );
__declspec(implementation_key(341)) VARIANT_BOOL IFind::GetMatchCase ( );
__declspec(implementation_key(342)) _bstr_t IFind::GetText ( );
__declspec(implementation_key(343)) VARIANT_BOOL IFind::GetPatternMatch ( );
__declspec(implementation_key(344)) _variant_t IFind::GetDateSavedFrom ( );
__declspec(implementation_key(345)) _variant_t IFind::GetDateSavedTo ( );
__declspec(implementation_key(346)) _bstr_t IFind::GetSavedBy ( );
__declspec(implementation_key(347)) _variant_t IFind::GetDateCreatedFrom ( );
__declspec(implementation_key(348)) _variant_t IFind::GetDateCreatedTo ( );
__declspec(implementation_key(349)) enum MsoFileFindView IFind::GetView ( );
__declspec(implementation_key(350)) enum MsoFileFindSortBy IFind::GetSortBy ( );
__declspec(implementation_key(351)) enum MsoFileFindListBy IFind::GetListBy ( );
__declspec(implementation_key(352)) int IFind::GetSelectedFile ( );
__declspec(implementation_key(353)) IFoundFilesPtr IFind::GetResults ( );
__declspec(implementation_key(354)) int IFind::Show ( );
__declspec(implementation_key(355)) void IFind::PutSearchPath ( _bstr_t pbstr );
__declspec(implementation_key(356)) void IFind::PutName ( _bstr_t pbstr );
__declspec(implementation_key(357)) void IFind::PutSubDir ( VARIANT_BOOL retval );
__declspec(implementation_key(358)) void IFind::PutTitle ( _bstr_t pbstr );
__declspec(implementation_key(359)) void IFind::PutAuthor ( _bstr_t pbstr );
__declspec(implementation_key(360)) void IFind::PutKeywords ( _bstr_t pbstr );
__declspec(implementation_key(361)) void IFind::PutSubject ( _bstr_t pbstr );
__declspec(implementation_key(362)) void IFind::PutOptions ( enum MsoFileFindOptions penmOptions );
__declspec(implementation_key(363)) void IFind::PutMatchCase ( VARIANT_BOOL retval );
__declspec(implementation_key(364)) void IFind::PutText ( _bstr_t pbstr );
__declspec(implementation_key(365)) void IFind::PutPatternMatch ( VARIANT_BOOL retval );
__declspec(implementation_key(366)) void IFind::PutDateSavedFrom ( const _variant_t & pdatSavedFrom );
__declspec(implementation_key(367)) void IFind::PutDateSavedTo ( const _variant_t & pdatSavedTo );
__declspec(implementation_key(368)) void IFind::PutSavedBy ( _bstr_t pbstr );
__declspec(implementation_key(369)) void IFind::PutDateCreatedFrom ( const _variant_t & pdatCreatedFrom );
__declspec(implementation_key(370)) void IFind::PutDateCreatedTo ( const _variant_t & pdatCreatedTo );
__declspec(implementation_key(371)) void IFind::PutView ( enum MsoFileFindView penmView );
__declspec(implementation_key(372)) void IFind::PutSortBy ( enum MsoFileFindSortBy penmSortBy );
__declspec(implementation_key(373)) void IFind::PutListBy ( enum MsoFileFindListBy penmListBy );
__declspec(implementation_key(374)) void IFind::PutSelectedFile ( int pintSelectedFile );
__declspec(implementation_key(375)) HRESULT IFind::Execute ( );
__declspec(implementation_key(376)) HRESULT IFind::Load ( _bstr_t bstrQueryName );
__declspec(implementation_key(377)) HRESULT IFind::Save ( _bstr_t bstrQueryName );
__declspec(implementation_key(378)) HRESULT IFind::Delete ( _bstr_t bstrQueryName );
__declspec(implementation_key(379)) long IFind::GetFileType ( );
__declspec(implementation_key(380)) void IFind::PutFileType ( long plFileType );
__declspec(implementation_key(381)) _bstr_t FoundFiles::GetItem ( int Index, long lcid );
__declspec(implementation_key(382)) long FoundFiles::GetCount ( );
__declspec(implementation_key(383)) IUnknownPtr FoundFiles::Get_NewEnum ( );
__declspec(implementation_key(384)) _bstr_t PropertyTest::GetName ( );
__declspec(implementation_key(385)) enum MsoCondition PropertyTest::GetCondition ( );
__declspec(implementation_key(386)) _variant_t PropertyTest::GetValue ( );
__declspec(implementation_key(387)) _variant_t PropertyTest::GetSecondValue ( );
__declspec(implementation_key(388)) enum MsoConnector PropertyTest::GetConnector ( );
__declspec(implementation_key(389)) PropertyTestPtr PropertyTests::GetItem ( int Index, long lcid );
__declspec(implementation_key(390)) long PropertyTests::GetCount ( );
__declspec(implementation_key(391)) HRESULT PropertyTests::Add ( _bstr_t Name, enum MsoCondition Condition, const _variant_t & Value, const _variant_t & SecondValue, enum MsoConnector Connector );
__declspec(implementation_key(392)) HRESULT PropertyTests::Remove ( int Index );
__declspec(implementation_key(393)) IUnknownPtr PropertyTests::Get_NewEnum ( );
__declspec(implementation_key(394)) _bstr_t COMAddIn::GetDescription ( );
__declspec(implementation_key(395)) void COMAddIn::PutDescription ( _bstr_t RetValue );
__declspec(implementation_key(396)) _bstr_t COMAddIn::GetProgId ( );
__declspec(implementation_key(397)) _bstr_t COMAddIn::GetGuid ( );
__declspec(implementation_key(398)) VARIANT_BOOL COMAddIn::GetConnect ( );
__declspec(implementation_key(399)) void COMAddIn::PutConnect ( VARIANT_BOOL RetValue );
__declspec(implementation_key(400)) IDispatchPtr COMAddIn::GetObject ( );
__declspec(implementation_key(401)) void COMAddIn::PutObject ( IDispatch * RetValue );
__declspec(implementation_key(402)) IDispatchPtr COMAddIn::GetParent ( );
__declspec(implementation_key(403)) COMAddInPtr COMAddIns::Item ( VARIANT * Index );
__declspec(implementation_key(404)) long COMAddIns::GetCount ( );
__declspec(implementation_key(405)) IUnknownPtr COMAddIns::Get_NewEnum ( );
__declspec(implementation_key(406)) HRESULT COMAddIns::Update ( );
__declspec(implementation_key(407)) IDispatchPtr COMAddIns::GetParent ( );
__declspec(implementation_key(408)) HRESULT COMAddIns::SetAppModal ( VARIANT_BOOL varfModal );
__declspec(implementation_key(409)) int LanguageSettings::GetLanguageID ( enum MsoAppLanguageID Id );
__declspec(implementation_key(410)) VARIANT_BOOL LanguageSettings::GetLanguagePreferredForEditing ( enum MsoLanguageID lid );
__declspec(implementation_key(411)) IDispatchPtr LanguageSettings::GetParent ( );
__declspec(implementation_key(412)) HRESULT _CommandBarsEvents::OnUpdate ( );
__declspec(implementation_key(413)) HRESULT _CommandBarComboBoxEvents::Change ( struct _CommandBarComboBox * Ctrl );
__declspec(implementation_key(414)) HRESULT _CommandBarButtonEvents::Click ( struct _CommandBarButton * Ctrl, VARIANT_BOOL * CancelDefault );
__declspec(implementation_key(415)) _bstr_t WebPageFont::GetProportionalFont ( );
__declspec(implementation_key(416)) void WebPageFont::PutProportionalFont ( _bstr_t pstr );
__declspec(implementation_key(417)) float WebPageFont::GetProportionalFontSize ( );
__declspec(implementation_key(418)) void WebPageFont::PutProportionalFontSize ( float pf );
__declspec(implementation_key(419)) _bstr_t WebPageFont::GetFixedWidthFont ( );
__declspec(implementation_key(420)) void WebPageFont::PutFixedWidthFont ( _bstr_t pstr );
__declspec(implementation_key(421)) float WebPageFont::GetFixedWidthFontSize ( );
__declspec(implementation_key(422)) void WebPageFont::PutFixedWidthFontSize ( float pf );
__declspec(implementation_key(423)) int WebPageFonts::GetCount ( );
__declspec(implementation_key(424)) WebPageFontPtr WebPageFonts::GetItem ( enum MsoCharacterSet Index );
__declspec(implementation_key(425)) IUnknownPtr WebPageFonts::Get_NewEnum ( );
__declspec(implementation_key(426)) _bstr_t HTMLProjectItem::GetName ( );
__declspec(implementation_key(427)) VARIANT_BOOL HTMLProjectItem::GetIsOpen ( );
__declspec(implementation_key(428)) HRESULT HTMLProjectItem::LoadFromFile ( _bstr_t FileName );
__declspec(implementation_key(429)) HRESULT HTMLProjectItem::Open ( enum MsoHTMLProjectOpen OpenKind );
__declspec(implementation_key(430)) HRESULT HTMLProjectItem::SaveCopyAs ( _bstr_t FileName );
__declspec(implementation_key(431)) _bstr_t HTMLProjectItem::GetText ( );
__declspec(implementation_key(432)) void HTMLProjectItem::PutText ( _bstr_t Text );
__declspec(implementation_key(433)) IDispatchPtr HTMLProjectItem::GetParent ( );
__declspec(implementation_key(434)) HTMLProjectItemPtr HTMLProjectItems::Item ( VARIANT * Index );
__declspec(implementation_key(435)) long HTMLProjectItems::GetCount ( );
__declspec(implementation_key(436)) IUnknownPtr HTMLProjectItems::Get_NewEnum ( );
__declspec(implementation_key(437)) IDispatchPtr HTMLProjectItems::GetParent ( );
__declspec(implementation_key(438)) enum MsoHTMLProjectState HTMLProject::GetState ( );
__declspec(implementation_key(439)) HRESULT HTMLProject::RefreshProject ( VARIANT_BOOL Refresh );
__declspec(implementation_key(440)) HRESULT HTMLProject::RefreshDocument ( VARIANT_BOOL Refresh );
__declspec(implementation_key(441)) HTMLProjectItemsPtr HTMLProject::GetHTMLProjectItems ( );
__declspec(implementation_key(442)) IDispatchPtr HTMLProject::GetParent ( );
__declspec(implementation_key(443)) HRESULT HTMLProject::Open ( enum MsoHTMLProjectOpen OpenKind );
__declspec(implementation_key(444)) int MsoDebugOptions::GetFeatureReports ( );
__declspec(implementation_key(445)) void MsoDebugOptions::PutFeatureReports ( int puintFeatureReports );
__declspec(implementation_key(446)) VARIANT_BOOL MsoDebugOptions::GetOutputToDebugger ( );
__declspec(implementation_key(447)) void MsoDebugOptions::PutOutputToDebugger ( VARIANT_BOOL pvarfOutputToDebugger );
__declspec(implementation_key(448)) VARIANT_BOOL MsoDebugOptions::GetOutputToFile ( );
__declspec(implementation_key(449)) void MsoDebugOptions::PutOutputToFile ( VARIANT_BOOL pvarfOutputToFile );
__declspec(implementation_key(450)) VARIANT_BOOL MsoDebugOptions::GetOutputToMessageBox ( );
__declspec(implementation_key(451)) void MsoDebugOptions::PutOutputToMessageBox ( VARIANT_BOOL pvarfOutputToMessageBox );
__declspec(implementation_key(452)) IDispatchPtr FileDialogSelectedItems::GetParent ( );
__declspec(implementation_key(453)) IUnknownPtr FileDialogSelectedItems::Get_NewEnum ( );
__declspec(implementation_key(454)) long FileDialogSelectedItems::GetCount ( );
__declspec(implementation_key(455)) _bstr_t FileDialogSelectedItems::Item ( int Index );
__declspec(implementation_key(456)) IDispatchPtr FileDialogFilter::GetParent ( );
__declspec(implementation_key(457)) _bstr_t FileDialogFilter::GetExtensions ( );
__declspec(implementation_key(458)) _bstr_t FileDialogFilter::GetDescription ( );
__declspec(implementation_key(459)) IDispatchPtr FileDialogFilters::GetParent ( );
__declspec(implementation_key(460)) IUnknownPtr FileDialogFilters::Get_NewEnum ( );
__declspec(implementation_key(461)) long FileDialogFilters::GetCount ( );
__declspec(implementation_key(462)) FileDialogFilterPtr FileDialogFilters::Item ( int Index );
__declspec(implementation_key(463)) HRESULT FileDialogFilters::Delete ( const _variant_t & filter );
__declspec(implementation_key(464)) HRESULT FileDialogFilters::Clear ( );
__declspec(implementation_key(465)) FileDialogFilterPtr FileDialogFilters::Add ( _bstr_t Description, _bstr_t Extensions, const _variant_t & Position );
__declspec(implementation_key(466)) IDispatchPtr FileDialog::GetParent ( );
__declspec(implementation_key(467)) FileDialogFiltersPtr FileDialog::GetFilters ( );
__declspec(implementation_key(468)) int FileDialog::GetFilterIndex ( );
__declspec(implementation_key(469)) void FileDialog::PutFilterIndex ( int FilterIndex );
__declspec(implementation_key(470)) _bstr_t FileDialog::GetTitle ( );
__declspec(implementation_key(471)) void FileDialog::PutTitle ( _bstr_t Title );
__declspec(implementation_key(472)) _bstr_t FileDialog::GetButtonName ( );
__declspec(implementation_key(473)) void FileDialog::PutButtonName ( _bstr_t ButtonName );
__declspec(implementation_key(474)) VARIANT_BOOL FileDialog::GetAllowMultiSelect ( );
__declspec(implementation_key(475)) void FileDialog::PutAllowMultiSelect ( VARIANT_BOOL pvarfAllowMultiSelect );
__declspec(implementation_key(476)) enum MsoFileDialogView FileDialog::GetInitialView ( );
__declspec(implementation_key(477)) void FileDialog::PutInitialView ( enum MsoFileDialogView pinitialview );
__declspec(implementation_key(478)) _bstr_t FileDialog::GetInitialFileName ( );
__declspec(implementation_key(479)) void FileDialog::PutInitialFileName ( _bstr_t InitialFileName );
__declspec(implementation_key(480)) FileDialogSelectedItemsPtr FileDialog::GetSelectedItems ( );
__declspec(implementation_key(481)) enum MsoFileDialogType FileDialog::GetDialogType ( );
__declspec(implementation_key(482)) _bstr_t FileDialog::GetItem ( );
__declspec(implementation_key(483)) int FileDialog::Show ( );
__declspec(implementation_key(484)) HRESULT FileDialog::Execute ( );
__declspec(implementation_key(485)) _bstr_t Signature::GetSigner ( );
__declspec(implementation_key(486)) _bstr_t Signature::GetIssuer ( );
__declspec(implementation_key(487)) _variant_t Signature::GetExpireDate ( );
__declspec(implementation_key(488)) VARIANT_BOOL Signature::GetIsValid ( );
__declspec(implementation_key(489)) VARIANT_BOOL Signature::GetAttachCertificate ( );
__declspec(implementation_key(490)) void Signature::PutAttachCertificate ( VARIANT_BOOL pfAttach );
__declspec(implementation_key(491)) HRESULT Signature::Delete ( );
__declspec(implementation_key(492)) IDispatchPtr Signature::GetParent ( );
__declspec(implementation_key(493)) VARIANT_BOOL Signature::GetIsCertificateExpired ( );
__declspec(implementation_key(494)) VARIANT_BOOL Signature::GetIsCertificateRevoked ( );
__declspec(implementation_key(495)) _variant_t Signature::GetSignDate ( );
__declspec(implementation_key(496)) IUnknownPtr SignatureSet::Get_NewEnum ( );
__declspec(implementation_key(497)) int SignatureSet::GetCount ( );
__declspec(implementation_key(498)) SignaturePtr SignatureSet::GetItem ( int iSig );
__declspec(implementation_key(499)) SignaturePtr SignatureSet::Add ( );
__declspec(implementation_key(500)) HRESULT SignatureSet::Commit ( );
__declspec(implementation_key(501)) IDispatchPtr SignatureSet::GetParent ( );
__declspec(implementation_key(502)) _bstr_t IMsoEnvelopeVB::GetIntroduction ( );
__declspec(implementation_key(503)) void IMsoEnvelopeVB::PutIntroduction ( _bstr_t pbstrIntro );
__declspec(implementation_key(504)) IDispatchPtr IMsoEnvelopeVB::GetItem ( );
__declspec(implementation_key(505)) IDispatchPtr IMsoEnvelopeVB::GetParent ( );
__declspec(implementation_key(506)) IDispatchPtr IMsoEnvelopeVB::GetCommandBars ( );
__declspec(implementation_key(507)) HRESULT IMsoEnvelopeVBEvents::EnvelopeShow ( );
__declspec(implementation_key(508)) HRESULT IMsoEnvelopeVBEvents::EnvelopeHide ( );
__declspec(implementation_key(509)) IDispatchPtr Assistant::GetParent ( );
__declspec(implementation_key(510)) HRESULT Assistant::Move ( int xLeft, int yTop );
__declspec(implementation_key(511)) void Assistant::PutTop ( int pyTop );
__declspec(implementation_key(512)) int Assistant::GetTop ( );
__declspec(implementation_key(513)) void Assistant::PutLeft ( int pxLeft );
__declspec(implementation_key(514)) int Assistant::GetLeft ( );
__declspec(implementation_key(515)) HRESULT Assistant::Help ( );
__declspec(implementation_key(516)) long Assistant::StartWizard ( VARIANT_BOOL On, _bstr_t Callback, long PrivateX, const _variant_t & Animation, const _variant_t & CustomTeaser, const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right );
__declspec(implementation_key(517)) HRESULT Assistant::EndWizard ( long WizardID, VARIANT_BOOL varfSuccess, const _variant_t & Animation );
__declspec(implementation_key(518)) HRESULT Assistant::ActivateWizard ( long WizardID, enum MsoWizardActType act, const _variant_t & Animation );
__declspec(implementation_key(519)) HRESULT Assistant::ResetTips ( );
__declspec(implementation_key(520)) BalloonPtr Assistant::GetNewBalloon ( );
__declspec(implementation_key(521)) enum MsoBalloonErrorType Assistant::GetBalloonError ( );
__declspec(implementation_key(522)) VARIANT_BOOL Assistant::GetVisible ( );
__declspec(implementation_key(523)) void Assistant::PutVisible ( VARIANT_BOOL pvarfVisible );
__declspec(implementation_key(524)) enum MsoAnimationType Assistant::GetAnimation ( );
__declspec(implementation_key(525)) void Assistant::PutAnimation ( enum MsoAnimationType pfca );
__declspec(implementation_key(526)) VARIANT_BOOL Assistant::GetReduced ( );
__declspec(implementation_key(527)) void Assistant::PutReduced ( VARIANT_BOOL pvarfReduced );
__declspec(implementation_key(528)) void Assistant::PutAssistWithHelp ( VARIANT_BOOL pvarfAssistWithHelp );
__declspec(implementation_key(529)) VARIANT_BOOL Assistant::GetAssistWithHelp ( );
__declspec(implementation_key(530)) void Assistant::PutAssistWithWizards ( VARIANT_BOOL pvarfAssistWithWizards );
__declspec(implementation_key(531)) VARIANT_BOOL Assistant::GetAssistWithWizards ( );
__declspec(implementation_key(532)) void Assistant::PutAssistWithAlerts ( VARIANT_BOOL pvarfAssistWithAlerts );
__declspec(implementation_key(533)) VARIANT_BOOL Assistant::GetAssistWithAlerts ( );
__declspec(implementation_key(534)) void Assistant::PutMoveWhenInTheWay ( VARIANT_BOOL pvarfMove );
__declspec(implementation_key(535)) VARIANT_BOOL Assistant::GetMoveWhenInTheWay ( );
__declspec(implementation_key(536)) void Assistant::PutSounds ( VARIANT_BOOL pvarfSounds );
__declspec(implementation_key(537)) VARIANT_BOOL Assistant::GetSounds ( );
__declspec(implementation_key(538)) void Assistant::PutFeatureTips ( VARIANT_BOOL pvarfFeatures );
__declspec(implementation_key(539)) VARIANT_BOOL Assistant::GetFeatureTips ( );
__declspec(implementation_key(540)) void Assistant::PutMouseTips ( VARIANT_BOOL pvarfMouse );
__declspec(implementation_key(541)) VARIANT_BOOL Assistant::GetMouseTips ( );
__declspec(implementation_key(542)) void Assistant::PutKeyboardShortcutTips ( VARIANT_BOOL pvarfKeyboardShortcuts );
__declspec(implementation_key(543)) VARIANT_BOOL Assistant::GetKeyboardShortcutTips ( );
__declspec(implementation_key(544)) void Assistant::PutHighPriorityTips ( VARIANT_BOOL pvarfHighPriorityTips );
__declspec(implementation_key(545)) VARIANT_BOOL Assistant::GetHighPriorityTips ( );
__declspec(implementation_key(546)) void Assistant::PutTipOfDay ( VARIANT_BOOL pvarfTipOfDay );
__declspec(implementation_key(547)) VARIANT_BOOL Assistant::GetTipOfDay ( );
__declspec(implementation_key(548)) void Assistant::PutGuessHelp ( VARIANT_BOOL pvarfGuessHelp );
__declspec(implementation_key(549)) VARIANT_BOOL Assistant::GetGuessHelp ( );
__declspec(implementation_key(550)) void Assistant::PutSearchWhenProgramming ( VARIANT_BOOL pvarfSearchInProgram );
__declspec(implementation_key(551)) VARIANT_BOOL Assistant::GetSearchWhenProgramming ( );
__declspec(implementation_key(552)) _bstr_t Assistant::GetItem ( );
__declspec(implementation_key(553)) _bstr_t Assistant::GetFileName ( );
__declspec(implementation_key(554)) void Assistant::PutFileName ( _bstr_t pbstr );
__declspec(implementation_key(555)) _bstr_t Assistant::GetName ( );
__declspec(implementation_key(556)) VARIANT_BOOL Assistant::GetOn ( );
__declspec(implementation_key(557)) void Assistant::PutOn ( VARIANT_BOOL pvarfOn );
__declspec(implementation_key(558)) int Assistant::DoAlert ( _bstr_t bstrAlertTitle, _bstr_t bstrAlertText, enum MsoAlertButtonType alb, enum MsoAlertIconType alc, enum MsoAlertDefaultType ald, enum MsoAlertCancelType alq, VARIANT_BOOL varfSysAlert );
__declspec(implementation_key(559)) enum MsoFileType FileTypes::GetItem ( int Index );
__declspec(implementation_key(560)) int FileTypes::GetCount ( );
__declspec(implementation_key(561)) HRESULT FileTypes::Add ( enum MsoFileType FileType );
__declspec(implementation_key(562)) HRESULT FileTypes::Remove ( int Index );
__declspec(implementation_key(563)) IUnknownPtr FileTypes::Get_NewEnum ( );
__declspec(implementation_key(564)) _bstr_t OfficeDataSourceObject::GetConnectString ( );
__declspec(implementation_key(565)) void OfficeDataSourceObject::PutConnectString ( _bstr_t pbstrConnect );
__declspec(implementation_key(566)) _bstr_t OfficeDataSourceObject::GetTable ( );
__declspec(implementation_key(567)) void OfficeDataSourceObject::PutTable ( _bstr_t pbstrTable );
__declspec(implementation_key(568)) _bstr_t OfficeDataSourceObject::GetDataSource ( );
__declspec(implementation_key(569)) void OfficeDataSourceObject::PutDataSource ( _bstr_t pbstrSrc );
__declspec(implementation_key(570)) IDispatchPtr OfficeDataSourceObject::GetColumns ( );
__declspec(implementation_key(571)) long OfficeDataSourceObject::GetRowCount ( );
__declspec(implementation_key(572)) IDispatchPtr OfficeDataSourceObject::GetFilters ( );
__declspec(implementation_key(573)) int OfficeDataSourceObject::Move ( enum MsoMoveRow MsoMoveRow, int RowNbr );
__declspec(implementation_key(574)) HRESULT OfficeDataSourceObject::Open ( _bstr_t bstrSrc, _bstr_t bstrConnect, _bstr_t bstrTable, long fOpenExclusive, long fNeverPrompt );
__declspec(implementation_key(575)) HRESULT OfficeDataSourceObject::SetSortOrder ( _bstr_t SortField1, VARIANT_BOOL SortAscending1, _bstr_t SortField2, VARIANT_BOOL SortAscending2, _bstr_t SortField3, VARIANT_BOOL SortAscending3 );
__declspec(implementation_key(576)) HRESULT OfficeDataSourceObject::ApplyFilter ( );
__declspec(implementation_key(577)) long ODSOColumn::GetIndex ( );
__declspec(implementation_key(578)) _bstr_t ODSOColumn::GetName ( );
__declspec(implementation_key(579)) IDispatchPtr ODSOColumn::GetParent ( );
__declspec(implementation_key(580)) _bstr_t ODSOColumn::GetValue ( );
__declspec(implementation_key(581)) long ODSOColumns::GetCount ( );
__declspec(implementation_key(582)) IDispatchPtr ODSOColumns::GetParent ( );
__declspec(implementation_key(583)) IDispatchPtr ODSOColumns::Item ( const _variant_t & varIndex );
__declspec(implementation_key(584)) long ODSOFilter::GetIndex ( );
__declspec(implementation_key(585)) IDispatchPtr ODSOFilter::GetParent ( );
__declspec(implementation_key(586)) _bstr_t ODSOFilter::GetColumn ( );
__declspec(implementation_key(587)) void ODSOFilter::PutColumn ( _bstr_t pbstrCol );
__declspec(implementation_key(588)) enum MsoFilterComparison ODSOFilter::GetComparison ( );
__declspec(implementation_key(589)) void ODSOFilter::PutComparison ( enum MsoFilterComparison pComparison );
__declspec(implementation_key(590)) _bstr_t ODSOFilter::GetCompareTo ( );
__declspec(implementation_key(591)) void ODSOFilter::PutCompareTo ( _bstr_t pbstrCompareTo );
__declspec(implementation_key(592)) enum MsoFilterConjunction ODSOFilter::GetConjunction ( );
__declspec(implementation_key(593)) void ODSOFilter::PutConjunction ( enum MsoFilterConjunction pConjunction );
__declspec(implementation_key(594)) long ODSOFilters::GetCount ( );
__declspec(implementation_key(595)) IDispatchPtr ODSOFilters::GetParent ( );
__declspec(implementation_key(596)) IDispatchPtr ODSOFilters::Item ( long Index );
__declspec(implementation_key(597)) HRESULT ODSOFilters::Add ( _bstr_t Column, enum MsoFilterComparison Comparison, enum MsoFilterConjunction Conjunction, _bstr_t bstrCompareTo, VARIANT_BOOL DeferUpdate );
__declspec(implementation_key(598)) HRESULT ODSOFilters::Delete ( long Index, VARIANT_BOOL DeferUpdate );
__declspec(implementation_key(599)) VARIANT_BOOL NewFile::Add ( _bstr_t FileName, const _variant_t & Section, const _variant_t & DisplayName, const _variant_t & Action );
__declspec(implementation_key(600)) VARIANT_BOOL NewFile::Remove ( _bstr_t FileName, const _variant_t & Section, const _variant_t & DisplayName, const _variant_t & Action );
__declspec(implementation_key(601)) IDispatchPtr WebComponent::GetShape ( );
__declspec(implementation_key(602)) _bstr_t WebComponent::GetURL ( );
__declspec(implementation_key(603)) void WebComponent::PutURL ( _bstr_t RetValue );
__declspec(implementation_key(604)) _bstr_t WebComponent::GetHTML ( );
__declspec(implementation_key(605)) void WebComponent::PutHTML ( _bstr_t RetValue );
__declspec(implementation_key(606)) _bstr_t WebComponent::GetName ( );
__declspec(implementation_key(607)) void WebComponent::PutName ( _bstr_t RetValue );
__declspec(implementation_key(608)) long WebComponent::GetWidth ( );
__declspec(implementation_key(609)) void WebComponent::PutWidth ( long RetValue );
__declspec(implementation_key(610)) long WebComponent::GetHeight ( );
__declspec(implementation_key(611)) void WebComponent::PutHeight ( long RetValue );
__declspec(implementation_key(612)) HRESULT WebComponent::SetPlaceHolderGraphic ( _bstr_t PlaceHolderGraphic );
__declspec(implementation_key(613)) HRESULT WebComponent::Commit ( );
__declspec(implementation_key(614)) HRESULT WebComponent::Revert ( );
__declspec(implementation_key(615)) long WebComponentWindowExternal::GetInterfaceVersion ( );
__declspec(implementation_key(616)) _bstr_t WebComponentWindowExternal::GetApplicationName ( );
__declspec(implementation_key(617)) long WebComponentWindowExternal::GetApplicationVersion ( );
__declspec(implementation_key(618)) IDispatchPtr WebComponentWindowExternal::GetApplication ( );
__declspec(implementation_key(619)) HRESULT WebComponentWindowExternal::CloseWindow ( );
__declspec(implementation_key(620)) WebComponentPtr WebComponentWindowExternal::GetWebComponent ( );
__declspec(implementation_key(621)) IDispatchPtr WebComponentFormat::GetApplication ( );
__declspec(implementation_key(622)) IDispatchPtr WebComponentFormat::GetParent ( );
__declspec(implementation_key(623)) _bstr_t WebComponentFormat::GetURL ( );
__declspec(implementation_key(624)) void WebComponentFormat::PutURL ( _bstr_t RetValue );
__declspec(implementation_key(625)) _bstr_t WebComponentFormat::GetHTML ( );
__declspec(implementation_key(626)) void WebComponentFormat::PutHTML ( _bstr_t RetValue );
__declspec(implementation_key(627)) _bstr_t WebComponentFormat::GetName ( );
__declspec(implementation_key(628)) void WebComponentFormat::PutName ( _bstr_t RetValue );
__declspec(implementation_key(629)) long WebComponentFormat::GetWidth ( );
__declspec(implementation_key(630)) void WebComponentFormat::PutWidth ( long RetValue );
__declspec(implementation_key(631)) long WebComponentFormat::GetHeight ( );
__declspec(implementation_key(632)) void WebComponentFormat::PutHeight ( long RetValue );
__declspec(implementation_key(633)) _bstr_t WebComponentFormat::GetPreviewGraphic ( );
__declspec(implementation_key(634)) void WebComponentFormat::PutPreviewGraphic ( _bstr_t retval );
__declspec(implementation_key(635)) HRESULT WebComponentFormat::LaunchPropertiesWindow ( );
__declspec(implementation_key(636)) HRESULT ILicWizExternal::PrintHtmlDocument ( IUnknown * punkHtmlDoc );
__declspec(implementation_key(637)) HRESULT ILicWizExternal::InvokeDateTimeApplet ( );
__declspec(implementation_key(638)) _bstr_t ILicWizExternal::FormatDate ( DATE date, _bstr_t pFormat );
__declspec(implementation_key(639)) HRESULT ILicWizExternal::ShowHelp ( VARIANT * pvarId );
__declspec(implementation_key(640)) HRESULT ILicWizExternal::Terminate ( );
__declspec(implementation_key(641)) HRESULT ILicWizExternal::DisableVORWReminder ( long BPC );
__declspec(implementation_key(642)) _bstr_t ILicWizExternal::SaveReceipt ( _bstr_t bstrReceipt );
__declspec(implementation_key(643)) HRESULT ILicWizExternal::OpenInDefaultBrowser ( _bstr_t bstrUrl );
__declspec(implementation_key(644)) long ILicWizExternal::MsoAlert ( _bstr_t bstrText, _bstr_t bstrButtons, _bstr_t bstrIcon );
__declspec(implementation_key(645)) long ILicWizExternal::DepositPidKey ( _bstr_t bstrKey, int fMORW );
__declspec(implementation_key(646)) HRESULT ILicWizExternal::WriteLog ( _bstr_t bstrMessage );
__declspec(implementation_key(647)) HRESULT ILicWizExternal::ResignDpc ( _bstr_t bstrProductCode );
__declspec(implementation_key(648)) HRESULT ILicWizExternal::ResetPID ( );
__declspec(implementation_key(649)) HRESULT ILicWizExternal::SetDialogSize ( long dx, long dy );
__declspec(implementation_key(650)) long ILicWizExternal::VerifyClock ( long lMode );
__declspec(implementation_key(651)) HRESULT ILicWizExternal::SortSelectOptions ( IDispatch * pdispSelect );
__declspec(implementation_key(652)) HRESULT ILicWizExternal::InternetDisconnect ( );
__declspec(implementation_key(653)) int ILicWizExternal::GetConnectedState ( );
__declspec(implementation_key(654)) long ILicWizExternal::GetContext ( );
__declspec(implementation_key(655)) IDispatchPtr ILicWizExternal::GetValidator ( );
__declspec(implementation_key(656)) IDispatchPtr ILicWizExternal::GetLicAgent ( );
__declspec(implementation_key(657)) _bstr_t ILicWizExternal::GetCountryInfo ( );
__declspec(implementation_key(658)) void ILicWizExternal::PutWizardVisible ( int _arg1 );
__declspec(implementation_key(659)) void ILicWizExternal::PutWizardTitle ( _bstr_t _arg1 );
__declspec(implementation_key(660)) int ILicWizExternal::GetAnimationEnabled ( );
__declspec(implementation_key(661)) void ILicWizExternal::PutCurrentHelpId ( long _arg1 );
__declspec(implementation_key(662)) _bstr_t ILicWizExternal::GetOfficeOnTheWebUrl ( );
__declspec(implementation_key(663)) _variant_t ILicValidator::GetProducts ( );
__declspec(implementation_key(664)) int ILicValidator::GetSelection ( );
__declspec(implementation_key(665)) void ILicValidator::PutSelection ( int piSel );
__declspec(implementation_key(666)) unsigned long ILicAgent::Initialize ( unsigned long dwBPC, unsigned long dwMode, _bstr_t bstrLicSource );
__declspec(implementation_key(667)) _bstr_t ILicAgent::GetFirstName ( );
__declspec(implementation_key(668)) HRESULT ILicAgent::SetFirstName ( _bstr_t bstrNewVal );
__declspec(implementation_key(669)) _bstr_t ILicAgent::GetLastName ( );
__declspec(implementation_key(670)) HRESULT ILicAgent::SetLastName ( _bstr_t bstrNewVal );
__declspec(implementation_key(671)) _bstr_t ILicAgent::GetOrgName ( );
__declspec(implementation_key(672)) HRESULT ILicAgent::SetOrgName ( _bstr_t bstrNewVal );
__declspec(implementation_key(673)) _bstr_t ILicAgent::GetEmail ( );
__declspec(implementation_key(674)) HRESULT ILicAgent::SetEmail ( _bstr_t bstrNewVal );
__declspec(implementation_key(675)) _bstr_t ILicAgent::GetPhone ( );
__declspec(implementation_key(676)) HRESULT ILicAgent::SetPhone ( _bstr_t bstrNewVal );
__declspec(implementation_key(677)) _bstr_t ILicAgent::GetAddress1 ( );
__declspec(implementation_key(678)) HRESULT ILicAgent::SetAddress1 ( _bstr_t bstrNewVal );
__declspec(implementation_key(679)) _bstr_t ILicAgent::GetCity ( );
__declspec(implementation_key(680)) HRESULT ILicAgent::SetCity ( _bstr_t bstrNewVal );
__declspec(implementation_key(681)) _bstr_t ILicAgent::GetState ( );
__declspec(implementation_key(682)) HRESULT ILicAgent::SetState ( _bstr_t bstrNewVal );
__declspec(implementation_key(683)) _bstr_t ILicAgent::GetCountryCode ( );
__declspec(implementation_key(684)) HRESULT ILicAgent::SetCountryCode ( _bstr_t bstrNewVal );
__declspec(implementation_key(685)) _bstr_t ILicAgent::GetCountryDesc ( );
__declspec(implementation_key(686)) HRESULT ILicAgent::SetCountryDesc ( _bstr_t bstrNewVal );
__declspec(implementation_key(687)) _bstr_t ILicAgent::GetZip ( );
__declspec(implementation_key(688)) HRESULT ILicAgent::SetZip ( _bstr_t bstrNewVal );
__declspec(implementation_key(689)) unsigned long ILicAgent::GetIsoLanguage ( );
__declspec(implementation_key(690)) HRESULT ILicAgent::SetIsoLanguage ( unsigned long dwNewVal );
__declspec(implementation_key(691)) _bstr_t ILicAgent::GetMSUpdate ( );
__declspec(implementation_key(692)) HRESULT ILicAgent::SetMSUpdate ( _bstr_t bstrNewVal );
__declspec(implementation_key(693)) _bstr_t ILicAgent::GetMSOffer ( );
__declspec(implementation_key(694)) HRESULT ILicAgent::SetMSOffer ( _bstr_t bstrNewVal );
__declspec(implementation_key(695)) _bstr_t ILicAgent::GetOtherOffer ( );
__declspec(implementation_key(696)) HRESULT ILicAgent::SetOtherOffer ( _bstr_t bstrNewVal );
__declspec(implementation_key(697)) _bstr_t ILicAgent::GetAddress2 ( );
__declspec(implementation_key(698)) HRESULT ILicAgent::SetAddress2 ( _bstr_t bstrNewVal );
__declspec(implementation_key(699)) unsigned long ILicAgent::CheckSystemClock ( );
__declspec(implementation_key(700)) DATE ILicAgent::GetExistingExpiryDate ( );
__declspec(implementation_key(701)) DATE ILicAgent::GetNewExpiryDate ( );
__declspec(implementation_key(702)) _bstr_t ILicAgent::GetBillingFirstName ( );
__declspec(implementation_key(703)) HRESULT ILicAgent::SetBillingFirstName ( _bstr_t bstrNewVal );
__declspec(implementation_key(704)) _bstr_t ILicAgent::GetBillingLastName ( );
__declspec(implementation_key(705)) HRESULT ILicAgent::SetBillingLastName ( _bstr_t bstrNewVal );
__declspec(implementation_key(706)) _bstr_t ILicAgent::GetBillingPhone ( );
__declspec(implementation_key(707)) HRESULT ILicAgent::SetBillingPhone ( _bstr_t bstrNewVal );
__declspec(implementation_key(708)) _bstr_t ILicAgent::GetBillingAddress1 ( );
__declspec(implementation_key(709)) HRESULT ILicAgent::SetBillingAddress1 ( _bstr_t bstrNewVal );
__declspec(implementation_key(710)) _bstr_t ILicAgent::GetBillingAddress2 ( );
__declspec(implementation_key(711)) HRESULT ILicAgent::SetBillingAddress2 ( _bstr_t bstrNewVal );
__declspec(implementation_key(712)) _bstr_t ILicAgent::GetBillingCity ( );
__declspec(implementation_key(713)) HRESULT ILicAgent::SetBillingCity ( _bstr_t bstrNewVal );
__declspec(implementation_key(714)) _bstr_t ILicAgent::GetBillingState ( );
__declspec(implementation_key(715)) HRESULT ILicAgent::SetBillingState ( _bstr_t bstrNewVal );
__declspec(implementation_key(716)) _bstr_t ILicAgent::GetBillingCountryCode ( );
__declspec(implementation_key(717)) HRESULT ILicAgent::SetBillingCountryCode ( _bstr_t bstrNewVal );
__declspec(implementation_key(718)) _bstr_t ILicAgent::GetBillingZip ( );
__declspec(implementation_key(719)) HRESULT ILicAgent::SetBillingZip ( _bstr_t bstrNewVal );
__declspec(implementation_key(720)) unsigned long ILicAgent::SaveBillingInfo ( int bSave );
__declspec(implementation_key(721)) int ILicAgent::IsCCRenewalCountry ( _bstr_t bstrCountryCode );
__declspec(implementation_key(722)) _bstr_t ILicAgent::GetVATLabel ( _bstr_t bstrCountryCode );
__declspec(implementation_key(723)) DATE ILicAgent::GetCCRenewalExpiryDate ( );
__declspec(implementation_key(724)) HRESULT ILicAgent::SetVATNumber ( _bstr_t bstrVATNumber );
__declspec(implementation_key(725)) HRESULT ILicAgent::SetCreditCardType ( _bstr_t bstrCCCode );
__declspec(implementation_key(726)) HRESULT ILicAgent::SetCreditCardNumber ( _bstr_t bstrCCNumber );
__declspec(implementation_key(727)) HRESULT ILicAgent::SetCreditCardExpiryYear ( unsigned long dwCCYear );
__declspec(implementation_key(728)) HRESULT ILicAgent::SetCreditCardExpiryMonth ( unsigned long dwCCMonth );
__declspec(implementation_key(729)) unsigned long ILicAgent::GetCreditCardCount ( );
__declspec(implementation_key(730)) _bstr_t ILicAgent::GetCreditCardCode ( unsigned long dwIndex );
__declspec(implementation_key(731)) _bstr_t ILicAgent::GetCreditCardName ( unsigned long dwIndex );
__declspec(implementation_key(732)) _bstr_t ILicAgent::GetVATNumber ( );
__declspec(implementation_key(733)) _bstr_t ILicAgent::GetCreditCardType ( );
__declspec(implementation_key(734)) _bstr_t ILicAgent::GetCreditCardNumber ( );
__declspec(implementation_key(735)) unsigned long ILicAgent::GetCreditCardExpiryYear ( );
__declspec(implementation_key(736)) unsigned long ILicAgent::GetCreditCardExpiryMonth ( );
__declspec(implementation_key(737)) int ILicAgent::GetDisconnectOption ( );
__declspec(implementation_key(738)) HRESULT ILicAgent::SetDisconnectOption ( int bNewVal );
__declspec(implementation_key(739)) HRESULT ILicAgent::AsyncProcessHandshakeRequest ( int bReviseCustInfo );
__declspec(implementation_key(740)) HRESULT ILicAgent::AsyncProcessNewLicenseRequest ( );
__declspec(implementation_key(741)) HRESULT ILicAgent::AsyncProcessReissueLicenseRequest ( );
__declspec(implementation_key(742)) HRESULT ILicAgent::AsyncProcessRetailRenewalLicenseRequest ( );
__declspec(implementation_key(743)) HRESULT ILicAgent::AsyncProcessReviseCustInfoRequest ( );
__declspec(implementation_key(744)) HRESULT ILicAgent::AsyncProcessCCRenewalPriceRequest ( );
__declspec(implementation_key(745)) HRESULT ILicAgent::AsyncProcessCCRenewalLicenseRequest ( );
__declspec(implementation_key(746)) unsigned long ILicAgent::GetAsyncProcessReturnCode ( );
__declspec(implementation_key(747)) int ILicAgent::IsUpgradeAvailable ( );
__declspec(implementation_key(748)) HRESULT ILicAgent::WantUpgrade ( int bWantUpgrade );
__declspec(implementation_key(749)) HRESULT ILicAgent::AsyncProcessDroppedLicenseRequest ( );
__declspec(implementation_key(750)) _bstr_t ILicAgent::GenerateInstallationId ( );
__declspec(implementation_key(751)) unsigned long ILicAgent::DepositConfirmationId ( _bstr_t bstrVal );
__declspec(implementation_key(752)) int ILicAgent::VerifyCheckDigits ( _bstr_t bstrCIDIID );
__declspec(implementation_key(753)) DATE ILicAgent::GetCurrentExpiryDate ( );
__declspec(implementation_key(754)) HRESULT ILicAgent::CancelAsyncProcessRequest ( int bIsLicenseRequest );
__declspec(implementation_key(755)) _bstr_t ILicAgent::GetCurrencyDescription ( unsigned long dwCurrencyIndex );
__declspec(implementation_key(756)) unsigned long ILicAgent::GetPriceItemCount ( );
__declspec(implementation_key(757)) _bstr_t ILicAgent::GetPriceItemLabel ( unsigned long dwIndex );
__declspec(implementation_key(758)) _bstr_t ILicAgent::GetPriceItemValue ( unsigned long dwCurrencyIndex, unsigned long dwIndex );
__declspec(implementation_key(759)) _bstr_t ILicAgent::GetInvoiceText ( );
__declspec(implementation_key(760)) _bstr_t ILicAgent::GetBackendErrorMsg ( );
__declspec(implementation_key(761)) unsigned long ILicAgent::GetCurrencyOption ( );
__declspec(implementation_key(762)) HRESULT ILicAgent::SetCurrencyOption ( unsigned long dwCurrencyOption );
__declspec(implementation_key(763)) _bstr_t ILicAgent::GetEndOfLifeHtmlText ( );
__declspec(implementation_key(764)) unsigned long ILicAgent::DisplaySSLCert ( );
__declspec(implementation_key(765)) HRESULT IMsoEServicesDialog::Close ( VARIANT_BOOL ApplyWebComponentChanges );
__declspec(implementation_key(766)) HRESULT IMsoEServicesDialog::AddTrustedDomain ( _bstr_t Domain );
__declspec(implementation_key(767)) _bstr_t IMsoEServicesDialog::GetApplicationName ( );
__declspec(implementation_key(768)) IDispatchPtr IMsoEServicesDialog::GetApplication ( );
__declspec(implementation_key(769)) IDispatchPtr IMsoEServicesDialog::GetWebComponent ( );
__declspec(implementation_key(770)) IDispatchPtr IMsoEServicesDialog::GetClipArt ( );
__declspec(implementation_key(771)) IDispatchPtr WebComponentProperties::GetShape ( );
__declspec(implementation_key(772)) _bstr_t WebComponentProperties::GetName ( );
__declspec(implementation_key(773)) void WebComponentProperties::PutName ( _bstr_t RetValue );
__declspec(implementation_key(774)) _bstr_t WebComponentProperties::GetURL ( );
__declspec(implementation_key(775)) void WebComponentProperties::PutURL ( _bstr_t RetValue );
__declspec(implementation_key(776)) _bstr_t WebComponentProperties::GetHTML ( );
__declspec(implementation_key(777)) void WebComponentProperties::PutHTML ( _bstr_t RetValue );
__declspec(implementation_key(778)) _bstr_t WebComponentProperties::GetPreviewGraphic ( );
__declspec(implementation_key(779)) void WebComponentProperties::PutPreviewGraphic ( _bstr_t RetValue );
__declspec(implementation_key(780)) _bstr_t WebComponentProperties::GetPreviewHTML ( );
__declspec(implementation_key(781)) void WebComponentProperties::PutPreviewHTML ( _bstr_t RetValue );
__declspec(implementation_key(782)) long WebComponentProperties::GetWidth ( );
__declspec(implementation_key(783)) void WebComponentProperties::PutWidth ( long RetValue );
__declspec(implementation_key(784)) long WebComponentProperties::GetHeight ( );
__declspec(implementation_key(785)) void WebComponentProperties::PutHeight ( long RetValue );
__declspec(implementation_key(786)) _bstr_t WebComponentProperties::GetTag ( );
__declspec(implementation_key(787)) void WebComponentProperties::PutTag ( _bstr_t RetValue );
__declspec(implementation_key(788)) _bstr_t SmartDocument::GetSolutionID ( );
__declspec(implementation_key(789)) void SmartDocument::PutSolutionID ( _bstr_t pbstrID );
__declspec(implementation_key(790)) _bstr_t SmartDocument::GetSolutionURL ( );
__declspec(implementation_key(791)) void SmartDocument::PutSolutionURL ( _bstr_t pbstrUrl );
__declspec(implementation_key(792)) HRESULT SmartDocument::PickSolution ( VARIANT_BOOL ConsiderAllSchemas );
__declspec(implementation_key(793)) HRESULT SmartDocument::RefreshPane ( );
__declspec(implementation_key(794)) _bstr_t SharedWorkspaceMember::GetDomainName ( );
__declspec(implementation_key(795)) _bstr_t SharedWorkspaceMember::GetName ( );
__declspec(implementation_key(796)) _bstr_t SharedWorkspaceMember::GetEmail ( );
__declspec(implementation_key(797)) HRESULT SharedWorkspaceMember::Delete ( );
__declspec(implementation_key(798)) _bstr_t SharedWorkspaceMember::GetId ( );
__declspec(implementation_key(799)) IDispatchPtr SharedWorkspaceMember::GetParent ( );
__declspec(implementation_key(800)) IUnknownPtr SharedWorkspaceMembers::Get_NewEnum ( );
__declspec(implementation_key(801)) SharedWorkspaceMemberPtr SharedWorkspaceMembers::GetItem ( int Index );
__declspec(implementation_key(802)) int SharedWorkspaceMembers::GetCount ( );
__declspec(implementation_key(803)) SharedWorkspaceMemberPtr SharedWorkspaceMembers::Add ( _bstr_t Email, _bstr_t DomainName, _bstr_t DisplayName, const _variant_t & Role );
__declspec(implementation_key(804)) IDispatchPtr SharedWorkspaceMembers::GetParent ( );
__declspec(implementation_key(805)) VARIANT_BOOL SharedWorkspaceMembers::GetItemCountExceeded ( );
__declspec(implementation_key(806)) _bstr_t SharedWorkspaceTask::GetTitle ( );
__declspec(implementation_key(807)) void SharedWorkspaceTask::PutTitle ( _bstr_t Title );
__declspec(implementation_key(808)) _bstr_t SharedWorkspaceTask::GetAssignedTo ( );
__declspec(implementation_key(809)) void SharedWorkspaceTask::PutAssignedTo ( _bstr_t AssignedTo );
__declspec(implementation_key(810)) enum MsoSharedWorkspaceTaskStatus SharedWorkspaceTask::GetStatus ( );
__declspec(implementation_key(811)) void SharedWorkspaceTask::PutStatus ( enum MsoSharedWorkspaceTaskStatus Status );
__declspec(implementation_key(812)) enum MsoSharedWorkspaceTaskPriority SharedWorkspaceTask::GetPriority ( );
__declspec(implementation_key(813)) void SharedWorkspaceTask::PutPriority ( enum MsoSharedWorkspaceTaskPriority Priority );
__declspec(implementation_key(814)) _bstr_t SharedWorkspaceTask::GetDescription ( );
__declspec(implementation_key(815)) void SharedWorkspaceTask::PutDescription ( _bstr_t Description );
__declspec(implementation_key(816)) _variant_t SharedWorkspaceTask::GetDueDate ( );
__declspec(implementation_key(817)) void SharedWorkspaceTask::PutDueDate ( const _variant_t & DueDate );
__declspec(implementation_key(818)) _bstr_t SharedWorkspaceTask::GetCreatedBy ( );
__declspec(implementation_key(819)) _variant_t SharedWorkspaceTask::GetCreatedDate ( );
__declspec(implementation_key(820)) _bstr_t SharedWorkspaceTask::GetModifiedBy ( );
__declspec(implementation_key(821)) _variant_t SharedWorkspaceTask::GetModifiedDate ( );
__declspec(implementation_key(822)) HRESULT SharedWorkspaceTask::Save ( );
__declspec(implementation_key(823)) HRESULT SharedWorkspaceTask::Delete ( );
__declspec(implementation_key(824)) IDispatchPtr SharedWorkspaceTask::GetParent ( );
__declspec(implementation_key(825)) SharedWorkspaceTaskPtr SharedWorkspaceTasks::GetItem ( int Index );
__declspec(implementation_key(826)) int SharedWorkspaceTasks::GetCount ( );
__declspec(implementation_key(827)) SharedWorkspaceTaskPtr SharedWorkspaceTasks::Add ( _bstr_t Title, const _variant_t & Status, const _variant_t & Priority, const _variant_t & Assignee, const _variant_t & Description, const _variant_t & DueDate );
__declspec(implementation_key(828)) IDispatchPtr SharedWorkspaceTasks::GetParent ( );
__declspec(implementation_key(829)) VARIANT_BOOL SharedWorkspaceTasks::GetItemCountExceeded ( );
__declspec(implementation_key(830)) IUnknownPtr SharedWorkspaceTasks::Get_NewEnum ( );
__declspec(implementation_key(831)) _bstr_t SharedWorkspaceFile::GetURL ( );
__declspec(implementation_key(832)) _bstr_t SharedWorkspaceFile::GetCreatedBy ( );
__declspec(implementation_key(833)) _variant_t SharedWorkspaceFile::GetCreatedDate ( );
__declspec(implementation_key(834)) _bstr_t SharedWorkspaceFile::GetModifiedBy ( );
__declspec(implementation_key(835)) _variant_t SharedWorkspaceFile::GetModifiedDate ( );
__declspec(implementation_key(836)) HRESULT SharedWorkspaceFile::Delete ( );
__declspec(implementation_key(837)) IDispatchPtr SharedWorkspaceFile::GetParent ( );
__declspec(implementation_key(838)) IUnknownPtr SharedWorkspaceFiles::Get_NewEnum ( );
__declspec(implementation_key(839)) SharedWorkspaceFilePtr SharedWorkspaceFiles::GetItem ( int Index );
__declspec(implementation_key(840)) int SharedWorkspaceFiles::GetCount ( );
__declspec(implementation_key(841)) SharedWorkspaceFilePtr SharedWorkspaceFiles::Add ( _bstr_t FileName, const _variant_t & ParentFolder, const _variant_t & OverwriteIfFileAlreadyExists, const _variant_t & KeepInSync );
__declspec(implementation_key(842)) IDispatchPtr SharedWorkspaceFiles::GetParent ( );
__declspec(implementation_key(843)) VARIANT_BOOL SharedWorkspaceFiles::GetItemCountExceeded ( );
__declspec(implementation_key(844)) _bstr_t SharedWorkspaceFolder::GetFolderName ( );
__declspec(implementation_key(845)) HRESULT SharedWorkspaceFolder::Delete ( const _variant_t & DeleteEventIfFolderContainsFiles );
__declspec(implementation_key(846)) IDispatchPtr SharedWorkspaceFolder::GetParent ( );
__declspec(implementation_key(847)) IUnknownPtr SharedWorkspaceFolders::Get_NewEnum ( );
__declspec(implementation_key(848)) SharedWorkspaceFolderPtr SharedWorkspaceFolders::GetItem ( int Index );
__declspec(implementation_key(849)) int SharedWorkspaceFolders::GetCount ( );
__declspec(implementation_key(850)) SharedWorkspaceFolderPtr SharedWorkspaceFolders::Add ( _bstr_t FolderName, const _variant_t & ParentFolder );
__declspec(implementation_key(851)) IDispatchPtr SharedWorkspaceFolders::GetParent ( );
__declspec(implementation_key(852)) VARIANT_BOOL SharedWorkspaceFolders::GetItemCountExceeded ( );
__declspec(implementation_key(853)) _bstr_t SharedWorkspaceLink::GetURL ( );
__declspec(implementation_key(854)) void SharedWorkspaceLink::PutURL ( _bstr_t URL );
__declspec(implementation_key(855)) _bstr_t SharedWorkspaceLink::GetDescription ( );
__declspec(implementation_key(856)) void SharedWorkspaceLink::PutDescription ( _bstr_t Description );
__declspec(implementation_key(857)) _bstr_t SharedWorkspaceLink::GetNotes ( );
__declspec(implementation_key(858)) void SharedWorkspaceLink::PutNotes ( _bstr_t Notes );
__declspec(implementation_key(859)) _bstr_t SharedWorkspaceLink::GetCreatedBy ( );
__declspec(implementation_key(860)) _variant_t SharedWorkspaceLink::GetCreatedDate ( );
__declspec(implementation_key(861)) _bstr_t SharedWorkspaceLink::GetModifiedBy ( );
__declspec(implementation_key(862)) _variant_t SharedWorkspaceLink::GetModifiedDate ( );
__declspec(implementation_key(863)) HRESULT SharedWorkspaceLink::Save ( );
__declspec(implementation_key(864)) HRESULT SharedWorkspaceLink::Delete ( );
__declspec(implementation_key(865)) IDispatchPtr SharedWorkspaceLink::GetParent ( );
__declspec(implementation_key(866)) IUnknownPtr SharedWorkspaceLinks::Get_NewEnum ( );
__declspec(implementation_key(867)) SharedWorkspaceLinkPtr SharedWorkspaceLinks::GetItem ( int Index );
__declspec(implementation_key(868)) int SharedWorkspaceLinks::GetCount ( );
__declspec(implementation_key(869)) SharedWorkspaceLinkPtr SharedWorkspaceLinks::Add ( _bstr_t URL, const _variant_t & Description, const _variant_t & Notes );
__declspec(implementation_key(870)) IDispatchPtr SharedWorkspaceLinks::GetParent ( );
__declspec(implementation_key(871)) VARIANT_BOOL SharedWorkspaceLinks::GetItemCountExceeded ( );
__declspec(implementation_key(872)) _bstr_t SharedWorkspace::GetName ( );
__declspec(implementation_key(873)) void SharedWorkspace::PutName ( _bstr_t Name );
__declspec(implementation_key(874)) SharedWorkspaceMembersPtr SharedWorkspace::GetMembers ( );
__declspec(implementation_key(875)) SharedWorkspaceTasksPtr SharedWorkspace::GetTasks ( );
__declspec(implementation_key(876)) SharedWorkspaceFilesPtr SharedWorkspace::GetFiles ( );
__declspec(implementation_key(877)) SharedWorkspaceFoldersPtr SharedWorkspace::GetFolders ( );
__declspec(implementation_key(878)) SharedWorkspaceLinksPtr SharedWorkspace::GetLinks ( );
__declspec(implementation_key(879)) HRESULT SharedWorkspace::Refresh ( );
__declspec(implementation_key(880)) HRESULT SharedWorkspace::CreateNew ( const _variant_t & URL, const _variant_t & Name );
__declspec(implementation_key(881)) HRESULT SharedWorkspace::Delete ( );
__declspec(implementation_key(882)) IDispatchPtr SharedWorkspace::GetParent ( );
__declspec(implementation_key(883)) _bstr_t SharedWorkspace::GetURL ( );
__declspec(implementation_key(884)) VARIANT_BOOL SharedWorkspace::GetConnected ( );
__declspec(implementation_key(885)) _variant_t SharedWorkspace::GetLastRefreshed ( );
__declspec(implementation_key(886)) _bstr_t SharedWorkspace::GetSourceURL ( );
__declspec(implementation_key(887)) void SharedWorkspace::PutSourceURL ( _bstr_t pbstrSourceURL );
__declspec(implementation_key(888)) HRESULT SharedWorkspace::RemoveDocument ( );
__declspec(implementation_key(889)) HRESULT SharedWorkspace::Disconnect ( );
__declspec(implementation_key(890)) enum MsoSyncStatusType Sync::GetStatus ( );
__declspec(implementation_key(891)) _bstr_t Sync::GetWorkspaceLastChangedBy ( );
__declspec(implementation_key(892)) _variant_t Sync::GetLastSyncTime ( );
__declspec(implementation_key(893)) enum MsoSyncErrorType Sync::GetErrorType ( );
__declspec(implementation_key(894)) HRESULT Sync::GetUpdate ( );
__declspec(implementation_key(895)) HRESULT Sync::PutUpdate ( );
__declspec(implementation_key(896)) HRESULT Sync::OpenVersion ( enum MsoSyncVersionType SyncVersionType );
__declspec(implementation_key(897)) HRESULT Sync::ResolveConflict ( enum MsoSyncConflictResolutionType SyncConflictResolution );
__declspec(implementation_key(898)) HRESULT Sync::Unsuspend ( );
__declspec(implementation_key(899)) IDispatchPtr Sync::GetParent ( );
__declspec(implementation_key(900)) _variant_t DocumentLibraryVersion::GetModified ( );
__declspec(implementation_key(901)) long DocumentLibraryVersion::GetIndex ( );
__declspec(implementation_key(902)) IDispatchPtr DocumentLibraryVersion::GetParent ( );
__declspec(implementation_key(903)) _bstr_t DocumentLibraryVersion::GetModifiedBy ( );
__declspec(implementation_key(904)) _bstr_t DocumentLibraryVersion::GetComments ( );
__declspec(implementation_key(905)) HRESULT DocumentLibraryVersion::Delete ( );
__declspec(implementation_key(906)) IDispatchPtr DocumentLibraryVersion::Open ( );
__declspec(implementation_key(907)) IDispatchPtr DocumentLibraryVersion::Restore ( );
__declspec(implementation_key(908)) DocumentLibraryVersionPtr DocumentLibraryVersions::GetItem ( long lIndex );
__declspec(implementation_key(909)) long DocumentLibraryVersions::GetCount ( );
__declspec(implementation_key(910)) IDispatchPtr DocumentLibraryVersions::GetParent ( );
__declspec(implementation_key(911)) VARIANT_BOOL DocumentLibraryVersions::GetIsVersioningEnabled ( );
__declspec(implementation_key(912)) IUnknownPtr DocumentLibraryVersions::Get_NewEnum ( );
__declspec(implementation_key(913)) _bstr_t UserPermission::GetUserId ( );
__declspec(implementation_key(914)) long UserPermission::GetPermission ( );
__declspec(implementation_key(915)) void UserPermission::PutPermission ( long Permission );
__declspec(implementation_key(916)) _variant_t UserPermission::GetExpirationDate ( );
__declspec(implementation_key(917)) void UserPermission::PutExpirationDate ( const _variant_t & ExpirationDate );
__declspec(implementation_key(918)) IDispatchPtr UserPermission::GetParent ( );
__declspec(implementation_key(919)) HRESULT UserPermission::Remove ( );
__declspec(implementation_key(920)) UserPermissionPtr Permission::GetItem ( const _variant_t & Index );
__declspec(implementation_key(921)) long Permission::GetCount ( );
__declspec(implementation_key(922)) VARIANT_BOOL Permission::GetEnableTrustedBrowser ( );
__declspec(implementation_key(923)) void Permission::PutEnableTrustedBrowser ( VARIANT_BOOL Enable );
__declspec(implementation_key(924)) UserPermissionPtr Permission::Add ( _bstr_t UserId, const _variant_t & Permission, const _variant_t & ExpirationDate );
__declspec(implementation_key(925)) HRESULT Permission::ApplyPolicy ( _bstr_t FileName );
__declspec(implementation_key(926)) IDispatchPtr Permission::GetParent ( );
__declspec(implementation_key(927)) HRESULT Permission::RemoveAll ( );
__declspec(implementation_key(928)) VARIANT_BOOL Permission::GetEnabled ( );
__declspec(implementation_key(929)) void Permission::PutEnabled ( VARIANT_BOOL Enabled );
__declspec(implementation_key(930)) _bstr_t Permission::GetRequestPermissionURL ( );
__declspec(implementation_key(931)) void Permission::PutRequestPermissionURL ( _bstr_t Contact );
__declspec(implementation_key(932)) _bstr_t Permission::GetPolicyName ( );
__declspec(implementation_key(933)) _bstr_t Permission::GetPolicyDescription ( );
__declspec(implementation_key(934)) VARIANT_BOOL Permission::GetStoreLicenses ( );
__declspec(implementation_key(935)) void Permission::PutStoreLicenses ( VARIANT_BOOL Enabled );
__declspec(implementation_key(936)) _bstr_t Permission::GetDocumentAuthor ( );
__declspec(implementation_key(937)) void Permission::PutDocumentAuthor ( _bstr_t Author );
__declspec(implementation_key(938)) VARIANT_BOOL Permission::GetPermissionFromPolicy ( );
__declspec(implementation_key(939)) IUnknownPtr Permission::Get_NewEnum ( );
__declspec(implementation_key(940)) CommandBarControlPtr _CommandBars::GetActionControl ( );
__declspec(implementation_key(941)) CommandBarPtr _CommandBars::GetActiveMenuBar ( );
__declspec(implementation_key(942)) CommandBarPtr _CommandBars::Add ( const _variant_t & Name, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary );
__declspec(implementation_key(943)) int _CommandBars::GetCount ( );
__declspec(implementation_key(944)) VARIANT_BOOL _CommandBars::GetDisplayTooltips ( );
__declspec(implementation_key(945)) void _CommandBars::PutDisplayTooltips ( VARIANT_BOOL pvarfDisplayTooltips );
__declspec(implementation_key(946)) VARIANT_BOOL _CommandBars::GetDisplayKeysInTooltips ( );
__declspec(implementation_key(947)) void _CommandBars::PutDisplayKeysInTooltips ( VARIANT_BOOL pvarfDisplayKeys );
__declspec(implementation_key(948)) CommandBarControlPtr _CommandBars::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible );
__declspec(implementation_key(949)) CommandBarPtr _CommandBars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(950)) VARIANT_BOOL _CommandBars::GetLargeButtons ( );
__declspec(implementation_key(951)) void _CommandBars::PutLargeButtons ( VARIANT_BOOL pvarfLargeButtons );
__declspec(implementation_key(952)) enum MsoMenuAnimation _CommandBars::GetMenuAnimationStyle ( );
__declspec(implementation_key(953)) void _CommandBars::PutMenuAnimationStyle ( enum MsoMenuAnimation pma );
__declspec(implementation_key(954)) IUnknownPtr _CommandBars::Get_NewEnum ( );
__declspec(implementation_key(955)) IDispatchPtr _CommandBars::GetParent ( );
__declspec(implementation_key(956)) HRESULT _CommandBars::ReleaseFocus ( );
__declspec(implementation_key(957)) int _CommandBars::GetIdsString ( int ids, BSTR * pbstrName );
__declspec(implementation_key(958)) int _CommandBars::GetTmcGetName ( int tmc, BSTR * pbstrName );
__declspec(implementation_key(959)) VARIANT_BOOL _CommandBars::GetAdaptiveMenus ( );
__declspec(implementation_key(960)) void _CommandBars::PutAdaptiveMenus ( VARIANT_BOOL pvarfAdaptiveMenus );
__declspec(implementation_key(961)) CommandBarControlsPtr _CommandBars::FindControls ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible );
__declspec(implementation_key(962)) CommandBarPtr _CommandBars::AddEx ( const _variant_t & TbidOrName, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary, const _variant_t & TbtrProtection );
__declspec(implementation_key(963)) VARIANT_BOOL _CommandBars::GetDisplayFonts ( );
__declspec(implementation_key(964)) void _CommandBars::PutDisplayFonts ( VARIANT_BOOL pvarfDisplayFonts );
__declspec(implementation_key(965)) VARIANT_BOOL _CommandBars::GetDisableCustomize ( );
__declspec(implementation_key(966)) void _CommandBars::PutDisableCustomize ( VARIANT_BOOL pvarfDisableCustomize );
__declspec(implementation_key(967)) VARIANT_BOOL _CommandBars::GetDisableAskAQuestionDropdown ( );
__declspec(implementation_key(968)) void _CommandBars::PutDisableAskAQuestionDropdown ( VARIANT_BOOL pvarfDisableAskAQuestionDropdown );
__declspec(implementation_key(969)) VARIANT_BOOL CommandBar::GetBuiltIn ( );
__declspec(implementation_key(970)) _bstr_t CommandBar::GetContext ( );
__declspec(implementation_key(971)) void CommandBar::PutContext ( _bstr_t pbstrContext );
__declspec(implementation_key(972)) CommandBarControlsPtr CommandBar::GetControls ( );
__declspec(implementation_key(973)) HRESULT CommandBar::Delete ( );
__declspec(implementation_key(974)) VARIANT_BOOL CommandBar::GetEnabled ( );
__declspec(implementation_key(975)) void CommandBar::PutEnabled ( VARIANT_BOOL pvarfEnabled );
__declspec(implementation_key(976)) CommandBarControlPtr CommandBar::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible, const _variant_t & Recursive );
__declspec(implementation_key(977)) int CommandBar::GetHeight ( );
__declspec(implementation_key(978)) void CommandBar::PutHeight ( int pdy );
__declspec(implementation_key(979)) int CommandBar::GetIndex ( );
__declspec(implementation_key(980)) long CommandBar::GetInstanceId ( );
__declspec(implementation_key(981)) int CommandBar::GetLeft ( );
__declspec(implementation_key(982)) void CommandBar::PutLeft ( int pxpLeft );
__declspec(implementation_key(983)) _bstr_t CommandBar::GetName ( );
__declspec(implementation_key(984)) void CommandBar::PutName ( _bstr_t pbstrName );
__declspec(implementation_key(985)) _bstr_t CommandBar::GetNameLocal ( );
__declspec(implementation_key(986)) void CommandBar::PutNameLocal ( _bstr_t pbstrNameLocal );
__declspec(implementation_key(987)) IDispatchPtr CommandBar::GetParent ( );
__declspec(implementation_key(988)) enum MsoBarPosition CommandBar::GetPosition ( );
__declspec(implementation_key(989)) void CommandBar::PutPosition ( enum MsoBarPosition ppos );
__declspec(implementation_key(990)) int CommandBar::GetRowIndex ( );
__declspec(implementation_key(991)) void CommandBar::PutRowIndex ( int piRow );
__declspec(implementation_key(992)) enum MsoBarProtection CommandBar::GetProtection ( );
__declspec(implementation_key(993)) void CommandBar::PutProtection ( enum MsoBarProtection pprot );
__declspec(implementation_key(994)) HRESULT CommandBar::Reset ( );
__declspec(implementation_key(995)) HRESULT CommandBar::ShowPopup ( const _variant_t & x, const _variant_t & y );
__declspec(implementation_key(996)) int CommandBar::GetTop ( );
__declspec(implementation_key(997)) void CommandBar::PutTop ( int pypTop );
__declspec(implementation_key(998)) enum MsoBarType CommandBar::GetType ( );
__declspec(implementation_key(999)) VARIANT_BOOL CommandBar::GetVisible ( );
__declspec(implementation_key(1000)) void CommandBar::PutVisible ( VARIANT_BOOL pvarfVisible );
__declspec(implementation_key(1001)) int CommandBar::GetWidth ( );
__declspec(implementation_key(1002)) void CommandBar::PutWidth ( int pdx );
__declspec(implementation_key(1003)) VARIANT_BOOL CommandBar::GetAdaptiveMenu ( );
__declspec(implementation_key(1004)) void CommandBar::PutAdaptiveMenu ( VARIANT_BOOL pvarfAdaptiveMenu );
__declspec(implementation_key(1005)) int CommandBar::GetId ( );
__declspec(implementation_key(1006)) VARIANT_BOOL CommandBarControl::GetBeginGroup ( );
__declspec(implementation_key(1007)) void CommandBarControl::PutBeginGroup ( VARIANT_BOOL pvarfBeginGroup );
__declspec(implementation_key(1008)) VARIANT_BOOL CommandBarControl::GetBuiltIn ( );
__declspec(implementation_key(1009)) _bstr_t CommandBarControl::GetCaption ( );
__declspec(implementation_key(1010)) void CommandBarControl::PutCaption ( _bstr_t pbstrCaption );
__declspec(implementation_key(1011)) IDispatchPtr CommandBarControl::GetControl ( );
__declspec(implementation_key(1012)) CommandBarControlPtr CommandBarControl::Copy ( const _variant_t & Bar, const _variant_t & Before );
__declspec(implementation_key(1013)) HRESULT CommandBarControl::Delete ( const _variant_t & Temporary );
__declspec(implementation_key(1014)) _bstr_t CommandBarControl::GetDescriptionText ( );
__declspec(implementation_key(1015)) void CommandBarControl::PutDescriptionText ( _bstr_t pbstrText );
__declspec(implementation_key(1016)) VARIANT_BOOL CommandBarControl::GetEnabled ( );
__declspec(implementation_key(1017)) void CommandBarControl::PutEnabled ( VARIANT_BOOL pvarfEnabled );
__declspec(implementation_key(1018)) HRESULT CommandBarControl::Execute ( );
__declspec(implementation_key(1019)) int CommandBarControl::GetHeight ( );
__declspec(implementation_key(1020)) void CommandBarControl::PutHeight ( int pdy );
__declspec(implementation_key(1021)) int CommandBarControl::GetHelpContextId ( );
__declspec(implementation_key(1022)) void CommandBarControl::PutHelpContextId ( int pid );
__declspec(implementation_key(1023)) _bstr_t CommandBarControl::GetHelpFile ( );
__declspec(implementation_key(1024)) void CommandBarControl::PutHelpFile ( _bstr_t pbstrFilename );
__declspec(implementation_key(1025)) int CommandBarControl::GetId ( );
__declspec(implementation_key(1026)) int CommandBarControl::GetIndex ( );
__declspec(implementation_key(1027)) long CommandBarControl::GetInstanceId ( );
__declspec(implementation_key(1028)) CommandBarControlPtr CommandBarControl::Move ( const _variant_t & Bar, const _variant_t & Before );
__declspec(implementation_key(1029)) int CommandBarControl::GetLeft ( );
__declspec(implementation_key(1030)) enum MsoControlOLEUsage CommandBarControl::GetOLEUsage ( );
__declspec(implementation_key(1031)) void CommandBarControl::PutOLEUsage ( enum MsoControlOLEUsage pcou );
__declspec(implementation_key(1032)) _bstr_t CommandBarControl::GetOnAction ( );
__declspec(implementation_key(1033)) void CommandBarControl::PutOnAction ( _bstr_t pbstrOnAction );
__declspec(implementation_key(1034)) CommandBarPtr CommandBarControl::GetParent ( );
__declspec(implementation_key(1035)) _bstr_t CommandBarControl::GetParameter ( );
__declspec(implementation_key(1036)) void CommandBarControl::PutParameter ( _bstr_t pbstrParam );
__declspec(implementation_key(1037)) int CommandBarControl::GetPriority ( );
__declspec(implementation_key(1038)) void CommandBarControl::PutPriority ( int pnPri );
__declspec(implementation_key(1039)) HRESULT CommandBarControl::Reset ( );
__declspec(implementation_key(1040)) HRESULT CommandBarControl::SetFocus ( );
__declspec(implementation_key(1041)) _bstr_t CommandBarControl::GetTag ( );
__declspec(implementation_key(1042)) void CommandBarControl::PutTag ( _bstr_t pbstrTag );
__declspec(implementation_key(1043)) _bstr_t CommandBarControl::GetTooltipText ( );
__declspec(implementation_key(1044)) void CommandBarControl::PutTooltipText ( _bstr_t pbstrTooltip );
__declspec(implementation_key(1045)) int CommandBarControl::GetTop ( );
__declspec(implementation_key(1046)) enum MsoControlType CommandBarControl::GetType ( );
__declspec(implementation_key(1047)) VARIANT_BOOL CommandBarControl::GetVisible ( );
__declspec(implementation_key(1048)) void CommandBarControl::PutVisible ( VARIANT_BOOL pvarfVisible );
__declspec(implementation_key(1049)) int CommandBarControl::GetWidth ( );
__declspec(implementation_key(1050)) void CommandBarControl::PutWidth ( int pdx );
__declspec(implementation_key(1051)) VARIANT_BOOL CommandBarControl::GetIsPriorityDropped ( );
__declspec(implementation_key(1052)) HRESULT CommandBarControl::Reserved1 ( );
__declspec(implementation_key(1053)) HRESULT CommandBarControl::Reserved2 ( );
__declspec(implementation_key(1054)) HRESULT CommandBarControl::Reserved3 ( );
__declspec(implementation_key(1055)) HRESULT CommandBarControl::Reserved4 ( );
__declspec(implementation_key(1056)) HRESULT CommandBarControl::Reserved5 ( );
__declspec(implementation_key(1057)) HRESULT CommandBarControl::Reserved6 ( );
__declspec(implementation_key(1058)) HRESULT CommandBarControl::Reserved7 ( );
__declspec(implementation_key(1059)) CommandBarControlPtr CommandBarControls::Add ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Parameter, const _variant_t & Before, const _variant_t & Temporary );
__declspec(implementation_key(1060)) int CommandBarControls::GetCount ( );
__declspec(implementation_key(1061)) CommandBarControlPtr CommandBarControls::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1062)) IUnknownPtr CommandBarControls::Get_NewEnum ( );
__declspec(implementation_key(1063)) CommandBarPtr CommandBarControls::GetParent ( );
__declspec(implementation_key(1064)) VARIANT_BOOL _CommandBarButton::GetBuiltInFace ( );
__declspec(implementation_key(1065)) void _CommandBarButton::PutBuiltInFace ( VARIANT_BOOL pvarfBuiltIn );
__declspec(implementation_key(1066)) HRESULT _CommandBarButton::CopyFace ( );
__declspec(implementation_key(1067)) int _CommandBarButton::GetFaceId ( );
__declspec(implementation_key(1068)) void _CommandBarButton::PutFaceId ( int pid );
__declspec(implementation_key(1069)) HRESULT _CommandBarButton::PasteFace ( );
__declspec(implementation_key(1070)) _bstr_t _CommandBarButton::GetShortcutText ( );
__declspec(implementation_key(1071)) void _CommandBarButton::PutShortcutText ( _bstr_t pbstrText );
__declspec(implementation_key(1072)) enum MsoButtonState _CommandBarButton::GetState ( );
__declspec(implementation_key(1073)) void _CommandBarButton::PutState ( enum MsoButtonState pstate );
__declspec(implementation_key(1074)) enum MsoButtonStyle _CommandBarButton::GetStyle ( );
__declspec(implementation_key(1075)) void _CommandBarButton::PutStyle ( enum MsoButtonStyle pstyle );
__declspec(implementation_key(1076)) enum MsoCommandBarButtonHyperlinkType _CommandBarButton::GetHyperlinkType ( );
__declspec(implementation_key(1077)) void _CommandBarButton::PutHyperlinkType ( enum MsoCommandBarButtonHyperlinkType phlType );
__declspec(implementation_key(1078)) IPictureDisp * _CommandBarButton::GetPicture ( );
__declspec(implementation_key(1079)) void _CommandBarButton::PutPicture ( IPictureDisp * ppdispPicture );
__declspec(implementation_key(1080)) IPictureDisp * _CommandBarButton::GetMask ( );
__declspec(implementation_key(1081)) void _CommandBarButton::PutMask ( IPictureDisp * ppipictdispMask );
__declspec(implementation_key(1082)) CommandBarPtr CommandBarPopup::GetCommandBar ( );
__declspec(implementation_key(1083)) CommandBarControlsPtr CommandBarPopup::GetControls ( );
__declspec(implementation_key(1084)) enum MsoOLEMenuGroup CommandBarPopup::GetOLEMenuGroup ( );
__declspec(implementation_key(1085)) void CommandBarPopup::PutOLEMenuGroup ( enum MsoOLEMenuGroup pomg );
__declspec(implementation_key(1086)) HRESULT _CommandBarComboBox::AddItem ( _bstr_t Text, const _variant_t & Index );
__declspec(implementation_key(1087)) HRESULT _CommandBarComboBox::Clear ( );
__declspec(implementation_key(1088)) int _CommandBarComboBox::GetDropDownLines ( );
__declspec(implementation_key(1089)) void _CommandBarComboBox::PutDropDownLines ( int pcLines );
__declspec(implementation_key(1090)) int _CommandBarComboBox::GetDropDownWidth ( );
__declspec(implementation_key(1091)) void _CommandBarComboBox::PutDropDownWidth ( int pdx );
__declspec(implementation_key(1092)) _bstr_t _CommandBarComboBox::GetList ( int Index );
__declspec(implementation_key(1093)) void _CommandBarComboBox::PutList ( int Index, _bstr_t pbstrItem );
__declspec(implementation_key(1094)) int _CommandBarComboBox::GetListCount ( );
__declspec(implementation_key(1095)) int _CommandBarComboBox::GetListHeaderCount ( );
__declspec(implementation_key(1096)) void _CommandBarComboBox::PutListHeaderCount ( int pcItems );
__declspec(implementation_key(1097)) int _CommandBarComboBox::GetListIndex ( );
__declspec(implementation_key(1098)) void _CommandBarComboBox::PutListIndex ( int pi );
__declspec(implementation_key(1099)) HRESULT _CommandBarComboBox::RemoveItem ( int Index );
__declspec(implementation_key(1100)) enum MsoComboStyle _CommandBarComboBox::GetStyle ( );
__declspec(implementation_key(1101)) void _CommandBarComboBox::PutStyle ( enum MsoComboStyle pstyle );
__declspec(implementation_key(1102)) _bstr_t _CommandBarComboBox::GetText ( );
__declspec(implementation_key(1103)) void _CommandBarComboBox::PutText ( _bstr_t pbstrText );
__declspec(implementation_key(1104)) _bstr_t _CommandBarActiveX::GetControlCLSID ( );
__declspec(implementation_key(1105)) void _CommandBarActiveX::PutControlCLSID ( _bstr_t pbstrClsid );
__declspec(implementation_key(1106)) IUnknownPtr _CommandBarActiveX::GetQueryControlInterface ( _bstr_t bstrIid );
__declspec(implementation_key(1107)) HRESULT _CommandBarActiveX::SetInnerObjectFactory ( IUnknown * pUnk );
__declspec(implementation_key(1108)) HRESULT _CommandBarActiveX::EnsureControl ( );
__declspec(implementation_key(1109)) void _CommandBarActiveX::PutInitWith ( IUnknown * _arg1 );
__declspec(implementation_key(1110)) IDispatchPtr ConnectorFormat::GetParent ( );
__declspec(implementation_key(1111)) HRESULT ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, int ConnectionSite );
__declspec(implementation_key(1112)) HRESULT ConnectorFormat::BeginDisconnect ( );
__declspec(implementation_key(1113)) HRESULT ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, int ConnectionSite );
__declspec(implementation_key(1114)) HRESULT ConnectorFormat::EndDisconnect ( );
__declspec(implementation_key(1115)) enum MsoTriState ConnectorFormat::GetBeginConnected ( );
__declspec(implementation_key(1116)) ShapePtr ConnectorFormat::GetBeginConnectedShape ( );
__declspec(implementation_key(1117)) int ConnectorFormat::GetBeginConnectionSite ( );
__declspec(implementation_key(1118)) enum MsoTriState ConnectorFormat::GetEndConnected ( );
__declspec(implementation_key(1119)) ShapePtr ConnectorFormat::GetEndConnectedShape ( );
__declspec(implementation_key(1120)) int ConnectorFormat::GetEndConnectionSite ( );
__declspec(implementation_key(1121)) enum MsoConnectorType ConnectorFormat::GetType ( );
__declspec(implementation_key(1122)) void ConnectorFormat::PutType ( enum MsoConnectorType Type );
__declspec(implementation_key(1123)) IDispatchPtr FreeformBuilder::GetParent ( );
__declspec(implementation_key(1124)) HRESULT FreeformBuilder::AddNodes ( enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(1125)) ShapePtr FreeformBuilder::ConvertToShape ( );
__declspec(implementation_key(1126)) IDispatchPtr GroupShapes::GetParent ( );
__declspec(implementation_key(1127)) int GroupShapes::GetCount ( );
__declspec(implementation_key(1128)) ShapePtr GroupShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(1129)) IUnknownPtr GroupShapes::Get_NewEnum ( );
__declspec(implementation_key(1130)) ShapeRangePtr GroupShapes::Range ( const _variant_t & Index );
__declspec(implementation_key(1131)) IDispatchPtr Shape::GetParent ( );
__declspec(implementation_key(1132)) HRESULT Shape::Apply ( );
__declspec(implementation_key(1133)) HRESULT Shape::Delete ( );
__declspec(implementation_key(1134)) ShapePtr Shape::Duplicate ( );
__declspec(implementation_key(1135)) HRESULT Shape::Flip ( enum MsoFlipCmd FlipCmd );
__declspec(implementation_key(1136)) HRESULT Shape::IncrementLeft ( float Increment );
__declspec(implementation_key(1137)) HRESULT Shape::IncrementRotation ( float Increment );
__declspec(implementation_key(1138)) HRESULT Shape::IncrementTop ( float Increment );
__declspec(implementation_key(1139)) HRESULT Shape::PickUp ( );
__declspec(implementation_key(1140)) HRESULT Shape::RerouteConnections ( );
__declspec(implementation_key(1141)) HRESULT Shape::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale );
__declspec(implementation_key(1142)) HRESULT Shape::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale );
__declspec(implementation_key(1143)) HRESULT Shape::Select ( const _variant_t & Replace );
__declspec(implementation_key(1144)) HRESULT Shape::SetShapesDefaultProperties ( );
__declspec(implementation_key(1145)) ShapeRangePtr Shape::Ungroup ( );
__declspec(implementation_key(1146)) HRESULT Shape::ZOrder ( enum MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(1147)) AdjustmentsPtr Shape::GetAdjustments ( );
__declspec(implementation_key(1148)) enum MsoAutoShapeType Shape::GetAutoShapeType ( );
__declspec(implementation_key(1149)) void Shape::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType );
__declspec(implementation_key(1150)) enum MsoBlackWhiteMode Shape::GetBlackWhiteMode ( );
__declspec(implementation_key(1151)) void Shape::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode );
__declspec(implementation_key(1152)) CalloutFormatPtr Shape::GetCallout ( );
__declspec(implementation_key(1153)) int Shape::GetConnectionSiteCount ( );
__declspec(implementation_key(1154)) enum MsoTriState Shape::GetConnector ( );
__declspec(implementation_key(1155)) ConnectorFormatPtr Shape::GetConnectorFormat ( );
__declspec(implementation_key(1156)) FillFormatPtr Shape::GetFill ( );
__declspec(implementation_key(1157)) GroupShapesPtr Shape::GetGroupItems ( );
__declspec(implementation_key(1158)) float Shape::GetHeight ( );
__declspec(implementation_key(1159)) void Shape::PutHeight ( float Height );
__declspec(implementation_key(1160)) enum MsoTriState Shape::GetHorizontalFlip ( );
__declspec(implementation_key(1161)) float Shape::GetLeft ( );
__declspec(implementation_key(1162)) void Shape::PutLeft ( float Left );
__declspec(implementation_key(1163)) LineFormatPtr Shape::GetLine ( );
__declspec(implementation_key(1164)) enum MsoTriState Shape::GetLockAspectRatio ( );
__declspec(implementation_key(1165)) void Shape::PutLockAspectRatio ( enum MsoTriState LockAspectRatio );
__declspec(implementation_key(1166)) _bstr_t Shape::GetName ( );
__declspec(implementation_key(1167)) void Shape::PutName ( _bstr_t Name );
__declspec(implementation_key(1168)) ShapeNodesPtr Shape::GetNodes ( );
__declspec(implementation_key(1169)) float Shape::GetRotation ( );
__declspec(implementation_key(1170)) void Shape::PutRotation ( float Rotation );
__declspec(implementation_key(1171)) PictureFormatPtr Shape::GetPictureFormat ( );
__declspec(implementation_key(1172)) ShadowFormatPtr Shape::GetShadow ( );
__declspec(implementation_key(1173)) TextEffectFormatPtr Shape::GetTextEffect ( );
__declspec(implementation_key(1174)) TextFramePtr Shape::GetTextFrame ( );
__declspec(implementation_key(1175)) ThreeDFormatPtr Shape::GetThreeD ( );
__declspec(implementation_key(1176)) float Shape::GetTop ( );
__declspec(implementation_key(1177)) void Shape::PutTop ( float Top );
__declspec(implementation_key(1178)) enum MsoShapeType Shape::GetType ( );
__declspec(implementation_key(1179)) enum MsoTriState Shape::GetVerticalFlip ( );
__declspec(implementation_key(1180)) _variant_t Shape::GetVertices ( );
__declspec(implementation_key(1181)) enum MsoTriState Shape::GetVisible ( );
__declspec(implementation_key(1182)) void Shape::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(1183)) float Shape::GetWidth ( );
__declspec(implementation_key(1184)) void Shape::PutWidth ( float Width );
__declspec(implementation_key(1185)) int Shape::GetZOrderPosition ( );
__declspec(implementation_key(1186)) ScriptPtr Shape::GetScript ( );
__declspec(implementation_key(1187)) _bstr_t Shape::GetAlternativeText ( );
__declspec(implementation_key(1188)) void Shape::PutAlternativeText ( _bstr_t AlternativeText );
__declspec(implementation_key(1189)) enum MsoTriState Shape::GetHasDiagram ( );
__declspec(implementation_key(1190)) IMsoDiagramPtr Shape::GetDiagram ( );
__declspec(implementation_key(1191)) enum MsoTriState Shape::GetHasDiagramNode ( );
__declspec(implementation_key(1192)) DiagramNodePtr Shape::GetDiagramNode ( );
__declspec(implementation_key(1193)) enum MsoTriState Shape::GetChild ( );
__declspec(implementation_key(1194)) ShapePtr Shape::GetParentGroup ( );
__declspec(implementation_key(1195)) CanvasShapesPtr Shape::GetCanvasItems ( );
__declspec(implementation_key(1196)) int Shape::GetId ( );
__declspec(implementation_key(1197)) HRESULT Shape::CanvasCropLeft ( float Increment );
__declspec(implementation_key(1198)) HRESULT Shape::CanvasCropTop ( float Increment );
__declspec(implementation_key(1199)) HRESULT Shape::CanvasCropRight ( float Increment );
__declspec(implementation_key(1200)) HRESULT Shape::CanvasCropBottom ( float Increment );
__declspec(implementation_key(1201)) void Shape::PutRTF ( _bstr_t _arg1 );
__declspec(implementation_key(1202)) IDispatchPtr ShapeRange::GetParent ( );
__declspec(implementation_key(1203)) int ShapeRange::GetCount ( );
__declspec(implementation_key(1204)) ShapePtr ShapeRange::Item ( const _variant_t & Index );
__declspec(implementation_key(1205)) IUnknownPtr ShapeRange::Get_NewEnum ( );
__declspec(implementation_key(1206)) HRESULT ShapeRange::Align ( enum MsoAlignCmd AlignCmd, enum MsoTriState RelativeTo );
__declspec(implementation_key(1207)) HRESULT ShapeRange::Apply ( );
__declspec(implementation_key(1208)) HRESULT ShapeRange::Delete ( );
__declspec(implementation_key(1209)) HRESULT ShapeRange::Distribute ( enum MsoDistributeCmd DistributeCmd, enum MsoTriState RelativeTo );
__declspec(implementation_key(1210)) ShapeRangePtr ShapeRange::Duplicate ( );
__declspec(implementation_key(1211)) HRESULT ShapeRange::Flip ( enum MsoFlipCmd FlipCmd );
__declspec(implementation_key(1212)) HRESULT ShapeRange::IncrementLeft ( float Increment );
__declspec(implementation_key(1213)) HRESULT ShapeRange::IncrementRotation ( float Increment );
__declspec(implementation_key(1214)) HRESULT ShapeRange::IncrementTop ( float Increment );
__declspec(implementation_key(1215)) ShapePtr ShapeRange::Group ( );
__declspec(implementation_key(1216)) HRESULT ShapeRange::PickUp ( );
__declspec(implementation_key(1217)) ShapePtr ShapeRange::Regroup ( );
__declspec(implementation_key(1218)) HRESULT ShapeRange::RerouteConnections ( );
__declspec(implementation_key(1219)) HRESULT ShapeRange::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale );
__declspec(implementation_key(1220)) HRESULT ShapeRange::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale );
__declspec(implementation_key(1221)) HRESULT ShapeRange::Select ( const _variant_t & Replace );
__declspec(implementation_key(1222)) HRESULT ShapeRange::SetShapesDefaultProperties ( );
__declspec(implementation_key(1223)) ShapeRangePtr ShapeRange::Ungroup ( );
__declspec(implementation_key(1224)) HRESULT ShapeRange::ZOrder ( enum MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(1225)) AdjustmentsPtr ShapeRange::GetAdjustments ( );
__declspec(implementation_key(1226)) enum MsoAutoShapeType ShapeRange::GetAutoShapeType ( );
__declspec(implementation_key(1227)) void ShapeRange::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType );
__declspec(implementation_key(1228)) enum MsoBlackWhiteMode ShapeRange::GetBlackWhiteMode ( );
__declspec(implementation_key(1229)) void ShapeRange::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode );
__declspec(implementation_key(1230)) CalloutFormatPtr ShapeRange::GetCallout ( );
__declspec(implementation_key(1231)) int ShapeRange::GetConnectionSiteCount ( );
__declspec(implementation_key(1232)) enum MsoTriState ShapeRange::GetConnector ( );
__declspec(implementation_key(1233)) ConnectorFormatPtr ShapeRange::GetConnectorFormat ( );
__declspec(implementation_key(1234)) FillFormatPtr ShapeRange::GetFill ( );
__declspec(implementation_key(1235)) GroupShapesPtr ShapeRange::GetGroupItems ( );
__declspec(implementation_key(1236)) float ShapeRange::GetHeight ( );
__declspec(implementation_key(1237)) void ShapeRange::PutHeight ( float Height );
__declspec(implementation_key(1238)) enum MsoTriState ShapeRange::GetHorizontalFlip ( );
__declspec(implementation_key(1239)) float ShapeRange::GetLeft ( );
__declspec(implementation_key(1240)) void ShapeRange::PutLeft ( float Left );
__declspec(implementation_key(1241)) LineFormatPtr ShapeRange::GetLine ( );
__declspec(implementation_key(1242)) enum MsoTriState ShapeRange::GetLockAspectRatio ( );
__declspec(implementation_key(1243)) void ShapeRange::PutLockAspectRatio ( enum MsoTriState LockAspectRatio );
__declspec(implementation_key(1244)) _bstr_t ShapeRange::GetName ( );
__declspec(implementation_key(1245)) void ShapeRange::PutName ( _bstr_t Name );
__declspec(implementation_key(1246)) ShapeNodesPtr ShapeRange::GetNodes ( );
__declspec(implementation_key(1247)) float ShapeRange::GetRotation ( );
__declspec(implementation_key(1248)) void ShapeRange::PutRotation ( float Rotation );
__declspec(implementation_key(1249)) PictureFormatPtr ShapeRange::GetPictureFormat ( );
__declspec(implementation_key(1250)) ShadowFormatPtr ShapeRange::GetShadow ( );
__declspec(implementation_key(1251)) TextEffectFormatPtr ShapeRange::GetTextEffect ( );
__declspec(implementation_key(1252)) TextFramePtr ShapeRange::GetTextFrame ( );
__declspec(implementation_key(1253)) ThreeDFormatPtr ShapeRange::GetThreeD ( );
__declspec(implementation_key(1254)) float ShapeRange::GetTop ( );
__declspec(implementation_key(1255)) void ShapeRange::PutTop ( float Top );
__declspec(implementation_key(1256)) enum MsoShapeType ShapeRange::GetType ( );
__declspec(implementation_key(1257)) enum MsoTriState ShapeRange::GetVerticalFlip ( );
__declspec(implementation_key(1258)) _variant_t ShapeRange::GetVertices ( );
__declspec(implementation_key(1259)) enum MsoTriState ShapeRange::GetVisible ( );
__declspec(implementation_key(1260)) void ShapeRange::PutVisible ( enum MsoTriState Visible );
__declspec(implementation_key(1261)) float ShapeRange::GetWidth ( );
__declspec(implementation_key(1262)) void ShapeRange::PutWidth ( float Width );
__declspec(implementation_key(1263)) int ShapeRange::GetZOrderPosition ( );
__declspec(implementation_key(1264)) ScriptPtr ShapeRange::GetScript ( );
__declspec(implementation_key(1265)) _bstr_t ShapeRange::GetAlternativeText ( );
__declspec(implementation_key(1266)) void ShapeRange::PutAlternativeText ( _bstr_t AlternativeText );
__declspec(implementation_key(1267)) enum MsoTriState ShapeRange::GetHasDiagram ( );
__declspec(implementation_key(1268)) IMsoDiagramPtr ShapeRange::GetDiagram ( );
__declspec(implementation_key(1269)) enum MsoTriState ShapeRange::GetHasDiagramNode ( );
__declspec(implementation_key(1270)) DiagramNodePtr ShapeRange::GetDiagramNode ( );
__declspec(implementation_key(1271)) enum MsoTriState ShapeRange::GetChild ( );
__declspec(implementation_key(1272)) ShapePtr ShapeRange::GetParentGroup ( );
__declspec(implementation_key(1273)) CanvasShapesPtr ShapeRange::GetCanvasItems ( );
__declspec(implementation_key(1274)) int ShapeRange::GetId ( );
__declspec(implementation_key(1275)) HRESULT ShapeRange::CanvasCropLeft ( float Increment );
__declspec(implementation_key(1276)) HRESULT ShapeRange::CanvasCropTop ( float Increment );
__declspec(implementation_key(1277)) HRESULT ShapeRange::CanvasCropRight ( float Increment );
__declspec(implementation_key(1278)) HRESULT ShapeRange::CanvasCropBottom ( float Increment );
__declspec(implementation_key(1279)) void ShapeRange::PutRTF ( _bstr_t _arg1 );
__declspec(implementation_key(1280)) IDispatchPtr Shapes::GetParent ( );
__declspec(implementation_key(1281)) int Shapes::GetCount ( );
__declspec(implementation_key(1282)) ShapePtr Shapes::Item ( const _variant_t & Index );
__declspec(implementation_key(1283)) IUnknownPtr Shapes::Get_NewEnum ( );
__declspec(implementation_key(1284)) ShapePtr Shapes::AddCallout ( enum MsoCalloutType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1285)) ShapePtr Shapes::AddConnector ( enum MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(1286)) ShapePtr Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(1287)) ShapePtr Shapes::AddLabel ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1288)) ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(1289)) ShapePtr Shapes::AddPicture ( _bstr_t FileName, enum MsoTriState LinkToFile, enum MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1290)) ShapePtr Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(1291)) ShapePtr Shapes::AddShape ( enum MsoAutoShapeType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1292)) ShapePtr Shapes::AddTextEffect ( enum MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum MsoTriState FontBold, enum MsoTriState FontItalic, float Left, float Top );
__declspec(implementation_key(1293)) ShapePtr Shapes::AddTextbox ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1294)) FreeformBuilderPtr Shapes::BuildFreeform ( enum MsoEditingType EditingType, float X1, float Y1 );
__declspec(implementation_key(1295)) ShapeRangePtr Shapes::Range ( const _variant_t & Index );
__declspec(implementation_key(1296)) HRESULT Shapes::SelectAll ( );
__declspec(implementation_key(1297)) ShapePtr Shapes::GetBackground ( );
__declspec(implementation_key(1298)) ShapePtr Shapes::GetDefault ( );
__declspec(implementation_key(1299)) ShapePtr Shapes::AddDiagram ( enum MsoDiagramType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1300)) ShapePtr Shapes::AddCanvas ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(1301)) IDispatchPtr CanvasShapes::GetParent ( );
__declspec(implementation_key(1302)) int CanvasShapes::GetCount ( );
__declspec(implementation_key(1303)) ShapePtr CanvasShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(1304)) IUnknownPtr CanvasShapes::Get_NewEnum ( );
__declspec(implementation_key(1305)) ShapePtr CanvasShapes::AddCallout ( enum MsoCalloutType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1306)) ShapePtr CanvasShapes::AddConnector ( enum MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(1307)) ShapePtr CanvasShapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(1308)) ShapePtr CanvasShapes::AddLabel ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1309)) ShapePtr CanvasShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(1310)) ShapePtr CanvasShapes::AddPicture ( _bstr_t FileName, enum MsoTriState LinkToFile, enum MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1311)) ShapePtr CanvasShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(1312)) ShapePtr CanvasShapes::AddShape ( enum MsoAutoShapeType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1313)) ShapePtr CanvasShapes::AddTextEffect ( enum MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum MsoTriState FontBold, enum MsoTriState FontItalic, float Left, float Top );
__declspec(implementation_key(1314)) ShapePtr CanvasShapes::AddTextbox ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1315)) FreeformBuilderPtr CanvasShapes::BuildFreeform ( enum MsoEditingType EditingType, float X1, float Y1 );
__declspec(implementation_key(1316)) ShapeRangePtr CanvasShapes::Range ( const _variant_t & Index );
__declspec(implementation_key(1317)) HRESULT CanvasShapes::SelectAll ( );
__declspec(implementation_key(1318)) ShapePtr CanvasShapes::GetBackground ( );
__declspec(implementation_key(1319)) VARIANT_BOOL FileSearch::GetSearchSubFolders ( );
__declspec(implementation_key(1320)) void FileSearch::PutSearchSubFolders ( VARIANT_BOOL SearchSubFoldersRetVal );
__declspec(implementation_key(1321)) VARIANT_BOOL FileSearch::GetMatchTextExactly ( );
__declspec(implementation_key(1322)) void FileSearch::PutMatchTextExactly ( VARIANT_BOOL MatchTextRetVal );
__declspec(implementation_key(1323)) VARIANT_BOOL FileSearch::GetMatchAllWordForms ( );
__declspec(implementation_key(1324)) void FileSearch::PutMatchAllWordForms ( VARIANT_BOOL MatchAllWordFormsRetVal );
__declspec(implementation_key(1325)) _bstr_t FileSearch::GetFileName ( );
__declspec(implementation_key(1326)) void FileSearch::PutFileName ( _bstr_t FileNameRetVal );
__declspec(implementation_key(1327)) enum MsoFileType FileSearch::GetFileType ( );
__declspec(implementation_key(1328)) void FileSearch::PutFileType ( enum MsoFileType FileTypeRetVal );
__declspec(implementation_key(1329)) enum MsoLastModified FileSearch::GetLastModified ( );
__declspec(implementation_key(1330)) void FileSearch::PutLastModified ( enum MsoLastModified LastModifiedRetVal );
__declspec(implementation_key(1331)) _bstr_t FileSearch::GetTextOrProperty ( );
__declspec(implementation_key(1332)) void FileSearch::PutTextOrProperty ( _bstr_t TextOrProperty );
__declspec(implementation_key(1333)) _bstr_t FileSearch::GetLookIn ( );
__declspec(implementation_key(1334)) void FileSearch::PutLookIn ( _bstr_t LookInRetVal );
__declspec(implementation_key(1335)) int FileSearch::Execute ( enum MsoSortBy SortBy, enum MsoSortOrder SortOrder, VARIANT_BOOL AlwaysAccurate );
__declspec(implementation_key(1336)) HRESULT FileSearch::NewSearch ( );
__declspec(implementation_key(1337)) FoundFilesPtr FileSearch::GetFoundFiles ( );
__declspec(implementation_key(1338)) PropertyTestsPtr FileSearch::GetPropertyTests ( );
__declspec(implementation_key(1339)) SearchScopesPtr FileSearch::GetSearchScopes ( );
__declspec(implementation_key(1340)) SearchFoldersPtr FileSearch::GetSearchFolders ( );
__declspec(implementation_key(1341)) FileTypesPtr FileSearch::GetFileTypes ( );
__declspec(implementation_key(1342)) HRESULT FileSearch::RefreshScopes ( );
__declspec(implementation_key(1343)) ScopeFolderPtr SearchFolders::GetItem ( int Index );
__declspec(implementation_key(1344)) int SearchFolders::GetCount ( );
__declspec(implementation_key(1345)) HRESULT SearchFolders::Add ( struct ScopeFolder * ScopeFolder );
__declspec(implementation_key(1346)) HRESULT SearchFolders::Remove ( int Index );
__declspec(implementation_key(1347)) IUnknownPtr SearchFolders::Get_NewEnum ( );
__declspec(implementation_key(1348)) ScopeFolderPtr ScopeFolders::GetItem ( int Index );
__declspec(implementation_key(1349)) int ScopeFolders::GetCount ( );
__declspec(implementation_key(1350)) IUnknownPtr ScopeFolders::Get_NewEnum ( );
__declspec(implementation_key(1351)) _bstr_t ScopeFolder::GetName ( );
__declspec(implementation_key(1352)) _bstr_t ScopeFolder::GetPath ( );
__declspec(implementation_key(1353)) ScopeFoldersPtr ScopeFolder::GetScopeFolders ( );
__declspec(implementation_key(1354)) HRESULT ScopeFolder::AddToSearchFolders ( );
__declspec(implementation_key(1355)) enum MsoSearchIn SearchScope::GetType ( );
__declspec(implementation_key(1356)) ScopeFolderPtr SearchScope::GetScopeFolder ( );
__declspec(implementation_key(1357)) SearchScopePtr SearchScopes::GetItem ( int Index );
__declspec(implementation_key(1358)) int SearchScopes::GetCount ( );
__declspec(implementation_key(1359)) IUnknownPtr SearchScopes::Get_NewEnum ( );
__declspec(implementation_key(1360)) IDispatchPtr IMsoDiagram::GetParent ( );
__declspec(implementation_key(1361)) DiagramNodesPtr IMsoDiagram::GetNodes ( );
__declspec(implementation_key(1362)) enum MsoDiagramType IMsoDiagram::GetType ( );
__declspec(implementation_key(1363)) enum MsoTriState IMsoDiagram::GetAutoLayout ( );
__declspec(implementation_key(1364)) void IMsoDiagram::PutAutoLayout ( enum MsoTriState AutoLayout );
__declspec(implementation_key(1365)) enum MsoTriState IMsoDiagram::GetReverse ( );
__declspec(implementation_key(1366)) void IMsoDiagram::PutReverse ( enum MsoTriState Reverse );
__declspec(implementation_key(1367)) enum MsoTriState IMsoDiagram::GetAutoFormat ( );
__declspec(implementation_key(1368)) void IMsoDiagram::PutAutoFormat ( enum MsoTriState AutoFormat );
__declspec(implementation_key(1369)) HRESULT IMsoDiagram::Convert ( enum MsoDiagramType Type );
__declspec(implementation_key(1370)) HRESULT IMsoDiagram::FitText ( );
__declspec(implementation_key(1371)) IUnknownPtr DiagramNodes::Get_NewEnum ( );
__declspec(implementation_key(1372)) DiagramNodePtr DiagramNodes::Item ( const _variant_t & Index );
__declspec(implementation_key(1373)) HRESULT DiagramNodes::SelectAll ( );
__declspec(implementation_key(1374)) IDispatchPtr DiagramNodes::GetParent ( );
__declspec(implementation_key(1375)) int DiagramNodes::GetCount ( );
__declspec(implementation_key(1376)) IUnknownPtr DiagramNodeChildren::Get_NewEnum ( );
__declspec(implementation_key(1377)) DiagramNodePtr DiagramNodeChildren::Item ( const _variant_t & Index );
__declspec(implementation_key(1378)) DiagramNodePtr DiagramNodeChildren::AddNode ( const _variant_t & Index, enum MsoDiagramNodeType NodeType );
__declspec(implementation_key(1379)) HRESULT DiagramNodeChildren::SelectAll ( );
__declspec(implementation_key(1380)) IDispatchPtr DiagramNodeChildren::GetParent ( );
__declspec(implementation_key(1381)) int DiagramNodeChildren::GetCount ( );
__declspec(implementation_key(1382)) DiagramNodePtr DiagramNodeChildren::GetFirstChild ( );
__declspec(implementation_key(1383)) DiagramNodePtr DiagramNodeChildren::GetLastChild ( );
__declspec(implementation_key(1384)) DiagramNodePtr DiagramNode::AddNode ( enum MsoRelativeNodePosition Pos, enum MsoDiagramNodeType NodeType );
__declspec(implementation_key(1385)) HRESULT DiagramNode::Delete ( );
__declspec(implementation_key(1386)) HRESULT DiagramNode::MoveNode ( struct DiagramNode * TargetNode, enum MsoRelativeNodePosition Pos );
__declspec(implementation_key(1387)) HRESULT DiagramNode::ReplaceNode ( struct DiagramNode * TargetNode );
__declspec(implementation_key(1388)) HRESULT DiagramNode::SwapNode ( struct DiagramNode * TargetNode, VARIANT_BOOL SwapChildren );
__declspec(implementation_key(1389)) DiagramNodePtr DiagramNode::CloneNode ( VARIANT_BOOL CopyChildren, struct DiagramNode * TargetNode, enum MsoRelativeNodePosition Pos );
__declspec(implementation_key(1390)) HRESULT DiagramNode::TransferChildren ( struct DiagramNode * ReceivingNode );
__declspec(implementation_key(1391)) DiagramNodePtr DiagramNode::NextNode ( );
__declspec(implementation_key(1392)) DiagramNodePtr DiagramNode::PrevNode ( );
__declspec(implementation_key(1393)) IDispatchPtr DiagramNode::GetParent ( );
__declspec(implementation_key(1394)) DiagramNodeChildrenPtr DiagramNode::GetChildren ( );
__declspec(implementation_key(1395)) ShapePtr DiagramNode::GetShape ( );
__declspec(implementation_key(1396)) DiagramNodePtr DiagramNode::GetRoot ( );
__declspec(implementation_key(1397)) IMsoDiagramPtr DiagramNode::GetDiagram ( );
__declspec(implementation_key(1398)) enum MsoOrgChartLayoutType DiagramNode::GetLayout ( );
__declspec(implementation_key(1399)) void DiagramNode::PutLayout ( enum MsoOrgChartLayoutType Type );
__declspec(implementation_key(1400)) ShapePtr DiagramNode::GetTextShape ( );
#pragma stop_map_region

} // namespace Office

#pragma pack(pop)
